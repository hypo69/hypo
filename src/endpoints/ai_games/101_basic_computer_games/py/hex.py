"""
HEX:
=================
Сложность: 3
-----------------
Игра "HEX" представляет собой простую числовую головоломку. Компьютер выбирает случайное число в диапазоне от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, является ли загаданное число больше или меньше, чем введенное игроком. Игра продолжается до тех пор, пока игрок не угадает число.
Правила игры:
1. Компьютер случайным образом выбирает целое число от 1 до 100.
2. Игрок вводит целое число в качестве своей попытки.
3. Компьютер сообщает, является ли загаданное число больше, меньше или равно введенному.
4. Если игрок угадал число, игра заканчивается.
5. Если игрок не угадал, он делает следующую попытку.
-----------------
Алгоритм:
1. Задать случайное число (randomNumber) в диапазоне от 1 до 100.
2. Начать цикл, который будет продолжаться до тех пор, пока игрок не угадает число.
3. Внутри цикла:
    a. Запросить у игрока число (guessNumber).
    b. Сравнить число, введенное игроком (guessNumber) с загаданным числом (randomNumber).
    c. Если guessNumber > randomNumber, вывести сообщение "TOO HIGH".
    d. Если guessNumber < randomNumber, вывести сообщение "TOO LOW".
    e. Если guessNumber = randomNumber, вывести сообщение "YOU GOT IT IN X GUESSES" и выйти из цикла.
4.  Счетчик попыток (numberOfGuesses) увеличивается на 1 после каждой попытки.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> GenerateRandomNumber(Генерируем случайное число);
    GenerateRandomNumber --> InitializeGuesses(Инициализируем счетчик попыток = 0);
    InitializeGuesses --> InputGuess(Запрашиваем ввод числа);
    InputGuess --> IncrementGuesses(Увеличиваем счетчик попыток);
    IncrementGuesses --> CompareNumbers(Сравниваем введенное число и загаданное число);
    CompareNumbers -- guessNumber > randomNumber --> OutputTooHigh(Выводим "TOO HIGH");
    OutputTooHigh --> InputGuess;
    CompareNumbers -- guessNumber < randomNumber --> OutputTooLow(Выводим "TOO LOW");
    OutputTooLow --> InputGuess;
    CompareNumbers -- guessNumber == randomNumber --> OutputWin(Выводим "YOU GOT IT IN X GUESSES");
    OutputWin --> End(Конец);
```
"""
import random

def play_hex_game():
    """
    Функция реализует игру "HEX".
    """
    # 1. Генерируем случайное число в диапазоне от 1 до 100
    random_number = random.randint(1, 100)
    # 2. Инициализируем счетчик попыток
    number_of_guesses = 0
    
    # 3. Начинаем цикл, который будет продолжаться, пока игрок не угадает число
    while True:
        # 3.a Запрашиваем у игрока число
        try:
             guess_number = int(input("Введите ваше предположение (1-100): "))
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите целое число.")
            continue # Возвращаемся к началу цикла
        
        # 3.b Увеличиваем счетчик попыток на 1
        number_of_guesses += 1

        # 3.c Сравниваем число, введенное игроком, с загаданным числом
        if guess_number > random_number:
            print("TOO HIGH") # Сообщение "Слишком высоко"
        elif guess_number < random_number:
            print("TOO LOW") # Сообщение "Слишком низко"
        else:
            print(f"YOU GOT IT IN {number_of_guesses} GUESSES") # Сообщение "Вы угадали за X попыток"
            break # Выходим из цикла, игра закончена

# Вызываем функцию, чтобы начать игру
play_hex_game()
"""
Пояснения:
1. `import random`: Импортируем модуль `random`, который необходим для генерации случайных чисел.
2. `def play_hex_game():`: Определяем функцию `play_hex_game`, которая содержит всю логику игры.
3. `random_number = random.randint(1, 100)`: Генерируем случайное целое число в диапазоне от 1 до 100 включительно. Это число компьютер "загадал".
4. `number_of_guesses = 0`: Инициализируем счетчик попыток, изначально равный 0.
5. `while True:`: Начинаем бесконечный цикл, который будет продолжаться до тех пор, пока игрок не угадает число.
6. `try...except`: Блок обработки исключений, чтобы перехватить ошибки ввода пользователя (если пользователь введет не целое число).
7. `guess_number = int(input("Введите ваше предположение (1-100): "))`: Запрашиваем ввод числа у игрока и преобразуем его в целое число.
8. `number_of_guesses += 1`: Увеличиваем счетчик попыток на 1 после каждой попытки игрока.
9. `if guess_number > random_number`: Если введенное число больше загаданного, выводим сообщение "TOO HIGH".
10. `elif guess_number < random_number`: Если введенное число меньше загаданного, выводим сообщение "TOO LOW".
11. `else`: Если введенное число равно загаданному, выводим сообщение "YOU GOT IT IN X GUESSES" (где X - количество попыток) и выходим из цикла с помощью `break`.
12. `play_hex_game()`: Вызываем функцию `play_hex_game`, чтобы начать игру.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```