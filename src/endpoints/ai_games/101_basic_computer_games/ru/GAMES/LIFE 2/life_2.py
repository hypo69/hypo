"""
LIFE 2:
=================
Сложность: 5
-----------------
Игра "Жизнь 2" - это симуляция клеточного автомата, разработанная Джоном Конвеем. Она представляет собой поле клеток, каждая из которых может быть либо живой, либо мертвой. Состояние клетки в следующем поколении зависит от количества живых соседей в текущем поколении. Игра демонстрирует, как простые правила могут привести к возникновению сложных и интересных паттернов. Игрок может задавать начальную конфигурацию живых клеток, и наблюдать за эволюцией этой конфигурации с течением времени. 
Правила игры:
1. Игровое поле представлено в виде сетки, где каждая клетка может быть либо живой (обозначена как '*'), либо мертвой (обозначена как пробел ' ').
2. В начале игры игроку предлагается ввести количество строк и столбцов для игрового поля, а также количество живых клеток.
3. После ввода начальных параметров поле заполняется мертвыми клетками, а затем случайным образом размещаются живые клетки, количество которых указал игрок.
4. После инициализации поля программа выводит начальное состояние поля.
5. Итерации продолжаются, пока пользователь не введет "0".
6. Для каждого нового поколения:
     - Каждая живая клетка с 2 или 3 живыми соседями остается живой в следующем поколении.
    - Каждая живая клетка с менее чем 2 живыми соседями умирает в следующем поколении.
    - Каждая живая клетка с более чем 3 живыми соседями умирает в следующем поколении.
    - Каждая мертвая клетка рождается в следующем поколении, если у нее ровно 3 живых соседа.
7. Поле отображается после каждой итерации.
-----------------
Алгоритм:
1. Запросить у пользователя количество строк и столбцов для игрового поля.
2. Запросить у пользователя количество начальных живых клеток.
3. Инициализировать игровое поле как матрицу, заполненную мертвыми клетками (' ').
4. Разместить случайным образом указанное пользователем количество живых клеток ('*') на игровом поле.
5. Вывести начальное состояние игрового поля.
6. Запустить бесконечный цикл:
    6.1 Вычислить следующее поколение клеток:
        6.1.1 Создать новое поле, скопировав текущее поле.
        6.1.2 Для каждой клетки в текущем поле:
           6.1.2.1 Подсчитать количество живых соседей.
           6.1.2.2 Применить правила "Жизни", чтобы определить состояние клетки в новом поле.
        6.1.3 Заменить текущее поле новым полем.
    6.2 Вывести текущее состояние игрового поля.
    6.3 Запросить у пользователя ввод. Если введено "0", завершить игру, иначе продолжить.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InputRowsCols["Ввод количества строк и столбцов: <code><b>numRows, numCols</b></code>"]
    InputRowsCols --> InputAliveCells["Ввод количества начальных живых клеток: <code><b>initialAliveCells</b></code>"]
    InputAliveCells --> InitializeGrid["Инициализация игрового поля: <code><b>grid</b></code> (заполнено мертвыми клетками)"]
    InitializeGrid --> PlaceAliveCells["Размещение начальных живых клеток: <code><b>grid</b></code>"]
    PlaceAliveCells --> OutputGrid["Вывод начального состояния игрового поля: <code><b>grid</b></code>"]
    OutputGrid --> GameLoopStart{"Начало игрового цикла"}
    GameLoopStart --> ComputeNextGeneration["Вычисление следующего поколения: <code><b>nextGrid</b></code>"]
    ComputeNextGeneration --> UpdateGrid["Обновление игрового поля: <code><b>grid = nextGrid</b></code>"]
    UpdateGrid --> OutputCurrentGrid["Вывод текущего состояния игрового поля: <code><b>grid</b></code>"]
    OutputCurrentGrid --> InputUserContinue{"Ввод пользователя (0 - выход)"}
    InputUserContinue -- 0 --> End["Конец"]
    InputUserContinue -- Другое значение --> GameLoopStart
    ComputeNextGeneration --> CalculateNeighbors{"Для каждой клетки подсчет количества живых соседей"}
    CalculateNeighbors --> ApplyRules{"Применение правил игры «Жизнь»"}
    ApplyRules -->|Далее| ComputeNextGeneration

```
Legenda:
    Start - Начало программы.
    InputRowsCols - Запрос у пользователя количества строк и столбцов для игрового поля.
    InputAliveCells - Запрос у пользователя количества начальных живых клеток.
    InitializeGrid - Инициализация игрового поля в виде матрицы, заполненной мертвыми клетками (пробелами).
    PlaceAliveCells - Размещение заданного количества живых клеток (звездочек) на игровом поле в случайных позициях.
    OutputGrid - Вывод начального состояния игрового поля на экран.
    GameLoopStart - Начало основного игрового цикла.
    ComputeNextGeneration - Вычисление следующего поколения клеток на основе текущего состояния поля и правил игры "Жизнь".
     CalculateNeighbors - Для каждой клетки подсчет количества живых соседей.
     ApplyRules - Применение правил игры «Жизнь» для определения состояния клетки в следующем поколении.
    UpdateGrid - Обновление текущего игрового поля, заменяя его новым поколением.
    OutputCurrentGrid - Вывод текущего состояния игрового поля на экран.
    InputUserContinue - Запрос у пользователя на продолжение игры (любое значение, кроме "0") или выход из игры ("0").
    End - Конец программы.
"""
import random
import copy

def initialize_grid(num_rows, num_cols):
    """
    Создает и инициализирует игровое поле (сетку) с мертвыми клетками.
    
    Args:
      num_rows (int): Количество строк в сетке.
      num_cols (int): Количество столбцов в сетке.

    Returns:
      list of lists: Игровое поле представленное в виде списка списков.
    """
    grid = [[' ' for _ in range(num_cols)] for _ in range(num_rows)]
    return grid

def place_alive_cells(grid, initial_alive_cells):
    """
    Размещает начальные живые клетки на игровом поле случайным образом.

    Args:
        grid (list of lists): Игровое поле.
        initial_alive_cells (int): Количество начальных живых клеток.
    """
    num_rows = len(grid)
    num_cols = len(grid[0])
    
    placed_cells = 0
    while placed_cells < initial_alive_cells:
        row = random.randint(0, num_rows - 1)
        col = random.randint(0, num_cols - 1)
        if grid[row][col] == ' ':
            grid[row][col] = '*'
            placed_cells += 1

def display_grid(grid):
    """
     Выводит текущее состояние игрового поля на экран.

    Args:
      grid (list of lists): Игровое поле.
    """
    for row in grid:
        print(' '.join(row))
    print()

def count_alive_neighbors(grid, row, col):
    """
    Подсчитывает количество живых соседей у клетки.

    Args:
      grid (list of lists): Игровое поле.
      row (int): Индекс строки клетки.
      col (int): Индекс столбца клетки.

    Returns:
      int: Количество живых соседей.
    """
    num_rows = len(grid)
    num_cols = len(grid[0])
    alive_neighbors = 0

    for i in range(max(0, row - 1), min(num_rows, row + 2)):
        for j in range(max(0, col - 1), min(num_cols, col + 2)):
            if (i, j) != (row, col) and grid[i][j] == '*':
                alive_neighbors += 1

    return alive_neighbors

def compute_next_generation(grid):
    """
    Вычисляет следующее поколение клеток на основе текущего состояния поля и правил игры "Жизнь".

    Args:
       grid (list of lists): Текущее игровое поле.
    
    Returns:
        list of lists: Новое игровое поле, представляющее следующее поколение.
    """
    num_rows = len(grid)
    num_cols = len(grid[0])
    next_grid = copy.deepcopy(grid) # Копия текущего поля, чтобы избежать изменения в процессе вычислений.

    for row in range(num_rows):
        for col in range(num_cols):
            alive_neighbors = count_alive_neighbors(grid, row, col)
            if grid[row][col] == '*':
                if alive_neighbors < 2 or alive_neighbors > 3:
                    next_grid[row][col] = ' ' # Клетка умирает
            else:
                if alive_neighbors == 3:
                    next_grid[row][col] = '*' # Клетка рождается

    return next_grid
    
# Основная логика игры
if __name__ == "__main__":
    # Запрашиваем у пользователя размер поля
    num_rows = int(input("Введите количество строк: "))
    num_cols = int(input("Введите количество столбцов: "))

    # Запрашиваем количество начальных живых клеток
    initial_alive_cells = int(input("Введите количество начальных живых клеток: "))

    # Инициализируем и выводим начальное состояние поля
    grid = initialize_grid(num_rows, num_cols)
    place_alive_cells(grid, initial_alive_cells)
    print("Начальное состояние поля:")
    display_grid(grid)

    # Основной игровой цикл
    while True:
        # Вычисляем следующее поколение
        next_grid = compute_next_generation(grid)
        grid = next_grid
        # Отображаем новое состояние поля
        display_grid(grid)

        # Спрашиваем пользователя, хочет ли он продолжить
        user_input = input("Нажмите Enter для продолжения или введите '0' для выхода: ")
        if user_input == '0':
            break
"""
Объяснение кода:
1.  **Импорт модулей**:
    - `import random`: Импортирует модуль random для генерации случайных чисел.
    - `import copy`: Импортирует модуль copy для создания глубоких копий списков.
2.  **Функция `initialize_grid(num_rows, num_cols)`**:
    - Создает и инициализирует игровое поле (сетку) с мертвыми клетками (пробелы).
    - `num_rows` (int): Количество строк в сетке.
    - `num_cols` (int): Количество столбцов в сетке.
    - Возвращает: список списков (двумерный массив), представляющий игровое поле.
3.  **Функция `place_alive_cells(grid, initial_alive_cells)`**:
    - Размещает начальные живые клетки ('*') на игровом поле случайным образом.
    - `grid` (list of lists): Игровое поле.
    - `initial_alive_cells` (int): Количество начальных живых клеток.
4.  **Функция `display_grid(grid)`**:
    - Выводит текущее состояние игрового поля на экран.
    - `grid` (list of lists): Игровое поле.
5.  **Функция `count_alive_neighbors(grid, row, col)`**:
    - Подсчитывает количество живых соседей у клетки.
    - `grid` (list of lists): Игровое поле.
    - `row` (int): Индекс строки клетки.
    - `col` (int): Индекс столбца клетки.
    - Возвращает: количество живых соседей (int).
6.  **Функция `compute_next_generation(grid)`**:
    - Вычисляет следующее поколение клеток на основе текущего состояния поля и правил игры "Жизнь".
    - `grid` (list of lists): Текущее игровое поле.
    - Возвращает: новое игровое поле (list of lists), представляющее следующее поколение.
    - Делает глубокую копию текущего поля `next_grid = copy.deepcopy(grid)`
    - Правила игры "Жизнь":
        - Каждая живая клетка с 2 или 3 живыми соседями остается живой.
        - Каждая живая клетка с менее чем 2 живыми соседями умирает.
        - Каждая живая клетка с более чем 3 живыми соседями умирает.
        - Каждая мертвая клетка рождается, если у нее ровно 3 живых соседа.
7. **Основная логика игры (`if __name__ == "__main__":`)**:
    - Запрашивает у пользователя размер поля (количество строк и столбцов) и количество начальных живых клеток.
    - Инициализирует и выводит начальное состояние поля, используя функции `initialize_grid`, `place_alive_cells` и `display_grid`.
    - Запускает основной игровой цикл `while True:`.
    - Вычисляет следующее поколение, используя `compute_next_generation`, и обновляет поле.
    - Отображает текущее состояние поля на экране, используя `display_grid`.
    - Запрашивает у пользователя ввод для продолжения (любое значение, кроме "0") или для выхода из игры ("0").
    - Если пользователь ввел "0", цикл прерывается и игра завершается.
"""
