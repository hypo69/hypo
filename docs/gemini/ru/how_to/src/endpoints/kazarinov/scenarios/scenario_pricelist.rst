Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует сценарий `scenario_pricelist` для обработки данных о продуктах от различных поставщиков. Он включает в себя извлечение данных, обработку с помощью AI модели (Gemini), сохранение данных и публикацию сообщений в Facebook.  Код обрабатывает данные с разных сайтов (morlevi, ksp, ivory, grandadvance), конвертирует их в нужный формат, передает в AI для обработки и перевода на иврит и русский. Затем данные сохраняются в файлы, и публикуются в Facebook.

Шаги выполнения
-------------------------
1. **Инициализация класса `Mexiron`:**  Создается экземпляр класса `Mexiron`, передавая ему экземпляр класса `Driver` (Selenium WebDriver) и (необязательно) имя для процесса.
   - Загружаются настройки из файла `kazarinov.json`.
   - Определяется временная метка и имя для сохранения результатов.
   - Определяется путь для сохранения данных.
   - Читаются инструкции для AI модели из файлов `system_instruction_mexiron.md` и `command_instruction_mexiron.md`.
   - Создается объект `GoogleGenerativeAI` с API ключом.

2. **Выполнение сценария `run_scenario`:** Вызывается метод `run_scenario` класса `Mexiron` с параметрами, включая список URL страниц продуктов.
   - **Обработка URL:** Проверяется список URL. Если список пустой, возвращается False. Цикл обрабатывает каждый URL.
   - **Получение грабера:** Для каждого URL определяется подходящий грабер (классы `MorleviGraber`, `KspGraber`, `IvoryGraber`, `GrandadvanceGraber`) в зависимости от домена.
   - **Открытие страницы:** Открывает страницу продукта с помощью `driver.get_url(url)`.
   - **Парсинг данных:** Используя выбранный грабер, парсит данные с страницы продукта, сохраняя их в объекте `ProductFields`.
   - **Конвертация данных:** Преобразует полученные данные в словарь для AI.
   - **Сохранение данных:** Сохраняет обработанные данные в отдельный файл JSON для каждого продукта.
   - **Обработка данных AI:** Передает обработанные данные в AI модель для анализа и перевода на нужные языки.
   - **Сохранение данных AI:** Сохраняет обработанные данные AI в отдельные файлы JSON для иврита и русского.
   - **Создание отчета:** Создает отчет в форматах HTML и PDF.
   - **Публикация в Facebook:** Публикует сообщения в Facebook с помощью функций `post_message_title`, `upload_post_media` и `message_publish`.
   - **Возвращает результат:** Возвращает True, если сценарий выполнен успешно, False в противном случае.

3. **Функции `get_graber_by_supplier_url`, `convert_product_fields`, `save_product_data`, `process_ai`, `post_facebook`, `create_report`:**  Реализуют вспомогательные функции для извлечения, преобразования, сохранения, обработки AI и публикации данных.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.endpoints.kazarinov.scenarios.scenario_pricelist import Mexiron
    from src.webdriver import Driver

    # Инициализация драйвера (например, с помощью Selenium)
    driver = Driver()

    # Создание экземпляра Mexiron
    mexiron = Mexiron(driver)

    # Список URL-адресов
    urls = [
        "https://morlevi.co.il/product-page.html",
        "https://ksp.co.il/product-page2.html"
    ]

    # Вызов метода для запуска сценария
    asyncio.run(mexiron.run_scenario(urls=urls))

    # Закрытие драйвера
    driver.quit()