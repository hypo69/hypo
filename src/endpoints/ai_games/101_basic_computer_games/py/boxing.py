"""
<BOXING>:
=================
Сложность: 3
-----------------
Игра "Бокс" - это текстовая игра, в которой два игрока по очереди наносят удары друг другу. Каждый игрок в свой ход выбирает тип удара (левый, правый или блок). Удары могут наносить урон противнику, а блок может защитить от удара. Цель игры - нокаутировать противника, снизив его здоровье до 0. Игра основана на случайных числах, что делает ее непредсказуемой.
Правила игры: 
1. Игроки начинают игру с определенным количеством здоровья (100).
2. Игроки по очереди выбирают тип удара (левый, правый или блок).
3. Левый удар наносит урон, если противник не блокирует левый удар, правый удар наносит урон если противник не блокирует правый удар, блок защищает от ударов.
4. Урон зависит от типа удара.
5. Если здоровье игрока достигает 0, он проигрывает.
-----------------
Алгоритм:
1. Инициализировать здоровье игроков.
2. Начать игровой цикл.
3. Запросить ход текущего игрока (левый удар, правый удар или блок).
4. Сгенерировать случайный ход для противника.
5. Определить, был ли удар успешным (промах или блок противника).
6. Нанести урон, если удар был успешным.
7. Проверить, не проиграл ли кто-либо из игроков.
8. Если нет победителя, перейти к следующему игроку и повторить игровой цикл.
9. Вывести победителя.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> InitializeHealth(Инициализация здоровья игроков);
    InitializeHealth --> Player1Turn(Ход игрока 1);
    Player1Turn --> InputPlayer1Move(Запрос хода игрока 1);
    InputPlayer1Move --> GeneratePlayer2Move(Генерировать случайный ход игрока 2);
    GeneratePlayer2Move --> CheckPlayer1Hit(Проверка попадания игрока 1);
    CheckPlayer1Hit -- Удар был успешным --> DamagePlayer2(Нанести урон игроку 2);
     CheckPlayer1Hit -- Удар не был успешным -->  CheckPlayer2Health(Проверить здоровье игрока 2);
    DamagePlayer2 --> CheckPlayer2Health;

    CheckPlayer2Health -- Игрок 2 проиграл --> Player1Wins(Игрок 1 победил);
    CheckPlayer2Health -- Игрок 2 не проиграл --> Player2Turn(Ход игрока 2);
    Player2Turn --> InputPlayer2Move(Запрос хода игрока 2);
    InputPlayer2Move --> GeneratePlayer1Move(Генерировать случайный ход игрока 1);
    GeneratePlayer1Move --> CheckPlayer2Hit(Проверка попадания игрока 2);
    CheckPlayer2Hit -- Удар был успешным --> DamagePlayer1(Нанести урон игроку 1);
    CheckPlayer2Hit -- Удар не был успешным --> CheckPlayer1Health(Проверить здоровье игрока 1);
    DamagePlayer1 --> CheckPlayer1Health;

    CheckPlayer1Health -- Игрок 1 проиграл --> Player2Wins(Игрок 2 победил);
    CheckPlayer1Health -- Игрок 1 не проиграл --> Player1Turn;
    Player1Wins --> End(Конец);
    Player2Wins --> End;
    End --> Stop(Stop)
```
"""
import random

def boxing_game():
    """
    Игра "Бокс" - текстовая игра для двух игроков, где они по очереди наносят друг другу удары.
    """
    player1_health = 100  # Здоровье первого игрока
    player2_health = 100  # Здоровье второго игрока
    
    player_turn = 1 # номер игрока, который сейчас ходит.
    
    while player1_health > 0 and player2_health > 0:
        # Выводим текущее состояние здоровья игроков
        print(f"\nЗдоровье игрока 1: {player1_health}")
        print(f"Здоровье игрока 2: {player2_health}")

        # Ход текущего игрока
        if player_turn == 1:
            print("\nХод игрока 1:")
            player1_move = get_player_move() # Получаем ход игрока 1
            player2_move = random.randint(1, 3) # Генерируем случайный ход для игрока 2
            
             # Определяем, был ли удар игрока 1 успешным
            damage = calculate_damage(player1_move,player2_move)
            if damage > 0:
                player2_health -= damage
                print(f"Игрок 1 нанес {damage} урона")
            else:
                print("Игрок 1 промахнулся")
            player_turn = 2 # передаем ход следующему игроку

        else:
            print("\nХод игрока 2:")
            player2_move = get_player_move() # Получаем ход игрока 2
            player1_move = random.randint(1, 3) # Генерируем случайный ход для игрока 1
             # Определяем, был ли удар игрока 2 успешным
            damage = calculate_damage(player2_move,player1_move)
            if damage > 0:
                player1_health -= damage
                print(f"Игрок 2 нанес {damage} урона")
            else:
                print("Игрок 2 промахнулся")
            player_turn = 1 # передаем ход следующему игроку

    # Определяем победителя и выводим сообщение о победе
    if player1_health <= 0:
        print("\nИгрок 2 победил!")
    else:
        print("\nИгрок 1 победил!")

def get_player_move():
    """
    Запрашивает у игрока ввод хода (1 - левый удар, 2 - правый удар, 3 - блок).
    Возвращает ход игрока.
    """
    while True:
         try:
            move = int(input("Выберите действие (1 - левый удар, 2 - правый удар, 3 - блок): "))
            if 1 <= move <= 3:
                return move
            else:
                print("Неверный ввод. Пожалуйста, введите число от 1 до 3.")
         except ValueError:
             print("Неверный ввод. Пожалуйста, введите число.")

def calculate_damage(attacker_move, defender_move):
    """
    Вычисляет урон в зависимости от ходов атакующего и защищающегося игрока.
    Возвращает урон, нанесенный атакующим игроком.
    """
    damage = 0
    if attacker_move == 1: # Левый удар
        if defender_move != 1: # Противник не блокировал левый удар
            damage = 15
    elif attacker_move == 2: # Правый удар
        if defender_move != 2: # Противник не блокировал правый удар
           damage = 20
    
    return damage

# Запускаем игру
boxing_game()
"""
Пояснения:
1.  **`boxing_game()`**:
    -   Основная функция, управляющая игровым процессом.
    -   Инициализирует здоровье обоих игроков (`player1_health` и `player2_health`) значением 100.
    -   Использует цикл `while`, который продолжается до тех пор, пока здоровье обоих игроков не опустится до нуля.
    -   Выводит текущее здоровье игроков на каждом ходе.
    -   Переменноя `player_turn` хранит номер текущего игрока
    -  В зависимости от `player_turn` делает ход игрок 1 или игрок 2.
    -   Вызывает функцию `get_player_move()` для получения хода текущего игрока.
    -   Генерирует случайный ход для противника с помощью `random.randint(1, 3)`.
    -   Вызывает функцию `calculate_damage()` для определения урона от атаки.
    -   Уменьшает здоровье противника на величину урона.
    -   Выводит сообщение о результате хода.
    -   После цикла, когда у одного из игроков здоровье становится 0, выводит сообщение о победе другого игрока.

2.  **`get_player_move()`**:
    -   Функция для запроса выбора хода у игрока.
    -   Использует цикл `while True` для постоянного запроса ввода до тех пор, пока не будет введен корректный ход.
    -   Внутри цикла:
        -   Запрашивает ввод хода от пользователя (1-левый, 2-правый, 3-блок).
        -   Преобразует ввод в целое число с помощью `int()`.
        -   Проверяет, находится ли введенное число в диапазоне от 1 до 3.
        -   Если ход корректен, возвращает его.
        -   Если ввод не является числом или выходит за диапазон, выводится сообщение об ошибке.
    -   Функция гарантирует получение корректного выбора хода от пользователя.

3. **`calculate_damage(attacker_move, defender_move)`**:
    -   Функция для расчета урона в зависимости от хода нападающего и защищающегося.
    -   Принимает на вход `attacker_move` (ход нападающего) и `defender_move` (ход защищающегося).
    -   Устанавливает начальное значение урона `damage = 0`.
    -   Проверяет, какой тип атаки выбрал игрок:
        -   Если это левый удар (`attacker_move == 1`), и защищающийся не заблокировал его (`defender_move != 1`), то урон `damage` устанавливается в 15.
        -   Если это правый удар (`attacker_move == 2`), и защищающийся не заблокировал его (`defender_move != 2`), то урон `damage` устанавливается в 20.
    -   Возвращает вычисленное значение `damage`.

    **Переменные:**
    -   `player1_health`: целое число, здоровье первого игрока.
    -   `player2_health`: целое число, здоровье второго игрока.
    -   `player1_move`: целое число, ход первого игрока (1, 2 или 3).
    -   `player2_move`: целое число, ход второго игрока (1, 2 или 3).
    -   `move`: целое число, временная переменная для хранения ввода хода.
    -   `damage`: целое число, урон, нанесенный противнику.

    **Логика игры:**
    -   Игра продолжается до тех пор, пока здоровье обоих игроков не станет равным 0.
    -   Каждый ход игрок выбирает действие: левый удар (1), правый удар (2) или блок (3).
    -   Удар наносит урон, если противник не заблокировал атаку того же типа.
    -   Победителем объявляется игрок, у которого осталось здоровье, когда у соперника здоровье равно 0.
    
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```