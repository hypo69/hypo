Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код предоставляет функции для асинхронного скачивания и сохранения видеофайлов из URL, а также для извлечения бинарных данных видеофайла.  Модуль обрабатывает потенциальные сетевые проблемы, ошибки сохранения файлов и логирует информацию об ошибках для надежной работы.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует библиотеки `aiohttp` для асинхронных сетевых операций, `aiofiles` для асинхронного ввода-вывода файлов, `pathlib` для работы с путями файлов, `typing` для типов данных, `asyncio` для асинхронного выполнения кода, `logger` для логирования ошибок.

2. **Функция `save_video_from_url`:**
    a. **Принимает URL и путь сохранения:** Функция принимает URL видеофайла и путь, куда необходимо сохранить файл.
    b. **Проверка URL и пути:**  Преобразует путь сохранения в объект `Path`.
    c. **Асинхронное скачивание:** Используя `aiohttp`, скачивает видео с указанного URL.  Обрабатывает HTTP ошибки (`response.raise_for_status()`).
    d. **Создание директорий:** Создаёт родительские директории для файла, если они не существуют (`save_path.parent.mkdir(parents=True, exist_ok=True)`).
    e. **Асинхронное сохранение файла:** Сохраняет видео в файл в бинарном формате (`wb`) по частям (по 8192 байт).
    f. **Проверка успешного сохранения:** Проверяет, существует ли сохранённый файл (`save_path.exists()`) и его размер (`save_path.stat().st_size`). Возвращает `None`, если файл не сохранён или пустой.
    g. **Обработка ошибок:** Использует `try...except` блоки для обработки ошибок при скачивании (сетевых ошибок) и сохранении (ошибок работы с файлами). Выводит сообщения об ошибках в лог (`logger.error`). Возвращает `None` в случае ошибок.

3. **Функция `get_video_data`:**
    a. **Принимает путь к файлу:** Функция получает путь к видеофайлу.
    b. **Проверка существования файла:** Проверяет, существует ли файл по указанному пути.
    c. **Чтение файла:** Читает бинарные данные из файла (`"rb"`).
    d. **Обработка ошибок:** Использует `try...except` для обработки ошибок при чтении файла. Выводит сообщения об ошибках в лог (`logger.error`). Возвращает `None` в случае ошибок.

4. **Функция `main` (для примера):**
    a. **Пример использования:** Приводит пример вызова функции `save_video_from_url` и печати результата.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.utils.video import save_video_from_url

    async def main():
        url = "https://example.com/video.mp4"  # Замените на реальный URL!
        save_path = "local_video.mp4"
        result = await save_video_from_url(url, save_path)
        if result:
            print(f"Видео сохранено по пути: {result}")
        else:
            print("Видео не удалось сохранить.")

    if __name__ == "__main__":
        asyncio.run(main())