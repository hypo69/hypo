"""
MUGWMP:
=================
Сложность: 3
-----------------
MUGWMP - это игра-угадайка, где компьютер загадывает случайное четырехзначное число, а игрок пытается его отгадать. После каждой попытки компьютер сообщает, сколько цифр угадано правильно и находятся на правильном месте (MUGS) и сколько цифр угадано правильно, но находятся на неправильном месте (WUMPS).
Правила игры:
1. Компьютер генерирует случайное четырехзначное число, где все цифры разные.
2. Игрок вводит четырехзначное число.
3. Компьютер сравнивает введенное число с загаданным и выводит количество MUGS (правильная цифра на правильном месте) и WUMPS (правильная цифра на неправильном месте).
4. Игра продолжается до тех пор, пока игрок не угадает число, или пока не будет достигнуто максимальное количество попыток.
-----------------
Алгоритм:
1. Инициализация:
   - Задать максимальное количество попыток (max_attempts = 10).
   - Сгенерировать случайное четырехзначное число с неповторяющимися цифрами (secret_number).
   - Обнулить счетчик попыток (attempts = 0).
2. Игровой цикл:
   - Вывести приглашение для ввода числа.
   - Ввести число от игрока (user_guess).
   - Увеличить счетчик попыток на 1 (attempts = attempts + 1).
   - Инициализировать счетчики MUGS и WUMPS (mugs = 0, wumps = 0).
   - Сравнить введенное число с загаданным числом:
     - Для каждой цифры в введенном числе:
       - Если цифра и ее позиция совпадают с цифрой и позицией в загаданном числе, увеличить MUGS.
       - Иначе если цифра присутствует в загаданном числе, увеличить WUMPS.
   - Вывести результат текущей попытки (MUGS и WUMPS).
   - Если введенное число совпадает с загаданным, вывести сообщение о победе и закончить игру.
   - Если количество попыток достигло максимального количества, вывести сообщение о проигрыше и загаданное число и закончить игру.
   - Перейти к началу игрового цикла, если не достигнут конец игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> Initialize(Инициализация);
    Initialize --> GenerateSecretNumber(Генерация случайного числа);
    GenerateSecretNumber --> GameLoopStart(Начало игрового цикла);
    GameLoopStart --> InputGuess(Ввод числа игроком);
    InputGuess --> IncrementAttempts(Увеличение счетчика попыток);
    IncrementAttempts --> InitializeMugsWumps(Обнуление счетчиков MUGS и WUMPS);
    InitializeMugsWumps --> CompareNumbers(Сравнение чисел);
    CompareNumbers --> OutputResult(Вывод результата: MUGS и WUMPS);
    OutputResult --> CheckWin(Проверка на победу?);
    CheckWin -- Yes --> OutputWin(Вывод сообщения о победе);
    OutputWin --> End(Конец);
    CheckWin -- No --> CheckAttempts(Проверка количества попыток?);
    CheckAttempts -- Yes --> OutputLose(Вывод сообщения о проигрыше);
    OutputLose --> End;
    CheckAttempts -- No --> GameLoopStart;
    CompareNumbers --> CompareNumbers;
```
"""
import random

def generate_secret_number():
    """Генерирует случайное четырехзначное число с неповторяющимися цифрами."""
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits) # Перемешиваем цифры случайным образом
    secret_number = digits[:4]  # Берем первые 4 цифры
    # Преобразуем в строку
    return "".join(map(str, secret_number))


def calculate_mugs_and_wumps(secret_number, user_guess):
    """
    Сравнивает введенное число с загаданным и возвращает количество MUGS и WUMPS.
    MUGS - количество цифр, угаданных на правильном месте
    WUMPS - количество цифр, угаданных, но на неправильном месте
    """
    mugs = 0
    wumps = 0
    for i in range(4):
        if user_guess[i] == secret_number[i]:
            mugs += 1
        elif user_guess[i] in secret_number:
            wumps += 1
    return mugs, wumps


def play_mugwump():
    """Основная функция игры MUGWMP."""
    max_attempts = 10 # Максимальное количество попыток
    secret_number = generate_secret_number() # Генерируем случайное число
    attempts = 0 # Обнуляем счетчик попыток

    print("Добро пожаловать в игру MUGWMP!")
    print("Я загадал четырехзначное число с неповторяющимися цифрами.")
    print("Попробуй отгадать его, у тебя есть 10 попыток.")

    while attempts < max_attempts: # Начинаем цикл игры, пока не закончились попытки
        attempts += 1 # Увеличиваем счетчик попыток
        user_guess = input(f"Попытка {attempts}. Введите ваше число: ") # Запрашиваем ввод у игрока
         # Проверяем, что введено 4 цифры, иначе выводим сообщение об ошибке
        if not user_guess.isdigit() or len(user_guess) != 4:
            print("Пожалуйста, введите четырехзначное число")
            attempts -=1
            continue
        mugs, wumps = calculate_mugs_and_wumps(secret_number, user_guess) # Вычисляем MUGS и WUMPS
        print(f"MUGS: {mugs}, WUMPS: {wumps}") # Выводим результат текущей попытки

        if mugs == 4: # Если MUGS равно 4, то игрок угадал число
            print(f"Поздравляю, ты угадал число {secret_number} за {attempts} попыток!")
            return # Завершаем игру
    # Если все попытки закончились, выводим сообщение о проигрыше
    print(f"К сожалению, вы не угадали число. Загаданное число было {secret_number}.")

if __name__ == "__main__":
    play_mugwump()
"""
Пояснения:
1. `generate_secret_number()`:
   - Эта функция создает случайное четырехзначное число, где все цифры уникальны.
   - Сначала создается список цифр от 0 до 9.
   - Затем этот список перемешивается случайным образом.
   - Из перемешанного списка берутся первые 4 цифры.
   - Число преобразуется в строку и возвращается.
2. `calculate_mugs_and_wumps(secret_number, user_guess)`:
   - Эта функция сравнивает введенное пользователем число с загаданным числом.
   - `mugs` — количество цифр, угаданных в правильном месте.
   - `wumps` — количество цифр, угаданных, но не в правильном месте.
   - Проходит по каждой цифре и сравнивает ее позицию и значение с загаданным числом.
   - Возвращает количество `mugs` и `wumps`.
3. `play_mugwump()`:
   - Это основная функция игры.
   - Задает максимальное количество попыток (`max_attempts`).
   - Генерирует секретное число с помощью функции `generate_secret_number()`.
   - Инициализирует счетчик попыток (`attempts`).
   - Начинает игровой цикл `while`, который выполняется пока количество попыток не достигнет максимума.
   - Внутри цикла:
     - Увеличивает счетчик попыток.
     - Запрашивает у пользователя ввод числа.
        - Проверяет ввод на корректность(только цифры, 4 знака)
     - Вызывает функцию `calculate_mugs_and_wumps()` для вычисления `mugs` и `wumps`.
     - Выводит результат `mugs` и `wumps` пользователю.
     - Проверяет, угадал ли пользователь число (`mugs == 4`). Если да, выводит сообщение о победе и завершает игру.
   - Если цикл `while` завершился (пользователь не угадал число за `max_attempts` попыток), выводит сообщение о проигрыше и показывает загаданное число.
4. `if __name__ == "__main__":`:
    - Этот блок кода гарантирует, что функция `play_mugwump()` будет вызвана только при запуске файла напрямую (а не при импорте как модуля).
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'