Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber`, предназначенный для сбора данных о товарах с сайта `morlevi.co.il`. Класс наследуется от `Grbr` (вероятно, базового класса для сбора данных с разных поставщиков). Он содержит функции для извлечения различных полей товара (например, `name`, `description`, `images`, `local_saved_image`).  Важная особенность - асинхронность, позволяющая выполнять операции сбора данных параллельно.  Код использует декоратор `@close_pop_up` для закрытия всплывающих окон перед выполнением основных операций.  Класс `Graber` инициализируется экземпляром драйвера `Driver`. Функция `grab_page` асинхронно собирает данные о товаре, вызывая методы для отдельных полей.  Функция `local_saved_image` создает локальную копию изображения товара и сохраняет путь к ней в поле `local_saved_image` объекта `ProductFields`.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует нужные модули: `asyncio`, `Path`, `dataclass`, `BaseModel`, `wraps`, `header`, `gs`, `Context`, `ProductFields`, `Driver`, `j_loads_ns`, `save_png`, `logger`, `ExecuteLocatorException`, и другие.

2. **Определение класса `Graber`:** Класс `Graber` наследуется от `Grbr`. В конструкторе задаётся префикс для поставщика (`morlevi`).

3. **Инициализация драйвера:** В конструкторе класса инициализируется переменная `self.d = driver`.

4. **Функция `grab_page`:**  Эта функция асинхронно собирает поля товара. Она вызывает набор вспомогательных функций, таких как `id_product`, `description`,  и другие, для извлечения значений конкретных полей.

5. **Функция `fetch_all_data`:**  Выполняет последовательное обращение к различным функциям для сбора данных о товаре.

6. **Методы для отдельных полей:** (например, `name`, `description`, `local_saved_image`)  Эти методы, определённые в классе `Graber`, реализуют логику получения данных для соответствующего поля. Методы могут вызывать `self.d.execute_locator` для получения данных с помощью веб-драйвера.

7. **Функция `local_saved_image`:** Эта функция получает изображение товара, сохраняет его как локальный файл в папку `tmp` и сохраняет путь к этому файлу в поле `ProductFields.local_saved_image`.  Она использует `save_png` для сохранения изображения.

8. **Обработка ошибок:** Код включает обработку исключений (`try...except`), чтобы перехватывать возможные ошибки при выполнении операций.

9. **Возврат данных:** Функция `grab_page` возвращает объект `ProductFields` с собранными данными.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.webdriver import Driver
    from hypotez.src.suppliers.morlevi.graber import Graber
    from src.product import ProductFields

    async def main():
        driver = await Driver().create()
        graber = Graber(driver=driver)
        
        #Пример использования
        product_fields = await graber.grab_page(driver=driver, id_product='123')
        print(product_fields.name)  # Вывод имени товара
        print(product_fields.local_saved_image) # Вывод пути к локальному изображению
        await driver.close()

    if __name__ == "__main__":
        asyncio.run(main())