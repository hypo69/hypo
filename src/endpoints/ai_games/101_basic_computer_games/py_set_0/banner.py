"""
BULLS AND COWS:
=================
Сложность: 5
-----------------
Игра "Быки и коровы" - это логическая игра, в которой один игрок загадывает 4-значное число с неповторяющимися цифрами, а второй игрок пытается отгадать это число за несколько попыток. После каждой попытки отгадывающий получает подсказку в виде количества "быков" и "коров". "Бык" - это цифра, угаданная в правильной позиции, а "корова" - это цифра, присутствующая в загаданном числе, но не в правильной позиции. 
Правила игры:
-----------------
1. Компьютер загадывает 4-значное число, каждая цифра которого не повторяется.
2. Игрок вводит свою 4-значную догадку.
3. Компьютер сообщает количество "быков" (цифр на правильных позициях) и "коров" (цифр, присутствующих в числе, но не на правильных позициях).
4. Игра продолжается до тех пор, пока игрок не отгадает число.
5. Количество попыток подсчитывается.

-----------------
Алгоритм:
1. Инициализация: устанавливаем счетчик попыток в 0.
2. Генерируем секретное 4-значное число с неповторяющимися цифрами.
3. Цикл:
  - Выводим номер попытки.
  - Запрашиваем у игрока ввод 4-значного числа.
  - Если введенное число не 4-значное, запрашиваем ввод заново.
  - Подсчитываем количество быков (цифры на правильных позициях).
  - Подсчитываем количество коров (цифры, присутствующие в числе, но не на правильных позициях).
  - Выводим количество быков и коров.
  - Если количество быков равно 4, игрок угадал число, цикл заканчивается.
  - Увеличиваем счетчик попыток.
4. Выводим сообщение о победе и количество попыток.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Начало] --> Initialize[Инициализация: attempts = 0];
    Initialize --> GenerateSecretNumber[Генерация секретного числа];
    GenerateSecretNumber --> GuessLoopStart[Начало цикла угадывания];
    GuessLoopStart --> DisplayAttempt[Вывести номер попытки];
    DisplayAttempt --> InputGuess[Запросить ввод 4-значного числа];
    InputGuess --> ValidateGuess[Проверить длину введенного числа];
    ValidateGuess -- Не 4-х значное --> InputGuess;
    ValidateGuess -- 4-х значное --> CalculateBullsAndCows[Подсчитать быков и коров];
    CalculateBullsAndCows --> DisplayBullsAndCows[Вывести количество быков и коров];
     DisplayBullsAndCows --> CheckWin[Проверка на победу (быков=4)?];
    CheckWin -- Да --> GameWon[Игра выиграна];
     CheckWin -- Нет --> IncrementAttempts[Увеличить счетчик попыток];
    IncrementAttempts --> GuessLoopStart;
    GameWon --> End[Конец];
```
"""
import random

def generate_secret_number():
    """Генерирует секретное 4-значное число с неповторяющимися цифрами."""
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits)  # Перемешиваем цифры в случайном порядке
    secret_number = digits[0:4] # Берем первые 4 цифры из перемешанного списка
    # Убираем начальный ноль, если он есть
    while secret_number[0] == 0:
      random.shuffle(digits)
      secret_number = digits[0:4]
    return secret_number

def calculate_bulls_and_cows(secret_number, guess):
    """Вычисляет количество быков и коров."""
    bulls = 0 # Инициализируем количество быков
    cows = 0  # Инициализируем количество коров
    for i in range(4):
        if guess[i] == secret_number[i]: # Если цифры и позиции совпадают, то это бык
            bulls += 1
        elif guess[i] in secret_number:   # Если цифра присутствует, но не на той позиции, то это корова
             cows += 1
    return bulls, cows

def play_bulls_and_cows():
    """Запускает игру 'Быки и коровы'."""
    attempts = 0 # Инициализируем счетчик попыток
    secret_number = generate_secret_number() # Генерируем секретное число
    print("Добро пожаловать в игру 'Быки и коровы'!")
    print("Я загадал 4-значное число. Попробуй угадать!")
    while True:
        attempts += 1
        print(f"Попытка {attempts}:")
        while True:
          try:
            guess = input("Введите вашу догадку (4 цифры): ") # Запрашиваем ввод догадки
            if not guess.isdigit() or len(guess) != 4: # Проверяем правильность ввода
                 print("Неверный ввод! Введите 4-значное число.")
                 continue
            guess = [int(digit) for digit in guess] # Преобразуем строку в список цифр
            break # Выходим из цикла, если ввод корректен
          except ValueError:
              print("Неверный ввод. Введите число.")
        bulls, cows = calculate_bulls_and_cows(secret_number, guess) # Вычисляем быков и коров
        print(f"Быки: {bulls}, Коровы: {cows}") # Выводим количество быков и коров
        if bulls == 4: # Проверяем, угадал ли игрок
            print(f"Поздравляю! Вы угадали число за {attempts} попыток.")
            break

if __name__ == "__main__":
    play_bulls_and_cows()
"""
Пояснения:
1. `generate_secret_number()`:
   - Создает список цифр от 0 до 9.
   - Перемешивает цифры случайным образом.
   - Возвращает первые 4 цифры, которые образуют секретное число.
   - Обеспечивает, чтобы секретное число не начиналось с нуля.
2. `calculate_bulls_and_cows(secret_number, guess)`:
    - Принимает секретное число и догадку игрока в виде списков.
    - Сравнивает цифры в догадке с цифрами в секретном числе.
    - Подсчитывает количество "быков" (цифры на правильных позициях) и "коров" (цифры, присутствующие в числе, но не на правильных позициях).
    - Возвращает количество быков и коров.
3. `play_bulls_and_cows()`:
    - Инициализирует счетчик попыток и генерирует секретное число.
    - Выводит приветствие и правила игры.
    - Запускает цикл, который продолжается, пока игрок не угадает число.
    - Выводит номер текущей попытки.
    - Запрашивает у пользователя ввод 4-значного числа, проверяя корректность ввода.
    - Преобразует введенную строку в список цифр.
    - Вызывает функцию `calculate_bulls_and_cows` для получения быков и коров.
    - Выводит количество быков и коров.
    - Если количество быков равно 4, игра заканчивается, и выводится сообщение о победе и количестве попыток.
4. `if __name__ == "__main__":`:
    - Проверяет, является ли текущий файл основным исполняемым файлом.
    - Если да, то вызывает функцию `play_bulls_and_cows()`, чтобы запустить игру.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'