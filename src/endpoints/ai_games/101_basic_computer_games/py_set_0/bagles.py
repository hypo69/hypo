"""
<BAGLES>:
=================
Сложность: 4
-----------------
Игра "Бейглз" - это логическая игра, в которой игрок должен угадать секретное трехзначное число, используя подсказки. Компьютер генерирует случайное трехзначное число, в котором все цифры различны. Игрок делает попытки, и в ответ получает подсказки: "Pico" - если одна из цифр угадана и находится на неверной позиции, "Fermi" - если одна из цифр угадана и находится на верной позиции, и "Bagels" - если ни одна из цифр не угадана. Игрок выигрывает, если угадает все три цифры на своих местах, то есть получит подсказку "Fermi Fermi Fermi". Игра заканчивается либо при победе, либо после 10 попыток.
Правила игры: 
1. Компьютер генерирует случайное трехзначное число, все цифры в котором различны.
2. Игрок делает попытку угадать число.
3. Компьютер сообщает подсказки:
    - "Pico" - если одна из цифр угадана, но не на верной позиции.
    - "Fermi" - если одна из цифр угадана и находится на верной позиции.
    - "Bagels" - если ни одна из цифр не угадана.
4. Игра продолжается до тех пор, пока игрок не угадает число или не сделает 10 попыток.
-----------------
Алгоритм:
1. Инициализация:
   - Задать максимальное количество попыток `max_tries` равное 10.
   - Сгенерировать случайное трехзначное число `secret_number`, все цифры которого различны.
   - Установить счетчик попыток `tries` равным 0.
2. Игровой цикл:
   - Пока количество попыток `tries` меньше `max_tries`:
     - Увеличить счетчик попыток `tries` на 1.
     - Вывести номер текущей попытки `tries`.
     - Запросить ввод трехзначного числа `guess` от пользователя.
     - Инициализировать строку подсказок `clues` как пустую строку.
     - Для каждой цифры в числе `guess`:
       - Если цифра `guess` совпадает с соответствующей цифрой в числе `secret_number` , то добавить "Fermi " в строку подсказок `clues`.
       - Если цифра `guess` присутствует в числе `secret_number`, но не на верной позиции, добавить "Pico " в строку подсказок `clues`.
     - Если строка подсказок `clues` пустая, то добавить "Bagels" в строку подсказок `clues`.
     - Вывести строку подсказок `clues`.
     - Если строка подсказок `clues` равна "Fermi Fermi Fermi ", то игрок выиграл, вывести сообщение и завершить игру.
3. Если цикл завершился и игрок не выиграл, то вывести сообщение о проигрыше и сообщить загаданное число `secret_number`.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> Initialize(Инициализация);
    Initialize --> LoopStart(Начало цикла);
    LoopStart -- tries < max_tries --> Input(Ввод числа пользователем);
    Input --> CheckNumber(Проверка числа);
    CheckNumber --> OutputClues(Вывод подсказок);
    OutputClues -- clues == 'Fermi Fermi Fermi ' --> Win(Игрок выиграл);
    Win --> End(Конец игры);
    OutputClues -- clues != 'Fermi Fermi Fermi ' --> LoopEnd(Конец цикла);
    LoopEnd --> LoopStart;
    LoopStart -- tries >= max_tries --> Lose(Игрок проиграл);
    Lose --> End;
    
   subgraph Initialize
        I1[max_tries = 10]
        I2[secret_number = generateSecretNumber()]
        I3[tries = 0]
    Initialize --> I1
    I1 --> I2
    I2 --> I3
    end
    
    subgraph Loop
     	
        L1[tries = tries + 1]
        L2[guess = input()]
        L3[clues = '']
    	LoopStart --> L1
    	L1 --> L2
        L2 --> L3
     
        subgraph CheckNumber
           C1[Для каждой цифры в guess]
            C2[Если guess[i] == secret_number[i]  -> clues += "Fermi"]
           C3[Если guess[i] in secret_number -> clues += "Pico" ]
           C4[Если clues == '' -> clues = 'Bagels']
           L3 --> C1
           C1 --> C2
           C2 --> C3
           C3 --> C4
           C4 --> OutputClues
          end
        
        subgraph Output
            O1[print(clues)]
        	OutputClues --> O1
           end
       end
    
    subgraph WinMessage
        WM1[print('Вы выиграли')]
    	Win --> WM1
     end
   
     subgraph LoseMessage
       LM1[print('Вы проиграли')]
        LM2[print('Загаданное число:', secret_number)]
    	Lose --> LM1
    	LM1 --> LM2
     end
     
```
"""
import random

def generate_secret_number():
    """Генерирует случайное трехзначное число с уникальными цифрами."""
    digits = list(range(10)) # Список цифр от 0 до 9
    random.shuffle(digits) # Перемешиваем цифры в случайном порядке
    # Берем первые 3 цифры и формируем число
    secret_number = digits[0] * 100 + digits[1] * 10 + digits[2]
    return secret_number

def get_clues(guess, secret_number):
    """Определяет подсказки для сделанного предположения."""
    guess_str = str(guess) # Преобразуем число-предположение в строку
    secret_str = str(secret_number) # Преобразуем загаданное число в строку
    clues = ""  # Инициализируем строку подсказок
    
    # Проверяем каждую цифру предположения
    for i in range(3): 
      if guess_str[i] == secret_str[i]:
        clues += "Fermi " # Если цифра и позиция совпадают - "Fermi"
      elif guess_str[i] in secret_str:
          clues += "Pico " # Если цифра есть, но позиция не совпадает - "Pico"
    
    if not clues:
      clues = "Bagels" # Если нет совпадений - "Bagels"
    return clues.strip() # Возвращаем строку подсказок без лишних пробелов в конце

def play_bagels():
    """Основная функция для запуска игры "Бейглз"."""
    max_tries = 10 # Максимальное количество попыток
    secret_number = generate_secret_number() # Генерируем загаданное число
    tries = 0 # Счетчик попыток
    
    print("Я загадал трехзначное число, все цифры которого различны.")
    print("Попробуйте отгадать его.")
    
    while tries < max_tries: # Игровой цикл, пока попытки не исчерпаны
      tries += 1 # Увеличиваем счетчик попыток
      print(f"Попытка {tries}:") 
      
      try:
          guess = int(input("Ваше предположение: ")) # Запрашиваем ввод пользователя
          if not (100 <= guess <= 999): # Проверка на трехзначность числа
              print("Пожалуйста, введите трехзначное число.")
              tries -=1  # Уменьшаем счетчик попыток, так как ввод неверный.
              continue
      except ValueError:
        print("Пожалуйста, введите целое число.")
        tries -= 1 # Уменьшаем счетчик попыток, так как ввод неверный.
        continue
      
      clues = get_clues(guess, secret_number) # Получаем подсказки
      print(clues) # Выводим подсказки

      if clues == "Fermi Fermi Fermi": # Если все цифры и позиции угаданы
          print("Вы выиграли!")
          return

    print("Вы проиграли. Загаданное число:", secret_number) # Если попытки исчерпаны, выводим сообщение о проигрыше и загаданное число

# Запуск игры
play_bagels()
"""
Пояснения:
1. `generate_secret_number()`:
    - Создает список цифр от 0 до 9.
    - Перемешивает цифры в случайном порядке.
    - Формирует трехзначное число, используя первые три цифры.
2. `get_clues(guess, secret_number)`:
    - Принимает предположение `guess` и загаданное число `secret_number`.
    - Преобразует числа в строки.
    - Проверяет каждую цифру в предположении `guess`:
        - Если цифра и позиция совпадают, добавляет "Fermi " в строку подсказок `clues`.
        - Если цифра есть в загаданном числе, но позиция не совпадает, добавляет "Pico ".
    - Если нет совпадений, то `clues` устанавливается в "Bagels".
    - Возвращает строку подсказок.
3. `play_bagels()`:
    - Устанавливает максимальное количество попыток `max_tries` равным 10.
    - Генерирует секретное число с помощью `generate_secret_number()`.
    - Инициализирует счетчик попыток `tries` равным 0.
    - Выводит приветственные сообщения.
    - В цикле, пока количество попыток меньше максимального:
        - Увеличивает счетчик попыток.
        - Запрашивает у пользователя ввод предположения.
        - Проверяет, является ли ввод трехзначным числом. В случае ошибки, уменьшает счетчик попыток и выводит сообщение об ошибке
        - Получает подсказки, вызывая `get_clues()`.
        - Выводит подсказки.
        - Проверяет, выиграл ли игрок, сравнивая подсказки с "Fermi Fermi Fermi".
        - Если выиграл, выводит сообщение и завершает игру.
    - Если цикл завершается (попытки исчерпаны), выводит сообщение о проигрыше и загаданное число.
4. Переменные:
   - `max_tries` - максимальное количество попыток.
   - `secret_number` - загаданное трехзначное число.
   - `tries` - счетчик текущих попыток.
   - `guess` - предположение игрока.
   - `clues` - строка с подсказками.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```