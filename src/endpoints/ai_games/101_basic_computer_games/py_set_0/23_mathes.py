"""
<23 MATHES>:
=================
Сложность: 3
-----------------
Игра "MATHES" представляет собой простую арифметическую викторину. Компьютер генерирует два случайных числа и предлагает игроку выполнить с ними операцию сложения, вычитания или умножения. Игрок вводит свой ответ, и компьютер проверяет его правильность. Игра продолжается до тех пор, пока игрок не захочет выйти.

Правила игры:
-----------------
1. Компьютер выбирает случайным образом два числа в диапазоне от 1 до 10.
2. Компьютер случайным образом выбирает одну из трех операций: сложение, вычитание или умножение.
3. Компьютер выводит на экран пример и просит игрока ввести ответ.
4. Игрок вводит свой ответ.
5. Компьютер проверяет ответ игрока. Если ответ правильный, выводится сообщение "Правильно". Иначе выводится правильный ответ.
6. Игра продолжается, генерируя новые примеры, пока игрок не введет 'N', когда будет предложено сыграть еще раз.
-----------------
Алгоритм:
-----------------
1. Начало игры.
2. Вывод на экран приветствия.
3. Цикл игры:
    3.1. Генерация двух случайных чисел (число_1 и число_2) в диапазоне от 1 до 10.
    3.2. Генерация случайного числа (операция) от 1 до 3, которое представляет собой тип операции: 1- сложение, 2 - вычитание, 3 - умножение.
    3.3. Вывод на экран примера с использованием сгенерированных чисел и операции.
    3.4. Ввод ответа игрока.
    3.5. Вычисление правильного ответа (правильный_ответ).
    3.6. Сравнение ответа игрока с правильным ответом.
    3.7. Вывод сообщения о правильности ответа или правильного ответа, если ответ игрока неверный.
    3.8. Запрос к игроку, хочет ли он сыграть еще раз.
    3.9. Если ответ игрока 'N', то выход из цикла.
4. Завершение игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Начало игры] --> Greeting[Вывод приветствия];
    Greeting --> GameLoopStart{Начало цикла игры};
    GameLoopStart --> GenerateNumbers[Генерация случайных чисел];
    GenerateNumbers --> GenerateOperation[Генерация случайной операции];
    GenerateOperation --> DisplayExample[Вывод примера на экран];
    DisplayExample --> GetPlayerAnswer[Ввод ответа игрока];
    GetPlayerAnswer --> CalculateCorrectAnswer[Вычисление правильного ответа];
    CalculateCorrectAnswer --> CheckAnswer{Проверка ответа};
    CheckAnswer -- Правильно --> CorrectAnswerOutput[Вывод сообщения "Правильно"];
    CheckAnswer -- Неправильно --> WrongAnswerOutput[Вывод правильного ответа];
    CorrectAnswerOutput --> PlayAgainQuery[Запрос: играть еще раз?];
     WrongAnswerOutput --> PlayAgainQuery;
    PlayAgainQuery -- Да --> GameLoopStart;
    PlayAgainQuery -- Нет --> End[Конец игры];
```
"""
import random

def calculate_result(number1, number2, operation):
    """
    Вычисляет результат операции в зависимости от выбранного типа операции.

    Args:
        number1 (int): Первое число.
        number2 (int): Второе число.
        operation (int): Тип операции (1 - сложение, 2 - вычитание, 3 - умножение).

    Returns:
        int: Результат операции.
    """
    if operation == 1: #Если выбрана операция сложения
        return number1 + number2
    elif operation == 2: #Если выбрана операция вычитания
        return number1 - number2
    elif operation == 3: #Если выбрана операция умножения
        return number1 * number2
    else:
        return None #В случае не корректного типа операции, возвращает None

def get_operation_symbol(operation):
    """
    Возвращает символ операции (+, -, *) в зависимости от типа операции.

    Args:
        operation (int): Тип операции (1 - сложение, 2 - вычитание, 3 - умножение).

    Returns:
        str: Символ операции.
    """
    if operation == 1:
        return "+"
    elif operation == 2:
        return "-"
    elif operation == 3:
        return "*"
    else:
        return "?"


def play_mathes():
    """
    Основная функция игры "MATHES".
    """
    print("Привет! Это игра MATHES.")

    play_again = 'Y' #Флаг для продолжения игры
    while play_again.upper() == 'Y': #Основной цикл игры

        number1 = random.randint(1, 10) #Генерация первого случайного числа
        number2 = random.randint(1, 10) #Генерация второго случайного числа
        operation = random.randint(1, 3) #Генерация случайного числа для выбора операции

        operation_symbol = get_operation_symbol(operation) #Получение символа операции
        print(f"Сколько будет {number1} {operation_symbol} {number2} ?")  #Вывод примера на экран

        try:
            player_answer = int(input("Ваш ответ: ")) #Получение ответа от игрока, обрабатывая ошибку ввода
        except ValueError:
           print("Некорректный ввод. Пожалуйста, введите целое число.")
           continue #Если ввод не число, то переходим к следующей итерации цикла
        
        correct_answer = calculate_result(number1, number2, operation) # Вычисление правильного ответа

        if player_answer == correct_answer: #Проверка правильности ответа
            print("Правильно!")
        else: #В случае ошибки
            print(f"Неправильно. Правильный ответ: {correct_answer}")

        play_again = input("Хотите сыграть еще раз? (Y/N): ") #Запрос на продолжение игры

    print("Спасибо за игру!")


if __name__ == "__main__":
    play_mathes()
"""
Пояснения:
==========
1.  `import random`: импортирует модуль `random`, который используется для генерации случайных чисел.

2.  `calculate_result(number1, number2, operation)`: Функция принимает два числа и код операции и возвращает результат операции.

3.  `get_operation_symbol(operation)`: Функция принимает код операции и возвращает символ операции.

4.  `play_mathes()`:
    *   Выводит приветствие в начале игры.
    *   `play_again = 'Y'`: Устанавливает флаг для начала игры.
    *   `while play_again.upper() == 'Y'`: Запускает основной цикл игры, который продолжается, пока игрок хочет играть.
        *   `number1 = random.randint(1, 10)`: Генерирует первое случайное число.
        *   `number2 = random.randint(1, 10)`: Генерирует второе случайное число.
        *   `operation = random.randint(1, 3)`: Генерирует случайный код операции.
        *   `operation_symbol = get_operation_symbol(operation)`: Получает символ операции.
        *   `print(f"Сколько будет {number1} {operation_symbol} {number2} ?")`: Выводит пример на экран.
        *   `try... except...`: Блок обработки исключений на случай неверного ввода игрока.
        *   `player_answer = int(input("Ваш ответ: "))`: Получает ответ от игрока.
        *   `correct_answer = calculate_result(number1, number2, operation)`: Вычисляет правильный ответ.
        *   `if player_answer == correct_answer:`: Сравнивает ответ игрока с правильным ответом и выводит соответствующее сообщение.
        *   `play_again = input("Хотите сыграть еще раз? (Y/N): ")`: Запрашивает, хочет ли игрок играть еще раз.
    *   Выводит благодарность в конце игры.

5.  `if __name__ == "__main__": play_mathes()`: Запускает игру при выполнении скрипта.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'