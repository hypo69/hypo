"""
BASKET:
=================
Сложность: 3
-----------------
Игра "Баскетбол" - это игра, в которой игрок делает броски мячом в корзину. 
У игрока есть 10 попыток, и в конце игры отображается количество попаданий.

Правила игры:
1.  Игроку дается 10 попыток бросить мяч в корзину.
2.  Вероятность попадания в корзину определяется случайным образом в диапазоне от 1 до 100.
3.  Если случайное число меньше или равно заданному уровню сложности (по умолчанию 50), бросок считается удачным.
4.  После каждой попытки выводится сообщение о результате броска ("HIT" или "MISS").
5.  В конце игры выводится общее количество попаданий.

-----------------
Алгоритм:
1.  Установить количество попаданий в 0.
2.  Начать цикл из 10 попыток:
    2.1 Сгенерировать случайное число в диапазоне от 1 до 100.
    2.2 Если случайное число меньше или равно 50, увеличить количество попаданий на 1 и вывести "HIT".
    2.3 Если случайное число больше 50, вывести "MISS".
3.  Вывести общее количество попаданий.
4.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    hits = 0
    attempts = 10
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: for 1 to attempts"}
    LoopStart -- Да --> GenerateRandom["<code><b>random_number = random(1, 100)</b></code>"]
    GenerateRandom --> CheckHit{"Проверка: <code><b>random_number <= 50?</b></code>"}
    CheckHit -- Да --> IncreaseHits["<code><b>hits = hits + 1</b></code>"]
    IncreaseHits --> OutputHit["Вывод сообщения: <b>HIT</b>"]
    OutputHit --> LoopEnd["Конец цикла?"]
    CheckHit -- Нет --> OutputMiss["Вывод сообщения: <b>MISS</b>"]
    OutputMiss --> LoopEnd
    LoopEnd -- Нет --> LoopStart
    LoopEnd -- Да --> OutputTotalHits["Вывод сообщения: <b>You had {hits} hits</b>"]
    OutputTotalHits --> End["Конец"]
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: hits (количество попаданий) устанавливается в 0, а attempts (количество попыток) устанавливается в 10.
    LoopStart - Начало цикла, повторяющегося 10 раз (по количеству попыток).
    GenerateRandom - Генерируется случайное число random_number в диапазоне от 1 до 100.
    CheckHit - Проверка, является ли random_number меньше или равным 50, чтобы определить, был ли бросок удачным.
    IncreaseHits - Если random_number меньше или равен 50, то количество попаданий увеличивается на 1.
    OutputHit - Вывод сообщения "HIT", если бросок удачный.
    OutputMiss - Вывод сообщения "MISS", если бросок неудачный.
    LoopEnd - Проверка, завершен ли цикл из 10 попыток. Если нет, цикл продолжается; если да, то переходит к выводу результатов.
    OutputTotalHits - Вывод общего количества попаданий в конце игры.
    End - Конец программы.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализируем количество попаданий
hits = 0
# Устанавливаем количество попыток
attempts = 10

# Игровой цикл
for attempt in range(attempts):
    # Генерируем случайное число от 1 до 100 для каждого броска
    random_number = random.randint(1, 100)
    
    # Проверяем, был ли бросок удачным
    if random_number <= 50:
        # Увеличиваем количество попаданий на 1
        hits += 1
        print("HIT")  # Выводим сообщение о попадании
    else:
        print("MISS")  # Выводим сообщение о промахе

# Выводим общее количество попаданий
print(f"You had {hits} hits")

"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.

2.  **Инициализация переменных**:
    - `hits = 0`: Инициализирует переменную `hits` для подсчета количества попаданий, начальное значение равно 0.
    - `attempts = 10`: Инициализирует переменную `attempts` для хранения количества попыток, значение равно 10.

3.  **Игровой цикл**:
    - `for attempt in range(attempts):`: Запускает цикл, который выполняется 10 раз (по количеству попыток). Переменная `attempt` используется для отслеживания номера текущей попытки, но фактически не используется в коде.
    - `random_number = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в переменную `random_number`. Это число используется для определения, был ли бросок удачным.
    - **Проверка на попадание**:
        - `if random_number <= 50:`: Проверяет, если случайное число меньше или равно 50, то бросок считается удачным.
        - `hits += 1`: Увеличивает количество попаданий на 1, если бросок был удачным.
        - `print("HIT")`: Выводит сообщение "HIT" в случае удачного броска.
    - `else:`: Если условие `random_number <= 50` не выполняется (т.е. число больше 50), то бросок считается промахом.
        - `print("MISS")`: Выводит сообщение "MISS" в случае промаха.
4.  **Вывод результатов**:
    - `print(f"You had {hits} hits")`: Выводит общее количество попаданий в конце игры. `f-строка` используется для вставки значения переменной `hits` в текст сообщения.
"""
```