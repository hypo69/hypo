"""
MATHDI:
=================
קושי: 4
-----------------
המשחק "חידון מתמטי" מציג למשתמש בעיות חיבור, חיסור, כפל, וחילוק, ומאפשר לו לתרגל פעולות חשבון בסיסיות. המשחק מציג שאלה אקראית עם שני מספרים אקראיים ופעולה אקראית, ומבקש מהמשתמש להזין את התשובה. המשחק נותן פידבק מיידי אם התשובה נכונה או לא.

חוקי המשחק:
1. המשחק בוחר באקראי שני מספרים בין 1 ל-10 (כולל).
2. המשחק בוחר באקראי פעולה חשבונית: חיבור, חיסור, כפל או חילוק.
3. המשתמש מתבקש להזין את התוצאה של הפעולה החשבונית.
4. המשחק בודק את התשובה ומציג הודעה אם התשובה נכונה או לא.
5. המשחק חוזר על שלבים 1-4 עד שהמשתמש בוחר לסיים.
-----------------
אלגוריתם:
1.  התחל לולאה אינסופית.
2.  צור שני מספרים אקראיים בין 1 ל-10.
3.  בחר פעולה חשבונית אקראית מתוך חיבור, חיסור, כפל וחילוק.
4.  הצג למשתמש את השאלה (לדוגמה: "1 + 2 = ?").
5.  קבל את תשובת המשתמש.
6.  חשב את התשובה הנכונה.
7.  השווה את התשובה הנכונה לתשובת המשתמש:
    7.1 אם התשובה נכונה, הדפס "Correct".
    7.2 אם התשובה לא נכונה, הדפס "Wrong".
8.  שאל את המשתמש האם הוא רוצה לשחק שוב.
9.  אם המשתמש לא מעוניין להמשיך, סיים את הלולאה וסיים את המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> LoopStart{"תחילת לולאה: משחק מתמשך"}
    LoopStart --> GenerateNumbers["יצירת שני מספרים אקראיים (number1, number2) בין 1 ל-10"]
    GenerateNumbers --> ChooseOperation["בחירת פעולה חשבונית אקראית (operation: +, -, *, /)"]
    ChooseOperation --> CreateQuestion["יצירת שאלה: <code><b>{number1} {operation} {number2} = ?</b></code>"]
    CreateQuestion --> InputAnswer["קבלת תשובה מהמשתמש: <code><b>userAnswer</b></code>"]
    InputAnswer --> CalculateCorrectAnswer["חישוב התשובה הנכונה: <code><b>correctAnswer</b></code>"]
    CalculateCorrectAnswer --> CompareAnswers{"בדיקה: <code><b>userAnswer == correctAnswer?</b></code>"}
    CompareAnswers -- כן --> OutputCorrect["הצגת הודעה: <b>Correct</b>"]
    OutputCorrect --> AskPlayAgain["שאלה: <b>רוצה לשחק שוב?</b>"]
    CompareAnswers -- לא --> OutputWrong["הצגת הודעה: <b>Wrong</b>"]
    OutputWrong --> AskPlayAgain
     AskPlayAgain --> CheckPlayAgain{"בדיקה: <b>תשובת המשתמש - 'לא'?</b>"}
    CheckPlayAgain -- כן --> End["סוף"]
    CheckPlayAgain -- לא --> LoopStart
```
Legenda:
    Start - תחילת התוכנית.
    LoopStart - תחילת הלולאה הראשית, שממשיכה עד שהמשתמש מחליט לסיים.
    GenerateNumbers - יצירת שני מספרים אקראיים בין 1 ל-10.
    ChooseOperation - בחירת פעולה חשבונית אקראית מתוך ארבע אפשרויות: +, -, *, /.
    CreateQuestion - יצירת שאלה חשבונית על בסיס המספרים והפעולה שנבחרו.
    InputAnswer - קבלת תשובה מהמשתמש.
    CalculateCorrectAnswer - חישוב התשובה הנכונה לשאלה.
    CompareAnswers - השוואה בין תשובת המשתמש לתשובה הנכונה.
    OutputCorrect - הצגת הודעה "Correct" כאשר התשובה נכונה.
    OutputWrong - הצגת הודעה "Wrong" כאשר התשובה שגויה.
    AskPlayAgain - שאלה למשתמש האם הוא רוצה לשחק שוב.
    CheckPlayAgain - בדיקה האם המשתמש רוצה להפסיק לשחק.
    End - סוף התוכנית.
"""
```python
import random

# פונקציה המבצעת את המשחק
def play_math_quiz():
    # לולאה אינסופית שמאפשרת משחק רצוף
    while True:
        # יצירת שני מספרים אקראיים בין 1 ל-10
        number1 = random.randint(1, 10)
        number2 = random.randint(1, 10)
        
        # בחירת פעולה אקראית מתוך רשימת הפעולות האפשריות
        operations = ['+', '-', '*', '/']
        operation = random.choice(operations)
        
        # הצגת השאלה למשתמש
        print(f"מה התוצאה של {number1} {operation} {number2}?")

        # קבלת תשובה מהמשתמש
        try:
            user_answer = float(input("הכנס את תשובתך: "))
        except ValueError:
            print("אנא הזן מספר.")
            continue

        # חישוב התשובה הנכונה
        if operation == '+':
            correct_answer = number1 + number2
        elif operation == '-':
            correct_answer = number1 - number2
        elif operation == '*':
            correct_answer = number1 * number2
        elif operation == '/':
            # טיפול במקרה של חלוקה באפס
            if number2 == 0:
                print("לא ניתן לחלק באפס.")
                continue
            correct_answer = number1 / number2
        
        # בדיקה אם התשובה נכונה והדפסת הודעה מתאימה
        if abs(user_answer - correct_answer) < 0.0001: #השוואה עם טעות קטנה בגלל פעולות על מספרים עשרוניים
            print("Correct")
        else:
            print("Wrong")

        # שאלה אם המשתמש רוצה לשחק שוב
        play_again = input("האם אתה רוצה לשחק שוב? (כן/לא): ").lower()
        if play_again != 'כן':
            print("המשחק הסתיים.")
            break

# קריאה לפונקציה הראשית כדי להפעיל את המשחק
if __name__ == "__main__":
    play_math_quiz()
```
"""
הסבר הקוד:
1. **ייבוא המודול `random`**:
   - `import random`: מייבא את מודול `random`, המשמש ליצירת מספרים אקראיים.
2. **פונקציה `play_math_quiz()`**:
   - `def play_math_quiz():`: מגדירה פונקציה המכילה את הלוגיקה של משחק החידון המתמטי.
   - **לולאת המשחק `while True:`**:
     - `while True:`: לולאה אינסופית המאפשרת למשתמש לשחק שוב ושוב עד שיבחר להפסיק.
   - **יצירת מספרים ופעולה אקראית**:
     - `number1 = random.randint(1, 10)`: יוצר מספר אקראי שלם בין 1 ל-10 ושומר אותו במשתנה `number1`.
     - `number2 = random.randint(1, 10)`: יוצר מספר אקראי שלם בין 1 ל-10 ושומר אותו במשתנה `number2`.
     - `operations = ['+', '-', '*', '/']`: יוצר רשימה של פעולות חשבון אפשריות.
     - `operation = random.choice(operations)`: בוחר באופן אקראי פעולה חשבונית אחת מהרשימה.
   - **הצגת השאלה למשתמש**:
     - `print(f"מה התוצאה של {number1} {operation} {number2}?")`: מציג למשתמש את השאלה, המורכבת משני מספרים ופעולה אקראית.
   - **קבלת תשובה מהמשתמש**:
     - `try...except ValueError`: בלוק try-except שמטפל בשגיאות קלט. אם המשתמש יזין משהו שאינו מספר, תוצג הודעת שגיאה.
     - `user_answer = float(input("הכנס את תשובתך: "))`: מבקש מהמשתמש להזין את התשובה שלו וממיר אותה למספר עשרוני.
   - **חישוב התשובה הנכונה**:
     - סדרת תנאי `if-elif-else` שבודקת איזו פעולה נבחרה ומבצעת את החישוב המתאים.
     - `if operation == '+':`: אם הפעולה היא חיבור, מחשב את סכום שני המספרים.
     - `elif operation == '-':`: אם הפעולה היא חיסור, מחשב את ההפרש בין שני המספרים.
     - `elif operation == '*':`: אם הפעולה היא כפל, מחשב את המכפלה של שני המספרים.
     - `elif operation == '/':`: אם הפעולה היא חילוק, בודק אם המכנה שונה מ-0 ואם כן, מחשב את מנת שני המספרים.
     - `if number2 == 0: ... continue`: בודק אם המשתמש מנסה לחלק באפס, ואם כן, מדפיס הודעה ומתחיל סיבוב חדש בלולאה.
   - **בדיקת התשובה והצגת תוצאה**:
      - `if abs(user_answer - correct_answer) < 0.0001:`: משווה בין תשובת המשתמש לתשובה הנכונה, תוך שימוש בטעות קטנה בגלל פעולות על מספרים עשרוניים.
     - `print("Correct")`: אם התשובה נכונה, מדפיס "Correct".
     - `else: print("Wrong")`: אם התשובה אינה נכונה, מדפיס "Wrong".
   - **שאלה אם לשחק שוב**:
     - `play_again = input("האם אתה רוצה לשחק שוב? (כן/לא): ").lower()`: שואל את המשתמש אם הוא מעוניין לשחק שוב וממיר את התשובה לאותיות קטנות.
     - `if play_again != 'כן': ... break`: אם המשתמש לא ענה "כן", הלולאה נשברת והמשחק מסתיים.
3. **קריאה לפונקציה הראשית**:
   - `if __name__ == "__main__":`: מפעיל את הפונקציה `play_math_quiz()` רק כאשר הקובץ מופעל ישירות, ולא כאשר הוא מיובא כמודול.
   - `play_math_quiz()`: קורא לפונקציה כדי להתחיל את המשחק.
"""
