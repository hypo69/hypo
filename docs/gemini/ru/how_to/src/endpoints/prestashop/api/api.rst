Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `PrestaShop`, предназначенный для взаимодействия с API веб-сервиса PrestaShop. Класс позволяет выполнять CRUD-операции, поиск и загрузку изображений. Он обрабатывает ошибки ответов API и предоставляет методы для работы с данными, возвращаемыми API, в формате JSON и XML. Класс использует библиотеку `requests` для отправки HTTP-запросов.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Код импортирует необходимые модули, включая `requests`, `xml.etree.ElementTree`, `enum`, и другие, для работы с API и обработкой данных.

2. **Определение класса `Format`**: Создаётся перечисление `Format` для указания типа данных (JSON или XML), которые возвращаются API.

3. **Определение класса `PrestaShop`**: Определяется класс `PrestaShop` с параметрами для инициализации:
    - `API_KEY`: Ключ API, полученный от PrestaShop.
    - `API_DOMAIN`: Домен PrestaShop магазина.
    - `data_format`: Формат данных по умолчанию (JSON или XML).
    - `default_lang`: Идентификатор языка по умолчанию.
    - `debug`: Флаг для активации отладки.

4. **Инициализация класса `PrestaShop`**: В конструкторе класса `PrestaShop` устанавливаются значения параметров, полученные при создании объекта класса. Проверяется, есть ли уже аутентификация и делается запрос HEAD на указанный домен для проверки связи и версии API PrestaShop.

5. **Метод `ping`**: Используется для проверки работоспособности веб-сервиса. Отправляет запрос HEAD на указанный домен.

6. **Метод `_check_response`**: Проверяет код состояния ответа HTTP. Возвращает `True`, если код состояния 200 или 201, иначе `False` и вызывает метод `_parse_response_error` для обработки ошибок.

7. **Метод `_parse_response_error`**: Обрабатывает ошибку ответа. Анализирует текст ответа и выводит сообщение об ошибке.

8. **Метод `_prepare`**: Подготавливает URL для запроса, добавляя параметры к основной части URL.

9. **Метод `_exec`**: Выполняет HTTP-запрос к API PrestaShop, используя подготовленный URL и параметры.  Обрабатывает различный тип запросов (GET, POST, PUT, DELETE) и параметры поиска, сортировки и лимита.  Возвращает результат запроса (данные) в формате JSON, если `io_format` равен 'JSON', либо данные в формате XML, если `io_format` равен 'XML'.

10. **Методы `create`, `read`, `write`, `unlink`, `search`, `create_binary`, `upload_image`, `get_data`, `remove_file`, `get_apis`, `get_languages_schema`, `upload_image_async`, `get_product_images`**:  Реализуют разные операции (создание, чтение, обновление, удаление, поиск, загрузка файлов) с разными ресурсами PrestaShop API, используя метод `_exec` для выполнения запросов.

11. **Метод `_parse`**: Разбирает ответ, возвращаемый API. Если формат данных JSON, то возвращается словарь, если XML - элемент `ElementTree`.

12. **Обработка ошибок**: В методах `_parse` и других присутствует обработка ошибок `ExpatError`, `ValueError` во время парсинга данных.

Пример использования
-------------------------
.. code-block:: python

    from prestashop import PrestaShop

    api = PrestaShop(
        API_DOMAIN="https://myPrestaShop.com",
        API_KEY="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
        default_lang=1,
        debug=True,
        data_format='JSON',
    )

    # Пример создания записи:
    data = {
        'tax': {
            'rate': 3.00,
            'active': '1',
            'name': {
                'language': {
                    'attrs': {'id': '1'},
                    'value': '3% tax'
                }
            }
        }
    }
    rec = api.create('taxes', data)
    print(rec)