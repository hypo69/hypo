<FOOTBL>:
=================
קושי: 4
-----------------
משחק פוטבול טקסטואלי פשוט בו השחקן מנסה להתקדם עם הכדור לאורך מגרש דמיוני, תוך בחירה בין אפשרויות שונות כמו לרוץ קדימה או למסור. מטרת המשחק היא להגיע לאזור הסיום (End Zone) על ידי בחירה נכונה של מהלכים.
המשחק משתמש במרחק, שמייצג את מיקום השחקן על המגרש, ובמשתנה שמעקב אחרי האם השחקן הגיע לאזור הסיום. 

חוקי המשחק:
1. המשחק מתחיל כאשר השחקן נמצא בנקודת ההתחלה (מרחק 0) ולא הגיע לאזור הסיום.
2. בכל תור, השחקן בוחר אחת משלוש אפשרויות: 
    *   לרוץ קדימה (R) - השחקן מתקדם 1 עד 5 יארדים.
    *   למסור (P) - השחקן מתקדם 5 עד 10 יארדים.
    *   לבעוט (K) - השחקן מתקדם 10 עד 20 יארדים.
3. המשחק נמשך עד שהשחקן מגיע או עובר את אזור הסיום (מרחק 100).
4. אם השחקן הגיע לאזור הסיום, המשחק מסתיים בניצחון.
5. אם השחקן לא הגיע לאזור הסיום, המשחק ממשיך לתור הבא.
-----------------
אלגוריתם:
1. אתחל את מרחק השחקן מההתחלה (yardage) ל-0.
2. אתחל משתנה המציין אם השחקן הגיע לאזור הסיום (endZone) ל-false.
3. כל עוד השחקן לא הגיע לאזור הסיום (endZone == false):
    3.1. הצג את המרחק הנוכחי של השחקן.
    3.2. בקש מהשחקן לבחור מהלך (R=רוץ, P=מסור, K=בעט).
    3.3. אם השחקן בחר "R":
        3.3.1. הגרל מספר אקראי בין 1 ל-5.
        3.3.2. הוסף את המספר האקראי למרחק השחקן.
    3.4. אם השחקן בחר "P":
        3.4.1. הגרל מספר אקראי בין 5 ל-10.
        3.4.2. הוסף את המספר האקראי למרחק השחקן.
    3.5. אם השחקן בחר "K":
        3.5.1. הגרל מספר אקראי בין 10 ל-20.
        3.5.2. הוסף את המספר האקראי למרחק השחקן.
    3.6. אם המרחק של השחקן גדול או שווה ל-100:
        3.6.1. הגדר את המשתנה "הגיע לאזור הסיום" (endZone) ל-true.
4. הצג הודעה "TOUCHDOWN!"
5. סיום המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeVariables["<p align='left'>אתחול משתנים:
    <code><b>
    yardage = 0<br>
    endZone = false
    </b></code></p>"]
    InitializeVariables --> LoopStart{"תחילת לולאה: כל עוד endZone == false"}
    LoopStart -- כן --> OutputYardage["הצגת מרחק: <code><b>yardage</b></code>"]
    OutputYardage --> InputMove["קלט מהלך: <code><b>move (R/P/K)</b></code>"]
    InputMove --> CheckMove{"בדיקה: <code><b>move == 'R'?</b></code>"}
    CheckMove -- כן --> RunMove["<p align='left'>מהלך ריצה:<br><code><b>gain = random(1, 5)<br>yardage = yardage + gain</b></code></p>"]
    CheckMove -- לא --> CheckPass{"בדיקה: <code><b>move == 'P'?</b></code>"}
    CheckPass -- כן --> PassMove["<p align='left'>מהלך מסירה:<br><code><b>gain = random(5, 10)<br>yardage = yardage + gain</b></code></p>"]
    CheckPass -- לא --> KickMove["<p align='left'>מהלך בעיטה:<br><code><b>gain = random(10, 20)<br>yardage = yardage + gain</b></code></p>"]
    RunMove --> CheckEndZone
    PassMove --> CheckEndZone
    KickMove --> CheckEndZone
    CheckEndZone{"בדיקה: <code><b>yardage >= 100?</b></code>"}
     CheckEndZone -- כן --> SetEndZoneTrue["<code><b>endZone = true</b></code>"]
    SetEndZoneTrue --> OutputTouchdown["הצגת הודעה: <b>TOUCHDOWN!</b>"]
    OutputTouchdown --> End["סוף"]
    CheckEndZone -- לא --> LoopStart
    LoopStart -- לא --> End
```

Legenda:
    Start - התחלת התוכנית.
    InitializeVariables - אתחול משתנים: yardage (מרחק השחקן מההתחלה) מאותחל ל-0, ו-endZone (האם השחקן הגיע לאזור הסיום) מאותחל ל-false.
    LoopStart - תחילת הלולאה, הממשיכה כל עוד endZone הוא false.
    OutputYardage - הצגת המרחק הנוכחי של השחקן.
    InputMove - קלט מהלך מהשחקן (R - ריצה, P - מסירה, K - בעיטה).
    CheckMove - בדיקה האם השחקן בחר בריצה.
    RunMove - מהלך ריצה: יצירת מרחק אקראי בין 1 ל-5 והוספתו למרחק הקיים.
    CheckPass - בדיקה האם השחקן בחר במסירה.
    PassMove - מהלך מסירה: יצירת מרחק אקראי בין 5 ל-10 והוספתו למרחק הקיים.
    KickMove - מהלך בעיטה: יצירת מרחק אקראי בין 10 ל-20 והוספתו למרחק הקיים.
    CheckEndZone - בדיקה האם המרחק של השחקן גדול או שווה ל-100.
    SetEndZoneTrue - הגדרת משתנה endZone ל-true.
    OutputTouchdown - הצגת הודעת ניצחון "TOUCHDOWN!".
    End - סוף התוכנית.

"""
import random

# אתחול מרחק השחקן מההתחלה
yardage = 0
# אתחול משתנה המציין האם השחקן הגיע לאזור הסיום
endZone = False

# לולאת המשחק הראשית
while not endZone:
    # הצגת המרחק הנוכחי של השחקן
    print("המרחק הנוכחי: ", yardage)
    # בקשת קלט מהשחקן לבחור מהלך
    move = input("בחר מהלך (R=רוץ, P=מסור, K=בעט): ").upper()

    # ביצוע מהלך ריצה
    if move == 'R':
        # הגרלת מרחק אקראי בין 1 ל-5
        gain = random.randint(1, 5)
        # עדכון מרחק השחקן
        yardage += gain
    # ביצוע מהלך מסירה
    elif move == 'P':
        # הגרלת מרחק אקראי בין 5 ל-10
        gain = random.randint(5, 10)
        # עדכון מרחק השחקן
        yardage += gain
    # ביצוע מהלך בעיטה
    elif move == 'K':
        # הגרלת מרחק אקראי בין 10 ל-20
        gain = random.randint(10, 20)
         # עדכון מרחק השחקן
        yardage += gain
    else:
        # הודעה על קלט לא חוקי
        print("מהלך לא חוקי, אנא בחר R, P או K.")
        continue

    # בדיקה האם השחקן הגיע לאזור הסיום
    if yardage >= 100:
        # עדכון משתנה סיום המשחק
        endZone = True

# הודעה על ניצחון
print("TOUCHDOWN!")

"""
הסבר הקוד:
1.  **ייבוא המודול `random`**:
    - `import random`: ייבוא המודול random, המשמש ליצירת מספרים אקראיים עבור המהלכים השונים.
2.  **אתחול משתנים**:
    - `yardage = 0`: אתחול המשתנה `yardage` למרחק ההתחלתי של השחקן מהאזור סיום, שהוא 0.
    - `endZone = False`: אתחול המשתנה `endZone` למצב התחלתי של המשחק, שהשחקן עדיין לא הגיע לאזור הסיום.
3.  **לולאת המשחק `while not endZone`**:
    - לולאה זו ממשיכה כל עוד השחקן לא הגיע לאזור הסיום (`endZone` שווה ל-`False`).
    - `print("המרחק הנוכחי: ", yardage)`: הצגת המרחק הנוכחי של השחקן מהאזור סיום.
    - `move = input("בחר מהלך (R=רוץ, P=מסור, K=בעט): ").upper()`: בקשה מהשחקן לבחור מהלך, והמרת הקלט לאותיות גדולות כדי להתעלם מהאופן בו הקלט הוזן.
4.  **בדיקת מהלך השחקן**:
    - `if move == 'R'`: אם השחקן בחר לרוץ.
        - `gain = random.randint(1, 5)`: הגרלת מספר אקראי בין 1 ל-5, שמייצג את המרחק שבו השחקן התקדם בריצה.
        - `yardage += gain`: עדכון המרחק הכולל של השחקן על ידי הוספת המרחק שנצבר בריצה.
    - `elif move == 'P'`: אם השחקן בחר למסור.
        - `gain = random.randint(5, 10)`: הגרלת מספר אקראי בין 5 ל-10, שמייצג את המרחק שהשחקן התקדם במסירה.
        - `yardage += gain`: עדכון המרחק הכולל של השחקן על ידי הוספת המרחק שנצבר במסירה.
    - `elif move == 'K'`: אם השחקן בחר לבעוט.
        - `gain = random.randint(10, 20)`: הגרלת מספר אקראי בין 10 ל-20, שמייצג את המרחק שהשחקן התקדם בבעיטה.
        - `yardage += gain`: עדכון המרחק הכולל של השחקן על ידי הוספת המרחק שנצבר בבעיטה.
    - `else:`: אם הקלט לא תואם אף אחת מהאפשרויות הנכונות (R, P, או K).
        - `print("מהלך לא חוקי, אנא בחר R, P או K.")`: הצגת הודעה על קלט לא חוקי.
        - `continue`: החזרה לתחילת הלולאה כדי לאפשר לשחקן לבחור מהלך נוסף.
5.  **בדיקת סיום המשחק**:
    - `if yardage >= 100`: אם השחקן הגיע או עבר את אזור הסיום (מרחק 100 או יותר).
        - `endZone = True`: הגדרת משתנה `endZone` ל-`True`, המציין שהמשחק הסתיים.
6.  **סיום המשחק**:
    - `print("TOUCHDOWN!")`: הדפסת הודעת ניצחון.
"""
