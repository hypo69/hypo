Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для работы с файлами, включая чтение, запись, поиск и обработку файлов в Python. Он поддерживает различные форматы данных (строки, списки строк, словари) и предлагает гибкие параметры для фильтрации файлов по расширениям.  Функции предназначены для работы с файлами и директориями, обеспечивая чтение, запись и обработку файлов в различных режимах, а также поддержку рекурсивного поиска файлов.

Шаги выполнения
-------------------------
1. **Импортирование необходимых модулей**: Код импортирует модули `os`, `json`, `fnmatch`, `pathlib`, `typing`, `logger` для работы с файлами, обработкой данных и логгированием.

2. **Определение констант**: Определяет константу `MODE`, которая хранит строку 'dev'.

3. **Определение функции `save_text_file`**: Эта функция записывает данные в текстовый файл.
    - Принимает на вход данные (`data`), путь к файлу (`file_path`), режим записи (`mode`) и флаг `exc_info` для логгирования ошибок.
    - Обрабатывает исключения при записи файла, логгирует ошибки с помощью `logger`.
    - Поддерживает запись различных типов данных (строка, список строк, словарь).
    - При записи словаря использует `json.dump` для форматированного вывода.
    - Создает родительские директории, если они не существуют.

4. **Определение функции `read_text_file`**: Эта функция читает содержимое файла.
    - Принимает на вход путь к файлу (`file_path`), флаг `as_list` для чтения по строкам, список расширений (`extensions`) и флаг `exc_info` для логгирования ошибок.
    - Обрабатывает исключения при чтении файла, логгирует ошибки с помощью `logger`.
    - Читает файл построчно (`as_list=True`) или целиком (`as_list=False`).
    - При чтении директории, поддерживает фильтрацию файлов по расширениям.
    - Возвращает содержимое файла (строку или список строк) или `None` в случае ошибки.


5. **Определение функции `get_filenames`**: Получает список имён файлов в указанной директории.
    - Принимает на вход путь к директории (`directory`), список расширений (`extensions`) и флаг `exc_info` для логгирования ошибок.
    - Принимает на вход список расширений или строку, обрабатывает оба варианта и возвращает список имён файлов, соответствующих шаблонам.

6. **Определение функции `recursively_yield_file_path`**: Рекурсивно возвращает пути к файлам, соответствующим заданным шаблонам.
   - Принимает на вход путь к корневой директории и шаблоны, возвращает генератор путей к файлам.

7. **Определение функции `recursively_get_file_path`**: Рекурсивно возвращает список путей к файлам, соответствующим заданным шаблонам.
   - Принимает на вход путь к корневой директории и шаблоны, возвращает список путей к файлам.

8. **Определение функции `recursively_read_text_files`**: Рекурсивно читает текстовые файлы, соответствующие заданным шаблонам.
   - Принимает на вход корневую директорию, шаблоны, режим чтения (построчно или целиком) и флаг для логгирования ошибок.
   - Возвращает список содержимого файлов, соответствующих шаблонам.

9. **Определение функции `get_directory_names`**: Возвращает список имен поддиректорий в заданном каталоге.

10. **Определение функции `read_files_content`**: Читает содержимое файлов, соответствующих шаблонам, в заданной директории рекурсивно.


11. **Определение функции `remove_bom`**: Удаляет BOM (Byte Order Mark) из текстового файла.

12. **Определение функции `traverse_and_clean`**: Обходит директории и удаляет BOM из Python-файлов.

13. **Определение функции `main`**: Точка входа для удаления BOM из Python-файлов.


Пример использования
-------------------------
.. code-block:: python

    import os
    from pathlib import Path
    from hypotez.src.utils.file import save_text_file, read_text_file, recursively_read_text_files

    # Пример записи данных в файл
    data = {"key": "value"}
    file_path = Path("my_file.json")
    save_text_file(data, file_path)

    # Пример чтения файла построчно
    file_path = Path("my_file.json")
    lines = read_text_file(file_path, as_list=True)
    for line in lines:
        print(line)

    # Пример рекурсивного чтения файлов в директории
    root_dir = Path(".")
    patterns = ["*.txt", "*.md"]
    contents = recursively_read_text_files(root_dir, patterns, as_list=True)
    for line in contents:
        print(line)