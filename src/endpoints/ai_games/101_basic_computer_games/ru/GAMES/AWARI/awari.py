"""
AWARI:
=================
Сложность: 6
-----------------
Игра "Авари" - это настольная игра, имитирующая традиционную игру Манкала, где два игрока по очереди перемещают "камни" (в данном случае, числа) из ячеек на доске, пытаясь захватить как можно больше камней в свои "амбары". Это упрощенная версия игры, где игрок играет против компьютера.

Правила игры:
1. Игровое поле состоит из 14 ячеек, пронумерованных от 0 до 13. Ячейки 6 и 13 - это "амбары" игроков.
2. В начале игры в каждой из 12 ячеек (0-5 и 7-12) находится по 4 камня.
3. Игрок (человек) начинает игру.
4. Выбирает ячейку со своими камнями (0-5).
5. Все камни из выбранной ячейки перемещаются по одному в каждую следующую ячейку по часовой стрелке, включая свой "амбар".
6. Если последний камень попал в амбар игрока, игрок имеет право сделать еще один ход.
7. Если последний камень попал в пустую ячейку на стороне игрока, и напротив этой ячейки есть камни, то игрок забирает камни из этой ячейки и из противоположной в свой амбар.
8. Компьютер ходит аналогично.
9. Игра заканчивается, когда все ячейки с камнями становятся пустыми.
10. Выигрывает игрок, у которого больше камней в амбаре.
-----------------
Алгоритм:
1. Инициализировать доску (массив) 14 ячеек с 4 камнями в каждой, кроме ячеек 6 и 13, которые равны 0.
2. Начать цикл "пока не закончена игра"
3. Ход игрока:
    3.1 Запросить ввод номера ячейки от игрока (от 0 до 5).
    3.2 Переместить камни из выбранной ячейки по часовой стрелке.
    3.3 Проверить, попал ли последний камень в амбар игрока (ячейка 6). Если да, то дать игроку еще один ход.
    3.4 Проверить, попал ли последний камень в пустую ячейку на стороне игрока. Если да, то захватить камни из этой ячейки и из противоположной ячейки.
4. Ход компьютера (аналогично ходу игрока, но выбор ячейки случайный от 7 до 12).
5. Если все ячейки с камнями пусты, завершить игру.
6. Вывести результат (количество камней в амбарах игрока и компьютера).
7. Определить победителя (у кого больше камней в амбаре).
-----------------

"""
import random

# Инициализация доски. 
# Ячейки 0-5 - ячейки игрока, 6 - амбар игрока
# Ячейки 7-12 - ячейки компьютера, 13 - амбар компьютера
board = [4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0]


def display_board():
    """Выводит текущее состояние игровой доски."""
    print("----------------------------------------------------")
    print(f"  {board[12]:2}  {board[11]:2}  {board[10]:2}  {board[9]:2}  {board[8]:2}  {board[7]:2}   ")
    print("----------------------------------------------------")
    print(f"{board[13]:2}                                 {board[6]:2}")
    print("----------------------------------------------------")
    print(f"  {board[0]:2}  {board[1]:2}  {board[2]:2}  {board[3]:2}  {board[4]:2}  {board[5]:2}  ")
    print("----------------------------------------------------")


def player_turn():
    """Обрабатывает ход игрока."""
    while True:
        try:
            cell = int(input("Выберите ячейку (0-5): "))
            if 0 <= cell <= 5 and board[cell] > 0:
                break
            else:
                print("Недопустимый выбор. Выберите ячейку с камнями от 0 до 5.")
        except ValueError:
            print("Неверный ввод. Пожалуйста, введите число.")
    
    stones = board[cell]
    board[cell] = 0
    current_cell = cell
    
    while stones > 0:
        current_cell = (current_cell + 1) % 14
        board[current_cell] += 1
        stones -= 1

    # Проверка на дополнительный ход если последний камень попал в амбар игрока
    if current_cell == 6:
        print("Игрок получает дополнительный ход.")
        display_board()
        player_turn()
        return
        
    # Захват камней
    if 0 <= current_cell <= 5 and board[current_cell] == 1:
        opposite_cell = 12 - current_cell
        if board[opposite_cell] > 0:
             board[6] += board[opposite_cell] + 1
             board[opposite_cell]=0
             board[current_cell] = 0
             print(f"Игрок захватывает камни из ячеек {current_cell} и {opposite_cell}")
         
        
def computer_turn():
    """Обрабатывает ход компьютера."""
    possible_moves = [i for i in range(7, 13) if board[i] > 0]
    if not possible_moves:
        return  # Если нет доступных ходов для компьютера, выйти
    
    cell = random.choice(possible_moves)
    print(f"Компьютер выбирает ячейку {cell}")
    stones = board[cell]
    board[cell] = 0
    current_cell = cell

    while stones > 0:
         current_cell = (current_cell + 1) % 14
         board[current_cell] += 1
         stones -= 1

    # Проверка на дополнительный ход если последний камень попал в амбар компьютера
    if current_cell == 13:
        print("Компьютер получает дополнительный ход.")
        display_board()
        computer_turn()
        return

    # Захват камней
    if 7 <= current_cell <= 12 and board[current_cell] == 1:
          opposite_cell = 12 - current_cell
          if board[opposite_cell] > 0:
             board[13] += board[opposite_cell] + 1
             board[opposite_cell]=0
             board[current_cell] = 0
             print(f"Компьютер захватывает камни из ячеек {current_cell} и {opposite_cell}")

def is_game_over():
    """Проверяет, закончена ли игра."""
    player_side_empty = all(board[i] == 0 for i in range(0, 6))
    computer_side_empty = all(board[i] == 0 for i in range(7, 13))
    return player_side_empty or computer_side_empty


def calculate_winner():
    """Определяет победителя и выводит результаты."""
    player_score = board[6]
    computer_score = board[13]

    print(f"Игрок: {player_score} очков")
    print(f"Компьютер: {computer_score} очков")

    if player_score > computer_score:
        print("Вы победили!")
    elif computer_score > player_score:
        print("Компьютер победил!")
    else:
        print("Ничья!")


# Основной игровой цикл
while True:
    display_board()
    player_turn()
    if is_game_over():
        break
    display_board()
    computer_turn()
    if is_game_over():
       break
    

# После завершения игры
display_board()
calculate_winner()

