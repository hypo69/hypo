"""
BULL:
=================
Сложность: 5
-----------------
Игра "Быки и Коровы" - это игра, в которой компьютер генерирует случайное четырехзначное число, а игрок пытается угадать это число, получая подсказки о количестве "быков" (цифр, которые угаданы и находятся на правильном месте) и "коров" (цифр, которые угаданы, но находятся на неправильном месте) после каждой попытки. Игра продолжается до тех пор, пока игрок не угадает число.

Правила игры:
1. Компьютер генерирует случайное четырехзначное число, где все цифры уникальны.
2. Игрок вводит свои предположения о загаданном числе, также в виде четырехзначного числа с уникальными цифрами.
3. После каждой попытки компьютер сообщает, сколько "быков" и "коров" в предположении игрока. "Бык" - это цифра, которая угадана и находится на правильной позиции. "Корова" - это цифра, которая угадана, но находится на неправильной позиции.
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число (не получит 4 "быка").
-----------------
Алгоритм:
1. Сгенерировать случайное четырехзначное число с неповторяющимися цифрами.
2. Начать цикл "пока не угадано":
   2.1 Запросить у игрока четырехзначное число.
   2.2 Проверить, является ли введенное число корректным (четырехзначное с уникальными цифрами). Если нет, вывести сообщение об ошибке и вернуться к шагу 2.1.
   2.3 Подсчитать количество "быков" (цифры на правильных позициях).
   2.4 Подсчитать количество "коров" (цифры, которые есть в загаданном числе, но не на своих позициях).
   2.5 Вывести количество "быков" и "коров".
   2.6 Если количество "быков" равно 4, перейти к шагу 3.
3. Вывести сообщение о победе и количестве попыток.
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateSecretNumber["Сгенерировать случайное 4-значное число с уникальными цифрами: <code><b>secretNumber</b></code>"]
    GenerateSecretNumber --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> InputGuess["Ввод числа от пользователя: <code><b>userGuess</b></code>"]
    InputGuess --> ValidateGuess{"Проверка: <code><b>userGuess</b></code> - 4 цифры, уникальные?"}
    ValidateGuess -- Нет --> OutputError["Вывод ошибки: <b>Некорректный ввод</b>"]
    OutputError --> LoopStart
    ValidateGuess -- Да --> CalculateBullsAndCows["Вычислить <b>быков</b> и <b>коров</b>"]
    CalculateBullsAndCows --> OutputBullsAndCows["Вывод количества: <b>Быки</b>, <b>Коровы</b>"]
    OutputBullsAndCows --> CheckWin{"Проверка: <b>Быки == 4</b>?"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> End
```

Legenda:
    Start - Начало программы.
    GenerateSecretNumber - Генерирует случайное 4-значное число с уникальными цифрами и сохраняет его в переменной secretNumber.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    InputGuess - Запрос у пользователя ввода 4-значного числа и сохранение его в переменной userGuess.
    ValidateGuess - Проверка, является ли введенное число userGuess корректным (4 цифры и уникальные).
    OutputError - Вывод сообщения об ошибке некорректного ввода.
    CalculateBullsAndCows - Вычисление количества "быков" и "коров" на основе сравнения userGuess и secretNumber.
    OutputBullsAndCows - Вывод пользователю количества "быков" и "коров".
    CheckWin - Проверка, равно ли количество "быков" 4.
    OutputWin - Вывод сообщения о победе.
    End - Конец программы.
"""
import random

def generate_secret_number():
    """Генерирует случайное 4-значное число с уникальными цифрами."""
    digits = list(range(10))
    random.shuffle(digits)
    return "".join(map(str, digits[:4]))

def validate_guess(guess):
    """Проверяет, что введенное число является 4-значным и имеет уникальные цифры."""
    if not guess.isdigit() or len(guess) != 4:
        return False
    return len(set(guess)) == 4

def calculate_bulls_and_cows(secret, guess):
    """Вычисляет количество быков и коров."""
    bulls = 0
    cows = 0
    for i, digit in enumerate(guess):
        if digit == secret[i]:
            bulls += 1
        elif digit in secret:
            cows += 1
    return bulls, cows

# Основная логика игры
def play_bulls_and_cows():
    """Основная логика игры "Быки и Коровы"."""
    secret_number = generate_secret_number() # генерируем загаданное число
    numberOfGuesses = 0 # счетчик попыток
    
    # основной игровой цикл
    while True:
        numberOfGuesses += 1 # увеличиваем счетчик попыток
        user_guess = input("Введите 4-значное число с уникальными цифрами: ") # просим пользователя ввести число

        # проверяем корректность ввода
        if not validate_guess(user_guess):
            print("Некорректный ввод. Пожалуйста, введите 4-значное число с уникальными цифрами.")
            continue # если ввод не корректный, возвращаемся к началу цикла

        bulls, cows = calculate_bulls_and_cows(secret_number, user_guess) # вычисляем быков и коров
        print(f"Быки: {bulls}, Коровы: {cows}") # выводим пользователю результаты

        # если угадано, выводим сообщение и заканчиваем игру
        if bulls == 4:
            print(f"Поздравляю! Вы угадали число за {numberOfGuesses} попыток!")
            break

if __name__ == "__main__":
    play_bulls_and_cows()

"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Функция `generate_secret_number()`**:
    -   `def generate_secret_number():`: Определяет функцию, которая генерирует случайное 4-значное число с уникальными цифрами.
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
    -   `return "".join(map(str, digits[:4]))`: Берет первые 4 цифры и преобразует их в строку, которая является секретным числом.
3.  **Функция `validate_guess(guess)`**:
    -   `def validate_guess(guess):`: Определяет функцию, проверяющую, что ввод пользователя является корректным (4 цифры и уникальные).
    -   `if not guess.isdigit() or len(guess) != 4:`: Проверяет, что ввод состоит только из цифр и имеет длину 4.
    -   `return len(set(guess)) == 4`: Проверяет, что все цифры уникальные, преобразуя строку в множество (set).
4.  **Функция `calculate_bulls_and_cows(secret, guess)`**:
    -   `def calculate_bulls_and_cows(secret, guess):`: Определяет функцию, вычисляющую быков и коров.
    -   `bulls = 0`: Инициализирует счетчик быков.
    -   `cows = 0`: Инициализирует счетчик коров.
    -   `for i, digit in enumerate(guess):`: Итерирует по цифрам введенного числа.
    -   `if digit == secret[i]:`: Проверяет, есть ли бык (цифра на той же позиции).
    -   `elif digit in secret:`: Проверяет, есть ли корова (цифра есть в секретном числе, но не на своей позиции).
    -   `return bulls, cows`: Возвращает количество быков и коров.
5.  **Функция `play_bulls_and_cows()`**:
    -   `def play_bulls_and_cows():`: Определяет основную функцию игры.
    -   `secret_number = generate_secret_number()`: Генерирует секретное число.
    -    `numberOfGuesses = 0`: Инициализирует счетчик попыток.
    -   `while True:`: Запускает бесконечный цикл игры.
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток.
    -   `user_guess = input("Введите 4-значное число с уникальными цифрами: ")`: Запрашивает у пользователя 4-значное число.
    -   `if not validate_guess(user_guess):`: Проверяет корректность введенного числа.
    -   `print("Некорректный ввод. ...")`: Сообщает об ошибке и просит повторить ввод.
    -   `bulls, cows = calculate_bulls_and_cows(secret_number, user_guess)`: Вычисляет количество быков и коров.
    -   `print(f"Быки: {bulls}, Коровы: {cows}")`: Выводит пользователю результаты.
    -   `if bulls == 4:`: Проверяет, угадано ли число.
    -   `print(f"Поздравляю! ...")`: Выводит сообщение о победе.
    -   `break`: Завершает цикл (игру).
6.  **Запуск игры**:
    -   `if __name__ == "__main__":`: Этот блок гарантирует, что игра будет запущена, только если файл выполняется напрямую.
    -   `play_bulls_and_cows()`: Вызывает функцию для начала игры.
"""
