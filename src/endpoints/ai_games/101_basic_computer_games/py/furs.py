
"""
FURS:
=================
Сложность: 5
-----------------
Игра "FURS" - это текстовая игра, в которой игрок должен угадать, какое животное загадал компьютер, используя подсказки о количестве букв в слове и предоставляемые пользователем буквы.
Игра продолжается, пока игрок не угадает слово или не закончится количество попыток.
Правила игры:
1. Компьютер выбирает случайное животное из предопределенного списка.
2. Компьютер отображает количество букв в слове, используя тире "-".
3. Игрок делает до 10 попыток.
4. Игрок вводит букву.
5. Если буква есть в слове, она раскрывается в позиции или позициях.
6. Если буквы нет в слове, то засчитывается попытка и выводится сообщение, что такой буквы нет.
7. Если игрок угадывает слово, игра заканчивается победой, иначе игра продолжается до 10 попыток.
8. Если игрок не угадывает слово после 10 попыток, игра заканчивается проигрышем.
-----------------
Алгоритм:
1. Выбрать случайное слово из списка слов.
2. Создать строку из тире, равную длине выбранного слова.
3. Установить количество попыток равным 0.
4. Начать цикл "пока количество попыток меньше 10":
    4.1 Запросить у игрока ввод буквы.
    4.2 Если введенная буква есть в выбранном слове:
        4.2.1 Обновить строку с тире, заменив тире на букву в соответствующих позициях.
        4.2.2 Вывести обновленную строку.
        4.2.3 Если строка с тире равна выбранному слову, вывести сообщение о победе и завершить игру.
    4.3 Если введенной буквы нет в выбранном слове:
        4.3.1 Увеличить количество попыток на 1.
        4.3.2 Вывести сообщение, что такой буквы нет.
    4.4 Вывести текущее состояние строки с тире.
5. Если цикл завершился (количество попыток достигло 10), вывести сообщение о проигрыше и загаданное слово.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfTries = 0
    animalList = ['BEAR', 'LION', 'DONKEY', 'CAMEL','MOUSE']
    targetWord = random(animalList)
    wordMask = '-'.repeat(len(targetWord))
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: <code><b>numberOfTries < 10</b></code>?"}
    LoopStart -- Да --> InputLetter["Ввод буквы пользователем: <code><b>userLetter</b></code>"]
    InputLetter --> CheckLetter{"Проверка: <code><b>userLetter in targetWord?</b></code>"}
    CheckLetter -- Да --> UpdateWordMask["<p align='left'>Обновить <code><b>wordMask</b></code>:
    заменить '-' на <code><b>userLetter</b></code> в соответствующих позициях</p>"]
    UpdateWordMask --> OutputWordMask["Вывод <code><b>wordMask</b></code>"]
    OutputWordMask --> CheckWin{"Проверка: <code><b>wordMask == targetWord?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    CheckLetter -- Нет --> IncreaseTries["<code><b>numberOfTries = numberOfTries + 1</b></code>"]
    IncreaseTries --> OutputNoLetter["Вывод сообщения: <b>SORRY, NO {userLetter}'S</b>"]
    OutputNoLetter --> OutputWordMask2["Вывод <code><b>wordMask</b></code>"]
    OutputWordMask2 --> LoopStart
     LoopStart -- Нет --> OutputLose["Вывод сообщения: <b>SORRY, THE WORD WAS {targetWord}</b>"]
    OutputLose --> End

```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfTries (количество попыток) устанавливается в 0, animalList (список животных), targetWord (загаданное слово) выбирается случайным образом из animalList, wordMask (маска слова) создается из тире, длина которых соответствует длине targetWord.
    LoopStart - Начало цикла, который продолжается, пока numberOfTries меньше 10.
    InputLetter - Запрос у пользователя ввода буквы и сохранение её в переменной userLetter.
    CheckLetter - Проверка, есть ли введенная буква userLetter в загаданном слове targetWord.
    UpdateWordMask - Обновление wordMask, заменяя тире на userLetter в соответствующих позициях.
    OutputWordMask - Вывод текущего значения wordMask.
    CheckWin - Проверка, равно ли текущее состояние wordMask загаданному слову targetWord.
    OutputWin - Вывод сообщения о победе "YOU GOT IT!", если wordMask равно targetWord.
    End - Конец программы.
    IncreaseTries - Увеличение счетчика количества попыток numberOfTries на 1.
    OutputNoLetter - Вывод сообщения "SORRY, NO {userLetter}'S", если введенной буквы нет в загаданном слове.
    OutputWordMask2 - Вывод текущего значения wordMask.
    OutputLose - Вывод сообщения о проигрыше "SORRY, THE WORD WAS {targetWord}", если закончились попытки.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'

def play_furs_game():
    """
    Игра FURS: угадай животное по буквам.
    """

    # 1. Список животных, из которого компьютер выбирает случайное слово.
    animal_list = ['BEAR', 'LION', 'DONKEY', 'CAMEL','MOUSE']
    # 2. Выбираем случайное слово из списка
    target_word = random.choice(animal_list)
    # 3. Создаем маску слова из тире
    word_mask = '-' * len(target_word)
    # 4. Инициализируем счетчик попыток
    number_of_tries = 0

    print("Я загадал животное. Попробуй его угадать!")
    print(word_mask) # Выводим маску слова на экран

    # 5. Начинаем основной цикл игры, который будет выполнятся пока не закончатся попытки
    while number_of_tries < 10:
        # 5.1. Запрашиваем ввод буквы у пользователя
        user_letter = input("Введите букву: ").upper()
        # 5.2. Проверяем, есть ли введенная буква в загаданном слове
        if user_letter in target_word:
             # 5.2.1. Обновляем маску слова, заменяя тире на угаданную букву
            new_mask = "" # Создаем пустую строку для обновленной маски
            for i in range(len(target_word)):
                if target_word[i] == user_letter: # Если буква в загаданном слове совпадает с введенной буквой
                    new_mask += user_letter # добавляем букву в маску
                else:
                   new_mask += word_mask[i] # иначе, добавляем символ из маски
            word_mask = new_mask  # Обновляем маску слова
            print(word_mask) # Выводим маску слова на экран
            # 5.2.2. Если слово угадано, выводим сообщение о победе и заканчиваем игру
            if word_mask == target_word:
                print("ПОЗДРАВЛЯЮ! Вы угадали слово!")
                return # Выход из функции
        else:
            # 5.3. Если буквы нет в слове, увеличиваем количество попыток
            number_of_tries += 1
            # 5.3.1. Выводим сообщение об отсутствии буквы
            print(f"Извини, нет буквы '{user_letter}'")
            print(word_mask) # Выводим маску слова на экран
    # 6. Если попытки закончились, выводим сообщение о проигрыше и загаданное слово
    print(f"ИЗВИНИТЕ, попытки закончились. Загаданное слово было '{target_word}'")


if __name__ == "__main__":
    play_furs_game()
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для выбора случайного слова.

2. **Функция `play_furs_game()`**:
    -  Определяет функцию, содержащую логику игры "FURS".

3. **Инициализация переменных**:
    -   `animal_list = ['BEAR', 'LION', 'DONKEY', 'CAMEL','MOUSE']`: Список слов для выбора
    -   `target_word = random.choice(animal_list)`: Выбирает случайное слово из списка `animal_list` и сохраняет его в `target_word`.
    -   `word_mask = '-' * len(target_word)`: Создает строку `word_mask`, состоящую из тире, количество которых равно длине `target_word`.
    -   `number_of_tries = 0`: Инициализирует переменную `number_of_tries` для подсчета количества попыток игрока.

4. **Вывод начальной информации**:
    -   `print("Я загадал животное. Попробуй его угадать!")`: Выводит сообщение о начале игры.
    -  `print(word_mask)`: Выводит маску слова.

5. **Основной цикл `while number_of_tries < 10:`**:
    -   Цикл продолжается до тех пор, пока количество попыток меньше 10.
    -  **Ввод данных**:
        -   `user_letter = input("Введите букву: ").upper()`: Запрашивает у пользователя ввод буквы, преобразует её в верхний регистр и сохраняет в `user_letter`.
    -  **Проверка буквы**:
        -  `if user_letter in target_word:`: Проверяет, есть ли введенная буква в загаданном слове.
          -  **Обновление маски слова**:
            -  `new_mask = ""`:  Создает пустую строку для новой маски слова
            -  `for i in range(len(target_word)):`: Проходит по каждой букве в `target_word`.
             -   `if target_word[i] == user_letter:`: Если буква в загаданном слове соответствует введенной букве.
                 -   `new_mask += user_letter`: Добавляет угаданную букву в `new_mask`.
             -  `else:`: Если буква не соответствует.
               -  `new_mask += word_mask[i]`:  Добавляет символ с текущей позиции из маски.
           -  `word_mask = new_mask`: Обновляет маску слова `word_mask` новой маской `new_mask`.
            -   `print(word_mask)`: Выводит обновленную маску.
           -  **Проверка победы**:
             -  `if word_mask == target_word:`: Проверяет, угадано ли слово (маска слова равна загаданному слову).
               -   `print("ПОЗДРАВЛЯЮ! Вы угадали слово!")`: Выводит сообщение о победе.
                -  `return`: Завершает функцию.
        -  `else:`: Если буква отсутствует в загаданном слове.
          -  `number_of_tries += 1`: Увеличивает счетчик попыток.
           -   `print(f"Извини, нет буквы '{user_letter}'")`: Выводит сообщение об отсутствии буквы.
            -  `print(word_mask)`: Выводит текущую маску.
6. **Конец игры**:
    - `print(f"ИЗВИНИТЕ, попытки закончились. Загаданное слово было '{target_word}'")`: Выводит сообщение о проигрыше и загаданное слово.

7. **Запуск игры**:
    -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_furs_game()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    -  `play_furs_game()`: Вызывает функцию для начала игры.
"""
```