Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber` для сбора данных о товарах с сайта `wallmart.com`. Класс наследуется от базового класса `Grbr` и предоставляет методы для извлечения различных полей товара.  Он использует асинхронную функцию `grab_page` для извлечения данных.  Класс `Graber` обрабатывает поля страницы товара. Если для какого-то поля требуется нестандартная обработка, то функция обработки перегружается в этом классе.  Доступны предварительные действия перед запросом к веб-драйверу с использованием декоратора `close_pop_up` (хотя в текущем примере декоратор закомментирован).

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует различные библиотеки, такие как `asyncio`, `dataclass`, `pydantic`, `functools`, и др., для работы с асинхронными операциями, данными, веб-драйвером и другими функциональными возможностями.

2. **Определение класса `Graber`:** Определяется класс `Graber`, наследующий от `Grbr`.  Он хранит `supplier_prefix` (префикс поставщика) для идентификации источника данных.

3. **Инициализация класса:** Конструктор `__init__` класса `Graber` инициализирует атрибуты класса и устанавливает глобальные настройки через `Context` (если такие настройки есть).

4. **Определение асинхронной функции `grab_page`:** Эта функция отвечает за загрузку данных товара. Она вызывается для извлечения информации с веб-страницы.

5. **Логика извлечения данных:** Функция `fetch_all_data` вызывает ряд функций, отвечающих за извлечение отдельных полей товара.  Каждый вызов происходит с аргументом `kwards.get("имя_поля", '')`. Это позволяет вызвать функцию, только если передан соответствующий аргумент.

6. **Возврат данных:** После успешного завершения всех асинхронных операций функция `grab_page` возвращает `self.fields`, содержащий собранные данные о товаре в виде объекта `ProductFields`.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.webdriver import Driver
    from hypotez.src.suppliers.wallmart.graber import Graber

    async def main():
        driver = Driver()  # Инициализируйте драйвер
        graber = Graber(driver)
        try:
            # Параметры для функции grab_page. Например, id товара
            kwargs = {"id_product": "123"}
            product_data = await graber.grab_page(driver, **kwargs)
            # Обработка полученных данных
            print(product_data)
        except Exception as e:
            print(f"Ошибка: {e}")
        finally:
            await driver.close()


    if __name__ == "__main__":
        asyncio.run(main())