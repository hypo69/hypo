"""
HURKLE:
=================
Сложность: 6
-----------------
Игра "Херкл" - это игра в прятки, в которой игрок пытается найти Херкла, перемещаясь по воображаемой числовой оси. Компьютер генерирует случайную позицию для Херкла и сообщает игроку, насколько он близок к цели, указывая направление (запад или восток) и расстояние. Цель игрока — найти Херкла за минимальное количество шагов.

Правила игры:
1. Компьютер выбирает случайную позицию (координату) Херкла.
2. Игрок вводит свою позицию (координату).
3. Компьютер сообщает направление (запад или восток) и расстояние между текущей позицией игрока и позицией Херкла.
4. Игра продолжается, пока игрок не найдет Херкла.
5. Игра завершается, когда игрок находит Херкла, и компьютер выводит количество шагов, которые потребовались.
-----------------
Алгоритм:
1. Задать начальное количество шагов = 0
2. Сгенерировать случайную позицию Херкла (от 1 до 1000)
3. Начать цикл "пока Херкл не найден":
  3.1 Увеличить количество шагов на 1
  3.2 Запросить ввод позиции игрока
  3.3 Если позиция игрока равна позиции Херкла, вывести сообщение о победе и количестве шагов, перейти к шагу 5
  3.4 Если позиция игрока меньше позиции Херкла, вывести сообщение "EAST {расстояние между позициями}"
  3.5 Если позиция игрока больше позиции Херкла, вывести сообщение "WEST {расстояние между позициями}"
4. Конец цикла.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfSteps = 0
    hurklePosition = random(1, 1000)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока херкл не найден"}
    LoopStart -- Да --> IncreaseSteps["<code><b>numberOfSteps = numberOfSteps + 1</b></code>"]
    IncreaseSteps --> InputPosition["Ввод позиции игроком: <code><b>userPosition</b></code>"]
    InputPosition --> CheckPosition{"Проверка: <code><b>userPosition == hurklePosition?</b></code>"}
    CheckPosition -- Да --> OutputWin["Вывод сообщения: <b>YOU FOUND HIM IN <code>{numberOfSteps}</code> STEPS!</b>"]
    OutputWin --> End["Конец"]
    CheckPosition -- Нет --> CheckWest{"Проверка: <code><b>userPosition > hurklePosition</b></code>?"}
    CheckWest -- Да --> CalculateDistanceWest["<code><b>distance = userPosition - hurklePosition</b></code>"]
    CalculateDistanceWest --> OutputWest["Вывод сообщения: <b>WEST <code>{distance}</code></b>"]
    OutputWest --> LoopStart
    CheckWest -- Нет --> CalculateDistanceEast["<code><b>distance = hurklePosition - userPosition</b></code>"]
    CalculateDistanceEast --> OutputEast["Вывод сообщения: <b>EAST <code>{distance}</code></b>"]
    OutputEast --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfSteps (количество шагов) устанавливается в 0, a hurklePosition (позиция Херкла) генерируется случайным образом от 1 до 1000.
    LoopStart - Начало цикла, который продолжается, пока Херкл не найден.
    IncreaseSteps - Увеличение счетчика количества шагов на 1.
    InputPosition - Запрос у пользователя ввода позиции и сохранение её в переменной userPosition.
    CheckPosition - Проверка, равна ли позиция игрока userPosition позиции Херкла hurklePosition.
    OutputWin - Вывод сообщения о победе, если позиции равны, с указанием количества шагов.
    End - Конец программы.
    CheckWest - Проверка, находится ли позиция игрока userPosition западнее позиции Херкла hurklePosition.
    CalculateDistanceWest - Вычисление расстояния между позицией игрока и позицией Херкла, если позиция игрока западнее.
    OutputWest - Вывод сообщения "WEST {distance}", если позиция игрока западнее.
    CalculateDistanceEast - Вычисление расстояния между позицией игрока и позицией Херкла, если позиция игрока восточнее.
    OutputEast - Вывод сообщения "EAST {distance}", если позиция игрока восточнее.
"""
import random

# Инициализация счетчика шагов
numberOfSteps = 0
# Генерируем случайную позицию Херкла от 1 до 1000
hurklePosition = random.randint(1, 1000)

# Основной игровой цикл
while True:
    # Увеличиваем счетчик шагов
    numberOfSteps += 1
    # Запрашиваем ввод позиции игрока
    try:
        userPosition = int(input("Введите вашу позицию (от 1 до 1000): "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверка, найдем ли Херкл
    if userPosition == hurklePosition:
        print(f"ПОЗДРАВЛЯЮ! Вы нашли его за {numberOfSteps} шагов!")
        break  # Завершаем цикл, если Херкл найден
    elif userPosition < hurklePosition:
        distance = hurklePosition - userPosition
        print(f"EAST {distance}")  # Сообщаем, что Херкл на востоке
    else:
        distance = userPosition - hurklePosition
        print(f"WEST {distance}")  # Сообщаем, что Херкл на западе

"""
Объяснение кода:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайной позиции Херкла.
2.  **Инициализация переменных**:
    -   `numberOfSteps = 0`: Инициализирует переменную `numberOfSteps` для подсчета шагов игрока.
    -   `hurklePosition = random.randint(1, 1000)`: Генерирует случайное целое число в диапазоне от 1 до 1000 и сохраняет его в `hurklePosition`, как позицию Херкла.
3.  **Основной цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока игрок не найдет Херкла (не будет выполнен оператор `break`).
    -   `numberOfSteps += 1`: Увеличивает счетчик шагов на 1 при каждом новом витке цикла.
    -   **Ввод данных**:
         - `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `userPosition = int(input("Введите вашу позицию (от 1 до 1000): "))`: Запрашивает у пользователя позицию и преобразует её в целое число, сохраняя результат в `userPosition`.
    -   **Условие победы**:
        -   `if userPosition == hurklePosition:`: Проверяет, равна ли введенная позиция позиции Херкла.
        -   `print(f"ПОЗДРАВЛЯЮ! Вы нашли его за {numberOfSteps} шагов!")`: Выводит сообщение о победе и количестве шагов.
        -   `break`: Завершает цикл (игру), если Херкл найден.
    -   **Подсказки**:
        -   `elif userPosition < hurklePosition:`: Проверяет, если позиция игрока находится западнее позиции Херкла.
        -   `distance = hurklePosition - userPosition`: Вычисляет расстояние между позициями.
        -   `print(f"EAST {distance}")`: Выводит сообщение о том, что Херкл находится на востоке, и расстояние до него.
        -   `else:`: Если позиция игрока не равна и не западнее позиции Херкла, то она восточнее.
        -   `distance = userPosition - hurklePosition`: Вычисляет расстояние между позициями.
        -   `print(f"WEST {distance}")`: Выводит сообщение о том, что Херкл находится на западе, и расстояние до него.
"""
