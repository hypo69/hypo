Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует приложение на PyQt6, которое отображает веб-браузер в окне. Приложение имеет возможность:
- Загружать URL-адреса из строки ввода.
- Сворачивать окно в системный трей.
- Открывать окно на весь экран.
- Имеет контекстное меню в трее для восстановления окна и выхода из приложения.
- Предоставляет меню выбора URL-адресов (сервисы Google) и моделей (ChatGPT, Gemini, Claude).
- Просит выбрать браузер по умолчанию.
- Устанавливает окно в центр экрана с заданными размерами.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует необходимые модули PyQt6 для работы с графическим интерфейсом, а также модули `sys` и `os` для работы с системой.

2. **Определение класса `AssistantMainWindow`:** Этот класс определяет структуру главного окна приложения.

3. **Инициализация окна:** В методе `__init__` выполняется инициализация окна:
    - Устанавливаются флаги окна для возможности изменения размера и отображения кнопки закрытия.
    - Устанавливаются размеры окна, занимающие 75% от экрана.
    - Выполняется запрос выбора браузера по умолчанию.
    - Создание профиля для выбранного браузера (Chrome, Firefox или Edge) и получение пути к профилю. При неверном выборе браузера приложение завершается.
    - Инициализация браузера `QWebEngineView` с использованием выбранного профиля.
    - Создание верхней панели (`self.title_bar`) с фиксированной высотой и фоновым цветом.
    - Создание строки ввода URL (`self.url_input`).
    - Создание кнопки "Загрузить" (`self.load_button`).
    - Создание кнопок для минимизации в трей (`self.minimize_button`), перехода на весь экран (`self.fullscreen_button`) и закрытия (`self.close_button`).
    - Настройка layout для верхней панели с вводом URL и кнопками.
    - Создание основного layout (`main_layout`) для расположения элементов окна.
    - Создание центрального виджета и установка layout.
    - Инициализация иконки системного трея (`self.tray_icon`).
    - Создание контекстного меню для иконки в трее с действиями "Восстановить" и "Выход".
    - Создание меню для выбора URL сервисов Google.
    - Создание меню для выбора моделей.
    - Настройка кнопок для вызова меню.

4. **Обработка событий:**
    - Функция `load_url` загружает указанный URL в браузер. Обрабатывает случай, когда URL не начинается с `http`.
    - Функция `hide_to_tray` скрывает окно в системном трее.
    - Функция `quit_app` завершает приложение.
    - Переопределение метода `closeEvent` для скрытия окна в трее при закрытии через "X".

5. **Главная функция `if __name__ == "__main__":`:**
    - Создание приложения `QApplication`.
    - Настройка свойства `app.setQuitOnLastWindowClosed(False)` для предотвращения завершения приложения при закрытии последнего окна.
    - Создание экземпляра `AssistantMainWindow` и отображение окна.
    - Запуск приложения с помощью `sys.exit(app.exec())`.


Пример использования
-------------------------
.. code-block:: python

    # Запуск приложения
    import sys
    from PyQt6.QtWidgets import QApplication
    from hypotez.src.gui.openai_trаigner.main import AssistantMainWindow

    if __name__ == "__main__":
        app = QApplication(sys.argv)
        window = AssistantMainWindow()
        window.show()
        sys.exit(app.exec())