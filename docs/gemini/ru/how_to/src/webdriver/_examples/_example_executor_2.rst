Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код демонстрирует примеры использования класса `ExecuteLocator` для выполнения различных задач тестирования с использованием Selenium WebDriver. Он показывает, как создавать и использовать локаторы для поиска элементов на веб-странице, выполнения действий с ними (например, клик по элементу, ввод текста), получения атрибутов элементов и обработки потенциальных ошибок. Код включает примеры с различными типами локаторов, событиями, атрибутами и обработкой исключений.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует необходимые библиотеки: `selenium`, `ExecuteLocator`, `gs`, и `ExecuteLocatorException`.
2. **Создание экземпляра WebDriver:** Создается экземпляр WebDriver (в данном случае Chrome), задаётся путь к исполняемому файлу драйвера.  Открывается целевая веб-страница.
3. **Создание экземпляра `ExecuteLocator`:** Создается экземпляр класса `ExecuteLocator`, используя созданный WebDriver.
4. **Определение локатора (словарь):** Определяются локаторы (словари), описывающие как найти нужный элемент на странице (тип локатора, XPath-выражение, имя атрибута, необходимое действие).
5. **Выполнение локатора:** Метод `locator.execute_locator()` используется для поиска и выполнения действий с элементом, указанным в локаторе.
6. **Обработка результатов:** Полученные данные (текст, атрибуты) сохраняются и выводятся в консоль.
7. **Обработка ошибок:** Используются блоки `try...except` для обработки исключений, возникающих при выполнении локатора.  Это позволяет продолжить выполнение скрипта при возникновении ошибок с определёнными элементами.
8. **Отправка сообщения:** Метод `locator.send_message()` позволяет отправлять сообщение в текстовое поле на странице.
9. **Использование списка локаторов:** Позволяет выполнить последовательность локаторов.
10. **Использование `evaluate_locator`:** Метод позволяет получить значение атрибута элемента.
11. **Закрытие WebDriver:** После выполнения всех операций WebDriver закрывается методом `driver.quit()`.


Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from src.webdriver.executor import ExecuteLocator
    from src import gs
    from src.logger.exceptions import ExecuteLocatorException

    # Создание экземпляра WebDriver (например, Chrome)
    driver = webdriver.Chrome(executable_path=gs['chrome_driver_path'])
    driver.get("https://example.com")

    # Создание экземпляра ExecuteLocator
    locator = ExecuteLocator(driver)

    # Пример локатора
    simple_locator = {
        "by": "XPATH",
        "selector": "//h1",
        "attribute": "textContent",
        "event": None,
        "if_list":"first","use_mouse": False,
        "mandatory": True,
        "locator_description": "Получение заголовка страницы"
    }

    # Выполнение локатора
    result = locator.execute_locator(simple_locator)
    print(f"Результат: {result}")

    driver.quit()