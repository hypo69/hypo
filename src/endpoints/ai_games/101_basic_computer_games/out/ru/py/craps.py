"""
CRAPS:
=================
Сложность: 5
-----------------
Игра "Крэпс" - это азартная игра в кости, в которой игроки делают ставки на результат броска двух игральных костей.
Игрок бросает две кости, и если выпадает 7 или 11, он выигрывает; если 2, 3 или 12 — проигрывает.
Если выпадает любое другое число (4, 5, 6, 8, 9 или 10), то это число становится "точкой", и игрок продолжает бросать кости, пока не выпадет эта "точка" снова или не выпадет 7 (в этом случае игрок проигрывает).

Правила игры:
1. Игрок бросает две шестигранные кости.
2. Если сумма выпавших чисел равна 7 или 11, игрок выигрывает.
3. Если сумма равна 2, 3 или 12, игрок проигрывает.
4. Если выпадает любое другое число (4, 5, 6, 8, 9 или 10), это число становится "точкой".
5. Игрок продолжает бросать кости, пока не выпадет "точка" или 7.
6. Если выпадает "точка", игрок выигрывает.
7. Если выпадает 7, игрок проигрывает.
-----------------
Алгоритм:
1.  Сгенерировать случайные значения для двух игральных костей (от 1 до 6).
2.  Вычислить сумму значений костей.
3.  Если сумма равна 7 или 11, вывести сообщение "YOU WIN" и завершить игру.
4.  Если сумма равна 2, 3 или 12, вывести сообщение "YOU LOSE" и завершить игру.
5.  Если сумма равна 4, 5, 6, 8, 9 или 10:
    5.1 Присвоить сумме значение "point".
    5.2 Начать цикл: пока не выпадет "point" или 7.
        5.2.1 Сгенерировать случайные значения для двух игральных костей (от 1 до 6).
        5.2.2 Вычислить новую сумму значений костей.
        5.2.3 Если новая сумма равна "point", вывести сообщение "YOU WIN" и завершить игру.
        5.2.4 Если новая сумма равна 7, вывести сообщение "YOU LOSE" и завершить игру.
6. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> RollDice1["Бросок костей: 
    <code><b>die1 = random(1, 6)
    die2 = random(1, 6)</b></code>"]
    RollDice1 --> CalculateSum1["<code><b>sum = die1 + die2</b></code>"]
    CalculateSum1 --> CheckWin1{"Проверка: <code><b>sum == 7 or sum == 11?</b></code>"}
    CheckWin1 -- Да --> OutputWin["Вывод сообщения: <b>YOU WIN</b>"]
    OutputWin --> End["Конец"]
    CheckWin1 -- Нет --> CheckLose1{"Проверка: <code><b>sum == 2 or sum == 3 or sum == 12?</b></code>"}
    CheckLose1 -- Да --> OutputLose["Вывод сообщения: <b>YOU LOSE</b>"]
    OutputLose --> End
    CheckLose1 -- Нет --> SetPoint["<code><b>point = sum</b></code>"]
    SetPoint --> LoopStart{"Начало цикла: пока не выиграл или не проиграл"}
    LoopStart --> RollDice2["Бросок костей: 
    <code><b>die1 = random(1, 6)
    die2 = random(1, 6)</b></code>"]
    RollDice2 --> CalculateSum2["<code><b>sum = die1 + die2</b></code>"]
    CalculateSum2 --> CheckWin2{"Проверка: <code><b>sum == point?</b></code>"}
    CheckWin2 -- Да --> OutputWin2["Вывод сообщения: <b>YOU WIN</b>"]
    OutputWin2 --> End
    CheckWin2 -- Нет --> CheckLose2{"Проверка: <code><b>sum == 7?</b></code>"}
    CheckLose2 -- Да --> OutputLose2["Вывод сообщения: <b>YOU LOSE</b>"]
    OutputLose2 --> End
     CheckLose2 -- Нет --> LoopStart

```

Legenda:
    Start - Начало программы.
    RollDice1 - Бросок двух костей: генерируются случайные числа от 1 до 6 для каждой кости.
    CalculateSum1 - Вычисление суммы значений двух костей.
    CheckWin1 - Проверка, равна ли сумма 7 или 11.
    OutputWin - Вывод сообщения "YOU WIN", если сумма равна 7 или 11.
    End - Конец программы.
    CheckLose1 - Проверка, равна ли сумма 2, 3 или 12.
    OutputLose - Вывод сообщения "YOU LOSE", если сумма равна 2, 3 или 12.
    SetPoint - Установка значения суммы в качестве "точки".
    LoopStart - Начало цикла, который продолжается, пока не будет выигрыша или проигрыша.
    RollDice2 - Повторный бросок костей.
    CalculateSum2 - Вычисление новой суммы значений двух костей.
    CheckWin2 - Проверка, равна ли новая сумма "точке".
    OutputWin2 - Вывод сообщения "YOU WIN", если новая сумма равна "точке".
     CheckLose2 - Проверка, равна ли новая сумма 7.
    OutputLose2 - Вывод сообщения "YOU LOSE", если новая сумма равна 7.
"""
import random

# Функция для броска кости
def roll_dice():
    """
    Имитирует бросок двух шестигранных костей.

    Returns:
        int: Сумма значений двух костей.
    """
    die1 = random.randint(1, 6) # Генерируем случайное число от 1 до 6 для первой кости
    die2 = random.randint(1, 6) # Генерируем случайное число от 1 до 6 для второй кости
    return die1 + die2 # Возвращаем сумму значений костей


# Основная логика игры в кости
def play_craps():
    """
    Реализует игровой процесс в "Крэпс".
    """
    # Первый бросок
    sum_dice = roll_dice() # Получаем сумму значений двух костей
    print(f"Выпало: {sum_dice}")# Выводим результат первого броска

    # Проверка выигрыша или проигрыша после первого броска
    if sum_dice == 7 or sum_dice == 11: # Если сумма равна 7 или 11, то игрок выиграл
        print("YOU WIN")
        return # Завершаем игру, так как игрок выиграл
    elif sum_dice == 2 or sum_dice == 3 or sum_dice == 12:  # Если сумма равна 2, 3 или 12, то игрок проиграл
        print("YOU LOSE")
        return # Завершаем игру, так как игрок проиграл
    
    # Если ни одно из условий выше не выполнено, то устанавливаем "point"
    point = sum_dice # Значение суммы костей становится "точкой"

    print(f"Теперь ваша точка: {point}")# Выводим значение "точки"
    
    # Продолжаем игру до выигрыша или проигрыша
    while True:
        sum_dice = roll_dice()# Выполняем повторный бросок
        print(f"Выпало: {sum_dice}")# Выводим результат нового броска

        # Если выпала "точка", игрок выигрывает
        if sum_dice == point:
            print("YOU WIN")
            return # Завершаем игру, так как игрок выиграл
        # Если выпадает 7, игрок проигрывает
        elif sum_dice == 7:
            print("YOU LOSE")
            return  # Завершаем игру, так как игрок проиграл


# Запуск игры, если файл запущен напрямую
if __name__ == "__main__":
    play_craps()
"""
Пояснения:
1.  **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел для имитации броска костей.
2.  **Функция `roll_dice()`**:
    - `def roll_dice():`: Определяет функцию, которая имитирует бросок двух игральных костей.
    -  `die1 = random.randint(1, 6)`: Генерирует случайное целое число от 1 до 6 для первой кости.
    -  `die2 = random.randint(1, 6)`: Генерирует случайное целое число от 1 до 6 для второй кости.
    -  `return die1 + die2`: Возвращает сумму значений двух костей.
3.  **Функция `play_craps()`**:
    - `def play_craps():`: Определяет функцию, которая содержит основную логику игры в кости.
    -  `sum_dice = roll_dice()`: Первый бросок костей, вызов функции `roll_dice()` и сохранение результата в переменной `sum_dice`.
    -  `print(f"Выпало: {sum_dice}")`: Выводит значение суммы костей на экран.
    -   **Проверка выигрыша или проигрыша после первого броска**:
        -   `if sum_dice == 7 or sum_dice == 11:`: Проверяет, равна ли сумма 7 или 11. Если да, то выводит сообщение "YOU WIN" и завершает игру, используя `return`.
        -   `elif sum_dice == 2 or sum_dice == 3 or sum_dice == 12:`: Проверяет, равна ли сумма 2, 3 или 12. Если да, то выводит сообщение "YOU LOSE" и завершает игру, используя `return`.
    -   **Установка "точки"**:
        - `point = sum_dice`: Если ни одно из условий выигрыша или проигрыша не выполнено, значение `sum_dice` сохраняется в переменной `point` в качестве "точки".
        - `print(f"Теперь ваша точка: {point}")`: Выводит значение "точки" на экран.
    -   **Основной игровой цикл `while True:`**:
        -   Бесконечный цикл, который продолжается до тех пор, пока не будет выигрыша или проигрыша.
        -   `sum_dice = roll_dice()`: Выполняет повторный бросок костей, вызов функции `roll_dice()`.
        -   `print(f"Выпало: {sum_dice}")`: Выводит результат повторного броска.
        -   `if sum_dice == point:`: Проверяет, равна ли новая сумма "точке". Если да, выводит сообщение "YOU WIN" и завершает игру с помощью `return`.
        -   `elif sum_dice == 7:`: Проверяет, равна ли новая сумма 7. Если да, выводит сообщение "YOU LOSE" и завершает игру с помощью `return`.
4.  **Запуск игры**:
    - `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_craps()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    - `play_craps()`: Вызывает функцию для начала игры.
"""
```