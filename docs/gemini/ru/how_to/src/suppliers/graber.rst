Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет базовый класс `Graber` для сбора данных с веб-страницы HTML поставщиков. Он использует веб-драйвер (класс `Driver`) для извлечения значений из заданных полей (например, название, описание, цена).  Локаторы для этих полей хранятся в файлах JSON в папке `locators` каждого поставщика. Класс `Graber` предоставляет набор асинхронных методов (`grab_page`, `name`, `price`, и т.д.), каждый из которых отвечает за извлечение конкретного поля.  Он использует декоратор `@close_pop_up` для закрытия всплывающих окон, которые могут появиться во время сбора данных.  Важно, что  данные по работе с локаторами и их обработкой можно настраивать, переопределяя методы класса в подклассах `Graber`.


Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**  Код импортирует нужные модули, включая `asyncio`, `Path`, `j_loads`, `j_loads_ns` и другие, необходимые для работы с файлами, асинхронными операциями и обработкой данных.

2. **Определение класса `Context`:** Этот класс хранит глобальные настройки, такие как объект веб-драйвера (`driver`) и локаторы (`locator`).


3. **Определение декоратора `close_pop_up`:**  Декоратор `close_pop_up` служит для автоматического закрытия всплывающих окон (если они появляются) перед выполнением функций сбора данных. Он использует метод `execute_locator` веб-драйвера для выполнения действий с локатором.

4. **Определение класса `Graber`:**  Этот класс является базовым для сбора данных.  Он принимает префикс поставщика и объект веб-драйвера в конструкторе.

5. **Инициализация переменных класса:** В конструкторе класса `Graber` инициализируются:
    - `supplier_prefix`: Идентификатор поставщика.
    - `locator`: Словарь с локаторами, считывается из файла `product.json` в соответствующей папке `locators`.
    - `driver`: Объект веб-драйвера для взаимодействия с браузером.
    - `fields`: Объект `ProductFields`, используется для хранения собранных данных.
    - `Context.driver` и `Context.supplier_prefix` -  эти значения устанавливаются в глобальном контексте для доступа в декораторе `close_pop_up`.

6. **Определение функции `error`:**  Обработчик ошибок для полей, который записывает сообщения об ошибках в журнал.

7. **Определение функции `set_field_value`:**  Универсальная функция для установки значений полей. Она обрабатывает возможные ошибки при получении данных через локаторы.

8. **Определение функции `grab_page`:**  Основная функция для сбора данных.  Она вызывает асинхронные методы (`fetch_all_data`) для сбора данных о товаре.

9. **Определение асинхронных методов для каждого поля:** Каждый метод (например, `name`, `price`) отвечает за извлечение определенного поля с помощью веб-драйвера, используя локаторы. Важно, что методы имеют параметры по умолчанию, позволяющие задать значения при вызове методов в подклассах.

10. **Обработка ошибок и проверки:** Код включает в себя обработку ошибок (`try...except`) и проверки на валидность полученных данных.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.suppliers import Graber
    from src.webdriver import Driver

    # Предполагается, что driver и supplier_prefix уже определены
    driver = Driver(...)
    supplier_prefix = 'my_supplier'

    grabber = Graber(supplier_prefix, driver)

    try:
        async def run_grabbing():
            product_data = await grabber.grab_page()
            pprint(product_data.name)  # Печать значения поля "name"
            pprint(product_data.price)  # Печать значения поля "price"
        asyncio.run(run_grabbing())
    except Exception as e:
        print(f"Ошибка: {e}")