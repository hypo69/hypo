Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Данный код содержит тесты для класса `TinyStory`, отвечающего за создание и продолжение историй в системе TinyTroupe. Функции `test_story_start`, `test_story_start_2` и `test_story_continuation` проверяют различные аспекты работы `TinyStory`.  Тесты `test_story_start` и `test_story_start_2` проверяют начальную генерацию истории с и без дополнительных требований. Тест `test_story_continuation`  проверяет продолжение истории, используя предварительно заданный начальный фрагмент. Проверка основана на том, может ли большая языковая модель (LLM) подтвердить, что сгенерированные фрагменты являются правдоподобными частями одной истории.

Шаги выполнения
-------------------------
1. **Импортирует необходимые модули**:  Код импортирует нужные библиотеки, включая `pytest`, `logging`, `tinytroupe` и другие, необходимые для работы с системой TinyTroupe.

2. **Инициализирует окружение**:  Функции `test_story_start`, `test_story_start_2`, и `test_story_continuation` используют  `focus_group_world` для создания окружения, загружая данные о персонажах и социальные сети.

3. **Создаёт экземпляр `TinyStory`**: В каждой функции создается экземпляр класса `TinyStory`, используя подготовленное окружение.

4. **Вызывает метод `start_story`**: Функции `test_story_start` и `test_story_start_2` вызывают метод `start_story` для генерации начального фрагмента истории, возможно с различными требованиями.

5. **Выводит сгенерированный текст**:  Код выводит сгенерированный фрагмент истории на консоль.

6. **Выполняет проверку на правдоподобие**:  Код использует функцию `proposition_holds`, чтобы проверить, может ли LLM подтвердить, что сгенерированный фрагмент истории правдоподобен.

7. **Вызывает метод `continue_story`**: Функция `test_story_continuation` инициализирует историю, проходя через предварительно сгенерированный текст, и вызывает метод `continue_story` для генерации продолжения.

8. **Выполняет проверку на правдоподобие продолжения**:  Код использует функцию `proposition_holds` для проверки, являются ли начальный и сгенерированный фрагменты правдоподобными частями одной истории.

9. **Проверка утверждений (assert)**:  Проверяет, соответствуют ли сгенерированные фрагменты ожидаемым критериям.

Пример использования
-------------------------
.. code-block:: python

    import pytest
    from tinytroupe.story import TinyStory
    # ... (Другие импорты)
    # ... (Функции для создания мира и персонажей, например setup, focus_group_world)

    def test_story_start_example(setup, focus_group_world):
        world = focus_group_world
        story = TinyStory(world)
        start = story.start_story()
        print(start)
        # Здесь можно добавить проверку с помощью proposition_holds