Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Модуль `executor` предоставляет функции для взаимодействия с веб-элементами с помощью Selenium. Он обрабатывает различные типы локаторов (словари с конфигурацией), выполняет действия (нажатия, отправка сообщений, выполнение событий) и извлекает атрибуты веб-элементов.  Модуль поддерживает обработку ошибок и позволяет продолжать выполнение, даже если некоторые элементы не доступны или работают нестабильно.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Модуль импортирует `asyncio`, `re`, `sys`, `time` и другие необходимые библиотеки для работы с Selenium и вспомогательными функциями.

2. **Определение класса `ExecuteLocator`:**  Определяется класс `ExecuteLocator`, который хранит экземпляр драйвера Selenium и цепочки действий `ActionChains`.  Внутри класса определены функции для взаимодействия с веб-элементами, например `execute_locator`.

3. **Обработка локатора:** Функция `execute_locator` принимает данные локатора (словарь или `SimpleNamespace`) и параметры (таймаут, тип ожидаемого события, сообщение, скорость набора текста).  Внутри функции:
   - Локатор преобразуется в `SimpleNamespace` если передан как словарь.
   - Вызывается асинхронная функция `_parse_locator` для обработки локатора.

4. **Парсинг и обработка локатора (`_parse_locator`):**
   - Проверяется, что локатор содержит необходимые данные (событие, атрибут, обязательность).
   - Если нет необходимых данных, возвращает `None`.
   - Обрабатываются ошибки при получении данных, логируя их в случае необходимости.
   - Выполняются действия, указанные в локаторе:
     - Если указано событие (например, "click"), выполняется функция `execute_event`.
     - Если указан атрибут, извлекается значение атрибута с помощью `get_attribute_by_locator`.
     - Если не указано событие или атрибут, извлекается веб-элемент с помощью `get_webelement_by_locator`.

5. **Извлечение веб-элемента (`get_webelement_by_locator`):**
   - Ищет веб-элемент, используя указанный локатор и таймаут.
   - Обрабатывает список веб-элементов (если локатор настроен для выбора первого, последнего, всех или по индексу).
   - Возвращает найденный веб-элемент или список веб-элементов.
   - Обрабатывает возможные исключения (например, `NoSuchElementException`).

6. **Выполнение события (`execute_event`):**
   - Выполняет указанные события над веб-элементом: клик (`click`), паузу (`pause`), отправку сообщения (`upload_media`, `type`), очистку (`clear`).
   - Обрабатывает исключения, связанные с выполнением событий, например, `ElementClickInterceptedException`.
   - Поддерживает асинхронное выполнение и настраиваемую скорость набора текста (`typing_speed`).

7. **Извлечение атрибута (`get_attribute_by_locator`):**
   - Извлекает значения атрибутов веб-элемента (или элементов) по заданным ключам.
   - Поддерживает извлечение нескольких атрибутов.
   - Обрабатывает ситуации, когда веб-элемент не найден или атрибут не найден.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from hypotez.src.webdriver.executor import ExecuteLocator

    async def main():
        executor = ExecuteLocator(driver=your_selenium_driver)  # Замените your_selenium_driver на ваш экземпляр драйвера
        locator_data = {"by": "XPATH", "selector": "//button[@id='submit']", "event": "click()"}
        result = await executor.execute_locator(locator=locator_data)
        print(f"Результат: {result}")

    if __name__ == "__main__":
        asyncio.run(main())