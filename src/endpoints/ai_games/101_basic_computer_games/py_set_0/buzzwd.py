"""
BUZZWD:
=================
Сложность: 2
-----------------
Игра "Buzzword" генерирует случайное 4-х буквенное слово и предлагает игроку его отгадать. После каждой попытки игрока, ему сообщается, сколько букв угадано на правильном месте (buzz) и сколько букв угадано, но не на правильном месте (word).

Правила игры:
1. Компьютер генерирует случайное 4-х буквенное слово из букв A-Z.
2. Игрок вводит свой вариант 4-х буквенного слова.
3. Компьютер сравнивает введенное слово с загаданным и сообщает количество "buzz" (букв на своих местах) и "word" (букв, присутствующих в слове, но не на своих местах).
4. Игра продолжается до тех пор, пока игрок не угадает слово полностью, т.е. получит 4 "buzz".

-----------------
Алгоритм:
1. Инициализация: Задать счетчик попыток в ноль.
2. Генерация секретного слова: Генерировать случайное 4-х буквенное слово.
3. Цикл игры:
  a. Запросить у игрока ввод слова.
  b. Сравнение слов:
    i. Инициализировать счетчики buzz и word в ноль.
    ii. Пройти по каждой букве и сравнить с загаданным словом:
       - Если буква совпадает и находится на той же позиции, увеличить счетчик buzz.
       - Если буква совпадает, но не на той же позиции, увеличить счетчик word.
   c. Сообщить игроку количество buzz и word.
  d. Увеличить счетчик попыток на 1.
  e. Проверить условие победы: Если buzz равен 4, то игра закончена. Иначе - вернуться к шагу a.
4. Вывод сообщения о победе и количестве попыток.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> Initialize(Инициализация: attempts=0);
    Initialize --> GenerateSecretWord(Генерация секретного слова);
    GenerateSecretWord --> GameLoopStart(Начало цикла игры);
    GameLoopStart --> InputWord(Ввод слова игроком);
    InputWord --> CompareWords(Сравнение слов);
    CompareWords --> OutputResult(Вывод buzz и word);
    OutputResult --> IncrementAttempts(Увеличение счетчика попыток);
    IncrementAttempts --> CheckWinCondition(Проверка условия победы: buzz == 4);
    CheckWinCondition -- Да -->  OutputWinMessage(Вывод сообщения о победе и количества попыток);
    CheckWinCondition -- Нет --> GameLoopStart;
    OutputWinMessage --> End(Конец);
```
"""
import random

def generate_secret_word():
    """Генерирует случайное 4-буквенное слово из заглавных букв алфавита."""
    return "".join(random.choice("ABCDEFGHIJKLMNOPQRSTUVWXYZ") for _ in range(4))

def compare_words(secret_word, guess_word):
    """Сравнивает два слова и возвращает количество "buzz" и "word".
    
    Args:
        secret_word: Загаданное слово.
        guess_word: Слово, введенное игроком.
        
    Returns:
        Кортеж (buzz, word) - количество букв на своем месте и букв не на своем месте.
    """
    buzz_count = 0
    word_count = 0
    
    # Создаем списки для работы с буквами
    secret_list = list(secret_word)
    guess_list = list(guess_word)
    
    # Считаем buzz
    for i in range(4):
        if secret_list[i] == guess_list[i]:
            buzz_count += 1
            # Обнуляем элементы, чтобы не считать их дважды
            secret_list[i] = None
            guess_list[i] = None

    # Считаем word
    for i in range(4):
        if guess_list[i] is not None:
             for j in range(4):
                if secret_list[j] is not None and guess_list[i] == secret_list[j]:
                    word_count += 1
                    secret_list[j] = None #Обнуляем элемент чтобы не считать его дважды
                    break
    return buzz_count, word_count


def play_buzzword():
    """Запускает игру Buzzword."""
    attempts = 0 # Счетчик попыток
    secret_word = generate_secret_word() #Генерируем случайное слово
    print("Добро пожаловать в игру Buzzword!")
    print("Я загадал слово из 4 букв. Попробуйте его отгадать.")

    while True:
      guess_word = input("Ваш вариант: ").upper() #запрашиваем ввод от пользователя
      if len(guess_word) != 4 or not guess_word.isalpha(): # Проверяем ввод пользователя. Длинна должна быть 4, только буквы
          print("Пожалуйста, введите слово из 4 букв.")
          continue
        
      attempts += 1 # увеличиваем счетчик попыток
      buzz_count, word_count = compare_words(secret_word, guess_word) # сравниваем слова
      print(f"Buzz: {buzz_count}, Word: {word_count}") # Выводим количество угаданных букв на своих местах и не на своих местах.

      if buzz_count == 4:
        print(f"Поздравляю! Вы угадали слово '{secret_word}' за {attempts} попыток.")
        break

# Запускаем игру
if __name__ == "__main__":
    play_buzzword()
"""
Пояснения:
1. `generate_secret_word()`:
   - Эта функция генерирует случайное 4-буквенное слово, используя заглавные буквы английского алфавита.
   - Она использует `random.choice()` для случайного выбора буквы и `"".join()` для объединения выбранных букв в строку.
   - Функция не принимает аргументов и возвращает сгенерированное слово.

2. `compare_words(secret_word, guess_word)`:
   - Эта функция сравнивает загаданное слово (`secret_word`) с введенным словом (`guess_word`) и определяет количество "buzz" и "word".
   - `buzz_count` подсчитывает количество букв, угаданных на правильном месте.
   - `word_count` подсчитывает количество букв, которые есть в загаданном слове, но не на правильном месте.
   - Функция принимает два аргумента: загаданное слово и слово игрока.
   - Функция возвращает кортеж из двух значений: количество "buzz" и количество "word".

3. `play_buzzword()`:
   - Эта функция управляет игровым процессом.
   - Она инициализирует счетчик попыток `attempts` в 0 и вызывает `generate_secret_word()` для генерации секретного слова.
   - Она выводит приветственное сообщение.
   - Затем она входит в бесконечный цикл `while True`, который продолжается до тех пор, пока игрок не угадает слово.
   - Внутри цикла:
     - Запрашивается ввод от пользователя `input("Ваш вариант: ").upper()`, и он преобразуется в верхний регистр, чтобы сравнение было регистронезависимым.
     - Проверяется, что введенное слово имеет длину 4 и состоит только из букв, иначе выводится сообщение об ошибке.
     - Увеличивается счетчик попыток.
     - вызывается функция `compare_words()` для получения количества `buzz` и `word`.
     - Выводятся результаты сравнения.
     - Проверяется условие победы: если количество buzz равно 4, выводится сообщение о победе и игра завершается с помощью `break`.

4. `if __name__ == "__main__":`:
   - Этот блок кода гарантирует, что игра начнется только при запуске этого скрипта, а не при его импорте как модуля.
   - Внутри этого блока вызывается функция `play_buzzword()` для запуска игры.

5. Комментарии:
   - Весь код тщательно прокомментирован на русском языке, что делает его понятным для новичков.
   - Описаны назначение каждой функции, смысл переменных и логика работы программы.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```