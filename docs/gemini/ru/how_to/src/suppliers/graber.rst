Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет базовый класс `Graber` для сбора данных с веб-страниц поставщиков.  Класс использует веб-драйвер (из класса `Driver`) для извлечения данных из HTML, используя локаторы, хранящиеся в файлах JSON в директории `locators`. Он предоставляет набор асинхронных методов (`async def`) для извлечения конкретных полей данных (например, название, описание, цена и т.д.) из веб-страницы. Класс `Graber` обрабатывает возможные ошибки во время извлечения данных и записывает полученные значения в соответствующие поля объекта `ProductFields`.  Важная функция - `close_pop_up()`, которая служит декоратором для закрытия всплывающих окон, которые могут помешать процессу извлечения данных.

Шаги выполнения
-------------------------
1. **Инициализация класса:** Создайте экземпляр класса `Graber`, передавая ему префикс поставщика и экземпляр класса `Driver`.  Это загружает локаторы из файла JSON.
2. **Вызов методов для извлечения данных:** Вызовите асинхронные методы (например, `grab_page`, `name`, `price`) для сбора данных из веб-страницы.  Методы `fetch_all_data`  использует передачу аргументов через `kwargs` (словарь), чтобы определить какие поля нужно извлечь. 
3. **Обработка ошибок:** Класс содержит обработку ошибок (`error`), чтобы обрабатывать ситуации, когда не удалось получить данные из локатора.
4. **Получение данных:** Методы класса  `Graber` получают данные с помощью `await self.d.execute_locator()`. Это асинхронный вызов, который ожидает результата из веб-драйвера, соответствующего локатору (хранимые в `self.locator`)
5. **Установка значений полей:**  Извлеченные данные устанавливаются в соответствующие поля объекта `ProductFields`.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.suppliers import Graber
    from src.webdriver import Driver

    # Предположим, что `driver` - уже инициализированный экземпляр Driver
    driver = Driver()
    suppler_prefix = "example_supplier"

    async def main():
        graber = Graber(suppler_prefix, driver)
        try:
            product_data = await graber.grab_page(id_product="123")
            pprint.pprint(product_data.to_dict())  # Выводим данные
        except Exception as e:
            print(f"Ошибка: {e}")

    asyncio.run(main())