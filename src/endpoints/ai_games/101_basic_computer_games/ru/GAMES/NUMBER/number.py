"""
ACE:
=================
Сложность: 7
-----------------
Игра "ACE" представляет собой симуляцию игры в кости, где игрок пытается набрать определенное количество очков (цель), бросая кости. Игрок может либо продолжать бросать кости, либо остановить игру и зафиксировать набранные очки. Если при броске выпадает 1, то очки обнуляются, и игра заканчивается. Цель игры - набрать как можно больше очков, не проиграв из-за выпадения 1.

Правила игры:
1. Цель игры - набрать как можно больше очков, не выкинув 1.
2. Игрок начинает с 0 очков.
3. На каждом ходу игрок бросает кость (случайное число от 1 до 6).
4. Если выпадает 1, очки сбрасываются в 0, и игра заканчивается.
5. Если выпало любое другое число (от 2 до 6), оно добавляется к текущим очкам.
6. После каждого броска игрок может решить, бросать ли кость еще раз или остановиться и сохранить текущие очки.
7. Игра продолжается, пока игрок не решит остановиться или пока не выпадет 1.

-----------------
Алгоритм:
1. Установить общее количество очков в 0.
2. Начать цикл игры:
    2.1 Запросить у игрока, хочет ли он бросить кость (Y/N).
    2.2 Если ответ "N", перейти к шагу 6.
    2.3 Сгенерировать случайное число от 1 до 6 (результат броска кости).
    2.4 Если выпало 1, обнулить общее количество очков и перейти к шагу 5.
    2.5 Если выпало число от 2 до 6, добавить его к общему количеству очков.
3. Перейти к шагу 2.
4. Вывести общее количество очков.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeScore["<p align='left'>Инициализация переменных:
    <code><b>
    totalScore = 0
    </b></code></p>"]
    InitializeScore --> GameLoopStart{"Начало игрового цикла"}
    GameLoopStart --> AskToRoll{"Запрос у игрока: <b>Roll the dice? (Y/N)</b>"}
    AskToRoll -- "N" --> OutputScore["Вывод: <b>Total Score: {totalScore}</b>"]
    OutputScore --> End["Конец"]
    AskToRoll -- "Y" --> RollDice["<code><b>diceRoll = random(1, 6)</b></code>"]
    RollDice --> CheckDice{"Проверка: <code><b>diceRoll == 1?</b></code>"}
    CheckDice -- Да --> ResetScore["<code><b>totalScore = 0</b></code>"]
    ResetScore --> OutputLost["Вывод: <b>Sorry, you rolled a 1. Total Score: {totalScore}</b>"]
    OutputLost --> End
    CheckDice -- Нет --> AddScore["<code><b>totalScore = totalScore + diceRoll</b></code>"]
    AddScore --> OutputCurrentScore["Вывод: <b>Current Score: {totalScore}</b>"]
    OutputCurrentScore --> GameLoopStart

```
    
**Legenda**:
  Start - Начало игры.
  InitializeScore - Инициализация переменной totalScore (общее количество очков) в 0.
  GameLoopStart - Начало игрового цикла.
  AskToRoll - Запрос у игрока, хочет ли он бросить кость.
  OutputScore - Вывод общего количества очков после отказа от броска.
  End - Конец игры.
  RollDice - Генерация случайного числа от 1 до 6 (бросок кости).
  CheckDice - Проверка, выпала ли 1 на кости.
  ResetScore - Обнуление общего количества очков при выпадении 1.
  OutputLost - Вывод сообщения о проигрыше и обнуление очков при выпадении 1.
  AddScore - Добавление результата броска к общему количеству очков.
  OutputCurrentScore - Вывод текущего количества очков.
"""
import random

# Инициализация общего счета
totalScore = 0

# Игровой цикл
while True:
    # Запрос у игрока, хочет ли он бросить кость
    roll_again = input("Roll the dice? (Y/N): ").upper()
    
    if roll_again != "Y":
        # Если игрок не хочет бросать кость, выводим общий счет и заканчиваем игру
        print(f"Total Score: {totalScore}")
        break
    
    # Генерируем случайное число от 1 до 6 (бросок кости)
    diceRoll = random.randint(1, 6)
    
    # Проверяем, выпала ли 1
    if diceRoll == 1:
        # Если выпала 1, обнуляем счет и заканчиваем игру
        totalScore = 0
        print(f"Sorry, you rolled a 1. Total Score: {totalScore}")
        break
    else:
        # Если выпало число от 2 до 6, добавляем его к общему счету
        totalScore += diceRoll
        print(f"Current Score: {totalScore}")
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Инициализация переменной `totalScore`**:
    - `totalScore = 0`: Инициализирует переменную `totalScore` для хранения общего количества очков игрока, начиная с 0.
3.  **Основной цикл `while True`**:
    -   `while True:`: Создает бесконечный цикл, который продолжается, пока не будет явно прерван.
4.  **Запрос ввода от пользователя**:
    -  `roll_again = input("Roll the dice? (Y/N): ").upper()`: Выводит сообщение с вопросом, хочет ли игрок бросить кость, и ожидает ввода от пользователя. Ввод преобразуется в верхний регистр для упрощения проверки.
5.  **Проверка ответа пользователя**:
    -  `if roll_again != "Y":`: Проверяет, не равно ли введенное значение "Y". Если нет, это означает, что игрок не хочет бросать кость.
        -  `print(f"Total Score: {totalScore}")`: Выводит общее количество очков игрока.
        -  `break`: Выходит из бесконечного цикла, завершая игру.
6.  **Генерация случайного числа (бросок кости)**:
    -  `diceRoll = random.randint(1, 6)`: Генерирует случайное целое число в диапазоне от 1 до 6, имитируя бросок шестигранного кубика.
7. **Проверка результата броска**:
    - `if diceRoll == 1:`: Проверяет, равно ли выпавшее число 1.
        -  `totalScore = 0`: Обнуляет общее количество очков.
        -  `print(f"Sorry, you rolled a 1. Total Score: {totalScore}")`: Выводит сообщение о том, что игрок проиграл и обнуляет счет.
        -   `break`: Выходит из бесконечного цикла, завершая игру.
    - `else:`: Если выпавшее число не равно 1, выполняются следующие действия.
        -  `totalScore += diceRoll`: Добавляет выпавшее значение к общему количеству очков.
        -  `print(f"Current Score: {totalScore}")`: Выводит текущее общее количество очков.
"""
