Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет классы для взаимодействия с API OpenAI, включая кеширование запросов и поддержку нескольких типов API (OpenAI и Azure OpenAI Service). Он предоставляет инструменты для отправки сообщений, получения вложений и управления параметрами вызова модели.  Код также включает в себя функции для чтения конфигураций из файла `config.ini` и управления кешем.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**:  Код импортирует необходимые библиотеки, такие как `os`, `openai`, `time`, `json`, `pickle`, `logging`, `configparser`, `tiktoken`, `utils` и др., необходимые для работы с API OpenAI, конфигурацией, временем выполнения и кешированием.
2. **Чтение конфигурации**: Функция `utils.read_config_file()` загружает настройки из файла `config.ini`, которые используются для определения параметров модели, таймаутов и других настроек.
3. **Определение `default` параметров**: Создаются переменные `default`, которые содержат значения параметров по умолчанию для вызовов моделей OpenAI (модель, количество токенов, температура и др.). Значения из файла конфигурации переопределяют значения по умолчанию.
4. **Класс `LLMCall`**: Определяет класс для представления вызова модели, содержащий системную и пользовательскую шаблоны, параметры модели и результат.  Метод `call()` выполняет вызов модели с указанными параметрами и возвращает результат.
5. **Класс `OpenAIClient`**:  Класс для взаимодействия с API OpenAI. Метод `__init__` инициализирует кеширование. Метод `send_message` отправляет сообщение в API OpenAI с различными параметрами (модель, температура, количество токенов и др.) и возвращает результат, используя экспоненциальный бэк-офф для обработки ошибок.
6. **Регистрация и выбор клиента**: Функции `register_client()` и `client()` регистрируют клиентов для разных API (OpenAI, Azure), позволяя переключаться между ними в зависимости от настроек конфигурации.
7. **Дополнительные функции**:  Код включает функции `force_api_type`, `force_api_cache`, `force_default_value` для переопределения параметров конфигурации.
8. **Методы `_count_tokens`, `_save_cache`, `_load_cache`, `get_embedding`**: Реализуют подсчёт токенов, сохранение и загрузку кеша, а также получение вложения.

Пример использования
-------------------------
.. code-block:: python

    import os
    from tinytroupe import openai_utils
    
    # Установите OPENAI_API_KEY и другие параметры в config.ini
    
    # Создайте экземпляр OpenAIClient
    client = openai_utils.OpenAIClient()
    
    # Сообщение для OpenAI
    messages = [
        {"role": "user", "content": "Привет!"}
    ]
    
    # Вызов модели
    response = client.send_message(messages, max_tokens=50)
    
    if response:
        print(response)
    else:
        print("Ошибка при отправке сообщения.")