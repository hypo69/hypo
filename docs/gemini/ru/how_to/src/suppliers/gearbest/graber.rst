Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber` для извлечения данных о товарах с сайта gearbest.com.  Класс наследуется от базового класса `Grbr` и предоставляет функции для извлечения различных полей товара.  Он использует вебдрайвер для взаимодействия со страницей товара и  использует асинхронное программирование. Код содержит обработку возможных ошибок при работе с вебдрайвером.  В классе есть декоратор `close_pop_up` (хотя он пока закомментирован), который может быть использован для закрытия всплывающих окон перед извлечением данных.  Основная логика извлечения данных находится в методе `grab_page`.

Шаги выполнения
-------------------------
1. **Инициализация класса:** Создается экземпляр класса `Graber`, передавая ему экземпляр вебдрайвера `Driver`.
2. **Установка глобальных настроек:** Устанавливаются глобальные настройки через переменную `Context`.
3. **Запуск асинхронной функции `grab_page`:**  Функция `grab_page` извлекает данные о товаре.  Внутри неё асинхронно вызываются функции для извлечения отдельных полей данных о товаре (`id_product`, `name`, `specification`, и др.).  Эти функции  условно извлекают данные из вебдрайвера.
4. **Обработка данных:** Каждая функция для извлечения поля данных записывает результаты в `self.fields`.
5. **Возврат данных:**  Функция `grab_page` возвращает `ProductFields` с извлечёнными данными.


Пример использования
-------------------------
.. code-block:: python

    from src.suppliers.gearbest.graber import Graber
    from src.webdriver import Driver

    # Предполагается, что у вас есть уже инициализированный Driver
    driver = Driver()
    
    async def main():
        graber = Graber(driver)
        try:
            fields = await graber.grab_page(driver, id_product="12345")
            print(fields.name) # Пример вывода значения поля 'name'
        except Exception as e:
            print(f"Произошла ошибка: {e}")
        finally:
            await driver.close()


    if __name__ == "__main__":
        asyncio.run(main())