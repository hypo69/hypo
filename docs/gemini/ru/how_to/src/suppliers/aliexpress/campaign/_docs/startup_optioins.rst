Как использовать скрипт prepare_campaigns.py
========================================================================================

Описание
-------------------------
Этот скрипт предназначен для подготовки рекламных кампаний на AliExpress. Он создаёт и обновляет конфигурацию кампании, включая название, язык, валюту и категории товаров. Скрипт собирает данные о продуктах и создаёт рекламные материалы. В итоге скрипт сохраняет необходимые файлы, позволяя опубликовать кампанию. Он обрабатывает кампании по категориям и может обновлять категории при необходимости.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Скрипт импортирует необходимые модули: `asyncio`, `pathlib`, `typing`, `SimpleNamespace`, а также модули для работы с файловой системой, JSON и логгированием.

2. **Определение пути к каталогу кампаний**: Устанавливается переменная `campaigns_directory`, содержащая путь к каталогу, где хранятся данные о кампаниях.

3. **Функция `update_category`**: Обновляет категорию в файле JSON. Принимает путь к файлу и объект категории (`SimpleNamespace`). Читает данные из файла JSON, обновляет поле `category` объектом, преобразованным в словарь, записывает обновлённые данные в файл и возвращает `True` в случае успеха, `False` в противном случае. Обрабатывает возможные исключения во время работы с файлом.

4. **Функция `process_campaign_category`**: Обрабатывает одну категорию для конкретной кампании. Принимает имя кампании, категорию, язык, валюту и флаг `force`. Создаёт объект `AliPromoCampaign`, используя переданные параметры. Обновляет JSON-файл с помощью функции `update_category`. Возвращает `True`, если категория успешно обработана, и `False` в случае ошибки.

5. **Функция `process_campaign`**: Обрабатывает всю кампанию. Принимает имя кампании, список категорий (по умолчанию все категории из каталога), язык, валюту и флаг `force`. Получает список категорий, если он не указан в аргументах. Итерируется по каждой категории, вызывая `process_campaign_category` для каждой категории. Собирает результаты обработки в список и возвращает его.  Обрабатывает различные типы входных данных для `categories`.

6. **Функция `main`**: Асинхронная функция для обработки кампании. Принимает те же параметры, что и `process_campaign`, но работает в асинхронном режиме. Использует `asyncio.gather`, чтобы параллельно обрабатывать категории.

7. **Обработка командной строки**:  Скрипт использует `argparse` для обработки аргументов командной строки (`campaign_name`, `categories`, `language`, `currency`, `force`).

8. **Запуск цикла событий asyncio**: Запускает главный цикл событий asyncio, чтобы выполнять асинхронные операции.

9. **Возвращаемое значение**: Функция `process_campaign` возвращает список кортежей вида `(category_name, result)`, где `result` – `True` если категория обработана успешно, `False` иначе.


Пример использования
-------------------------
.. code-block:: bash

    python src/suppliers/aliexpress/campaigns/prepare_campaigns.py summer_sale -c electronics -l EN -cu USD -f

Этот пример запускает скрипт для подготовки кампании "summer_sale", используя категории "electronics", язык "EN" и валюту "USD". Флаг `-f` означает, что категории будут обновлены, даже если они уже существуют.