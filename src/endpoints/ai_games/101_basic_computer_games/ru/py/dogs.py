
"""
DOGS:
=================
Сложность: 4
-----------------
Игра "Дрессировка собак" - это простая текстовая игра, где игрок пытается "научить" собаку выполнять команды, вводя их на угад. Собака может выполнять три команды: "СИДЕТЬ", "ЛЕЖАТЬ" и "СТОЯТЬ".
Игра завершается после первой правильно угаданной команды.

Правила игры:
1. Компьютер выбирает случайную команду из списка: "СИДЕТЬ", "ЛЕЖАТЬ" и "СТОЯТЬ".
2. Игрок вводит команды, пока не угадает загаданную команду.
3. После каждой попытки компьютер сообщает, угадана команда или нет.
4. Игра заканчивается при первой угаданной команде.
-----------------
Алгоритм:
1. Выбрать случайную команду из списка ("СИДЕТЬ", "ЛЕЖАТЬ", "СТОЯТЬ") и сохранить ее как целевую команду.
2. Запросить ввод команды у пользователя.
3. Сравнить введенную команду с целевой командой.
4. Если команды совпадают:
   4.1 Вывести сообщение "МОЛОДЕЦ!"
   4.2 Завершить игру.
5. Если команды не совпадают:
   5.1 Вернуться к шагу 2.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeCommands["<p align='left'>Инициализация списка команд:
    <code><b>
    commands = ['СИДЕТЬ', 'ЛЕЖАТЬ', 'СТОЯТЬ']
    </b></code></p>"]
    InitializeCommands --> ChooseRandomCommand["<p align='left'>Выбор случайной команды:
    <code><b>
    targetCommand = random.choice(commands)
    </b></code></p>"]
    ChooseRandomCommand --> InputCommand["Ввод команды пользователем: <code><b>userCommand</b></code>"]
    InputCommand --> CheckCommand{"Проверка: <code><b>userCommand == targetCommand?</b></code>"}
    CheckCommand -- Да --> OutputCorrect["Вывод сообщения: <b>МОЛОДЕЦ!</b>"]
    OutputCorrect --> End["Конец"]
    CheckCommand -- Нет --> InputCommand
```

Legenda:
    Start - Начало программы.
    InitializeCommands - Инициализация списка команд: `commands`  список, содержащий три команды: "СИДЕТЬ", "ЛЕЖАТЬ" и "СТОЯТЬ".
    ChooseRandomCommand - Выбор случайной команды из списка `commands` и присваивание ее переменной `targetCommand`.
    InputCommand - Запрос у пользователя ввода команды и сохранение ее в переменной `userCommand`.
    CheckCommand - Проверка, равна ли введенная команда `userCommand` загаданной команде `targetCommand`.
    OutputCorrect - Вывод сообщения "МОЛОДЕЦ!", если команды совпадают.
    End - Конец программы.
"""
import random

# Список возможных команд
commands = ["СИДЕТЬ", "ЛЕЖАТЬ", "СТОЯТЬ"]
# Выбор случайной команды из списка
targetCommand = random.choice(commands)

# Игровой цикл, пока пользователь не угадает команду
while True:
    # Запрос команды у пользователя
    userCommand = input("Введите команду для собаки (СИДЕТЬ, ЛЕЖАТЬ, СТОЯТЬ): ").upper()
    
    # Проверка, угадана ли команда
    if userCommand == targetCommand:
        print("МОЛОДЕЦ!")
        break  # Завершение игры
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайной команды.
2. **Инициализация списка команд**:
    - `commands = ["СИДЕТЬ", "ЛЕЖАТЬ", "СТОЯТЬ"]`: Создается список возможных команд, которые может выполнить собака.
3. **Выбор случайной команды**:
    - `targetCommand = random.choice(commands)`: Случайным образом выбирается одна из команд из списка и сохраняется в переменной `targetCommand`. Это команда, которую должен угадать пользователь.
4. **Игровой цикл `while True:`**:
    - Бесконечный цикл, продолжающийся, пока пользователь не угадает правильную команду.
5. **Запрос команды у пользователя**:
    - `userCommand = input("Введите команду для собаки (СИДЕТЬ, ЛЕЖАТЬ, СТОЯТЬ): ").upper()`: Выводит сообщение с просьбой ввести команду. Функция `input()` получает ввод от пользователя, а метод `.upper()` переводит введенную строку в верхний регистр, чтобы сравнение было регистронезависимым.
6.  **Проверка команды**:
    - `if userCommand == targetCommand:`: Сравнивает введенную пользователем команду с загаданной командой.
    - `print("МОЛОДЕЦ!")`: Если команды совпадают, выводится сообщение о правильном угадывании команды.
    - `break`: Завершает цикл и игру.
"""
```