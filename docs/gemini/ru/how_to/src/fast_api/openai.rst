Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет собой FastAPI приложение, взаимодействующее с моделью OpenAI. Он содержит API-эндпоинты для запросов к модели и её обучения на предоставленных данных.  Модуль управляет обработкой пользовательских запросов и возвращает ответы модели OpenAI.  Также код отвечает за отображение начальной HTML-страницы. Он использует middleware для обработки кросс-доменных запросов и устанавливает полные пути к статическим файлам.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует необходимые библиотеки, включая `FastAPI`, `BaseModel`, `CORSMiddleware`, `StaticFiles`, `HTMLResponse`,  `OpenAIModel`,  собственные классы логгирования (`logger`) и обработки данных (`j_loads`), а также другие модули.

2. **Настройка FastAPI приложения:**
   - Создается экземпляр приложения `app` типа `FastAPI`.
   - Настраивается обработчик кросс-доменных запросов `CORSMiddleware` с разрешением запросов с любых источников, всех HTTP методов и всех заголовков.
   - Подключается статическая директория `static` с HTML-файлами для отображения веб-интерфейса.

3. **Определение модели OpenAI:** Создается экземпляр класса `OpenAIModel`.

4. **Определение модели данных `AskRequest`:** Определяется модель данных `AskRequest`, которая описывает структуру запроса к модели (`message`, `system_instruction`).

5. **Обработка начального запроса `/`:**
    - Функция `root` отвечает за отображение `index.html` при запросе на корневой путь.
    - Обрабатывает потенциальные ошибки при чтении файла и возвращает соответствующий HTTP код (500).

6. **Обработка запроса `/ask`:**
   - Функция `ask_model` обрабатывает POST-запросы на `/ask`.
   - Получает данные запроса (`request.message`, `request.system_instruction`).
   - Вызывает метод `model.ask()` для получения ответа модели.
   - Возвращает ответ в формате JSON.
   - Обрабатывает потенциальные ошибки во время выполнения и возвращает HTTP код 500 с подробным сообщением об ошибке.

7. **Запуск приложения:**
    - Код запускает приложение `uvicorn` с указанием хоста `127.0.0.1` и порта `8000`.


Пример использования
-------------------------
.. code-block:: python

    import requests
    import json

    # Запрос к API
    url = "http://127.0.0.1:8000/ask"
    data = {
        "message": "Привет, как дела?",
        "system_instruction": "Ответь кратко."
    }

    headers = {'Content-Type': 'application/json'}
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data))
        response.raise_for_status()  # Поднимает исключение для ошибок
        result = response.json()
        print(result)
    except requests.exceptions.RequestException as e:
        print(f"Ошибка запроса: {e}")