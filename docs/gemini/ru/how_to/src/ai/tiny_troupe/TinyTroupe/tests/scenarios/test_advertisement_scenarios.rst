Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит тесты для сценариев использования TinyTroupe, библиотеки для моделирования социальных взаимодействий.  В частности, он тестирует сценарии оценки рекламных объявлений (test_ad_evaluation_scenario), создание рекламных кампаний (test_ad_creation_scenario) и профилирование потребителей (test_consumer_profiling_scenario).  Код взаимодействует с объектами, такими как `TinyPerson`, `TinyWorld`, `TinySocialNetwork` и `ResultsExtractor`, для моделирования и оценки поведения агентов в заданных ситуациях.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**: Код импортирует модули `pytest`, `logging`, `sys`, `tinytroupe`, классы для агентов, окружения, фабрики, извлечения результатов и другие необходимые компоненты TinyTroupe.
2. **Определение тестовых функций**:  Определяются функции `test_ad_evaluation_scenario`, `test_ad_creation_scenario` и `test_consumer_profiling_scenario`. Каждая функция представляет собой тест для конкретного сценария.
3. **Установка контекста (ситуации):** Внутри каждой тестовой функции задается контекст или ситуация, в которой будет происходить взаимодействие агентов. Например, в `test_ad_evaluation_scenario` задается запрос пользователя ("europe travel package") и описания рекламных объявлений.
4. **Создание агентов**:  Создаются агенты (`TinyPerson`) с определёнными характеристиками (например, `create_oscar_the_architect`, `create_lisa_the_data_scientist`) и устанавливаются в заданный контекст.
5. **Взаимодействие агентов**:  Агенты взаимодействуют с предоставленной информацией (рекламными объявлениями) и вырабатывают собственное мнение.  В `test_ad_evaluation_scenario` агенты оценивают рекламные объявления и выбирают лучшее. В `test_ad_creation_scenario` агенты обсуждают рекламную стратегию.  В `test_consumer_profiling_scenario` агенты отвечают на вопросы об интересах и предпочтениях.
6. **Извлечение результатов**:  Результат взаимодействия агентов извлекается из объекта `ResultsExtractor` и хранится в переменных.
7. **Проверка результатов**: Проверяется корректность результата. Например, в `test_ad_evaluation_scenario` проверяется, что выбранное объявление действительно есть среди возможных, а также, что присутствуют необходимые поля (ID, заголовок, обоснование).
8. **Запись результатов**: Результаты сохраняются и обрабатываются.
9. **Контроль и фиксация результатов**: `control.checkpoint()` и `control.begin/end()` используются для управления состоянием и фиксации результатов экспериментов.  В `test_consumer_profiling_scenario` проверяется, что файл-чекпойнт был создан.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    from tinytroupe.examples import create_oscar_the_architect, create_lisa_the_data_scientist
    from testing_utils import *  #  Должен быть импортирован

    # Пример использования из test_ad_evaluation_scenario:
    travel_ad_1 = ... #  Текст рекламного объявления
    travel_ad_2 = ... #  Текст рекламного объявления
    # ... (остальные объявления)
    eval_request_msg = ... #  Текст запроса на оценку

    people = [create_oscar_the_architect(), create_lisa_the_data_scientist()]
    # ... (Далее код для взаимодействия агентов с рекламой и извлечения результатов)
    
    for person in people:
       # ... (код для взаимодействия агентов с eval_request_msg)
    
    choices = extractor.extract_results_from_agent(person, ...)
    print("Результат выбора агента:", choices)