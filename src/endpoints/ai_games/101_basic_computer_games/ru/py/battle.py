"""
BATTLE:
=================
Сложность: 7
-----------------
Игра "Морской бой" - это игра для двух игроков, где каждый игрок расставляет свои корабли на игровом поле и затем пытается "потопить" корабли противника, угадывая их местоположение. В данной версии игры, игрок сражается против компьютера.

Правила игры:
1. Игрок и компьютер имеют свои игровые поля 10x10 клеток.
2. Игрок расставляет на своем поле 5 кораблей, занимающих по 1 клетке каждый.
3. Компьютер случайным образом расставляет на своем поле 5 кораблей, занимающих по 1 клетке каждый.
4. Игроки по очереди делают ходы, указывая координаты клетки на поле противника.
5. Если игрок попадает в клетку, где находится корабль противника, то корабль считается "потопленным", и игрок делает еще один ход.
6. Игрок побеждает, если потопит все корабли противника.
7. Игра заканчивается, когда один из игроков потопит все корабли противника.
-----------------
Алгоритм:
1. Инициализировать игровое поле игрока и компьютера (10x10, заполненное нулями).
2. Разместить 5 кораблей на игровом поле игрока (запрашивая у пользователя координаты).
3. Разместить 5 кораблей на игровом поле компьютера случайным образом.
4. Начать цикл "пока не все корабли противника потоплены":
    4.1 Ход игрока:
        4.1.1 Запросить у игрока координаты для выстрела.
        4.1.2 Проверить, есть ли корабль на этих координатах на поле компьютера.
        4.1.3 Если корабль есть, пометить клетку как "потопленную" и вывести сообщение "HIT!".
        4.1.4 Иначе пометить клетку как "промах" и вывести сообщение "MISS!".
        4.1.5 Если все корабли противника потоплены, перейти к шагу 5.
        4.1.6 Если "попадание", повторить шаг 4.1.
    4.2 Ход компьютера (реализация отсутствует, компьютер пропускает ход, это позволяет играть только одному игроку):
        4.2.1 Случайно выбрать координаты на поле игрока.
        4.2.2 Проверить, есть ли корабль на этих координатах на поле игрока.
        4.2.3 Если корабль есть, пометить клетку как "потопленную".
        4.2.4 Иначе пометить клетку как "промах".
        4.2.5 Если все корабли игрока потоплены, перейти к шагу 6.
        4.2.6 Перейти к шагу 4.
5. Вывести сообщение "YOU WIN!".
6. Вывести сообщение "YOU LOSE!".
7. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBoards["Инициализация игровых полей 10x10 (игрока и компьютера)"]
    InitializeBoards --> PlacePlayerShips["Расстановка 5 кораблей игрока"]
    PlacePlayerShips --> PlaceComputerShips["Случайная расстановка 5 кораблей компьютера"]
    PlaceComputerShips --> GameLoopStart{"Начало цикла: пока не все корабли потоплены"}
    GameLoopStart -- Да --> PlayerTurn["Ход игрока"]
    PlayerTurn --> PlayerInput["Ввод координат выстрела"]
    PlayerInput --> CheckHit{"Проверка попадания в корабль компьютера"}
    CheckHit -- Да --> MarkHit["Пометить клетку как 'потоплена' и вывести 'HIT!'"]
    MarkHit --> CheckWin["Проверка: все корабли компьютера потоплены?"]
    CheckWin -- Да --> OutputWin["Вывод 'YOU WIN!'"]
    OutputWin --> End["Конец"]
     CheckWin -- Нет --> PlayerTurn
    CheckHit -- Нет --> MarkMiss["Пометить клетку как 'промах' и вывести 'MISS!'"]
    MarkMiss --> ComputerTurn["Ход компьютера"]
    ComputerTurn --> ComputerFire["Случайный выбор координат для выстрела"]
    ComputerFire --> CheckPlayerHit{"Проверка попадания в корабль игрока"}
    CheckPlayerHit -- Да --> MarkPlayerHit["Пометить клетку как 'потоплена' на поле игрока"]
    MarkPlayerHit --> CheckPlayerLose{"Проверка: все корабли игрока потоплены?"}
    CheckPlayerLose -- Да --> OutputLose["Вывод 'YOU LOSE!'"]
    OutputLose --> End
    CheckPlayerLose -- Нет --> GameLoopStart
    CheckPlayerHit -- Нет -->  MarkPlayerMiss["Пометить клетку как 'промах' на поле игрока"]
    MarkPlayerMiss --> GameLoopStart
     GameLoopStart -- Нет --> End
```

Legenda:
    Start - Начало программы.
    InitializeBoards - Инициализация игровых полей размером 10x10 для игрока и компьютера, заполненных нулями.
    PlacePlayerShips - Размещение 5 кораблей на игровом поле игрока путем запроса координат у пользователя.
    PlaceComputerShips - Случайное размещение 5 кораблей на игровом поле компьютера.
    GameLoopStart - Начало цикла игры, который продолжается, пока не будут потоплены все корабли одной из сторон.
    PlayerTurn - Ход игрока.
    PlayerInput - Запрос у пользователя координат для выстрела.
    CheckHit - Проверка, попал ли игрок в корабль компьютера.
    MarkHit - Пометка клетки на поле компьютера как "потоплена" и вывод сообщения "HIT!".
    CheckWin - Проверка, потопил ли игрок все корабли компьютера.
    OutputWin - Вывод сообщения "YOU WIN!" при победе игрока.
    End - Конец программы.
    MarkMiss - Пометка клетки на поле компьютера как "промах" и вывод сообщения "MISS!".
    ComputerTurn - Ход компьютера.
    ComputerFire - Случайный выбор координат для выстрела компьютером.
    CheckPlayerHit - Проверка, попал ли компьютер в корабль игрока.
    MarkPlayerHit - Пометка клетки на поле игрока как "потоплена".
    CheckPlayerLose - Проверка, потопил ли компьютер все корабли игрока.
    OutputLose - Вывод сообщения "YOU LOSE!" при поражении игрока.
    MarkPlayerMiss - Пометка клетки на поле игрока как "промах".
"""
import random

# Размеры игрового поля
BOARD_SIZE = 10

# Символы для отображения поля
EMPTY = 0
SHIP = 1
HIT = 2
MISS = 3


def create_board():
    """Создает и возвращает пустое игровое поле."""
    return [[EMPTY for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]


def print_board(board, owner="Игрок"):
    """Выводит игровое поле на экран.
    Args:
        board (list): Игровое поле.
        owner (str): Имя владельца поля.
    """
    print(f"\nПоле {owner}:")
    print("  ", end="")
    for i in range(BOARD_SIZE):
        print(f"{i} ", end="")
    print()
    for i, row in enumerate(board):
        print(f"{i} ", end="")
        for cell in row:
            if cell == EMPTY:
                print(". ", end="")  # Пустая клетка
            elif cell == SHIP:
                print("S ", end="")  # Корабль (только для отображения поля игрока)
            elif cell == HIT:
                print("X ", end="")  # Попадание
            elif cell == MISS:
                print("O ", end="")  # Промах
        print()


def place_ships(board, num_ships=5, owner="Игрок"):
    """Размещает корабли на игровом поле.

    Args:
        board (list): Игровое поле.
        num_ships (int): Количество кораблей.
    """
    ships_placed = 0
    while ships_placed < num_ships:
        if owner == "Игрок":
            while True:
                try:
                    x = int(input(f"Введите X координату для корабля {ships_placed + 1} (0-{BOARD_SIZE - 1}): "))
                    y = int(input(f"Введите Y координату для корабля {ships_placed + 1} (0-{BOARD_SIZE - 1}): "))
                    if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                        break
                    else:
                        print("Неверные координаты, введите заново")
                except ValueError:
                    print("Неверный ввод, введите целые числа")
        else:
             x = random.randint(0, BOARD_SIZE - 1)
             y = random.randint(0, BOARD_SIZE - 1)

        if board[y][x] == EMPTY:
            board[y][x] = SHIP
            ships_placed += 1
            if owner == "Игрок":
                 print_board(board, owner)
        else:
            if owner == "Игрок":
                 print("Это место уже занято, выберите другое.")
    print(f"Корабли {owner} расставлены!")


def player_turn(computer_board):
    """Осуществляет ход игрока.

    Args:
        computer_board (list): Игровое поле компьютера.

    Returns:
        bool: True, если был "потоплен" корабль.
    """
    while True:
        try:
            x = int(input(f"Введите X координату для выстрела (0-{BOARD_SIZE - 1}): "))
            y = int(input(f"Введите Y координату для выстрела (0-{BOARD_SIZE - 1}): "))
            if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE:
                break
            else:
                print("Неверные координаты, введите заново")
        except ValueError:
            print("Неверный ввод, введите целые числа")

    if computer_board[y][x] == SHIP:
        print("HIT!")
        computer_board[y][x] = HIT
        return True  # Попадание!
    else:
        print("MISS!")
        computer_board[y][x] = MISS
        return False  # Промах!


def computer_turn(player_board):
     """Осуществляет ход компьютера (реализован просто как выстрел в случайную ячейку).

     Args:
        player_board (list): Игровое поле игрока.

     Returns:
        bool: True, если был "потоплен" корабль.
    """
     while True:
        x = random.randint(0, BOARD_SIZE - 1)
        y = random.randint(0, BOARD_SIZE - 1)
        if player_board[y][x] != HIT and player_board[y][x] != MISS:
              break
     if player_board[y][x] == SHIP:
        print(f"Компьютер попал в {x} {y}")
        player_board[y][x] = HIT
        return True
     else:
        print(f"Компьютер промахнулся по {x} {y}")
        player_board[y][x] = MISS
        return False



def check_win(board):
    """Проверяет, все ли корабли на поле потоплены.

    Args:
        board (list): Игровое поле.

    Returns:
        bool: True, если все корабли потоплены.
    """
    for row in board:
        if SHIP in row:
            return False
    return True


def play_battle():
    """Основная функция игры "Морской бой"."""
    # 1. Инициализация игровых полей
    player_board = create_board()
    computer_board = create_board()

    # 2. Размещение кораблей
    place_ships(player_board, owner="Игрок")
    place_ships(computer_board, owner="Компьютер")

    # 3. Основной игровой цикл
    while True:
        # 4. Ход игрока
        print_board(computer_board, owner="Компьютер")
        while True: # Пока не промахнется
            if not player_turn(computer_board):
                break
            if check_win(computer_board):
                print("YOU WIN!")
                return

        # 5. Ход компьютера
        print_board(player_board, owner="Игрок")
        if computer_turn(player_board):
             if check_win(player_board):
                 print("YOU LOSE!")
                 return


# Запуск игры
if __name__ == "__main__":
    play_battle()
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел при размещении кораблей компьютером и для совершения выстрелов.

2.  **Константы**:
    -   `BOARD_SIZE = 10`: Определяет размер игрового поля (10x10 клеток).
    -   `EMPTY = 0`, `SHIP = 1`, `HIT = 2`, `MISS = 3`: Определяет константы для представления состояния клеток на игровом поле.

3.  **Функция `create_board()`**:
    -   Создает и возвращает пустое игровое поле, представляющее собой список списков, заполненный `EMPTY` (нулями).

4.  **Функция `print_board(board, owner="Игрок")`**:
    -   Выводит игровое поле на экран.
    -   Принимает аргумент `board` (игровое поле) и `owner` (имя владельца поля).
    -   Отображает поле с символами для пустых клеток (`.`), кораблей (`S`), попаданий (`X`), промахов (`O`).
    -   Поле компьютера отображается без символов S.

5.  **Функция `place_ships(board, num_ships=5, owner="Игрок")`**:
    -   Размещает корабли на игровом поле.
    -   Принимает аргументы `board` (игровое поле), `num_ships` (количество кораблей), `owner` имя владельца поля.
    -   Если owner == "Игрок", то запрашивает у пользователя координаты для размещения кораблей.
    -   Если owner == "Компьютер", то размещает корабли случайным образом.
    -   Проверяет, что выбранная клетка свободна перед размещением корабля.
    -  Выводит игровое поле игрока после расстановки корабля.

6.  **Функция `player_turn(computer_board)`**:
    -   Осуществляет ход игрока.
    -   Запрашивает у игрока координаты выстрела.
    -   Проверяет, есть ли корабль в выбранной клетке на поле компьютера.
    -   Помечает клетку как `HIT` (попадание) или `MISS` (промах).
    -   Возвращает `True`, если был "потоплен" корабль, `False` в противном случае.

7.  **Функция `computer_turn(player_board)`**:
    -  Реализует ход компьютера.
    -  Компьютер стреляет по случайным координатам игрока.
    -  Если корабль потоплен - вернет True, в ином случае False

8. **Функция `check_win(board)`**:
    -  Проверяет, все ли корабли противника потоплены.
    -  Принимает игровое поле в качестве аргумента.
    -  Проверяет, есть ли на поле неповрежденные корабли.
    - Возвращает True если кораблей нету, иначе - False

9. **Функция `play_battle()`**:
   -   Основная функция для управления игровым процессом.
   -   Создает игровое поле для игрока и компьютера.
   -   Вызывает функции `place_ships` для размещения кораблей.
   -   Запускает игровой цикл while, который продолжается до тех пор пока все корабли одного из игроков не будут потоплены.
   -   Вызывает `player_turn` и `computer_turn` по очереди.
   -   Проверяет победителя после каждого хода, вызывая `check_win()`.
   -   Выводит сообщение о победе или поражении.

10. **Запуск игры**:
    - `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_battle()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    - `play_battle()`: Вызывает функцию для начала игры.
"""
