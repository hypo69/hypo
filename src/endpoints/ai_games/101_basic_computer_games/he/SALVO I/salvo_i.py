"""
SALVO I:
=================
קושי: 5
-----------------
המשחק "סלבו" הוא משחק לניחוש מיקום של ספינות על לוח משחק דמיוני. המשחק משתמש בלוח בגודל 10x10, כאשר המשתמש מזין קואורדינטות של נקודות ירי על מנת לפגוע בספינה אחת הממוקמת באופן אקראי בלוח. המטרה היא לפגוע בספינה במספר המינימלי של ניסיונות.

חוקי המשחק:
1. המחשב ממקם ספינה אחת באורך של 3 תאים בלוח 10x10 באופן אקראי.
2. השחקן מזין קואורדינטות (שורות ועמודות) של נקודות ירי.
3. אם נקודת הירי פוגעת במיקום הספינה, המשחק מסתיים.
4. אם לא, המשחק ממשיך עד לפגיעה.
5. השחקן מקבל הודעה "פגיעה!" עם פגיעה בספינה.
6. השחקן מקבל הודעה "החטאה" עם החטאה בספינה.
7. המשחק מציג את מספר הניסיונות עד לפגיעה.
-----------------
אלגוריתם:
1. אתחל את מספר הניסיונות ל-0.
2. בחר באופן אקראי מיקום התחלתי לספינה (שורות ועמודות) כך שהספינה באורך 3 תאים לא תצא מגבולות הלוח.
3. בחר באופן אקראי כיוון אופקי או אנכי למיקום הספינה.
4. התחל לולאה "כל עוד הספינה לא נפגעה":
    4.1. הגדל את מספר הניסיונות ב-1.
    4.2. קבל מהשחקן קלט קואורדינטות (שורה ועמודה) של נקודת ירי.
    4.3. בדוק האם נקודת הירי פוגעת במיקום הספינה.
    4.4. אם כן, הצג הודעה "פגיעה!" וסיים את הלולאה.
    4.5. אם לא, הצג הודעה "החטאה!".
5. הצג הודעה: "פגעת בספינה ב-{מספר ניסיונות} ניסיונות".
6. סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeVariables["<p align='left'>אתחול משתנים:
    <code><b>
    numberOfGuesses = 0<br>
    shipStartRow = random(0,7)<br>
    shipStartCol = random(0,7)<br>
    direction = random(0,1) // 0=horizontal, 1=vertical
    </b></code></p>"]
    InitializeVariables --> LoopStart{"תחילת לולאה: כל עוד הספינה לא נפגעה"}
    LoopStart -- כן --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["קלט קואורדינטות מהמשתמש: <code><b>row, col</b></code>"]
    InputGuess --> CheckHit{"בדיקה: <code><b>האם פגיעה בספינה במיקום (row, col)?</b></code>"}
    CheckHit -- כן --> OutputHit["הצגת הודעה: <b>פגיעה!</b>"]
    OutputHit --> OutputWin["הצגת הודעה: <b>פגעת בספינה ב-{numberOfGuesses} ניסיונות</b>"]
    OutputWin --> End["סוף"]
    CheckHit -- לא --> OutputMiss["הצגת הודעה: <b>החטאה!</b>"]
    OutputMiss --> LoopStart
    LoopStart -- לא --> End
```

Legenda:
    Start - התחלת המשחק.
    InitializeVariables - אתחול משתנים: numberOfGuesses (מספר הניסיונות) מאותחל ל-0, shipStartRow (שורת התחלה של הספינה) ו- shipStartCol (עמודת התחלה של הספינה) מוגרלים בטווח מתאים, ו-direction (כיוון הספינה) מוגרל בין אופקי לאנכי.
    LoopStart - תחילת הלולאה, הממשיכה כל עוד הספינה לא נפגעה.
    IncreaseGuesses - הגדלת מונה הניסיונות ב-1.
    InputGuess - קלט קואורדינטות שורה ועמודה מהמשתמש.
    CheckHit - בדיקה האם נקודת הירי פוגעת בספינה.
    OutputHit - הצגת הודעה "פגיעה!" אם פגע בספינה.
    OutputWin - הצגת הודעה על ניצחון ומספר הניסיונות.
    End - סוף המשחק.
    OutputMiss - הצגת הודעה "החטאה!" אם לא פגע בספינה.
"""
import random

# אתחול מונה הניסיונות
numberOfGuesses = 0
# יצירת מיקום התחלתי אקראי לספינה (שורה ועמודה) כך שהספינה לא תצא מגבולות הלוח
shipStartRow = random.randint(0, 7)
shipStartCol = random.randint(0, 7)
# בחירת כיוון אקראי לספינה (0 - אופקי, 1 - אנכי)
direction = random.randint(0, 1)

# יצירת מיקומי הספינה בהתאם לכיוון
shipPositions = []
for i in range(3):
    if direction == 0:  # אופקי
        shipPositions.append((shipStartRow, shipStartCol + i))
    else:  # אנכי
        shipPositions.append((shipStartRow + i, shipStartCol))

# לולאת המשחק הראשית
while True:
    # הגדלת מונה הניסיונות
    numberOfGuesses += 1
    # בקשת קלט קואורדינטות מהמשתמש
    try:
        row = int(input("הזן שורה (0-9): "))
        col = int(input("הזן עמודה (0-9): "))
    except ValueError:
        print("אנא הזן מספרים שלמים.")
        continue

    # בדיקה האם הפגיעה פגעה בספינה
    if (row, col) in shipPositions:
        print("פגיעה!")
        print(f"פגעת בספינה ב-{numberOfGuesses} ניסיונות!")
        break  # סיום הלולאה אם הספינה נפגעה
    else:
        print("החטאה!") # הודעה שהירי החטיא את הספינה

"""
הסבר הקוד:
1.  **ייבוא המודול `random`**:
    - `import random`: ייבוא המודול `random`, המשמש ליצירת מספרים אקראיים.
2.  **אתחול משתנים**:
    - `numberOfGuesses = 0`: אתחול מונה הניסיונות ל-0.
    - `shipStartRow = random.randint(0, 7)`: בחירת שורת התחלה אקראית לספינה, בין 0 ל-7.
    - `shipStartCol = random.randint(0, 7)`: בחירת עמודת התחלה אקראית לספינה, בין 0 ל-7.
    - `direction = random.randint(0, 1)`: בחירת כיוון אקראי לספינה (0 - אופקי, 1 - אנכי).
3.  **יצירת מיקומי הספינה**:
    - `shipPositions = []`: יצירת רשימה ריקה לאחסון מיקומי הספינה.
    - לולאה `for i in range(3)`: יצירת שלושה מיקומים עבור ספינה באורך 3.
        - תנאי `if direction == 0`: אם הכיוון אופקי:
            - `shipPositions.append((shipStartRow, shipStartCol + i))`: הוספת מיקום לשורה הנוכחית ועמודה משתנה.
        - תנאי `else`: אם הכיוון אנכי:
            - `shipPositions.append((shipStartRow + i, shipStartCol))`: הוספת מיקום לשורה משתנה ועמודה קבועה.
4.  **לולאת המשחק `while True:`**:
    - לולאה אינסופית, הממשיכה עד שהמשתמש פוגע בספינה (הפקודה `break` תסיים את הלולאה).
    - `numberOfGuesses += 1`: הגדלת מונה הניסיונות ב-1 בכל סיבוב של הלולאה.
    - **קלט נתונים**:
        - `try...except ValueError`: בלוק try-except מטפל בשגיאות קלט אפשריות. אם המשתמש יזין משהו שאינו מספר שלם, יוצג הודעת שגיאה.
        - `row = int(input("הזן שורה (0-9): "))`: בקשת שורת ירי מהמשתמש והמרתה למספר שלם.
        - `col = int(input("הזן עמודה (0-9): "))`: בקשת עמודת ירי מהמשתמש והמרתה למספר שלם.
    - **בדיקה אם הפגיעה פגעה בספינה**:
        - `if (row, col) in shipPositions`: בדיקה האם הקואורדינטות שהוזנו נמצאות ברשימת מיקומי הספינה.
        - `print("פגיעה!")`: הצגת הודעה על פגיעה בספינה.
        - `print(f"פגעת בספינה ב-{numberOfGuesses} ניסיונות!")`: הצגת הודעה על ניצחון ומספר הניסיונות.
        - `break`: סיום הלולאה (והמשחק) אם הספינה נפגעה.
    - `else`: אם לא פגע בספינה:
        - `print("החטאה!")`: הצגת הודעה על החטאה.
"""
