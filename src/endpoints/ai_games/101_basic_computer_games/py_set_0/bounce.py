"""
<BOUNCE>:
=================
Сложность: 3
-----------------
Игра "BOUNCE" - это простая текстовая игра, где шарик перемещается по экрану и отскакивает от границ. Игрок наблюдает за движением шарика, пока не надоест. Игра заканчивается, когда игрок введет 0. 
Правила игры:
    1. Шарик начинает движение из левого верхнего угла экрана.
    2. Шарик движется по диагонали, изменяя координаты x и y.
    3. При достижении границ экрана (левой, правой, верхней или нижней) шарик отскакивает, меняя направление движения.
    4. Игрок может завершить игру в любой момент, введя 0.
-----------------
Алгоритм:
    1. Инициализировать начальные координаты шарика (x=10, y=10) и направление движения (dx=1, dy=1).
    2. Отобразить шарик на экране в текущих координатах.
    3. Запросить у пользователя ввод. Если ввод 0, завершить игру.
    4. Вычислить новые координаты шарика: x = x + dx, y = y + dy.
    5. Проверить, не достиг ли шарик границ экрана. Если достиг, изменить направление движения (dx = -dx или dy = -dy).
    6. Повторять шаги 2-5, пока игрок не введет 0.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Start] --> InitializeVariables
    InitializeVariables[Initialize: x=10, y=10, dx=1, dy=1] --> DisplayBall
    DisplayBall[Display Ball at (x, y)] --> GetInput
    GetInput[Get User Input] --> CheckInput
    CheckInput{Input == 0?}
    CheckInput -- Yes --> End[End]
    CheckInput -- No --> CalculateNewPosition
    CalculateNewPosition[Calculate: x = x + dx, y = y + dy] --> CheckBounds
    CheckBounds{x <= 0 or x >= 24 or y <= 0 or y >= 24?}
    CheckBounds -- Yes --> ChangeDirection
    ChangeDirection[Change Direction: dx = -dx or dy = -dy] --> DisplayBall
    CheckBounds -- No --> DisplayBall
```
"""
import os
import time

# Константы для размеров экрана
SCREEN_WIDTH = 25
SCREEN_HEIGHT = 25

def clear_screen():
    """Очищает экран терминала."""
    os.system('cls' if os.name == 'nt' else 'clear')

def display_screen(x, y):
    """
    Отображает экран с шариком в заданных координатах.

    Args:
        x (int): Координата X шарика.
        y (int): Координата Y шарика.
    """
    clear_screen()
    for row in range(SCREEN_HEIGHT):
        line = ""
        for col in range(SCREEN_WIDTH):
            if row == y and col == x:
                line += "O"  # Шарик
            else:
                line += "."  # Пустое пространство
        print(line)

# Инициализация начальных значений
ball_x = 10 # начальная координата x шарика
ball_y = 10  # начальная координата y шарика
ball_dx = 1  # направление движения по x (1 - вправо, -1 - влево)
ball_dy = 1  # направление движения по y (1 - вниз, -1 - вверх)

user_input = None  # переменная для хранения ввода пользователя
continue_game = True  # флаг для управления циклом игры

while continue_game:
    # Вывод экрана с шариком
    display_screen(ball_x, ball_y)

    # Запрос ввода пользователя
    user_input = input("Нажмите Enter для продолжения, 0 для выхода: ")

    # Проверка ввода пользователя
    if user_input == "0":
      continue_game = False # выходим из цикла игры если пользователь ввел 0
    else:
        # Обновление позиции шарика
        ball_x += ball_dx
        ball_y += ball_dy

        # Проверка границ экрана и изменение направления
        if ball_x <= 0 or ball_x >= SCREEN_WIDTH - 1:
           ball_dx = -ball_dx # меняем направление по оси X
        if ball_y <= 0 or ball_y >= SCREEN_HEIGHT - 1:
          ball_dy = -ball_dy # меняем направление по оси Y

    time.sleep(0.1) # задержка для визуализации движения шарика

print("Игра окончена.")


"""
Пояснения:

1. `import os`: Импортирует модуль `os` для очистки экрана консоли.
2. `import time`: Импортирует модуль `time` для задержки между кадрами.
3. `SCREEN_WIDTH` и `SCREEN_HEIGHT`: Константы для размеров экрана.
4. `clear_screen()`: Функция, которая очищает экран консоли.
5. `display_screen(x, y)`: Функция, которая отображает экран с шариком в координатах (x, y).
6. `ball_x`, `ball_y`: Переменные, хранящие текущие координаты шарика.
7. `ball_dx`, `ball_dy`: Переменные, хранящие направление движения шарика.
8. `user_input`: Переменная, хранящая ввод пользователя.
9. `continue_game`: Флаг, управляющий циклом игры.
10. Основной цикл игры (`while continue_game:`):
   - Вызывает `display_screen()` для отрисовки экрана.
   - Запрашивает ввод пользователя.
   - Если пользователь вводит "0", игра завершается.
   - Иначе обновляет координаты шарика.
   - Проверяет, не достиг ли шарик границ экрана. Если достиг, меняет направление движения.
   - Использует `time.sleep(0.1)` для создания задержки между кадрами.
11. В конце игры выводится сообщение "Игра окончена.".

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```