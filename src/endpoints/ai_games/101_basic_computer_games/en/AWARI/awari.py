"""
AWARI:
=================
Сложность: 6
-----------------
Игра "Авари" - это настольная игра, имитирующая традиционную игру Манкала, где два игрока по очереди перемещают "камни" (в данном случае, числа) из ячеек на доске, пытаясь захватить как можно больше камней в свои "амбары". Это упрощенная версия игры, где игрок играет против компьютера.

Правила игры:
1. Игровое поле состоит из 14 ячеек, пронумерованных от 0 до 13. Ячейки 6 и 13 - это "амбары" игроков.
2. В начале игры в каждой из 12 ячеек (0-5 и 7-12) находится по 4 камня.
3. Игрок (человек) начинает игру.
4. Выбирает ячейку со своими камнями (0-5).
5. Все камни из выбранной ячейки перемещаются по одному в каждую следующую ячейку по часовой стрелке, включая свой "амбар".
6. Если последний камень попал в амбар игрока, игрок имеет право сделать еще один ход.
7. Если последний камень попал в пустую ячейку на стороне игрока, и напротив этой ячейки есть камни, то игрок забирает камни из этой ячейки и из противоположной в свой амбар.
8. Компьютер ходит аналогично.
9. Игра заканчивается, когда все ячейки с камнями становятся пустыми.
10. Выигрывает игрок, у которого больше камней в амбаре.
-----------------
Алгоритм:
1. Инициализировать доску (массив) 14 ячеек с 4 камнями в каждой, кроме ячеек 6 и 13, которые равны 0.
2. Начать цикл "пока не закончена игра"
3. Ход игрока:
    3.1 Запросить ввод номера ячейки от игрока (от 0 до 5).
    3.2 Переместить камни из выбранной ячейки по часовой стрелке.
    3.3 Проверить, попал ли последний камень в амбар игрока (ячейка 6). Если да, то дать игроку еще один ход.
    3.4 Проверить, попал ли последний камень в пустую ячейку на стороне игрока. Если да, то захватить камни из этой ячейки и из противоположной ячейки.
4. Ход компьютера (аналогично ходу игрока, но выбор ячейки случайный от 7 до 12).
5. Если все ячейки с камнями пусты, завершить игру.
6. Вывести результат (количество камней в амбарах игрока и компьютера).
7. Определить победителя (у кого больше камней в амбаре).
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBoard["Инициализация доски: <code>board = [4,4,4,4,4,4,0,4,4,4,4,4,4,0]</code>"]
    InitializeBoard --> GameLoopStart{"Начало цикла игры: пока не все ячейки пусты"}
    GameLoopStart -- Да --> PlayerTurnStart{"Начало хода игрока"}
    PlayerTurnStart --> PlayerInputCell["Ввод номера ячейки от игрока <code>(0-5)</code>"]
    PlayerInputCell --> PlayerMoveStones["Перемещение камней из ячейки по часовой стрелке"]
    PlayerMoveStones --> PlayerCheckExtraTurn{"Проверка: последний камень в амбаре игрока <code>(board[6])?</code>"}
    PlayerCheckExtraTurn -- Да --> PlayerTurnStart
    PlayerCheckExtraTurn -- Нет --> PlayerCheckCapture{"Проверка: последний камень в пустой ячейке игрока?"}
    PlayerCheckCapture -- Да --> PlayerCaptureStones["Захват камней напротив"]
    PlayerCaptureStones --> ComputerTurnStart{"Начало хода компьютера"}
     PlayerCheckCapture -- Нет --> ComputerTurnStart
    ComputerTurnStart --> ComputerSelectCell["Компьютер выбирает случайную ячейку <code>(7-12)</code>"]
    ComputerSelectCell --> ComputerMoveStones["Перемещение камней по часовой стрелке"]
    ComputerMoveStones --> ComputerCheckExtraTurn{"Проверка: последний камень в амбаре компьютера <code>(board[13])?</code>"}
    ComputerCheckExtraTurn -- Да --> ComputerTurnStart
     ComputerCheckExtraTurn -- Нет --> ComputerCheckCapture{"Проверка: последний камень в пустой ячейке компьютера?"}
    ComputerCheckCapture -- Да --> ComputerCaptureStones["Захват камней напротив"]
    ComputerCaptureStones --> GameLoopStart
     ComputerCheckCapture -- Нет --> GameLoopStart
    GameLoopStart -- Нет --> EndGame["Конец игры"]
    EndGame --> OutputResult["Вывод результатов и победителя"]
    OutputResult --> End["Конец"]
```
Legenda:
   Start - Начало программы.
    InitializeBoard - Инициализация игровой доски с 14 ячейками. Первые 6 (0-5) и последние 6 (7-12) представляют ячейки с камнями, 6 и 13 — амбары игроков.
    GameLoopStart - Начало цикла игры, который продолжается пока не закончена игра.
    PlayerTurnStart - Начало хода игрока.
    PlayerInputCell - Запрос у игрока номера ячейки, из которой он хочет переместить камни.
    PlayerMoveStones - Перемещение камней из выбранной ячейки по часовой стрелке.
    PlayerCheckExtraTurn - Проверка, попал ли последний камень в амбар игрока. Если да, игрок получает еще один ход.
    PlayerCheckCapture - Проверка, попал ли последний камень в пустую ячейку на стороне игрока.
    PlayerCaptureStones - Захват камней из противоположной ячейки, если последний камень попал в пустую ячейку на стороне игрока.
    ComputerTurnStart - Начало хода компьютера.
    ComputerSelectCell - Выбор компьютером случайной ячейки для хода.
    ComputerMoveStones - Перемещение камней компьютером по часовой стрелке.
    ComputerCheckExtraTurn - Проверка, попал ли последний камень в амбар компьютера. Если да, компьютер получает еще один ход.
    ComputerCheckCapture - Проверка, попал ли последний камень в пустую ячейку на стороне компьютера.
    ComputerCaptureStones - Захват камней из противоположной ячейки, если последний камень попал в пустую ячейку на стороне компьютера.
    EndGame - Конец игры.
    OutputResult - Вывод результатов и определение победителя.
    End - Конец программы.
"""
import random

# Инициализация доски. 
# Ячейки 0-5 - ячейки игрока, 6 - амбар игрока
# Ячейки 7-12 - ячейки компьютера, 13 - амбар компьютера
board = [4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0]


def display_board():
    """Выводит текущее состояние игровой доски."""
    print("----------------------------------------------------")
    print(f"  {board[12]:2}  {board[11]:2}  {board[10]:2}  {board[9]:2}  {board[8]:2}  {board[7]:2}   ")
    print("----------------------------------------------------")
    print(f"{board[13]:2}                                 {board[6]:2}")
    print("----------------------------------------------------")
    print(f"  {board[0]:2}  {board[1]:2}  {board[2]:2}  {board[3]:2}  {board[4]:2}  {board[5]:2}  ")
    print("----------------------------------------------------")


def player_turn():
    """Обрабатывает ход игрока."""
    while True:
        try:
            cell = int(input("Выберите ячейку (0-5): "))
            if 0 <= cell <= 5 and board[cell] > 0:
                break
            else:
                print("Недопустимый выбор. Выберите ячейку с камнями от 0 до 5.")
        except ValueError:
            print("Неверный ввод. Пожалуйста, введите число.")
    
    stones = board[cell]
    board[cell] = 0
    current_cell = cell
    
    while stones > 0:
        current_cell = (current_cell + 1) % 14
        board[current_cell] += 1
        stones -= 1

    # Проверка на дополнительный ход если последний камень попал в амбар игрока
    if current_cell == 6:
        print("Игрок получает дополнительный ход.")
        display_board()
        player_turn()
        return
        
    # Захват камней
    if 0 <= current_cell <= 5 and board[current_cell] == 1:
        opposite_cell = 12 - current_cell
        if board[opposite_cell] > 0:
             board[6] += board[opposite_cell] + 1
             board[opposite_cell]=0
             board[current_cell] = 0
             print(f"Игрок захватывает камни из ячеек {current_cell} и {opposite_cell}")
         
        
def computer_turn():
    """Обрабатывает ход компьютера."""
    possible_moves = [i for i in range(7, 13) if board[i] > 0]
    if not possible_moves:
        return  # Если нет доступных ходов для компьютера, выйти
    
    cell = random.choice(possible_moves)
    print(f"Компьютер выбирает ячейку {cell}")
    stones = board[cell]
    board[cell] = 0
    current_cell = cell

    while stones > 0:
         current_cell = (current_cell + 1) % 14
         board[current_cell] += 1
         stones -= 1

    # Проверка на дополнительный ход если последний камень попал в амбар компьютера
    if current_cell == 13:
        print("Компьютер получает дополнительный ход.")
        display_board()
        computer_turn()
        return

    # Захват камней
    if 7 <= current_cell <= 12 and board[current_cell] == 1:
          opposite_cell = 12 - current_cell
          if board[opposite_cell] > 0:
             board[13] += board[opposite_cell] + 1
             board[opposite_cell]=0
             board[current_cell] = 0
             print(f"Компьютер захватывает камни из ячеек {current_cell} и {opposite_cell}")

def is_game_over():
    """Проверяет, закончена ли игра."""
    player_side_empty = all(board[i] == 0 for i in range(0, 6))
    computer_side_empty = all(board[i] == 0 for i in range(7, 13))
    return player_side_empty or computer_side_empty


def calculate_winner():
    """Определяет победителя и выводит результаты."""
    player_score = board[6]
    computer_score = board[13]

    print(f"Игрок: {player_score} очков")
    print(f"Компьютер: {computer_score} очков")

    if player_score > computer_score:
        print("Вы победили!")
    elif computer_score > player_score:
        print("Компьютер победил!")
    else:
        print("Ничья!")


# Основной игровой цикл
while True:
    display_board()
    player_turn()
    if is_game_over():
        break
    display_board()
    computer_turn()
    if is_game_over():
       break
    

# После завершения игры
display_board()
calculate_winner()

"""
Объяснение кода:
1. **Инициализация доски (`board`)**:
   - `board = [4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0]`: Создается список, представляющий игровое поле. 
     Первые 6 элементов (0-5) - ячейки игрока, 7-12 - ячейки компьютера, 6 - амбар игрока, 13 - амбар компьютера. 
     В начале игры в каждой ячейке по 4 камня, в амбарах - 0.

2. **Функция `display_board()`**:
   - Выводит текущее состояние игровой доски на экран.

3. **Функция `player_turn()`**:
   - Обрабатывает ход игрока:
     - Запрашивает ввод номера ячейки (0-5).
     - Проверяет корректность ввода (число от 0 до 5 и ячейка не пустая).
     - Забирает камни из выбранной ячейки.
     - Распределяет камни по одной в каждую следующую ячейку по часовой стрелке.
     - Проверяет, попал ли последний камень в амбар игрока (ячейка 6). Если да, то игрок делает еще один ход.
     - Проверяет, попал ли последний камень в пустую ячейку на стороне игрока, если да, то захватывает камни напротив.
4. **Функция `computer_turn()`**:
   - Обрабатывает ход компьютера:
     - Выбирает случайную ячейку (7-12), не пустую.
     - Распределяет камни по одной в каждую следующую ячейку по часовой стрелке.
     - Проверяет, попал ли последний камень в амбар компьютера (ячейка 13). Если да, то компьютер делает еще один ход.
     - Проверяет, попал ли последний камень в пустую ячейку на стороне компьютера, если да, то захватывает камни напротив.

5.  **Функция `is_game_over()`**:
    - Проверяет, закончилась ли игра. Игра заканчивается, когда все ячейки на стороне игрока или компьютера пусты.
6.  **Функция `calculate_winner()`**:
    - Выводит количество очков каждого игрока.
    - Определяет победителя.

7.  **Основной игровой цикл (`while True`)**:
    - Выводит доску.
    - Дает ход игроку.
    - Проверяет, закончилась ли игра. Если да, то выходит из цикла.
    - Дает ход компьютеру.
    - Проверяет, закончилась ли игра. Если да, то выходит из цикла.

8.  **Вывод результатов**:
    - После завершения игры выводит доску и результаты.
"""
