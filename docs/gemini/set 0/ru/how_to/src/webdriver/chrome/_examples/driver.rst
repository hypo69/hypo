Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот Python-код предоставляет примеры использования классов `Driver` и `Chrome` для управления браузером Chrome.  Он демонстрирует различные операции, такие как навигация по URL, извлечение домена, сохранение куки, обновление страницы, прокрутка, получение языка страницы, установка пользовательского User Agent, поиск элементов, получение текущего URL и фокусирование окна.  Код также демонстрирует создание экземпляра `Driver` с пользовательским user-agent.

Шаги выполнения
-------------------------
1. **Импортирует необходимые библиотеки:** Код импортирует классы `Driver` и `Chrome` из модуля `src.webdriver`, а также класс `By` из `selenium.webdriver.common.by`. Это необходимо для работы с браузером и поиском элементов.

2. **Определяет функцию `main`:** Эта функция содержит все примеры использования.

3. **Создает экземпляр драйвера:**  Создает экземпляр класса `Driver` с классом `Chrome` в качестве аргумента.

4. **Навигация по URL:** Выполняет навигацию по заданному URL с помощью метода `get_url()`.  Проверяет успешность навигации и выводит сообщение.

5. **Извлечение домена:**  Извлекает доменное имя из URL с помощью метода `extract_domain()`. Выводит полученный домен.

6. **Сохранение куки:** Сохраняет куки в локальный файл с помощью метода `_save_cookies_localy()`. Проверяет успешность сохранения.

7. **Обновление страницы:** Обновляет текущую страницу с помощью метода `page_refresh()`. Проверяет успешность обновления.

8. **Прокрутка страницы:** Прокручивает страницу вниз с помощью метода `scroll()`. Задает количество прокруток, направление, размер кадра и задержку. Проверяет успешность прокрутки.

9. **Получение языка страницы:** Получает язык текущей страницы с помощью атрибута `locale`.  Выводит язык страницы.

10. **Установка пользовательского User Agent:** Создает экземпляр `Driver` с заданным пользовательским User Agent.  Выполняет навигацию по URL с пользовательским user-agent.

11. **Поиск элемента:** Находит элемент на странице по CSS-селектору с помощью метода `find_element()`. Выводит текст найденного элемента.

12. **Получение текущего URL:** Получает текущий URL с помощью метода `current_url`. Выводит текущий URL.

13. **Фокусировка окна:** Фокусирует окно браузера с помощью метода `window_focus()`. Выводит сообщение о фокусировке.

14. **Вызов функции `main`:**  Код вызывает функцию `main` в блоке `if __name__ == "__main__":`, что гарантирует её выполнение только при непосредственном запуске скрипта.


Пример использования
-------------------------
.. code-block:: python

    from src.webdriver import Driver, Chrome
    from selenium.webdriver.common.by import By

    def main():
        chrome_driver = Driver(Chrome)
        if chrome_driver.get_url("https://www.example.com"):
            print("Successfully navigated to the URL")
        
        # ... (остальные примеры) ...
        

    if __name__ == "__main__":
        main()