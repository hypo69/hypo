"""
<SNOOPY>:
=================
Сложность: 4
-----------------
Игра "Снупи" - это игра в угадывание слова, в которой компьютер выбирает случайное слово из списка, а игрок пытается его отгадать, вводя по одной букве за раз. После каждой попытки компьютер показывает, какие буквы угаданы правильно и где они находятся в слове.

Правила игры:
1. Компьютер выбирает случайное слово из списка.
2. Игрок вводит одну букву.
3. Компьютер сравнивает введенную букву со словом, и если она есть, то показывает ее позицию.
4.  Игра продолжается до тех пор, пока игрок не угадает все буквы слова.
5.  Если игрок угадывает слово, игра заканчивается, и выводится сообщение о победе.
-----------------
Алгоритм:
1.  Установить список слов для выбора.
2.  Выбрать случайное слово из списка.
3.  Создать маску для слова (например, "----", если слово "SNOOPY")
4.  Установить счетчик попыток в 0.
5.  Начать цикл "пока слово не угадано":
    5.1. Вывести текущее состояние маски.
    5.2. Увеличить счетчик попыток.
    5.3. Запросить у игрока ввод буквы.
    5.4. Если введенная буква есть в слове, то:
        5.4.1. Обновить маску, показав позицию буквы.
    5.5. Если маска не содержит символов "-", то перейти к шагу 6.
6. Вывести сообщение "YOU GOT IT IN {число попыток} GUESSES!" и загаданное слово
7.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    wordList = ['SNOOPY', 'PEANUTS', 'CHARLIE']
    targetWord = random_word(wordList)
    wordMask = create_mask(targetWord)
    numberOfGuesses = 0
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart --> OutputMask["Вывод маски слова: <code><b>wordMask</b></code>"]
    OutputMask --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputLetter["Ввод буквы пользователем: <code><b>userLetter</b></code>"]
    InputLetter --> CheckLetter{"Проверка: <code><b>userLetter in targetWord?</b></code>"}
    CheckLetter -- Да --> UpdateMask["<code><b>Обновить wordMask</b></code>"]
    UpdateMask --> CheckWin{"Проверка: <code><b>'-' in wordMask?</b></code>"}
    CheckWin -- Да --> LoopStart
     CheckWin -- Нет --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES! The word was <code>{targetWord}</code></b>"]
    OutputWin --> End["Конец"]
     CheckLetter -- Нет --> LoopStart
    
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: wordList (список слов), targetWord (загаданное слово выбирается случайно), wordMask (маска слова, изначально заполненная дефисами), numberOfGuesses (количество попыток) устанавливается в 0.
    LoopStart - Начало цикла, который продолжается, пока слово не угадано.
    OutputMask - Вывод на экран текущего состояния маски слова (например, "S---P-").
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputLetter - Запрос у пользователя ввода буквы.
    CheckLetter - Проверка, есть ли введенная буква в загаданном слове.
    UpdateMask - Обновление маски слова, заменяя дефисы на угаданные буквы.
    CheckWin - Проверка, остались ли в маске слова дефисы (-).
    OutputWin - Вывод сообщения о победе, если все буквы угаданы, с указанием количества попыток и загаданного слова.
    End - Конец программы.
"""

import random

# Функция для выбора случайного слова из списка
def choose_word(word_list):
    """Выбирает случайное слово из списка."""
    return random.choice(word_list)

# Функция для создания маски слова
def create_mask(word):
    """Создает маску слова, заменяя буквы на дефисы."""
    return ["-" for _ in word]

# Функция для обновления маски слова
def update_mask(mask, word, letter):
    """Обновляет маску слова, показывая угаданные буквы."""
    for i, char in enumerate(word):
        if char == letter:
            mask[i] = letter
    return mask

# Основная функция игры
def play_snoopy_game():
    """Запускает игру "Снупи"."""
    # Список слов для выбора
    word_list = ["SNOOPY", "PEANUTS", "CHARLIE"]
    # Выбираем случайное слово из списка
    target_word = choose_word(word_list).upper()
    # Создаем маску для слова
    word_mask = create_mask(target_word)
    # Инициализация счетчика попыток
    number_of_guesses = 0

    # Основной цикл игры
    while True:
        # Вывод текущей маски слова
        print(" ".join(word_mask))
        # Увеличиваем счетчик попыток
        number_of_guesses += 1
        # Запрос ввода буквы у пользователя
        user_letter = input("Введите букву: ").upper()

        # Проверяем наличие введенной буквы в слове
        if user_letter in target_word:
            # Обновляем маску слова
            word_mask = update_mask(word_mask, target_word, user_letter)

        # Проверяем, угадано ли слово
        if "-" not in word_mask:
            print(f"ПОЗДРАВЛЯЮ! Вы угадали слово за {number_of_guesses} попыток! Слово было: {target_word}")
            break

# Запускаем игру
if __name__ == "__main__":
    play_snoopy_game()
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайного слова из списка.

2.  **Функция `choose_word(word_list)`**:
    -   `def choose_word(word_list):`: Определяет функцию, которая принимает список слов `word_list`.
    -   `return random.choice(word_list)`: Возвращает случайное слово из переданного списка, используя метод `random.choice()`.

3.  **Функция `create_mask(word)`**:
    -   `def create_mask(word):`: Определяет функцию, которая принимает слово `word`.
    -   `return ["-" for _ in word]`: Возвращает список, где количество дефисов равно длине слова, создавая маску.

4.  **Функция `update_mask(mask, word, letter)`**:
    -  `def update_mask(mask, word, letter):`: Определяет функцию, которая принимает маску слова `mask`, исходное слово `word` и введенную букву `letter`.
    -   `for i, char in enumerate(word):`: Итерирует по символам слова с их индексами, используя функцию enumerate.
    -   `if char == letter:`: Проверяет, равен ли текущий символ слова введенной букве.
    -  `mask[i] = letter`: Если символ равен введенной букве, то обновляет маску, заменяя дефис на букву.
    -   `return mask`: Возвращает обновленную маску.

5.  **Функция `play_snoopy_game()`**:
    -   `def play_snoopy_game():`: Определяет функцию, которая содержит логику игры "Снупи".
    -   `word_list = ["SNOOPY", "PEANUTS", "CHARLIE"]`: Список слов, из которых будет выбираться загаданное слово.
    -   `target_word = choose_word(word_list).upper()`: Выбирает случайное слово из списка и преобразует его в верхний регистр.
    -   `word_mask = create_mask(target_word)`: Создает маску для выбранного слова, используя функцию `create_mask()`.
    -   `number_of_guesses = 0`: Инициализирует счетчик попыток.
   
6.  **Основной игровой цикл `while True:`**:
   -   `while True:`: Запускает бесконечный цикл, который продолжается, пока игрок не угадает слово.
   -   `print(" ".join(word_mask))`: Выводит текущее состояние маски слова на экран. `join` преобразует список букв в строку, разделенную пробелами.
   -   `number_of_guesses += 1`: Увеличивает счетчик попыток на 1.
   -   `user_letter = input("Введите букву: ").upper()`: Запрашивает ввод буквы у пользователя и преобразует ее в верхний регистр.
   -   `if user_letter in target_word:`: Проверяет, есть ли введенная буква в загаданном слове.
   -   `word_mask = update_mask(word_mask, target_word, user_letter)`: Обновляет маску, показывая угаданную букву на ее позиции, используя функцию `update_mask()`.
   -   `if "-" not in word_mask:`: Проверяет, есть ли в маске еще не угаданные буквы, представленные дефисами.
   -   `print(f"ПОЗДРАВЛЯЮ! Вы угадали слово за {number_of_guesses} попыток! Слово было: {target_word}")`: Выводит сообщение о победе с количеством попыток и загаданным словом.
   -   `break`: Выход из цикла.

7. **Запуск игры**:
   -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_snoopy_game()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
   -  `play_snoopy_game()`: Вызывает функцию для начала игры.
"""
