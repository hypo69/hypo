Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит класс `GoogleGenerativeAI`, предназначенный для взаимодействия с Google Generative AI моделями.  Он позволяет отправлять запросы, получать ответы, управлять диалогом и сохранять историю в файлах.  Класс предоставляет методы для общих задач, таких как отправка текстовых запросов, генерация описаний изображений, загрузка файлов и управление историей диалогов.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Код импортирует необходимые библиотеки, такие как `google.generativeai`, `requests`, `logging`, и другие вспомогательные модули для работы с API и файлами.

2. **Настройка класса `GoogleGenerativeAI`**:  Создайте экземпляр класса `GoogleGenerativeAI`, передавая ему `api_key` для доступа к API Google Generative AI,  `model_name` (опционально, по умолчанию "gemini-1.5-flash-8b") и другие параметры, такие как `generation_config` и `system_instruction`.  Класс автоматически настраивает параметры для работы с моделью и устанавливает пути для сохранения истории диалогов.

3. **Отправка запроса (`ask`)**: Вызов метода `ask(q: str, attempts: int = 15)` позволяет отправлять текстовый запрос (`q`) модели.  Метод пытается получить ответ, обрабатывая потенциальные ошибки (например, проблемы с сетью, исчерпание квоты, проблемы с авторизацией).  Если ответ получен успешно, он сохраняет диалог в файлах и возвращает ответ от модели.  Важно, что код предусматривает несколько попыток (`attempts`), чтобы справиться с временными неполадками.

4. **Обработка изображений (`describe_image`)**: Для генерации описания изображения, используйте метод `describe_image(image_path: Path)`.  Передайте путь к изображению, и метод отправит его в модель, чтобы получить описание.

5. **Загрузка файлов (`upload_file`)**: Используйте метод `upload_file(file: str | Path | IOBase, file_name: Optional[str] = None)` для загрузки файла в Google Generative AI.  Метод обрабатывает потенциальные ошибки при загрузке и удалении файлов, обеспечивая надежное управление процессом.

6. **Управление историей диалогов**: Внутренние методы класса `GoogleGenerativeAI` отвечают за сохранение истории диалогов в текстовых и JSON файлах, позволяя отслеживать и анализировать предыдущие взаимодействия.


Пример использования
-------------------------
.. code-block:: python

    from pathlib import Path
    from hypotez.src.ai.gemini.generative_ai import GoogleGenerativeAI

    # Замените 'your_api_key' на ваш ключ API
    api_key = "your_api_key"
    ai = GoogleGenerativeAI(api_key=api_key)

    # Отправка запроса
    question = "Какая погода сегодня?"
    response = ai.ask(question)

    if response:
        print(f"Ответ модели: {response}")
    else:
        print("Не удалось получить ответ от модели.")

    # Пример описания изображения
    image_path = Path("image.jpg")  # Путь к вашему изображению
    description = ai.describe_image(image_path)

    if description:
        print(f"Описание изображения: {description}")
    else:
        print("Не удалось получить описание изображения.")