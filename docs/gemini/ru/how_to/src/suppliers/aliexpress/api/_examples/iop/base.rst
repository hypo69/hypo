Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует клиент для работы с API (вероятно, AliExpress). Он предоставляет функции для создания запросов, подписи запросов с использованием секретного ключа, обработки ответов API и логирования ошибок.  Код содержит классы для представления запросов (IopRequest), ответов (IopResponse) и клиента (IopClient), а также функции для подписи запросов и логирования ошибок.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**: Код импортирует `requests`, `time`, `hmac`, `hashlib`, `json`, `mimetypes`, `itertools`, `random`, `logging`, `os`, `socket` и `platform`. Эти библиотеки используются для работы с HTTP-запросами, временем, хешированием, JSON, файлами, генерацией случайных чисел, логированием, чтением и записью в файлы, взаимодействием с сетью и получением информации о платформе.

2. **Настройка логирования**: Код создает каталог `logs` в домашнем каталоге пользователя (или в каталоге, указанном в переменной среды `HOME`), если его нет. Создаётся экземпляр логгера `logger` и настраивается уровень логирования на `ERROR`. Создаётся обработчик `FileHandler`, который записывает ошибки в файл `iopsdk.log`, имеющий дату в формате "YYYY-MM-DD". Устанавливается форматирование логов, включающее только сообщение. Обработчик добавляется к логгеру.

3. **Определение констант**: Определяются константы для ключей параметров запросов API, таких как `P_APPKEY`, `P_ACCESS_TOKEN`, `P_TIMESTAMP`, `P_SIGN`, и другие. Это позволяет сделать код более читаемым и поддерживаемым.

4. **Функция `sign`**: Эта функция генерирует подпись для запроса, используя секретный ключ (`secret`), API endpoint (`api`) и параметры запроса (`parameters`). Она сортирует параметры, строит строку, подписывает её с помощью `hmac` с алгоритмом `sha256` и возвращает полученный хеш в верхнем регистре.

5. **Функции `mixStr`, `logApiError`**: `mixStr` преобразует входной параметр в строку, если он не является строкой.  `logApiError` записывает ошибку API в лог, включая детали запроса, код ошибки и сообщение.

6. **Класс `IopRequest`**: Этот класс представляет запрос к API. Он хранит параметры запроса, файлы, метод запроса (POST или GET), флаг упрощения ответа и формат ответа (json).  Методы `add_api_param`, `add_file_param` добавляют параметры запроса. `set_simplify` позволяет установить флаг упрощения. `set_format` задаёт формат ответа.

7. **Класс `IopResponse`**: Этот класс представляет ответ от API. Он хранит тип ответа, код ответа, сообщение, идентификатор запроса и тело ответа.  `__str__` переопределен для удобства вывода информации о ответе.

8. **Класс `IopClient`**:  Представляет клиента для взаимодействия с API. Он инициализируется URL сервера, ключом приложения (`app_key`), секретным ключом (`app_secret`) и таймаутом.  `execute` выполняет запрос, подписывает его и отправляет на сервер, обрабатывает ответ и записывает его в объект `IopResponse`.  Обработка ошибок:  проверяет `response.code` и при не нулевом значении вызывает `logApiError`.

9. **Выполнение запроса**: Метод `execute` формирует словарь параметров, в который добавляется подпись. Далее формирует полную URL. Выполняет запрос (`requests.post` или `requests.get`) к серверу и обрабатывает ответ.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.suppliers.aliexpress.api._examples.iop.base import IopClient, IopRequest

    # Создаем клиент
    client = IopClient(server_url='https://example.com/api', app_key='your_app_key', app_secret='your_app_secret')

    # Создаем запрос
    request = IopRequest('your_api_endpoint')
    request.add_api_param('param1', 'value1')
    request.add_api_param('param2', 123)

    # Выполняем запрос и получаем ответ
    response = client.execute(request, access_token='your_access_token')

    # Обрабатываем ответ
    if response.code == '0':
        print(response.body)
    else:
        print(f"Ошибка: {response.code} - {response.message}")