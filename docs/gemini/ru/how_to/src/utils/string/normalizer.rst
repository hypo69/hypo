Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот модуль содержит функции для нормализации различных типов данных, включая строки, числа и булевы значения.  Функции обрабатывают потенциальные ошибки при преобразовании и возвращают исходные значения, если преобразование не удалось. Модуль также использует функции форматирования из модуля `formatter` для очистки входных строк (удаление HTML-тегов, переносов строк, специальных символов).

Шаги выполнения
-------------------------
1. **`normalize_boolean(input_data)`**:
   - Принимает произвольное значение `input_data`.
   - Если `input_data` уже является булевым значением, возвращает его.
   - Преобразует `input_data` в строку и приводит её к нижнему регистру.
   - Проверяет, соответствует ли строка одному из представлений булевого значения (True/False, 1/0, "yes"/"no", "true"/"false").
   - Если соответствие найдено, возвращает соответствующее булево значение.
   - Если преобразование не удалось или входные данные имеют неизвестный формат, выводит предупреждение в лог и возвращает исходное значение `input_data`.

2. **`normalize_string(input_data)`**:
   - Принимает строку или список строк.
   - Если входной параметр является списком, объединяет элементы списка в одну строку, используя пробел в качестве разделителя.
   - Использует функции из модуля `formatter` для очистки строки: удаляет HTML теги, переносы строк и специальные символы.
   - Объединяет очищенные слова в строку, удаляя лишние пробелы.
   - Кодирует строку в UTF-8 и декодирует обратно, гарантируя, что результат находится в UTF-8.
   - Если при обработке произошла ошибка, выводит предупреждение в лог и возвращает исходное значение `input_data`, кодированное в UTF-8.

3. **`normalize_int(input_data)`**:
   - Принимает числовое значение (число, строка, float, Decimal).
   - Если входной параметр является объектом Decimal, возвращает целое число, полученное из него.
   - Преобразует входной параметр к типу float, затем к типу int.
   - Если преобразование не удалось, выводит предупреждение в лог и возвращает исходное значение `input_data`.

4. **`normalize_float(value)`**:
   - Принимает любое значение `value`.
   - Если `value` является пустым, возвращает 0.
   - Если `value` является списком или кортежем, рекурсивно вызывает `normalize_float` для каждого элемента. Возвращает новый список с нормализованными значениями.
   - Если `value` — простое значение, пытается преобразовать его в число с плавающей запятой.
   - Если преобразование не удалось, выводит предупреждение в лог и возвращает исходное значение.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.utils.string.normalizer import normalize_boolean, normalize_string, normalize_int, normalize_float

    # Пример для normalize_boolean
    result_boolean = normalize_boolean("Yes")
    print(result_boolean)  # Вывод: True

    # Пример для normalize_string
    result_string = normalize_string(["Hello", "  World!  "])
    print(result_string) # Вывод: b'Hello World!' (в консоли будет видно в виде строки, но в памяти это байты)

    # Пример для normalize_int
    result_int = normalize_int("42")
    print(result_int)  # Вывод: 42

    # Пример для normalize_float
    result_float = normalize_float("3.14")
    print(result_float)  # Вывод: 3.14
    result_float_list = normalize_float([1, "2.5", 3])
    print(result_float_list) # Вывод: [1.0, 2.5, 3.0]

    result_float_error = normalize_float("abc")
    print(result_float_error) # Вывод:  Warning: Cannot convert 'abc' to float. и исходное значение 'abc'