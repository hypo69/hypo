"""
HI LO:
=================
Сложность: 2
-----------------
Игра "HI LO" - это простая игра на угадывание числа, в которой компьютер выбирает случайное число от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, было ли введенное число слишком низким (TOO LOW) или слишком высоким (TOO HIGH), пока игрок не угадает загаданное число.

Правила игры:
1. Компьютер выбирает случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свои предположения о загаданном числе.
3. После каждой попытки компьютер сообщает, было ли введенное число слишком низким (TOO LOW), слишком высоким (TOO HIGH) или угадано.
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число.
-----------------
Алгоритм:
1. Установить число попыток в 0.
2. Сгенерировать случайное число в диапазоне от 1 до 100.
3. Начать цикл "пока число не угадано":
    3.1 Увеличить число попыток на 1.
    3.2 Запросить у игрока ввод числа.
    3.3 Если введенное число равно загаданному числу, перейти к шагу 4.
    3.4 Если введенное число меньше загаданного числа, вывести сообщение "TOO LOW".
    3.5 Если введенное число больше загаданного числа, вывести сообщение "TOO HIGH".
4. Вывести сообщение "YOU GOT IT IN {число попыток} GUESSES!"
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetNumber = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End

```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, а targetNumber (загаданное число) генерируется случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
"""

__author__ = 'hypo69 (hypo69@davidka.net)'
import random

# Инициализация счетчика попыток
numberOfGuesses = 0
# Генерируем случайное число от 1 до 100
targetNumber = random.randint(1, 100)

# Основной игровой цикл
while True:
    # Увеличиваем количество попыток
    numberOfGuesses += 1
    # Запрашиваем ввод числа у пользователя
    try:
        userGuess = int(input("Введите ваше предположение: "))
    except ValueError:
         print("Пожалуйста, введите целое число.")
         continue

    # Проверяем, угадано ли число
    if userGuess == targetNumber:
        print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")
        break  # Завершаем цикл, если число угадано
    elif userGuess < targetNumber:
        print("TOO LOW")  # Сообщаем, что загаданное число больше
    else:
        print("TOO HIGH")  # Сообщаем, что загаданное число меньше
"""
Пояснения:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2. **Инициализация переменных**:
   - `numberOfGuesses = 0`:  Инициализирует переменную `numberOfGuesses` для хранения количества попыток пользователя, начиная с 0.
   - `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100, которое пользователю нужно угадать.
3. **Основной игровой цикл `while True:`**:
   - Бесконечный цикл, который будет продолжаться, пока пользователь не угадает загаданное число.
   - `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1 перед каждой новой попыткой пользователя.
   - **Ввод данных от пользователя**:
     - `try...except ValueError`: Блок для обработки возможных ошибок, если пользователь введет не число.
     - `userGuess = int(input("Введите ваше предположение: "))`: Запрашивает у пользователя ввод числа и преобразует введенное значение в целое число.
    - **Проверка ввода**:
     -  `if userGuess == targetNumber:`: Проверяет, равно ли введенное пользователем число загаданному числу.
       - Если числа равны, выводится сообщение о победе и количестве попыток.
       - `break`:  Завершает цикл и игру.
     -  `elif userGuess < targetNumber:`: Если введенное число меньше загаданного, выводит сообщение "TOO LOW".
     -  `else:`: Если введенное число не равно и не меньше загаданного, значит, оно больше, и выводится сообщение "TOO HIGH".

"""
