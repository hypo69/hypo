"""
<HI LO>:
=================
Сложность: 3
-----------------
Игра "Больше-Меньше" предлагает пользователю угадать случайное число, которое загадывает компьютер в диапазоне от 1 до 100. После каждой попытки пользователя компьютер сообщает, является ли введенное число больше или меньше загаданного. Цель игры - угадать число за минимальное количество попыток.
Правила игры:
-----------------
1. Компьютер загадывает случайное целое число в диапазоне от 1 до 100.
2. Пользователь вводит целое число в качестве предположения.
3. Компьютер проверяет предположение пользователя:
   - Если предположение совпадает с загаданным числом, игра заканчивается, пользователь побеждает.
   - Если предположение больше загаданного числа, компьютер сообщает "TOO HIGH" (Слишком много).
   - Если предположение меньше загаданного числа, компьютер сообщает "TOO LOW" (Слишком мало).
4. Игра продолжается, пока пользователь не угадает число.
-----------------
Алгоритм:
1. Загадать случайное число в диапазоне от 1 до 100 и сохранить в переменной `secret_number`.
2. Запустить цикл, который будет выполняться до тех пор, пока пользователь не угадает число.
3. Внутри цикла:
   - Запросить у пользователя ввод числа.
   - Если введенное число равно `secret_number`, то вывести сообщение о победе и закончить игру.
   - Если введенное число больше `secret_number`, то вывести сообщение "TOO HIGH".
   - Если введенное число меньше `secret_number`, то вывести сообщение "TOO LOW".
4. Конец игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Начало игры] --> GenerateSecretNumber[Сгенерировать случайное число secret_number от 1 до 100];
    GenerateSecretNumber --> InputGuess[Запросить ввод числа от пользователя guess];
    InputGuess --> CheckGuess[Проверить guess == secret_number];
    CheckGuess -- Да --> OutputWin[Вывести сообщение о победе]
    OutputWin --> End[Конец игры];
    CheckGuess -- Нет --> CheckGuessHigh[Проверить guess > secret_number];
    CheckGuessHigh -- Да --> OutputTooHigh[Вывести сообщение "TOO HIGH"];
    OutputTooHigh --> InputGuess;
    CheckGuessHigh -- Нет --> OutputTooLow[Вывести сообщение "TOO LOW"];
    OutputTooLow --> InputGuess;
```
"""
import random

# 1. Генерация случайного числа
secret_number = random.randint(1, 100) # Загадываем случайное число от 1 до 100
# Объявляем переменную для хранения количества попыток
attempt = 0

# 2. Запуск цикла до тех пор, пока пользователь не угадает число
while True:
    # 3. Запрос ввода числа от пользователя
    try:
        guess = int(input("Введите ваше предположение (от 1 до 100): ")) # Просим пользователя ввести число и преобразуем в тип int
    except ValueError: # Обрабатываем ошибку, если пользователь ввел не число
        print("Ошибка: Введите целое число.") # Выводим сообщение об ошибке
        continue
    attempt +=1 # Увеличиваем количество попыток на 1

    # 4. Проверка предположения пользователя
    if guess == secret_number: # Если предположение совпадает с загаданным числом
        print(f"Поздравляю, вы угадали число {secret_number} c {attempt} попытки!") # Выводим сообщение о победе
        break  # Завершаем игру, выходим из цикла
    elif guess > secret_number: # Если предположение больше загаданного числа
        print("TOO HIGH") # Выводим сообщение "Слишком много"
    else: # Если предположение меньше загаданного числа
        print("TOO LOW") # Выводим сообщение "Слишком мало"
"""
Пояснения:
1.  `import random`: импортируем модуль random, который позволяет генерировать псевдослучайные числа.
2.  `secret_number = random.randint(1, 100)`: генерируем случайное целое число от 1 до 100 (включительно) и сохраняем его в переменной `secret_number`.
3. `attempt = 0`: инициализируем переменную attempt для подсчета количества попыток пользователя
4. `while True:`: начинается бесконечный цикл, который будет продолжаться до тех пор, пока пользователь не угадает число.
5.  `try...except ValueError`: используется для обработки ошибок ввода. Если пользователь введет не число, программа не завершится с ошибкой, а выведет сообщение об ошибке и попросит ввести число снова.
6.  `guess = int(input("Введите ваше предположение (от 1 до 100): "))`: предлагаем пользователю ввести число с клавиатуры, и преобразовываем введенную строку в целое число.
7.  `attempt +=1`: увеличиваем счетчик попыток на 1.
8.  `if guess == secret_number:`: проверяем, совпадает ли введенное пользователем число с загаданным.
9.  `print(f"Поздравляю, вы угадали число {secret_number} c {attempt} попытки!")`: если числа совпадают, выводим поздравление и число попыток
10. `break`: выходим из цикла `while True`, если число угадано.
11. `elif guess > secret_number:`: если число пользователя больше загаданного, выводим подсказку "TOO HIGH".
12. `else:`: если число пользователя меньше загаданного, выводим подсказку "TOO LOW".
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```