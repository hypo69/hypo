
"""
BLKJAK:
=================
Сложность: 6
-----------------
Игра "Блэкджек" - это карточная игра, в которой игрок соревнуется с дилером, стараясь набрать сумму очков карт, как можно более близкую к 21, но не превышающую ее.
Игрок может "взять" еще карту или "остановиться". Цель игры - получить сумму очков карт больше, чем у дилера, не перебрав при этом 21.
-----------------
Правила игры:
1.  В начале игры игроку и дилеру выдается по две карты. Одна карта дилера остается закрытой.
2.  Игрок может брать дополнительные карты (hit) до тех пор, пока сумма его очков не превысит 21 или он не решит остановиться (stand).
3.  После того как игрок остановился, дилер открывает свою закрытую карту и берет карты до тех пор, пока сумма его очков не станет 17 или больше.
4.  Если сумма очков игрока больше 21, он проигрывает.
5.  Если сумма очков дилера больше 21, он проигрывает.
6.  Если ни игрок, ни дилер не перебрали 21, побеждает тот, у кого сумма очков ближе к 21.
7.  Если у игрока и дилера одинаковое количество очков, объявляется ничья (push).
8.  Карты с картинками (валет, дама, король) стоят 10 очков, туз может быть 1 или 11, остальные карты стоят столько, сколько на них написано.
-----------------
Алгоритм:
1.  Инициализировать колоду карт (DECK) и раздать по две карты игроку (PLAYER) и дилеру (DEALER).
2.  Скрыть первую карту дилера.
3.  Показать карты игрока и открытую карту дилера.
4.  Запросить у игрока действие "H" (hit) или "S" (stand).
5.  Если игрок выбирает "H", то выдать ему новую карту, обновить сумму очков и если сумма больше 21, то игрок проигрывает. Перейти к шагу 8
6.  Если игрок выбирает "S", перейти к шагу 7.
7.  Пока сумма очков дилера меньше 17, дилер берет карты.
8.  Если сумма очков игрока больше 21, то вывести сообщение о проигрыше игрока.
9.  Если сумма очков дилера больше 21, то вывести сообщение о выигрыше игрока.
10. Сравнить суммы очков игрока и дилера и вывести соответствующий результат (выигрыш, проигрыш или ничья).
11. Конец игры
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeDeck["Инициализация колоды карт <code><b>DECK</b></code>"]
    InitializeDeck --> DealInitialHands["Раздача по 2 карты игроку <code><b>PLAYER</b></code> и дилеру <code><b>DEALER</b></code>"]
    DealInitialHands --> HideDealerCard["Скрыть первую карту дилера"]
    HideDealerCard --> ShowHands["Показать карты игрока и открытую карту дилера"]
    ShowHands --> PlayerTurnStart{"Начало хода игрока"}
    PlayerTurnStart --> InputAction["Ввод действия игрока (H/S)"]
    InputAction -- H --> PlayerHit["Игрок берет карту <code><b>PLAYER</b></code>"]
    PlayerHit --> UpdatePlayerScore["Обновить сумму очков игрока"]
    UpdatePlayerScore --> CheckPlayerBust{"Проверка: сумма очков игрока > 21?"}
    CheckPlayerBust -- Да --> PlayerLose["Вывод: Игрок проиграл"]
    PlayerLose --> End["Конец"]
     CheckPlayerBust -- Нет --> ShowHands
    InputAction -- S --> DealerTurnStart{"Начало хода дилера"}
     DealerTurnStart --> RevealDealerCard["Открыть скрытую карту дилера"]
    RevealDealerCard --> DealerHitLoop{"Цикл: пока сумма очков дилера < 17"}
    DealerHitLoop -- Да --> DealerHit["Дилер берет карту <code><b>DEALER</b></code>"]
    DealerHit --> UpdateDealerScore["Обновить сумму очков дилера"]
    UpdateDealerScore --> DealerHitLoop
    DealerHitLoop -- Нет --> CheckDealerBust{"Проверка: сумма очков дилера > 21?"}
    CheckDealerBust -- Да --> PlayerWin["Вывод: Игрок выиграл"]
    PlayerWin --> End
    CheckDealerBust -- Нет --> CompareScores["Сравнение сумм очков игрока и дилера"]
    CompareScores --> CheckWinLosePush{"Проверка: Выигрыш, Проигрыш или Ничья"}
    CheckWinLosePush --> OutputResult["Вывод результата"]
    OutputResult --> End
```
Legenda:
    Start - Начало программы.
    InitializeDeck - Инициализация колоды карт (DECK).
    DealInitialHands - Раздача по две карты игроку (PLAYER) и дилеру (DEALER).
    HideDealerCard - Скрытие первой карты дилера.
    ShowHands - Отображение карт игрока и открытой карты дилера.
    PlayerTurnStart - Начало хода игрока.
    InputAction - Запрос у игрока ввода действия (H - hit или S - stand).
    PlayerHit - Игрок берет карту (hit).
    UpdatePlayerScore - Обновление суммы очков игрока.
    CheckPlayerBust - Проверка, не превысила ли сумма очков игрока 21 (bust).
    PlayerLose - Вывод сообщения о проигрыше игрока.
    DealerTurnStart - Начало хода дилера.
    RevealDealerCard - Открытие скрытой карты дилера.
     DealerHitLoop - Цикл, пока сумма очков дилера меньше 17.
    DealerHit - Дилер берет карту (hit).
    UpdateDealerScore - Обновление суммы очков дилера.
    CheckDealerBust - Проверка, не превысила ли сумма очков дилера 21 (bust).
     PlayerWin - Вывод сообщения о выигрыше игрока.
    CompareScores - Сравнение сумм очков игрока и дилера.
    CheckWinLosePush - Проверка на выигрыш, проигрыш или ничью.
    OutputResult - Вывод результата игры.
    End - Конец игры.
"""


__author__ = 'hypo69 (hypo69@davidka.net)'
import random

def calculate_score(hand):
    """Вычисляет сумму очков карт в руке, учитывая тузы."""
    score = 0
    num_aces = 0
    for card in hand:
        if card in ['J', 'Q', 'K']:
            score += 10
        elif card == 'A':
            num_aces += 1
            score += 11  # изначально туз считаем за 11
        else:
            score += int(card)
    while score > 21 and num_aces > 0:
        score -= 10
        num_aces -= 1
    return score

def deal_card(deck):
    """Выдает карту из колоды."""
    return deck.pop()

def create_deck():
    """Создает стандартную колоду из 52 карт."""
    suits = ['H', 'D', 'C', 'S']
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    deck = [rank for rank in ranks for suit in suits]
    random.shuffle(deck)
    return deck
def play_blackjack():
    """Основная логика игры в блэкджек."""
    # 1. Инициализация колоды и раздача карт
    deck = create_deck()
    player_hand = []
    dealer_hand = []
    # Раздаем по 2 карты игроку и дилеру
    for _ in range(2):
        player_hand.append(deal_card(deck))
        dealer_hand.append(deal_card(deck))

    # 2. Скрываем первую карту дилера
    hidden_dealer_card = dealer_hand[0]
    dealer_hand[0] = 'X'
    
    # 3. Показываем карты
    print(f"Ваши карты: {', '.join(player_hand)}  Сумма: {calculate_score(player_hand)}")
    print(f"Карты дилера: {', '.join(dealer_hand)} ")
    dealer_hand[0] = hidden_dealer_card # возврат карты
    # 4. Ход игрока
    while True:
        action = input("Хотите взять еще карту (H) или остановиться (S)? ").upper()
        if action == 'H':
            player_hand.append(deal_card(deck))
            print(f"Ваши карты: {', '.join(player_hand)}  Сумма: {calculate_score(player_hand)}")
            if calculate_score(player_hand) > 21:
                print("У вас перебор! Вы проиграли!")
                return
        elif action == 'S':
            break
        else:
            print("Некорректный ввод. Пожалуйста, введите 'H' или 'S'.")

    # 5. Ход дилера
    print(f"Карты дилера: {', '.join(dealer_hand)} Сумма: {calculate_score(dealer_hand)}")
    while calculate_score(dealer_hand) < 17:
        dealer_hand.append(deal_card(deck))
        print(f"Карты дилера: {', '.join(dealer_hand)}  Сумма: {calculate_score(dealer_hand)}")
    # 6. Определение победителя
    player_score = calculate_score(player_hand)
    dealer_score = calculate_score(dealer_hand)

    if dealer_score > 21:
        print("У дилера перебор! Вы выиграли!")
    elif player_score > dealer_score:
        print("Вы выиграли!")
    elif player_score < dealer_score:
        print("Вы проиграли!")
    else:
        print("Ничья!")
    
if __name__ == "__main__":
    play_blackjack()
"""
Пояснения:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random` для перемешивания колоды.
2. **Функция `calculate_score(hand)`**:
   - Принимает список карт `hand` в качестве аргумента.
   - Инициализирует `score` (сумма очков) и `num_aces` (количество тузов) в 0.
   - Проходит по каждой карте в руке (`hand`):
     - Если карта - валет, дама или король (`J`, `Q`, `K`), добавляет 10 к `score`.
     - Если карта - туз (`A`):
       - Увеличивает `num_aces` на 1.
       - Добавляет 11 к `score` (по умолчанию туз равен 11).
     - Если карта - число, преобразует её в целое число и добавляет к `score`.
   - Корректирует счет, если сумма больше 21 и есть тузы:
     - Пока `score` больше 21 и есть тузы, вычитает 10 из `score` и уменьшает `num_aces` на 1.
   - Возвращает итоговый `score`.
3. **Функция `deal_card(deck)`**:
   - Принимает колоду карт `deck` в качестве аргумента.
   - Удаляет и возвращает последнюю карту из `deck` (выдает карту).
4. **Функция `create_deck()`**:
   - Создает стандартную колоду из 52 карт:
     - `suits`: Список мастей ('H', 'D', 'C', 'S').
     - `ranks`: Список рангов ('2' - '10', 'J', 'Q', 'K', 'A').
     - Создает колоду `deck` путем генерации всех возможных сочетаний рангов и мастей.
     - Перемешивает колоду `deck` случайным образом.
   - Возвращает перемешанную колоду.
5.  **Функция `play_blackjack()`**:
    -  Инициализирует колоду с помощью `create_deck()`.
    -  Создает пустые списки `player_hand` и `dealer_hand` для хранения карт игрока и дилера.
    -  Раздает по две карты игроку и дилеру.
    -  Скрывает первую карту дилера, сохраняя её значение и заменяя в списке на "X".
    -  Отображает карты игрока и открытую карту дилера.
    -  Запускает цикл ходов игрока, предлагая взять карту или остановиться.
    -  Если игрок выбирает 'H', выдает новую карту, выводит карты и проверяет перебор.
    -  Если игрок выбирает 'S', завершает ход игрока.
    -  Запускает ход дилера, пока сумма его очков меньше 17, берет карту.
    -  Определяет победителя, сравнивая очки игрока и дилера.
    -  Выводит сообщение о результате игры.
6. **Запуск игры:**
   -   `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_blackjack()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
   -   `play_blackjack()`: Вызывает функцию для начала игры.
"""
```