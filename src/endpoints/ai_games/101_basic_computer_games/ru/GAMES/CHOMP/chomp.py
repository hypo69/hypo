"""
CHOMP:
=================
Сложность: 5
-----------------
Игра "CHOMP" - это игра для двух игроков, в которой используется прямоугольная доска, представляющая собой шоколадную плитку. 
Один из углов (обычно нижний левый) представляет собой ядовитую "дольку". Игроки по очереди отламывают от плитки куски, делая ходы. Цель игры - заставить противника съесть отравленную дольку.
Игрок, который вынужден съесть ядовитую дольку, проигрывает.
Правила игры:
1. Игровое поле представляет собой прямоугольную шоколадную плитку.
2. Один из углов (нижний левый) считается отравленным.
3. Игроки по очереди откусывают часть шоколадной плитки.
4. Игрок выбирает строку и столбец (откусывает кусок шоколада).
5. Все клетки справа и выше выбранной позиции удаляются.
6. Цель - заставить противника съесть отравленную дольку.
7. Игрок, который съедает отравленную дольку, проигрывает.
-----------------
Алгоритм:
1.  Начало игры.
2.  Запросить у пользователя размер шоколадной плитки (количество строк и столбцов).
3.  Инициализировать игровую доску, представляющую шоколадную плитку.
4.  Начать цикл игры, пока игра не закончится:
    4.1.  Вывести текущее состояние доски на экран.
    4.2.  Запросить у текущего игрока координаты откусываемого куска шоколада.
    4.3.  Обновить состояние доски, откусив выбранный кусок.
    4.4.  Проверить, не съел ли текущий игрок ядовитую дольку.
    4.5.  Если съел, объявить о победе противоположного игрока и завершить игру.
    4.6.  Передать ход следующему игроку.
5. Конец игры.
-----------------

"""


def initialize_board(rows, cols):
    """
    Инициализирует игровое поле (шоколадную плитку).
    
    Аргументы:
        rows (int): Количество строк на доске.
        cols (int): Количество столбцов на доске.

    Возвращает:
        list of lists: Список списков, представляющий игровую доску, где 'X' - шоколад, ' ' - пустое место.
    """
    board = [['X' for _ in range(cols)] for _ in range(rows)]
    return board

def display_board(board):
    """
    Выводит текущее состояние доски на экран.

    Аргументы:
        board (list of lists): Игровая доска.
    """
    for row in board:
        print(' '.join(row))

def make_move(board, row_move, col_move):
    """
    Обновляет состояние доски после хода игрока.
    Все клетки справа и выше выбранной позиции удаляются.

    Аргументы:
        board (list of lists): Игровая доска.
        row_move (int): Строка, на которую игрок сделал ход.
        col_move (int): Столбец, на который игрок сделал ход.

    Возвращает:
        list of lists: Обновленная игровая доска.
    """
    rows = len(board)
    cols = len(board[0])
    for row in range(row_move, rows):
        for col in range(col_move, cols):
            board[row][col] = ' '
    return board


def is_game_over(board):
  """
    Проверяет, закончилась ли игра.
    Игра заканчивается, если ядовитая долька (верхний левый угол) съедена.

    Аргументы:
        board (list of lists): Игровая доска.

    Возвращает:
        bool: True, если игра окончена, иначе False.
    """
  return board[0][0] == ' '


def play_chomp():
    """
    Основная функция игры "CHOMP".
    Реализует игровой процесс, включая ввод размеров доски, отображение доски,
    и обработку ходов игроков.
    """
    while True:
        try:
            rows = int(input("Введите количество строк на доске: "))
            cols = int(input("Введите количество столбцов на доске: "))
            if rows <= 0 or cols <= 0:
                 print("Размер доски должен быть положительным числом.")
                 continue
            break
        except ValueError:
            print("Пожалуйста, введите целое число.")

    board = initialize_board(rows, cols)
    current_player = 1  # Начинает первый игрок

    while True:
        print(f"\nХод игрока {current_player}:")
        display_board(board)
        
        while True:
            try:
                row_move = int(input("Введите строку для откусывания (начиная с 0): "))
                col_move = int(input("Введите столбец для откусывания (начиная с 0): "))
                if row_move < 0 or col_move < 0 or row_move >= rows or col_move >= cols:
                    print("Неверный ход. Укажите строку и столбец в пределах доски")
                    continue
                if board[row_move][col_move] == ' ':
                     print("Вы не можете откусить пустое место. Попробуйте еще раз")
                     continue
                break
            except ValueError:
                print("Пожалуйста, введите целые числа.")
            except IndexError:
                print("Неверный ход. Укажите строку и столбец в пределах доски")
            

        board = make_move(board, row_move, col_move)

        if is_game_over(board):
          print(f"Победил игрок {3-current_player}!")
          display_board(board)
          break
        
        current_player = 3 - current_player # Переключаем игрока

if __name__ == "__main__":
    play_chomp()

"""
Объяснение кода:
1.  **Инициализация**:
   -  `initialize_board(rows, cols)`: Функция создает игровую доску размером `rows` x `cols`. Изначально все ячейки заполнены символом 'X', представляющим шоколад.
2.  **Отображение доски**:
   -  `display_board(board)`: Функция выводит текущее состояние доски на экран, построчно отображая каждый ряд.
3.  **Ход игрока**:
   -  `make_move(board, row_move, col_move)`: Функция обновляет доску, удаляя все 'X' справа и ниже указанных координат `row_move` и `col_move`, заменяя их на ' '.
4.  **Проверка окончания игры**:
    -  `is_game_over(board)`: Проверяет, съедена ли отравленная долька (верхний левый угол). Если ячейка `board[0][0]` содержит ' ', то игра окончена.
5.  **Основная логика игры `play_chomp()`**:
    -   Запрашивает у пользователя размеры доски.
    -   Инициализирует доску.
    -   Организует цикл игры, в котором игроки по очереди делают ходы.
    -   Выводит текущее состояние доски.
    -   Запрашивает ввод координат хода у игрока.
    -   Обновляет доску после хода.
    -   Проверяет, закончилась ли игра.
    -   Выводит сообщение о победе одного из игроков.
    -   Переключает текущего игрока.
6.  **Обработка исключений**:
   -   Код содержит `try-except` блоки для обработки ошибок ввода (нечисловые значения).
7.  **Запуск игры**:
   -  `if __name__ == "__main__":`:  Этот блок гарантирует, что функция `play_chomp()` будет запущена только при непосредственном запуске скрипта.
"""
