Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует приложение на PyQt6, которое позволяет добавлять и удалять пункт контекстного меню ('hypo AI assistant') в контекстное меню рабочего стола и папок в Windows Explorer.  Программа использует реестр Windows для управления этим пунктом. Код содержит функции `add_context_menu_item()` для добавления и `remove_context_menu_item()` для удаления пункта.  Он проверяет существование целевого файла перед добавлением, чтобы избежать ошибок.  Приложение имеет графический интерфейс с кнопками для добавления и удаления пункта меню и выхода.

Шаги выполнения
-------------------------
1. **Импортировать необходимые модули:** Код импортирует модули `winreg` для работы с реестром Windows, `os` для работы с файлами и путями, `QtWidgets` из PyQt6 для создания графического интерфейса и пользовательских импортов `header` и `gs` для инициализации настроек и путей.

2. **Определить функцию `add_context_menu_item()`:** Эта функция добавляет пункт контекстного меню.
    - Она устанавливает путь к ключу в реестре, где будет храниться информация о пункте меню.
    - Использует `reg.CreateKey` для создания ключа в реестре с именем пункта меню.
    - Записывает в реестр имя пункта меню.
    - Создает подключ `command` и записывает в него команду для запуска Python скрипта, указывая путь к скрипту и аргумент `%1`.
    - Проверяет, существует ли файл по указанному пути. Если нет, выводит сообщение об ошибке и завершает работу функции.
    - Выводит подтверждающее сообщение при успешном добавлении.
    - Обрабатывает возможные ошибки при работе с реестром.

3. **Определить функцию `remove_context_menu_item()`:** Эта функция удаляет пункт контекстного меню.
    - Указывает путь к ключу в реестре, который нужно удалить.
    - Использует `reg.DeleteKey` для удаления ключа из реестра.
    - Выводит подтверждающее сообщение при успешном удалении.
    - Обрабатывает `FileNotFoundError` в случае, если пункта меню нет.
    - Обрабатывает возможные ошибки при работе с реестром.

4. **Создать класс `ContextMenuManager`:** Этот класс управляет основным окном приложения.
    - Инициализирует интерфейс с помощью `initUI()`.
    - Создаёт кнопки для добавления, удаления и выхода.
    - Подключает обработчики событий для кнопок к соответствующим функциям.
    - Создаёт макет с помощью `QVBoxLayout()`.

5. **Запустить приложение:** В блоке `if __name__ == "__main__":`
    - Инициализируется приложение Qt.
    - Создаётся экземпляр класса `ContextMenuManager`.
    - Окно приложения отображается с помощью `show()`.
    - Запускается цикл обработки событий приложения `app.exec()`.


Пример использования
-------------------------
.. code-block:: python

    # Пример запуска приложения
    import sys
    from PyQt6 import QtWidgets
    from hypotez.src.gui.context_menu.qt6.main import ContextMenuManager

    app = QtWidgets.QApplication(sys.argv)
    window = ContextMenuManager()
    window.show()
    sys.exit(app.exec())