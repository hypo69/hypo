
CAN AM:
=================
Сложность: 5
-----------------
Игра "CAN AM" представляет собой симуляцию гонки по трассе. Игрок управляет машиной, определяя, сколько раз нужно нажать на газ, чтобы достичь финиша. Игрок должен правильно рассчитать ускорение, чтобы не вылететь с трассы или не остановиться слишком рано.

Правила игры:
1. Игрок начинает гонку с нулевой позиции.
2. Длина трассы задана и равна 200.
3. Каждый ход игрок вводит количество нажатий на газ (от 0 до 9).
4. Скорость автомобиля увеличивается на величину введенного значения.
5. Новое положение автомобиля вычисляется путем прибавления к текущей позиции величины текущей скорости.
6. Если позиция автомобиля становится меньше нуля или больше 200, игрок проигрывает гонку.
7. Если позиция автомобиля достигает 200 или больше, игрок выигрывает гонку.
8. Игра продолжается до тех пор, пока игрок не достигнет финиша или не вылетит с трассы.
-----------------
Алгоритм:
1. Установить начальное положение автомобиля в 0.
2. Установить начальную скорость автомобиля в 0.
3. Установить длину трассы в 200.
4. Начать цикл "пока машина не на финише или не вылетела с трассы":
    4.1 Запросить у игрока количество нажатий на газ.
    4.2 Увеличить скорость на введенное значение.
    4.3 Изменить положение, добавив к текущей позиции текущую скорость.
    4.4 Если положение меньше нуля или больше длины трассы, вывести сообщение "CRASH" и завершить игру.
    4.5 Если положение больше или равно длине трассы, вывести сообщение "WINNER" и завершить игру.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:<br><code><b>position = 0</b><br><b>speed = 0</b><br><b>trackLength = 200</b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не финиш и не краш"}
    LoopStart -- Да --> InputAcceleration["<p align='left'>Ввод ускорения:
    <code><b>acceleration = int(input())</b></code></p>"]
    InputAcceleration --> UpdateSpeed["<code><b>speed = speed + acceleration</b></code>"]
    UpdateSpeed --> UpdatePosition["<code><b>position = position + speed</b></code>"]
    UpdatePosition --> CheckCrash{"Проверка: <code><b>position < 0 or position > trackLength?</b></code>"}
    CheckCrash -- Да --> OutputCrash["Вывод сообщения: <b>CRASH</b>"]
    OutputCrash --> End["Конец"]
    CheckCrash -- Нет --> CheckWin{"Проверка: <code><b>position >= trackLength?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>WINNER</b>"]
    OutputWin --> End
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: position (текущая позиция) устанавливается в 0, speed (текущая скорость) устанавливается в 0, trackLength (длина трассы) устанавливается в 200.
    LoopStart - Начало цикла, который продолжается, пока машина не на финише и не произошла авария.
    InputAcceleration - Запрос у пользователя ввода ускорения и сохранение его в переменной acceleration.
    UpdateSpeed - Обновление скорости: к текущей скорости добавляется введенное ускорение.
    UpdatePosition - Обновление позиции: к текущей позиции добавляется текущая скорость.
    CheckCrash - Проверка, вышла ли позиция за пределы трассы (меньше 0 или больше trackLength).
    OutputCrash - Вывод сообщения "CRASH", если произошла авария.
    End - Конец программы.
    CheckWin - Проверка, достигла ли позиция конца трассы (больше или равна trackLength).
    OutputWin - Вывод сообщения "WINNER", если достигнут финиш.

```
import time

# Инициализация переменных
position = 0 # Начальная позиция автомобиля
speed = 0    # Начальная скорость автомобиля
trackLength = 200 # Длина трассы

print("Игра CAN AM началась!")
time.sleep(1)  # Задержка 1 секунду
# Основной игровой цикл
while True:
    print(f"Текущая позиция: {position}, текущая скорость: {speed}")
    # Запрашиваем у пользователя ввод ускорения
    try:
        acceleration = int(input("Введите ускорение (0-9): "))
    except ValueError:
        print("Пожалуйста, введите целое число от 0 до 9.")
        continue
    
    if acceleration < 0 or acceleration > 9:
      print("Ускорение должно быть в диапазоне от 0 до 9.")
      continue

    # Обновляем скорость
    speed += acceleration
    # Обновляем позицию
    position += speed

    # Проверяем, не вылетела ли машина с трассы
    if position < 0 or position > trackLength:
        print("CRASH! Вы вылетели с трассы!")
        break # Завершаем игру
    # Проверяем, не достигли ли финиша
    if position >= trackLength:
        print("WINNER! Вы достигли финиша!")
        break # Завершаем игру
    time.sleep(1) # Задержка 1 секунду

```
Объяснение кода:
1.  **Импорт модуля `time`**:
    -   `import time`: Импортирует модуль `time`, который используется для задержки выполнения программы.
2.  **Инициализация переменных**:
    -   `position = 0`: Инициализирует переменную `position` (начальное положение автомобиля) значением 0.
    -   `speed = 0`: Инициализирует переменную `speed` (начальная скорость автомобиля) значением 0.
    -   `trackLength = 200`: Инициализирует переменную `trackLength` (длина трассы) значением 200.
3. **Приветствие**:
    - Выводится сообщение "Игра CAN AM началась!".
    - time.sleep(1) - Делает задержку на 1 секунду.
4.  **Основной цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока игрок не достигнет финиша или не вылетит с трассы (будет выполнена команда `break`).
    -   `print(f"Текущая позиция: {position}, текущая скорость: {speed}")`: Выводит текущую позицию и скорость автомобиля.
    -   **Ввод данных**:
        -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `acceleration = int(input("Введите ускорение (0-9): "))`: Запрашивает у пользователя ускорение и преобразует его в целое число.
    -  **Проверка диапазона ускорения**:
        - `if acceleration < 0 or acceleration > 9:`: Проверяет, если ускорение выходит за пределы допустимого диапазона.
        - `print("Ускорение должно быть в диапазоне от 0 до 9.")`: Если ускорение неверное, выводит сообщение об ошибке и продолжает цикл со следующей итерации.
    -   **Обновление скорости и позиции**:
        -   `speed += acceleration`: Увеличивает текущую скорость автомобиля на значение введенного ускорения.
        -   `position += speed`: Обновляет текущую позицию автомобиля, прибавляя к ней текущую скорость.
    -   **Проверка на краш**:
        -   `if position < 0 or position > trackLength:`: Проверяет, вылетела ли машина за пределы трассы.
        -   `print("CRASH! Вы вылетели с трассы!")`: Выводит сообщение о проигрыше.
        -   `break`: Завершает цикл, если произошел краш.
    -   **Проверка на победу**:
        -   `if position >= trackLength:`: Проверяет, достигла ли машина финиша.
        -   `print("WINNER! Вы достигли финиша!")`: Выводит сообщение о победе.
        -   `break`: Завершает цикл, если игрок выиграл.
    -   `time.sleep(1)`: Делает паузу 1 секунду, чтобы игрок мог увидеть результаты.
```