Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Данный код представляет собой класс `Driver` из модуля `src.webdriver.driver`, предназначенный для работы с веб-драйверами Selenium. Он обеспечивает унифицированный интерфейс для инициализации, навигации, управления куками и прокрутки веб-страниц, а также обработки потенциальных ошибок.  Класс реализует методы для работы с веб-драйвером, например, перехода по URL, получения текущей страницы и прокрутки. Он также содержит обработку исключений для улучшения устойчивости к ошибкам.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**
   Код импортирует необходимые библиотеки, включая `selenium.webdriver`, `time`, `re`, `copy`, `pickle`, `pathlib`, и другие модули для работы с Selenium, логированием и обработкой исключений.

2. **Определение класса `Driver`:**
   Класс `Driver` принимает в качестве аргумента `webdriver_cls` класс веб-драйвера (например, `webdriver.Chrome`, `webdriver.Firefox`) и дополнительные параметры для его инициализации.  Он создаёт экземпляр веб-драйвера с помощью `webdriver_cls(*args, **kwargs)`.

3. **Инициализация класса `Driver`:**
   Метод `__init__` создаёт экземпляр веб-драйвера и сохраняет его в атрибуте `self.driver`.  Этот метод проверяет, что `webdriver_cls` является допустимым классом веб-драйвера.

4. **Метод `scroll`:**
   Этот метод позволяет прокручивать страницу в браузере. Он принимает параметры: `scrolls`, `frame_size`, `direction`, `delay`.  Метод `carousel` является вспомогательным методом для прокрутки.

5. **Метод `get_url`:**
   Метод `get_url` осуществляет переход по указанному URL. Он сохраняет предыдущий URL и текущий URL перед переходом. Если URL не совпадает, обновляется `self.previous_url`.  Метод сохраняет куки в локальном файле (`_save_cookies_localy`).

6. **Метод `wait`:**
   Метод `wait` осуществляет паузу на заданный интервал времени, что полезно для ожидания завершения асинхронных операций.

7. **Метод `_save_cookies_locally`:**
   Метод сохраняет куки текущего веб-драйвера в локальный файл.  В текущем виде реализация этого метода возвращает `True`, что не является корректной реализацией.

8. **Метод `locale`:**
   Метод `locale` определяет язык веб-страницы на основе мета-тегов или JavaScript.

9. **Метод `fetch_html`:**
   Метод `fetch_html` позволяет извлекать HTML-контент из файла или URL. Он обрабатывает как локальные файлы (с префиксом `file://`), так и удаленные URL.

10. **Обработка исключений:**
    Код содержит обработку исключений (`try...except`) для предотвращения аварийного завершения программы при возникновении ошибок (например, `WebDriverException`, `InvalidArgumentException`).


Пример использования
-------------------------
.. code-block:: python

    from selenium.webdriver import Chrome
    from hypotez.src.webdriver.driver import Driver

    # Укажите путь к исполняемому файлу драйвера Chrome
    driver = Driver(Chrome, executable_path='/path/to/chromedriver')

    # Переход по URL
    driver.get_url('https://www.example.com')

    # Проверка текущего URL
    current_url = driver.current_url
    print(current_url)

    # Прокрутка страницы
    driver.scroll(scrolls=3, direction='down')

    # Закрытие драйвера (важно!)
    driver.quit()