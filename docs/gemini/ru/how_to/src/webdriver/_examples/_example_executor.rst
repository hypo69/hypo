Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот Python-код демонстрирует использование класса `ExecuteLocator` для автоматизированного взаимодействия с веб-страницами с помощью Selenium. Он содержит примеры поиска элементов на странице по различным локеторам (XPath, CSS), обработки событий (например, клик), получения атрибутов и работы с текстовыми полями.  Код также демонстрирует обработку исключений, позволяя продолжить выполнение программы после ошибки.

Шаги выполнения
-------------------------
1. **Импортирование библиотек:**  Код импортирует необходимые библиотеки: `selenium`, `ExecuteLocator` из `src.webdriver.executor`, настройки из `src.settings` и обработку исключений из `src.logger.exceptions`.

2. **Создание экземпляра WebDriver:** Создается экземпляр WebDriver (в данном примере - Chrome) с указанием пути к исполняемому файлу драйвера.  Веб-драйвер инициализируется и переходит на указанный URL.

3. **Создание экземпляра ExecuteLocator:** Создается экземпляр класса `ExecuteLocator`, принимая в качестве аргумента экземпляр WebDriver.

4. **Примеры использования метода `execute_locator`:**  Код содержит несколько примеров использования метода `execute_locator` для поиска и взаимодействия с разными элементами на странице.  Примеры включают:
   - Простое нахождение элемента по XPath и получение его текста.
   - Нахождение нескольких элементов и выполнение различных действий (например, клик на элемент).
   - Нахождение элемента с обработкой исключений (повторное выполнение без остановки при ошибке).

5. **Пример использования метода `send_message`:**  Продемонстрирован пример отправки текста в текстовое поле.

6. **Пример использования `multi_locator`:** Показ как использовать локетор для множественных элементов.

7. **Пример использования `evaluate_locator`:** Получение значения атрибута элемента.

8. **Обработка исключений:** Код демонстрирует использование `try...except` для обработки `ExecuteLocatorException` и продолжения выполнения программы при ошибке.

9. **Полный тест:**  Пример демонстрирует полный тест поиска элемента и получения его текста.

10. **Закрытие WebDriver:** Код закрывает WebDriver (`driver.quit()`), освобождая ресурсы.

Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from src.webdriver.executor import ExecuteLocator
    from src import gs

    def example_usage():
        # Замените 'path/to/chromedriver' на действительный путь
        driver = webdriver.Chrome(executable_path=gs['chrome_driver_path'])
        driver.get("https://example.com")

        locator = ExecuteLocator(driver)
        simple_locator = {
            "by": "XPATH",
            "selector": "//h1",
            "attribute": "textContent",
            "mandatory": True,
            "locator_description": "Getting the page title"
        }

        result = locator.execute_locator(simple_locator)
        print(f"Result of executing simple locator: {result}")

        driver.quit()


    if __name__ == "__main__":
        example_usage()