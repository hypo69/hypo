<HI Q>:
=================
קושי: 4
-----------------
משחק "HI Q" הוא משחק לוח לשחקן יחיד המבוסס על קפיצות של כלי משחק מעל כלי משחק אחרים כדי להסיר אותם מהלוח. המטרה היא להשאיר כלי משחק אחד בלבד, ובאידיאל, שהוא יהיה במרכז הלוח. המשחק מתחיל עם לוח מלא בכלים, כאשר כלי אחד חסר במרכז. השחקן בוחר כלי לקפוץ איתו מעל כלי אחר לאחד הכיוונים, כתוצאה מהקפיצה, הכלי שקפצו מעליו מוסר מהלוח.
חוקי המשחק:
1. הלוח מורכב מ-15 משבצות, כאשר אחת מהן ריקה (במרכז).
2. כל שאר המשבצות מלאות בכלי משחק.
3. מהלך חוקי הוא קפיצה של כלי משחק מעל כלי משחק אחר, למשבצת ריקה.
4. הכלי שקופצים מעליו מוסר מהלוח.
5. המשחק מסתיים כאשר נשאר כלי משחק אחד בלבד.
6. המטרה היא להשאיר כלי משחק אחד בלבד במרכז הלוח.
-----------------
אלגוריתם:
1. אתחל את הלוח עם 15 משבצות.
2. הנח 14 כלי משחק במקומות המתאימים, והשאר משבצת ריקה במרכז.
3. הצג את הלוח למשתמש.
4. כל עוד יש יותר מכלי משחק אחד על הלוח:
   4.1. בקש מהמשתמש להזין את מיקום הכלי ממנו הוא רוצה לקפוץ (המשבצת ממנה).
   4.2. בקש מהמשתמש להזין את הכיוון לקפיצה.
   4.3. בדוק אם הקפיצה חוקית (יש כלי לקפוץ מעליו, ויש משבצת ריקה אחריו).
   4.4. אם הקפיצה חוקית:
       4.4.1. קפוץ עם הכלי, הסר את הכלי שקפצו מעליו.
       4.4.2. עדכן את הלוח.
   4.5. אם הקפיצה לא חוקית, הצג הודעה למשתמש.
   4.6. הצג את הלוח למשתמש.
5. אם נשאר רק כלי משחק אחד על הלוח, בדוק אם הוא במרכז הלוח והצג הודעה מתאימה.
6. סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeBoard["אתחול לוח המשחק: יצירת לוח עם 15 משבצות, 14 כלים, ומשבצת ריקה במרכז."]
    InitializeBoard --> DisplayBoard["הצג את לוח המשחק"]
    DisplayBoard --> LoopStart{"תחילת לולאה: כל עוד יש יותר מכלי משחק אחד"}
    LoopStart -- כן --> GetMove["קבל קלט מהמשתמש: מיקום הכלי ו כיוון הקפיצה."]
    GetMove --> ValidateMove{"בדיקת חוקיות הקפיצה: האם הקפיצה אפשרית על פי חוקי המשחק?"}
    ValidateMove -- כן --> MakeMove["בצע את הקפיצה: הסר את הכלי שקפצו מעליו, עדכן את מיקום הכלי הקופץ"]
     MakeMove --> UpdateBoard["עדכן את לוח המשחק"]
    UpdateBoard --> DisplayBoard
     ValidateMove -- לא --> InvalidMoveMessage["הצג הודעה: מהלך לא חוקי."]
    InvalidMoveMessage --> DisplayBoard
    LoopStart -- לא --> CheckWin["בדיקה: האם נשאר כלי אחד במרכז הלוח?"]
    CheckWin -- כן --> OutputWin["הצג הודעה: ניצחון!"]
    CheckWin -- לא --> OutputLose["הצג הודעה: הפסד!"]
    OutputWin --> End["סוף"]
    OutputLose --> End
```
Legenda:
    Start - התחלת התוכנית.
    InitializeBoard - אתחול לוח המשחק: יצירת לוח עם 15 משבצות, 14 כלים, ומשבצת ריקה במרכז.
    DisplayBoard - הצגת לוח המשחק למשתמש.
    LoopStart - תחילת הלולאה, הממשיכה כל עוד יש יותר מכלי משחק אחד.
    GetMove - קבלת קלט מהמשתמש: מיקום הכלי ו כיוון הקפיצה.
    ValidateMove - בדיקת חוקיות הקפיצה על פי חוקי המשחק.
    MakeMove - ביצוע הקפיצה: הסרת הכלי שקפצו מעליו ועדכון מיקום הכלי הקופץ.
    UpdateBoard - עדכון לוח המשחק.
    InvalidMoveMessage - הצגת הודעה שהמהלך לא חוקי.
    CheckWin - בדיקה האם נשאר כלי אחד בלבד במרכז הלוח.
    OutputWin - הצגת הודעה על ניצחון.
    OutputLose - הצגת הודעה על הפסד.
     End - סיום התוכנית.
"""
```python
# פונקציה להדפסת הלוח
def print_board(board):
    """
    מדפיסה את לוח המשחק בצורה גרפית.

    Args:
        board (list): רשימה המייצגת את הלוח.
    """
    print("  1 2 3 4 5")
    print("----------")
    row_num = 0
    for i in range(0,len(board),5):
        row_num +=1
        print(row_num, end='|')
        print(*board[i:i+5],sep='|')
    print("----------")

def is_valid_move(board, start, direction):
    """
    בודקת אם מהלך נתון הוא חוקי.

    Args:
        board (list): רשימה המייצגת את לוח המשחק.
        start (int): אינדקס המשבצת ממנה מתחיל המהלך.
        direction (str): כיוון המהלך ('u', 'd', 'l', 'r').

    Returns:
        bool: True אם המהלך חוקי, False אחרת.
    """
    if start < 0 or start >= len(board) or board[start] == '.':
        return False

    if direction == 'u':
        if start - 10 >= 0 and board[start - 5] != '.' and board[start - 10] == '.':
            return True
    elif direction == 'd':
        if start + 10 < len(board) and board[start + 5] != '.' and board[start + 10] == '.':
            return True
    elif direction == 'l':
        if (start % 5) > 1  and board[start - 1] != '.' and board[start - 2] == '.':
           return True
    elif direction == 'r':
        if (start % 5) < 3 and board[start + 1] != '.' and board[start + 2] == '.':
           return True
    return False

def make_move(board, start, direction):
     """
     מבצעת מהלך על הלוח.

     Args:
         board (list): רשימה המייצגת את לוח המשחק.
         start (int): אינדקס המשבצת ממנה מתחיל המהלך.
         direction (str): כיוון המהלך ('u', 'd', 'l', 'r').
     """
     board[start] = '.'
     if direction == 'u':
         board[start - 5] = '.'
         board[start - 10] = 'o'
     elif direction == 'd':
        board[start + 5] = '.'
        board[start + 10] = 'o'
     elif direction == 'l':
        board[start - 1] = '.'
        board[start - 2] = 'o'
     elif direction == 'r':
         board[start + 1] = '.'
         board[start + 2] = 'o'

def check_win(board):
    """
     בודקת האם המשחק הסתיים בניצחון.

     Args:
         board (list): רשימה המייצגת את לוח המשחק.

     Returns:
         bool: True אם המשחק הסתיים בניצחון, False אחרת.
     """
    count = 0
    last_position = 0
    for i in range(len(board)):
       if board[i] == 'o':
           count +=1
           last_position = i
    if count == 1 and last_position == 7:
        return True
    else:
        return False
def play_hi_q():
    """
    מגדירה את הלוגיקה של המשחק "HI Q".
    """
    board = ['o'] * 15  # אתחול לוח המשחק עם כלי משחק
    board[7] = '.'  # המשבצת האמצעית ריקה
    print("משחק HI Q")
    print_board(board)

    while True:
        count_pieces = board.count('o')
        if count_pieces == 1:
            break

        try:
           start = int(input("בחר את מיקום הכלי שממנו תרצה לקפוץ (1-15):")) - 1
           direction = input("בחר את כיוון הקפיצה (u/d/l/r):").lower()
           if direction not in ['u', 'd', 'l', 'r']:
                print("כיוון לא חוקי. בחר כיוון מתוך u, d, l, r")
                continue
        except (ValueError, IndexError):
            print("קלט לא חוקי. הזן מספר משבצת וכיוון תקינים")
            continue
        if is_valid_move(board,start,direction):
             make_move(board, start, direction)
             print_board(board)
        else:
            print("מהלך לא חוקי. נסה שוב.")
    if check_win(board):
      print("ניצחת! נשאר כלי אחד במרכז!")
    else:
      print("הפסדת! לא הצלחת להשאיר כלי אחד במרכז.")

if __name__ == "__main__":
    play_hi_q()
```
<הסבר מפורט לקוד>
הסבר הקוד:
1.  **פונקציה `print_board(board)`**:
    - מקבלת כקלט את רשימת הלוח ומדפיסה אותו בצורה גרפית.
    - מדפיסה כותרת של מספרי עמודות 1-5, וקו מפריד.
    - משתמשת בלולאה לעבור על הרשימה, כאשר כל שורה מכילה 5 אלמנטים, ומספר שורה.
    - מדפיסה קו מפריד בסוף הלוח.
2.  **פונקציה `is_valid_move(board, start, direction)`**:
    - מקבלת את לוח המשחק, מיקום התחלת המהלך וכיוון המהלך.
    - בודקת תקינות קלט של מיקום התחלת המהלך: האם בתוך טווח הלוח והאם יש כלי משחק במיקום זה.
    - עבור כל כיוון (למעלה, למטה, שמאלה, ימינה), בודקת האם קיימת משבצת לקפוץ אליה, האם קיים כלי באמצע לקפוץ מעליו, והאם המשבצת אליה קופצים ריקה.
    - מחזירה `True` אם המהלך חוקי ו-`False` אם לא.
3. **פונקציה `make_move(board, start, direction)`**:
    - מקבלת את לוח המשחק, מיקום התחלת המהלך וכיוון המהלך.
    - מסמנת את משבצת ההתחלה כריקה.
    - בהתאם לכיוון, מסמנת את משבצת הביניים כריקה ומשבצת היעד מלאה בכלי משחק.
4.  **פונקציה `check_win(board)`**:
    - מקבלת את לוח המשחק.
    - סופרת את כמות כלי המשחק שנותרו על הלוח.
    - בודקת אם נשאר רק כלי משחק אחד ובנוסף, שהוא נמצא במשבצת האמצעית של הלוח (אינדקס 7).
    - מחזירה `True` אם התנאי מתקיים, ו-`False` אחרת.
5.  **פונקציה `play_hi_q()`**:
    - יוצרת לוח משחק התחלתי: רשימה עם 15 משבצות המלאות בכלי משחק ('o'), למעט המשבצת האמצעית שהיא ריקה (' . ').
    - מדפיסה הודעת פתיחה ואת הלוח ההתחלתי.
    - לולאה אינסופית שרצה עד שנותר כלי משחק אחד.
    - קולטת מהמשתמש את מיקום הכלי שממנו הוא רוצה לקפוץ, וכיוון הקפיצה.
    - מטפלת בשגיאות קלט (כמו ערך לא תקין או אינדקס מחוץ לטווח).
    - קוראת לפונקציה `is_valid_move` לבדוק אם המהלך חוקי.
    - אם המהלך חוקי, קוראת לפונקציה `make_move` לעדכון הלוח ומדפיסה את הלוח המעודכן.
    - אם המהלך לא חוקי, מדפיסה הודעה למשתמש.
    - לאחר הלולאה, קוראת לפונקציה `check_win` לבדוק האם נשאר רק כלי משחק אחד במרכז הלוח ומדפיסה הודעה מתאימה.
6. **בלוק `if __name__ == "__main__":`**:
    - מוודא שהפונקציה `play_hi_q()` תרוץ רק כאשר הקובץ מופעל ישירות ולא כשמייבאים אותו כמודול.
</הסבר מפורט לקוד>
