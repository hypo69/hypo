"""
BOMBER:
=================
Сложность: 5
-----------------
Игра "Бомбардировщик" представляет собой игру, где игрок пытается сбросить бомбу на цель, используя координаты.
Игра представляет собой симуляцию бомбометания, где игрок вводит угол и расстояние до цели, пытаясь ее поразить.

Правила игры:
1. Компьютер задает случайную позицию цели на плоскости.
2. Игрок вводит угол (в градусах) и расстояние до цели.
3. Компьютер рассчитывает точку падения бомбы и определяет, попала ли бомба в цель.
4. Игра продолжается до тех пор, пока игрок не поразит цель или не сделает 10 неудачных попыток.
5. Если игрок попал в цель, то игра выводит поздравление.
6. Если игрок сделал 10 попыток и не попал в цель, то игра выводит сообщение о проигрыше.
-----------------
Алгоритм:
1.  Установить количество попыток в 0.
2.  Сгенерировать случайные координаты X и Y для цели в диапазоне от 1 до 100.
3. Начать цикл "пока не угадано или количество попыток меньше 10":
    3.1. Увеличить количество попыток на 1.
    3.2. Запросить у игрока угол (в градусах) и расстояние до цели.
    3.3. Рассчитать координаты X и Y для падения бомбы.
    3.4. Определить, попала ли бомба в цель: если расстояние от точки падения до цели меньше 5, то бомба попала.
    3.5. Если бомба попала в цель, то вывести сообщение о попадании и завершить игру.
    3.6. Если бомба не попала, вывести сообщение о том, что бомба не попала в цель и количество попыток.
4. Если цикл завершился по количеству попыток (10), то вывести сообщение о проигрыше.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetX = random(1, 100)
    targetY = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано или numberOfGuesses < 10"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputAngleDistance["Ввод угла (angle) и расстояния (distance) пользователем"]
    InputAngleDistance --> CalculateBombCoordinates["<p align='left'>Расчет координат падения бомбы:
    <code><b>
    bombX = distance * cos(angle)
    bombY = distance * sin(angle)
    </b></code></p>"]
    CalculateBombCoordinates --> CalculateDistanceToTarget["<p align='left'>Расчет расстояния от бомбы до цели:
    <code><b>
    distanceToTarget = sqrt((bombX - targetX)^2 + (bombY - targetY)^2)
    </b></code></p>"]
    CalculateDistanceToTarget --> CheckHit{"Проверка: <code><b>distanceToTarget < 5?</b></code>"}
    CheckHit -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckHit -- Нет --> CheckAttempts{"Проверка: <code><b>numberOfGuesses == 10</b></code>"}
    CheckAttempts -- Да --> OutputLose["Вывод сообщения: <b>YOU MISSED THE TARGET AFTER 10 ATTEMPTS</b>"]
    OutputLose --> End
    CheckAttempts -- Нет --> OutputMissed["Вывод сообщения: <b>MISSED!</b>"]
    OutputMissed --> LoopStart
    LoopStart -- Нет --> End
```
**Legenda:**
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, targetX и targetY (координаты цели) генерируются случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока число не угадано и количество попыток меньше 10.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputAngleDistance - Запрос у пользователя ввода угла и расстояния до цели.
    CalculateBombCoordinates - Расчет координат падения бомбы на основе введенного угла и расстояния.
    CalculateDistanceToTarget - Расчет расстояния между точкой падения бомбы и целью.
    CheckHit - Проверка, попала ли бомба в цель (расстояние до цели меньше 5).
    OutputWin - Вывод сообщения о победе, если бомба попала в цель, с указанием количества попыток.
    End - Конец программы.
    CheckAttempts - Проверка, равно ли количество попыток 10.
    OutputLose - Вывод сообщения о проигрыше, если количество попыток равно 10.
    OutputMissed - Вывод сообщения "MISSED!", если бомба не попала в цель.
"""
import random
import math

# Инициализация переменных
numberOfGuesses = 0 # Счетчик попыток
targetX = random.randint(1, 100) # Случайная координата X цели
targetY = random.randint(1, 100) # Случайная координата Y цели
print("Цель находится в координатах X от 1 до 100, Y от 1 до 100")

# Основной игровой цикл
while numberOfGuesses < 10:
    numberOfGuesses += 1 # Увеличиваем счетчик попыток
    
    # Запрашиваем ввод данных у пользователя
    try:
        angle = float(input("Введите угол в градусах: ")) # угол выстрела
        distance = float(input("Введите расстояние: ")) # растояние до цели
    except ValueError:
        print("Пожалуйста, введите числовые значения.")
        continue
    
    # Конвертируем угол в радианы (необходимо для math.cos() и math.sin())
    angle_radians = math.radians(angle) 
    
    # Вычисляем координаты падения бомбы
    bombX = distance * math.cos(angle_radians)
    bombY = distance * math.sin(angle_radians)
    
    # Вычисляем расстояние между бомбой и целью
    distanceToTarget = math.sqrt((bombX - targetX)**2 + (bombY - targetY)**2)
    
    # Проверяем, попала ли бомба в цель
    if distanceToTarget < 5:
        print(f"ПОЗДРАВЛЯЮ! Вы поразили цель за {numberOfGuesses} попыток!")
        break # Завершаем игру
    else:
        print("Промах! Попытка ", numberOfGuesses)
        

# Если все попытки исчерпаны, выводим сообщение о проигрыше
if numberOfGuesses == 10:
  print("Вы промахнулись после 10 попыток. Координаты цели были: X=", targetX, "Y=", targetY)

"""
Объяснение кода:

1.  **Импорт модулей**:
    - `import random`: импортирует модуль `random` для генерации случайных чисел
    - `import math`: импортирует модуль `math` для использования математических функций, таких как `cos`, `sin` и `sqrt`

2.  **Инициализация переменных**:
    - `numberOfGuesses = 0`: инициализирует счетчик попыток.
    - `targetX = random.randint(1, 100)`: генерирует случайную x-координату цели.
    - `targetY = random.randint(1, 100)`: генерирует случайную y-координату цели.

3.  **Основной игровой цикл**:
    - `while numberOfGuesses < 10`: цикл выполняется, пока количество попыток не достигнет 10.
    - `numberOfGuesses += 1`: увеличивает счетчик попыток на 1.
    - **Ввод данных**:
        - `try...except ValueError`: блок try-except для обработки ошибок ввода (если пользователь введет не число).
        - `angle = float(input("Введите угол в градусах: "))`: запрашивает угол в градусах у пользователя.
        - `distance = float(input("Введите расстояние: "))`: запрашивает расстояние до цели у пользователя.
    - **Расчет координат бомбы**:
        - `angle_radians = math.radians(angle)`: конвертирует угол из градусов в радианы.
        - `bombX = distance * math.cos(angle_radians)`: рассчитывает x-координату падения бомбы.
        - `bombY = distance * math.sin(angle_radians)`: рассчитывает y-координату падения бомбы.
    - **Расчет расстояния до цели**:
        - `distanceToTarget = math.sqrt((bombX - targetX)**2 + (bombY - targetY)**2)`: рассчитывает расстояние от бомбы до цели, используя теорему Пифагора.
    - **Проверка попадания**:
        - `if distanceToTarget < 5:`: проверяет, попала ли бомба в цель (если расстояние до цели меньше 5).
        - Выводится сообщение о победе и количество попыток, игра завершается (`break`).
    - **Сообщение о промахе**:
        -  `else:`: выводит сообщение о промахе и количество попыток.
4.  **Завершение игры по количеству попыток**:
    - `if numberOfGuesses == 10:`: если количество попыток достигло 10.
    - Выводится сообщение о проигрыше и координаты цели.
"""
