Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код предоставляет функции для отправки и получения электронных писем через SMTP и IMAP серверы.  Модуль `smtp.py` содержит функции `send` для отправки и `receive` для получения писем.  Он обрабатывает как отправку, так и получение писем с использованием протоколов SMTP и IMAP. Функции содержат встроенную обработку ошибок, которая записывает подробности об ошибках в лог.  Важный момент:  кредиты (сервер, логин, пароль) должны быть заданы через переменные окружения, а не в коде для обеспечения безопасности.

Шаги выполнения
-------------------------
**Отправка письма (функция `send`):**

1. **Подключение к SMTP серверу:** Функция устанавливает соединение с SMTP сервером, используя предоставленные в переменных окружения данные.
2. **Проверка и настройка соединения:** Проверяет корректность подключения и использует TLS для безопасного соединения.
3. **Авторизация:** Используя предоставленные в переменных окружения учетные данные, выполняет вход в систему на SMTP сервере.
4. **Создание письма:** Создает объект сообщения `MIMEText`, задавая тему, тело и адреса отправителя и получателя.
5. **Отправка письма:** Функция отправляет электронное письмо.
6. **Закрытие соединения:** Закрывает подключение к SMTP серверу.
7. **Обработка ошибок:** Обрабатывает возможные исключения при отправке письма и записывает сообщения об ошибках в лог. Возвращает `True` в случае успеха и `False` в случае неудачи.

**Получение писем (функция `receive`):**

1. **Подключение к IMAP серверу:** Функция подключается к IMAP серверу, используя предоставленные в переменных окружения данные.
2. **Проверка и настройка соединения:** Подключается к серверу с использованием SSL для безопасного соединения.
3. **Авторизация:** Используя предоставленные в переменных окружения учетные данные, выполняет вход в систему на IMAP сервере.
4. **Выбор папки:** Выбирает папку на сервере, из которой будут извлечены письма.
5. **Получение списка писем:**  Получает список идентификаторов всех писем в выбранной папке.
6. **Извлечение каждого письма:** Для каждого идентификатора письма извлекает полное содержание письма.
7. **Парсинг письма:**  Извлекает заголовок (subject), отправителя (`from`) и тело (`body`) письма. Обрабатывает кодировку тела для правильного отображения.
8. **Формирование словаря:** Формирует словарь данных для каждого письма.
9. **Добавление в список:** Добавляет словарь данных в список `emails`.
10. **Закрытие соединения:** Закрывает подключение к IMAP серверу.
11. **Обработка ошибок:** Обрабатывает возможные исключения при получении писем и записывает сообщения об ошибках в лог.  Возвращает список словарей с данными о письмах при успехе, `None` - в случае неудачи.


Пример использования
-------------------------
.. code-block:: python

    import os
    # Установите переменные окружения для SMTP сервера, порта, пользователя, пароля и получателя
    os.environ['SMTP_SERVER'] = 'ваш_smtp_сервер'
    os.environ['SMTP_PORT'] = '587'
    os.environ['SMTP_USER'] = 'ваш_логин'
    os.environ['SMTP_PASSWORD'] = 'ваш_пароль'
    os.environ['SMTP_RECEIVER'] = 'получатель@example.com'


    # Отправка письма
    success = send(subject='Тестовое письмо', body='Тело письма', to='получатель@example.com')
    if success:
        print("Письмо отправлено успешно")
    else:
        print("Ошибка отправки письма")


    # Получение писем
    emails = receive('imap.example.com', 'ваш_логин', 'ваш_пароль')
    if emails:
        for email in emails:
            print(f"Тема: {email['subject']}, Отправитель: {email['from']}, Тело: {email['body']}")
    else:
        print("Ошибка получения писем")