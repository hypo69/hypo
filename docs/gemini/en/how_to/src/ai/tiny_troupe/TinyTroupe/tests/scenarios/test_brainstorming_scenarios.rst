rst
How to use this code block
=========================================================================================

Description
-------------------------
This Python code defines a test function `test_brainstorming_scenario` that simulates a brainstorming session within a simulated social network environment. It sends a message to a group of agents, prompting them to brainstorm ideas for a new product feature in Microsoft Word. The function then extracts and summarizes the ideas generated by the agents, evaluating the results against an assertion.


Execution steps
-------------------------
1. **Import necessary modules:** The code starts by importing various modules, including `pytest`, `logging`, `sys`, and custom modules from the `tinytroupe` package for simulating agents and a social network.


2. **Configure the environment:**  It sets up a `TinyWorld` and potentially other required environments (e.g., `TinySocialNetwork`) and loads data like initial messages and agents.


3. **Broadcast a message:** The code broadcasts a message to the agents instructing them to brainstorm ideas for a new AI feature in Microsoft Word, outlining expectations and desired outputs.


4. **Run the simulation:** The `world.run(1)` step simulates the interaction for a specified timeframe or until a termination condition is met.


5. **Identify the agent:** It retrieves a specific agent ("Lisa") from the simulated environment.


6. **Extract the agent's response:** The code instructs the agent to summarize the brainstorming session's ideas.


7. **Extract and process results:**  A `ResultsExtractor` object is used to extract relevant results from the agent's response. This step includes a detailed specification of the desired format of the summary, which includes a list of ideas, benefits, and drawbacks for each.


8. **Print and evaluate the results:** The extracted summary (`results`) is printed, and an assertion is made to verify that the summary meets an expected format.  The assertion `proposition_holds` checks if the output `results` string conforms to the asserted format


Usage example
-------------------------
.. code-block:: python

    import pytest
    # ... (Import statements from the original code) ...
    
    # ... (Setup function, focus_group_world, etc., from original code) ...

    def test_brainstorming_scenario(setup, focus_group_world):
        # ... (rest of the setup, message broadcasting, simulation steps are the same) ...
        
        results = extractor.extract_results_from_agent(agent,
                                           extraction_objective="Summarize the the ideas that the group came up with, explaining each idea as an item of a list. Describe in details the benefits and drawbacks of each.",
                                           situation="A focus group to brainstorm ideas for a new product.")
        
        assert proposition_holds(f"The following contains some ideas for new product features or entirely new products: '{results}'"), f"Proposition is false according to the LLM."