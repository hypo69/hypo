Как использовать этот блок кода
========================================================================================

Описание
-------------------------
Этот код определяет метакласс `DriverMeta`, предназначенный для динамического создания класса `Driver`, который наследует как от базового класса `Driver`, так и от указанного класса Selenium WebDriver (`Chrome`, `Firefox` или `Edge`). Метакласс отвечает за инициализацию корректной комбинации этих классов.

Шаги выполнения
-------------------------
1. **Определение метакласса `DriverMeta`**: Код определяет метакласс `DriverMeta`, который используется для управления созданием нового класса `Driver`.

2. **Метод `__call__`**: Метод `__call__` метакласса вызывается при создании экземпляра класса. В данном случае он используется для создания нового класса `Driver`, который наследует от базового класса `Driver` и одного из классов Selenium WebDriver (`Chrome`, `Firefox`, или `Edge`). Он принимает `cls` (базовый класс `Driver`), `webdriver_cls` (класс Selenium WebDriver) и аргументы `*args` и `**kwargs` для конструктора класса `Driver`.

3. **Проверка типов**: Код проверяет, что `webdriver_cls` является классом (`isinstance(webdriver_cls, type)`) и что это подкласс одного из допустимых классов WebDriver (`Chrome`, `Firefox` или `Edge`) (`issubclass(webdriver_cls, Chrome | Firefox | Edge)`).

4. **Динамическое создание класса `Driver`**:  Внутри метода `__call__` динамически определяется новый класс `Driver`. Этот новый класс наследует как от `cls` (базового класса `Driver`), так и от `webdriver_cls` (указанного класса WebDriver).

5. **Конструктор класса `Driver`**: Конструктор `__init__` динамически созданного класса `Driver` регистрирует инициализацию WebDriver с его именем и аргументами, вызывает конструкторы родительских классов с помощью `super()`, а также вызывает метод `driver_payload`.

6. **Метод `driver_payload`**: Этот метод определен внутри динамически созданного класса `Driver` и вызывает метод `driver_payload` из родительского класса `Driver`. Это гарантирует выполнение любых дополнительных инициализаций, необходимых классу `Driver`.

7. **Возврат динамически созданного класса `Driver`**: Новый класс `Driver` инициализируется с предоставленными аргументами и возвращается.


Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service  # Пример
    from selenium.webdriver.chrome.options import Options # Пример

    # ... (определение базового класса Driver и классов WebDriver) ...

    # Создание экземпляра драйвера с Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless") # Пример
    service = Service('path/to/chromedriver') # Пример
    chrome_driver = Driver(webdriver.Chrome, service=service, options=chrome_options)