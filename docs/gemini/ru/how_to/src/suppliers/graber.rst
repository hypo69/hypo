Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет базовый класс `Graber` для сбора данных с веб-страниц поставщиков.  Класс `Graber` использует веб-драйвер (класс `Driver`) для извлечения данных из HTML, а локаторы полей определяются в JSON-файлах в папке `locators`.  Он содержит множество асинхронных методов (`async def`), каждый из которых отвечает за извлечение значения конкретного поля товара (например, `name`, `price`, `description`).  Ключевым элементом является декоратор `@close_pop_up`, который используется для автоматического закрытия всплывающих окон перед выполнением основных задач.  В классе также реализован обработчик ошибок `error` для логирования проблем с извлечением данных.


Шаги выполнения
-------------------------
1. **Инициализация класса `Graber`:** Создается экземпляр класса `Graber`, передавая ему префикс поставщика и веб-драйвер.  Это загрузят необходимые локаторы из JSON-файла.
2. **Использование методов для извлечения данных:** Вызываются асинхронные методы (`async def`), соответствующие нужному полю, например: `await graber_instance.name()`.   Метод извлекает значение поля, используя локаторы, заданные в файлах `locators`.
3. **Обработка ошибок:** Каждый метод извлечения содержит блок обработки исключений (`try...except`). Если происходит ошибка при выполнении локатора,  сообщение об ошибке записывается в лог (`logger`).
4. **Установка значений в `ProductFields`:** Извлеченное значение сохраняется в соответствующем поле объекта `ProductFields`.
5. **Возвращаемое значение:** Методы возвращают `True`, если извлечение успешно, или `None` или `False` при ошибке.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from pathlib import Path
    from src import gs
    from src.webdriver import Driver
    from hypotez.src.suppliers.graber import Graber, Context

    # Предположим, у вас есть инициализированный веб-драйвер
    driver = Driver()
    Context.driver = driver

    # Префикс поставщика
    supplier_prefix = "example_supplier"
    
    # Локаторы будут загружены из файла product.json
    graber = Graber(supplier_prefix, driver)

    # Извлечение данных для поля "Имя товара"
    async def grab_name():
        await graber.name()
        print(f"Имя товара: {graber.fields.name}")

    # Запуск асинхронной функции
    asyncio.run(grab_name())