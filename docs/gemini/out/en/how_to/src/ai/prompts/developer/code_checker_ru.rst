rst
How to use this code block
========================================================================================

Description
-------------------------
Этот код представляет собой шаблон для генерации документации к коду. Он описывает, как структурировать и форматировать документацию, следуя принципам reStructuredText (RST).  Код анализирует входной код Python, добавляет комментарии, улучшает форматирование и возвращает оптимизированную версию кода вместе с отчетом об изменениях.


Execution steps
-------------------------
1. **Анализ входного кода:** Программа анализирует входной блок кода Python, Markdown или RST, определяя его структуру и содержание.
2. **Добавление комментариев:** В соответствии с инструкциями, программа добавляет подробные RST-комментарии к функциям, методам и классам, объясняя их назначение, параметры и возвращаемые значения.
3. **Улучшение форматирования:**  Код форматируется, добавляются пробелы вокруг оператора присваивания (=), используются одинарные кавычки ('') для строк, а также исправляется использование `j_loads` и `j_loads_ns` для загрузки конфигураций.
4. **Сохранение исходных комментариев:** Все существующие комментарии (#) сохраняются без изменений.
5. **Генерация отчета об изменениях:**  Программа создает отчет об изменениях, описывая добавленные или изменённые части кода и комментариев.
6. **Возврат результата:**  Функция возвращает структурированный ответ, содержащий: оригинальный код, улучшенный код, отчет об изменениях и оптимизированный полный код.


Usage example
-------------------------
.. code-block:: python

    # Входной код (пример)
    def add_numbers(a, b):
        return a + b

    # Ожидаемый выход (улучшенный код)
    def add_numbers(a: int, b: int) -> int:
        """
        Функция складывает два числа.

        :param a: Первое число.
        :type a: int
        :param b: Второе число.
        :type b: int
        :returns: Сумма чисел `a` и `b`.
        :rtype: int
        """
        return a + b