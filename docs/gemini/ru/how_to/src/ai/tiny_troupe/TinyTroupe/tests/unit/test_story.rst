Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Данный код содержит тесты для класса `TinyStory`, отвечающего за генерацию и продолжение историй. Тесты проверяют корректность работы методов `start_story` и `continue_story` в контексте виртуального мира `TinyWorld`.  Они проверяют, что сгенерированные истории соответствуют заданным требованиям (например, содержат определенных персонажей, имеют определенный характер).  Также проверяется возможность продолжения истории, начатой в предшествующем контексте.

Шаги выполнения
-------------------------
1. **Импортирование необходимых модулей:** Код импортирует необходимые модули, включая `pytest`, `logging`, `tinytroupe`, `TinyStory`, `TinyWorld`, `TinySocialNetwork`,  и другие вспомогательные классы.
2. **Установка путей:**  `sys.path.append(...)` добавляет пути к необходимым файлам для импорта.
3. **Создание тестовых функций:**  Функции `test_story_start`, `test_story_start_2`, `test_story_continuation`  являются тестовыми функциями, определяющими действия.
4. **Инициализация `TinyWorld`:**  В каждой тестовой функции создается объект `TinyWorld` (`focus_group_world`), который представляет виртуальный мир.
5. **Инициализация `TinyStory`:** В каждой тестовой функции создается объект `TinyStory`, используя `TinyWorld`.
6. **Вызов `start_story` или `continue_story`:** В зависимости от типа теста вызывается метод `start_story` для начала истории или `continue_story` для продолжения существующей истории, с опциональными параметрами.
7. **Вывод результата:** Результат выполнения метода печатается.
8. **Проверка результата:** Используя функцию `proposition_holds`, проверяется, соответствует ли полученный результат заданным ожиданиям.  Функция `proposition_holds`  определена в модуле `testing_utils` и предположительно проверяет, соответствует ли сгенерированная история определенным критериям.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    # ... (Импорты из примера)

    # Предполагая наличие focus_group_world и setup
    def test_example_story_start(setup, focus_group_world):
        world = focus_group_world
        story = TinyStory(world)
        start = story.start_story(requirements="Start a story about a detective investigating a case.")
        print("Story start: ", start)
        assert proposition_holds(f"The following could plausibly be the start of a detective story: \'{start}\'")