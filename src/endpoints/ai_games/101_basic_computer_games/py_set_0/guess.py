"""
GUESS:
=================
Сложность: 3
-----------------
Игра "Угадай число" - это простая игра, в которой компьютер выбирает случайное число в заданном диапазоне, а игрок пытается его угадать. 
После каждой попытки компьютер сообщает, было ли введенное число больше или меньше загаданного.

Правила игры: 
1. Компьютер выбирает случайное целое число от 1 до 100.
2. Игрок вводит свое предположение.
3. Компьютер сообщает, было ли предположение больше или меньше загаданного числа.
4. Игра продолжается, пока игрок не угадает число.
5. После угадывания числа, игра завершается и выводится количество попыток.
-----------------
Алгоритм:
1. Инициализация:
   - Задать случайное число в диапазоне от 1 до 100.
   - Обнулить счетчик попыток.
2. Цикл угадывания:
   - Запросить у игрока число.
   - Увеличить счетчик попыток.
   - Сравнить введенное число с загаданным:
     - Если введенное число меньше загаданного, вывести сообщение "TOO LOW".
     - Если введенное число больше загаданного, вывести сообщение "TOO HIGH".
     - Если введенное число равно загаданному, перейти к шагу 3.
3. Завершение игры:
   - Вывести сообщение "YOU GOT IT IN " + количество попыток + " TRIES".
-----------------
Блок-схема: 
```mermaid
graph TD
    Start[Start] --> Initialize[Initialize: randomNumber = random(1, 100), attempts = 0];
    Initialize --> Input[Input: Get userGuess];
    Input --> Increment[Increment: attempts = attempts + 1];
    Increment --> Compare[Compare: userGuess with randomNumber];
    Compare -- userGuess < randomNumber --> TooLowOutput[Output: "TOO LOW"];
    TooLowOutput --> Input;
    Compare -- userGuess > randomNumber --> TooHighOutput[Output: "TOO HIGH"];
    TooHighOutput --> Input;
    Compare -- userGuess == randomNumber --> End[Output: "YOU GOT IT IN " + attempts + " TRIES"];
    End --> Stop[End];
```
"""
import random

def play_guess_game():
    """
    Основная функция, запускающая игру "Угадай число".
    """
    # 1. Инициализация:
    random_number = random.randint(1, 100)  # Генерируем случайное число от 1 до 100
    attempts = 0  # Инициализируем счетчик попыток

    # 2. Цикл угадывания:
    while True:
        try:
            user_guess = int(input("Угадайте число от 1 до 100: "))  # Запрашиваем ввод пользователя
            attempts += 1  # Увеличиваем счетчик попыток

            # Сравниваем введенное число с загаданным
            if user_guess < random_number:
                print("TOO LOW")  # Выводим сообщение, если число слишком маленькое
            elif user_guess > random_number:
                print("TOO HIGH")  # Выводим сообщение, если число слишком большое
            else:
                # 3. Завершение игры:
                print("YOU GOT IT IN", attempts, "TRIES")  # Выводим сообщение о выигрыше и количестве попыток
                break  # Завершаем игру
        except ValueError:
            print("Пожалуйста, введите целое число.") # Обработка некорректного ввода

# Запускаем игру
if __name__ == "__main__":
    play_guess_game()
"""
Пояснения:
    1. `import random`: Импортирует модуль `random`, который позволяет генерировать случайные числа.
    2. `def play_guess_game():`: Определяет функцию `play_guess_game`, которая содержит всю логику игры.
    3. `random_number = random.randint(1, 100)`: Генерирует случайное целое число между 1 и 100 включительно и сохраняет его в переменной `random_number`.
    4. `attempts = 0`: Инициализирует переменную `attempts`, которая будет подсчитывать количество попыток пользователя, значением 0.
    5. `while True:`: Начинает бесконечный цикл, который будет выполняться до тех пор, пока пользователь не угадает число.
    6. `user_guess = int(input("Угадайте число от 1 до 100: "))`: Запрашивает у пользователя ввод числа и преобразует его в целое число.
    7. `attempts += 1`: Увеличивает счетчик попыток на 1.
    8. `if user_guess < random_number:`: Проверяет, является ли введенное число меньше загаданного. Если да, то выводит сообщение "TOO LOW".
    9. `elif user_guess > random_number:`: Проверяет, является ли введенное число больше загаданного. Если да, то выводит сообщение "TOO HIGH".
    10. `else:`: Если ни одно из предыдущих условий не выполнено, то это означает, что пользователь угадал число.
    11. `print("YOU GOT IT IN", attempts, "TRIES")`: Выводит сообщение о победе и количестве попыток.
    12. `break`: Выходит из цикла `while`, завершая игру.
    13. `if __name__ == "__main__": play_guess_game()`: Запускает функцию `play_guess_game()`, если скрипт запущен как основная программа.
    14. `try...except ValueError:`: Обрабатывает ошибку, если пользователь введет не целое число, выводя сообщение об ошибке.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```