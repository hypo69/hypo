```
WAR:
=================
Сложность: 3
-----------------
Игра "Война" - это карточная игра для двух игроков, в которой используется стандартная колода из 52 карт. Игроки делят колоду пополам и поочередно выкладывают по одной карте. Игрок, карта которого имеет более высокое значение, выигрывает раунд и забирает обе карты. Если карты одинакового значения, объявляется "война" - игроки выкладывают еще по три карты в закрытую, а затем открывают четвертую, которая и определяет победителя.

Правила игры:
1.  Используется стандартная колода из 52 карт.
2.  Колода делится пополам между двумя игроками.
3.  Каждый игрок в свою очередь выкладывает верхнюю карту из своей колоды.
4.  Игрок с картой большего достоинства забирает обе карты и кладет их в конец своей колоды.
5.  Если карты одинакового достоинства, объявляется "война":
    - Каждый игрок выкладывает по 3 карты в закрытую.
    - Затем каждый игрок выкладывает четвертую карту в открытую.
    - Игрок с большей четвертой картой выигрывает "войну" и забирает все карты (10) из этого раунда.
6.  Игра продолжается до тех пор, пока один из игроков не останется без карт.
7.  Игрок, у которого остаются карты, объявляется победителем.

-----------------
Алгоритм:
1.  Создать колоду из 52 карт.
2.  Перемешать колоду.
3.  Разделить колоду поровну между двумя игроками.
4.  Начать цикл "пока оба игрока имеют карты":
    4.1 Каждый игрок выкладывает верхнюю карту из своей колоды.
    4.2 Если карта первого игрока больше карты второго игрока, первый игрок забирает обе карты и кладет их в конец своей колоды.
    4.3 Если карта второго игрока больше карты первого игрока, второй игрок забирает обе карты и кладет их в конец своей колоды.
    4.4 Если карты равны, объявить "войну":
        4.4.1 Если у какого-либо игрока недостаточно карт для "войны" (меньше 4), то он проигрывает.
        4.4.2 Каждый игрок выкладывает по три карты в закрытую.
        4.4.3 Каждый игрок выкладывает четвертую карту в открытую.
        4.4.4 Игрок с большей четвертой картой забирает все карты (10) и добавляет их в конец своей колоды. Если карты опять равны, то повторяется "война".
5.  Вывести сообщение о победителе (игрок, у которого остались карты).
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> CreateDeck["Создание колоды из 52 карт"]
    CreateDeck --> ShuffleDeck["Перемешивание колоды"]
    ShuffleDeck --> DivideDeck["Разделение колоды поровну между двумя игроками"]
    DivideDeck --> GameLoopStart{"Начало игрового цикла: пока у обоих игроков есть карты"}
    GameLoopStart -- Да --> Player1Card["Игрок 1 выкладывает карту"]
    GameLoopStart -- Да --> Player2Card["Игрок 2 выкладывает карту"]
    Player1Card --> CompareCards{"Сравнение карт: <code>card1 > card2</code>?"}
    CompareCards -- Да --> Player1WinsRound["Игрок 1 выигрывает раунд"]
     Player1WinsRound --> AddCardsToPlayer1Deck["Игрок 1 забирает обе карты и добавляет их в конец своей колоды"]
      AddCardsToPlayer1Deck --> GameLoopStart
    CompareCards -- Нет --> CompareCards2{"Сравнение карт: <code>card1 < card2</code>?"}
    CompareCards2 -- Да --> Player2WinsRound["Игрок 2 выигрывает раунд"]
     Player2WinsRound --> AddCardsToPlayer2Deck["Игрок 2 забирает обе карты и добавляет их в конец своей колоды"]
     AddCardsToPlayer2Deck --> GameLoopStart
    CompareCards2 -- Нет --> WarStart{"Объявление войны: <code>card1 == card2</code>"}
    WarStart --> CheckWarCards{"Проверка: есть ли у игроков 4 карты для войны?"}
    CheckWarCards -- Нет --> DetermineWinner["Определение победителя (у кого остались карты)"]
    DetermineWinner --> End["Конец игры"]
    CheckWarCards -- Да --> Player1WarCards["Игрок 1 выкладывает 3 карты в закрытую и 1 открытую"]
    Player1WarCards --> Player2WarCards["Игрок 2 выкладывает 3 карты в закрытую и 1 открытую"]
    Player2WarCards --> CompareWarCards{"Сравнение открытых карт войны: <code>warCard1 > warCard2</code>?"}
    CompareWarCards -- Да --> Player1WinsWar["Игрок 1 выигрывает войну"]
    Player1WinsWar --> AddWarCardsToPlayer1Deck["Игрок 1 забирает все карты войны"]
    AddWarCardsToPlayer1Deck --> GameLoopStart
     CompareWarCards -- Нет --> CompareWarCards2{"Сравнение открытых карт войны: <code>warCard1 < warCard2</code>?"}
     CompareWarCards2 -- Да --> Player2WinsWar["Игрок 2 выигрывает войну"]
    Player2WinsWar --> AddWarCardsToPlayer2Deck["Игрок 2 забирает все карты войны"]
    AddWarCardsToPlayer2Deck --> GameLoopStart
     CompareWarCards2 -- Нет --> WarStart
        
    GameLoopStart -- Нет --> DetermineWinner
```
Legenda:
    Start - Начало программы.
    CreateDeck - Создание стандартной колоды из 52 карт.
    ShuffleDeck - Перемешивание созданной колоды.
    DivideDeck - Разделение колоды поровну между двумя игроками.
    GameLoopStart - Начало основного игрового цикла, который продолжается, пока у обоих игроков есть карты.
    Player1Card - Игрок 1 выкладывает верхнюю карту из своей колоды.
    Player2Card - Игрок 2 выкладывает верхнюю карту из своей колоды.
    CompareCards - Сравнение карт, выложенных игроками, определяет, у кого карта больше.
    Player1WinsRound - Игрок 1 выигрывает раунд, если его карта больше.
    AddCardsToPlayer1Deck - Игрок 1 забирает обе карты и добавляет их в конец своей колоды.
    Player2WinsRound - Игрок 2 выигрывает раунд, если его карта больше.
    AddCardsToPlayer2Deck - Игрок 2 забирает обе карты и добавляет их в конец своей колоды.
     WarStart - Начало "войны" если карты имеют одинаковые значения.
    CheckWarCards - Проверка, достаточно ли у игроков карт для "войны" (не менее 4).
     DetermineWinner - Определение победителя, если у одного из игроков закончились карты.
    End - Конец программы.
    Player1WarCards - Игрок 1 выкладывает 3 карты в закрытую и одну открытую для "войны".
    Player2WarCards - Игрок 2 выкладывает 3 карты в закрытую и одну открытую для "войны".
    CompareWarCards - Сравнение открытых карт в "войне" для определения победителя.
    Player1WinsWar - Игрок 1 выигрывает "войну".
     AddWarCardsToPlayer1Deck - Игрок 1 забирает все карты из раунда войны и добавляет их в конец своей колоды.
    Player2WinsWar - Игрок 2 выигрывает "войну".
    AddWarCardsToPlayer2Deck - Игрок 2 забирает все карты из раунда войны и добавляет их в конец своей колоды.
```
```python
import random

# Функция для создания колоды карт
def create_deck():
    suits = ["C", "D", "H", "S"] # Масти (Червы, Бубны, Крести, Пики)
    ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"]  # Достоинства карт (2-10, Валет, Дама, Король, Туз)
    deck = [rank + suit for suit in suits for rank in ranks] # Создаем колоду как список строк (например, '2C' - двойка крести)
    return deck

# Функция для разделения колоды между игроками
def deal_cards(deck):
    random.shuffle(deck)  # Перемешиваем колоду
    middle = len(deck) // 2  # Находим середину колоды
    player1_deck = deck[:middle] # Раздаем первую половину первому игроку
    player2_deck = deck[middle:] # Раздаем вторую половину второму игроку
    return player1_deck, player2_deck

# Функция для определения достоинства карты
def card_value(card):
    rank = card[0]  # Берем первый символ карты, например '2' или 'T'
    if rank.isdigit():  # Если это цифра, то возвращаем ее как int
        return int(rank)
    elif rank == 'T':
        return 10   # 'T' - 10
    elif rank == 'J':
        return 11   # 'J' - Валет
    elif rank == 'Q':
        return 12   # 'Q' - Дама
    elif rank == 'K':
        return 13   # 'K' - Король
    elif rank == 'A':
        return 14   # 'A' - Туз
    
# Функция для игры в войну
def war(player1_deck, player2_deck):
    print("ВОЙНА!!!")
    # Проверка, есть ли у игроков достаточно карт для войны (минимум 4 карты у каждого)
    if len(player1_deck) < 4 or len(player2_deck) < 4:
        if len(player1_deck) < 4:
            print("У игрока 1 недостаточно карт для войны. Игрок 2 побеждает!")
            return 2, [], [] # Возвращаем, что выиграл игрок 2 и пустые списки для карт
        else:
            print("У игрока 2 недостаточно карт для войны. Игрок 1 побеждает!")
            return 1, [], [] # Возвращаем, что выиграл игрок 1 и пустые списки для карт

    # Забираем 3 карты "в закрытую" + 1 "открытую"
    player1_war_cards = []
    player2_war_cards = []
    for _ in range(3):
        player1_war_cards.append(player1_deck.pop(0)) # Забираем карты из начала колоды
        player2_war_cards.append(player2_deck.pop(0))

    player1_war_card = player1_deck.pop(0)
    player2_war_card = player2_deck.pop(0)
    print(f"Игрок 1 открывает: {player1_war_card}, Игрок 2 открывает: {player2_war_card}")
    war_cards = player1_war_cards + player2_war_cards + [player1_war_card, player2_war_card] #Собираем все карты из войны в один список
    
    # Сравниваем карты войны
    if card_value(player1_war_card) > card_value(player2_war_card):
         print("Игрок 1 выигрывает войну!")
         return 1, war_cards, []   # Возвращаем, что выиграл игрок 1 и список карт войны
    elif card_value(player2_war_card) > card_value(player1_war_card):
        print("Игрок 2 выигрывает войну!")
        return 2, [], war_cards  # Возвращаем, что выиграл игрок 2 и список карт войны
    else:
        print("Ещё одна война!")
        winner, player1_add_cards, player2_add_cards = war(player1_deck, player2_deck) #Рекурсивно вызываем функцию для следующей войны
        return winner, player1_add_cards + war_cards if winner == 1 else [], player2_add_cards + war_cards if winner == 2 else []
    


# Основная функция игры
def play_war():
    deck = create_deck()    # Создаем колоду
    player1_deck, player2_deck = deal_cards(deck) # Раздаем карты игрокам
    round_number = 0    # Счетчик раундов
    
    # Основной игровой цикл
    while player1_deck and player2_deck:
        round_number += 1 # Увеличиваем счетчик раундов
        print(f"\n--- Раунд {round_number} ---")
        
        player1_card = player1_deck.pop(0)  # Игрок 1 выкладывает карту
        player2_card = player2_deck.pop(0)  # Игрок 2 выкладывает карту
        print(f"Игрок 1 выкладывает: {player1_card}, Игрок 2 выкладывает: {player2_card}")

        # Сравниваем карты
        if card_value(player1_card) > card_value(player2_card):
            print("Игрок 1 выигрывает раунд!")
            player1_deck.append(player1_card) # Выигравший игрок забирает карты в конец своей колоды
            player1_deck.append(player2_card)
        elif card_value(player2_card) > card_value(player1_card):
            print("Игрок 2 выигрывает раунд!")
            player2_deck.append(player2_card) # Выигравший игрок забирает карты в конец своей колоды
            player2_deck.append(player1_card)
        else:
           winner, player1_add_cards, player2_add_cards = war(player1_deck, player2_deck) # Если карты равны, вызываем функцию войны
           if winner == 1:
                player1_deck.extend(player1_add_cards)  # Добавляем карты в колоду игрока 1
           elif winner == 2:
                player2_deck.extend(player2_add_cards)  # Добавляем карты в колоду игрока 2
        print(f"У Игрока 1 {len(player1_deck)} карт, у Игрока 2 {len(player2_deck)} карт.")
    # Определяем победителя
    if player1_deck:
        print("\nИгрок 1 победил!")
    else:
        print("\nИгрок 2 победил!")

if __name__ == "__main__":
    play_war()
```
Объяснение кода:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для перемешивания колоды.

2.  **Функция `create_deck()`**:
    -   `suits = ["C", "D", "H", "S"]`: Список мастей игральных карт (крести, бубны, червы, пики).
    -   `ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "T", "J", "Q", "K", "A"]`: Список достоинств игральных карт (от 2 до туза).
    -   `deck = [rank + suit for suit in suits for rank in ranks]`: Создает колоду, как список из 52 карт (например, "2C" - двойка крести).

3.  **Функция `deal_cards(deck)`**:
    -   `random.shuffle(deck)`: Перемешивает колоду случайным образом.
    -   `middle = len(deck) // 2`: Находит середину колоды.
    -   `player1_deck = deck[:middle]`: Создает колоду первого игрока из первой половины колоды.
    -   `player2_deck = deck[middle:]`: Создает колоду второго игрока из второй половины колоды.
    -   Возвращает колоды первого и второго игроков.

4.  **Функция `card_value(card)`**:
    -   `rank = card[0]`: Получает значение карты из её строки (например, '2', 'T', 'J', 'Q', 'K', 'A').
    -   `if rank.isdigit(): ... elif rank == 'T': ... elif rank == 'J': ... elif rank == 'Q': ... elif rank == 'K': ... elif rank == 'A':`: Определяет числовое значение карты (от 2 до 14 для туза).

5.  **Функция `war(player1_deck, player2_deck)`**:
    -   Реализует логику "войны", когда карты игроков равны.
    -   Проверяет, есть ли у игроков достаточно карт (не менее 4) для объявления войны.
    -   Если у одного из игроков не хватает карт для войны, то другой игрок объявляется победителем.
    -   Иначе, забирает по 3 карты "в закрытую" и 1 "открытую" от каждого игрока.
    -   Сравнивает открытые карты.
    -   Если карты равны, то вызывает функцию `war` рекурсивно (повторная война).
    -   Возвращает победителя и все карты из раунда войны (для победителя).

6.  **Функция `play_war()`**:
    -   `deck = create_deck()`: Создает колоду.
    -   `player1_deck, player2_deck = deal_cards(deck)`: Раздает карты игрокам.
    -   `round_number = 0`: Инициализирует счетчик раундов.
    -   **Основной игровой цикл `while player1_deck and player2_deck:`**:
        -   Выводит номер текущего раунда.
        -   Каждый игрок выкладывает верхнюю карту.
        -   Сравнивает значения карт.
        -   Если значения карт равны, вызывается функция `war` для определения победителя "войны".
        -   В противном случае добавляет карты в конец колоды выигравшего игрока.
        -   Выводит количество карт у каждого игрока.
        -   Цикл продолжается до тех пор, пока у одного из игроков не закончатся карты.
    -   Выводит победителя игры.
7.  **Условие `if __name__ == "__main__":`**:
    -   `play_war()`: Вызывает функцию для начала игры.
