"""
<BULLEYE>:
=================
Сложность: 3
-----------------
Игра "Яблочко" - это простая игра, в которой игрок пытается попасть в мишень с 10 попыток. Мишень - это случайно сгенерированное число от 0 до 1000. Игрок вводит свои предположения, а программа сообщает, насколько далеко от мишени было предположение. Цель игрока - угадать число как можно точнее.
Правила игры:
1. Программа генерирует случайное целое число в диапазоне от 1 до 1000 (включительно), которое является мишенью.
2. У игрока есть 10 попыток, чтобы угадать мишень.
3. После каждой попытки программа сообщает, насколько далеко от мишени было предположение игрока.
4. Если игрок угадывает число точно, игра заканчивается.
5. Если игрок не угадывает число за 10 попыток, игра заканчивается, и программа сообщает загаданное число.
-----------------
Алгоритм:
1.  Инициализация:
    -   Генерируется случайное число `targetNumber` в диапазоне от 1 до 1000.
    -   Устанавливается количество попыток `numberOfTries` равное 10.
2.  Игровой цикл:
    -   Пока количество попыток `numberOfTries` больше 0:
        -   Выводится сообщение о количестве оставшихся попыток.
        -   Игрок вводит своё предположение `guess`.
        -   Если `guess` равно `targetNumber`, выводится сообщение о победе и игра заканчивается.
        -   Если `guess` не равно `targetNumber`, вычисляется разница между `guess` и `targetNumber` по модулю `difference`.
        -   Выводится сообщение о разнице между `guess` и `targetNumber`.
        -   Количество попыток `numberOfTries` уменьшается на 1.
3.  Конец игры:
    -   Если количество попыток `numberOfTries` равно 0, выводится сообщение о проигрыше и сообщается загаданное число `targetNumber`.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> Initialize(Инициализация: targetNumber = random(1-1000), numberOfTries = 10);
    Initialize --> LoopCondition{numberOfTries > 0?};
    LoopCondition -- Yes --> OutputTries(Вывести оставшиеся попытки numberOfTries);
    OutputTries --> InputGuess(Ввод предположения guess);
    InputGuess --> CheckGuess{guess == targetNumber?};
    CheckGuess -- Yes --> OutputWin(Вывести сообщение о победе);
    OutputWin --> End(Конец);
    CheckGuess -- No --> CalculateDifference(Вычислить difference = abs(guess - targetNumber));
    CalculateDifference --> OutputDifference(Вывести сообщение о разнице difference);
    OutputDifference --> DecrementTries(numberOfTries = numberOfTries - 1);
    DecrementTries --> LoopCondition;
    LoopCondition -- No --> OutputLose(Вывести сообщение о проигрыше и targetNumber);
    OutputLose --> End;
```
"""
import random

def play_bulleye():
    """
    Запускает игру "Яблочко".
    """
    # 1. Инициализация
    target_number = random.randint(1, 1000)  # Генерируем случайное число от 1 до 1000
    number_of_tries = 10  # Устанавливаем количество попыток равное 10

    # 2. Игровой цикл
    while number_of_tries > 0:
        print(f"У вас осталось {number_of_tries} попыток.")  # Выводим количество оставшихся попыток
        try:
            guess = int(input("Введите ваше предположение: "))  # Получаем предположение от игрока
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue

        if guess == target_number:
            print("Поздравляю, вы угадали число!") # Если предположение верно выводим сообщение о победе
            return  # Завершаем игру если число угадано

        difference = abs(guess - target_number) # Вычисляем разницу между предположением и загаданным числом
        print(f"Не угадали, ваше предположение отличается от загаданного числа на {difference}.") # Сообщаем игроку на сколько он ошибся
        number_of_tries -= 1  # Уменьшаем количество попыток

    # 3. Конец игры (если игрок не угадал число за все попытки)
    print(f"Вы проиграли. Загаданное число было {target_number}.") # Сообщаем загаданное число

if __name__ == "__main__":
    play_bulleye() # Запускаем игру

"""
Пояснения:
1.  `import random`: Импортирует модуль `random` для генерации случайных чисел.
2.  `play_bulleye()`:
    -   Функция, которая запускает игру.
    -   `target_number = random.randint(1, 1000)`: Генерирует случайное целое число в диапазоне от 1 до 1000 и присваивает его переменной `target_number`.
    -   `number_of_tries = 10`: Устанавливает начальное количество попыток равным 10.
    -   `while number_of_tries > 0`: Цикл, который выполняется до тех пор, пока количество попыток больше 0.
    -   `print(f"У вас осталось {number_of_tries} попыток.")`: Выводит количество оставшихся попыток.
    -   `try...except ValueError`: Обработка исключения на случай если пользователь ввел не число.
    -   `guess = int(input("Введите ваше предположение: "))`: Запрашивает у пользователя ввод целого числа и сохраняет его в переменной `guess`.
    -   `if guess == target_number:`: Проверяет, угадал ли игрок число.
        -   `print("Поздравляю, вы угадали число!")`: Выводит сообщение о победе.
        -   `return`: Завершает выполнение функции, то есть игру.
    -   `difference = abs(guess - target_number)`: Вычисляет абсолютную разницу между предположением игрока и загаданным числом.
    -   `print(f"Не угадали, ваше предположение отличается от загаданного числа на {difference}.")`: Выводит сообщение о том, насколько далеко предположение игрока от загаданного числа.
    -   `number_of_tries -= 1`: Уменьшает количество оставшихся попыток на 1.
    -   Если цикл `while` завершается (то есть, попытки закончились), выводится сообщение о проигрыше и загаданное число:
        -   `print(f"Вы проиграли. Загаданное число было {target_number}.")`
3.  `if __name__ == "__main__":`: Проверяет, запущена ли программа как основная.
    -   `play_bulleye()`: Вызывает функцию `play_bulleye()` для запуска игры.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```