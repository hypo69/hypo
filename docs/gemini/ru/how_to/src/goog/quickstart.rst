Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код взаимодействует с Google Apps Script API для создания нового скрипта, загрузки файлов (в данном случае, JavaScript-код и манифест) в этот скрипт и вывода URL-адреса нового скрипта в консоль. Код предполагает предварительную авторизацию пользователя и хранение токенов для последующего доступа.

Шаги выполнения
-------------------------
1. **Установка зависимостей:** Убедитесь, что установлены необходимые библиотеки: `google-auth-httplib2`, `google-api-python-client`, `google-auth-oauthlib`. Если нет, используйте `pip install google-auth-httplib2 google-api-python-client google-auth-oauthlib`.

2. **Настройка переменных:**
    - Проверьте, что файл `credentials.json` находится в правильном месте (код предполагает его наличие в той же директории, что и скрипт). Этот файл содержит ключи для доступа к Google Apps Script API. Получение ключей описано в документации.
    -  `SCOPES` определяет разрешения, которые требуется получить у пользователя.

3. **Авторизация:**
    - Код пытается загрузить токен авторизации из файла `token.json`.
    - Если токен не найден или истек, запускается локальный сервер для авторизации пользователя.
    - Полученные данные авторизации сохраняются в файл `token.json` для последующего использования.

4. **Создание проекта:**
    - Создается экземпляр API Google Apps Script.
    - Формируется запрос `create` для создания нового проекта скрипта с заданным названием (`My Script`).
    - `execute()` отправляет запрос API и получает ответ. `scriptId` проекта сохраняется в переменной.

5. **Загрузка файлов:**
    - Формируется запрос `updateContent` для загрузки двух файлов:
        - Файл `hello` с типом `SERVER_JS` и кодом `SAMPLE_CODE` (простой JavaScript-код).
        - Файл `appsscript` с типом `JSON` и кодом `SAMPLE_MANIFEST` (манифест скрипта).
    - `scriptId` из предыдущего шага используется для указания проекта, куда загружаются файлы.

6. **Вывод URL-адреса:**
    -  Код выводит URL-адрес созданного скрипта в консоль.

7. **Обработка ошибок:**
    - Блок `try...except` обрабатывает возможные ошибки `HttpError` при взаимодействии с API.


Пример использования
-------------------------
.. code-block:: python

    import os
    # ... (import statements from the code) ...

    if __name__ == '__main__':
        # ... (main function from the code) ...