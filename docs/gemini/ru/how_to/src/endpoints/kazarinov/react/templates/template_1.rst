Как использовать шаблон HTML для отображения списка продуктов
========================================================================================

Описание
-------------------------
Данный HTML-шаблон (`template_1.html`) предназначен для отображения списка продуктов с их изображениями, названиями и описаниями. Шаблон использует Django-шаблоны и предоставляет структурированный способ вывода информации о товарах.  Он также отображает общую стоимость товаров.

Шаги выполнения
-------------------------
1. **Определение переменных**: Шаблон использует переменные, такие как `language`, `title`, `description`, `products`, `price`, и `currency`, которые должны быть определены в контексте Django-шаблона.  Эти переменные содержат информацию о языке, заголовке страницы, описании, списке продуктов, общей стоимости и валюте соответственно.
2. **Итерация по продуктам**:  Шаблон использует цикл `{% for product in products %}`, чтобы итерироваться по списку `products`.  Внутри цикла для каждого продукта выводятся его `product_title`, `image_local_saved_path`, и `product_description`.
3. **Отображение информации о продукте**: Для каждого продукта выводится заголовок (`<h3>`), изображение (`<img>`), и описание (`<p>`).  Обратите внимание на использование `{{ product.image_local_saved_path }}` для ссылки на изображение продукта.
4. **Вывод общей стоимости**: После цикла выводится общая стоимость товаров, используя переменные `price` и `currency`.  Стоимость отображается в специальном `<span>` элементе, с оформлением `price-tag`, обеспечивающим визуальную разницу с основным текстом.
5. **Оформление**: Шаблон использует CSS-стили для задания оформления страницы, включая цвета фона и текста, стиль карточек с продуктами (`product-card`), размещение информации, стили для цен (`price-tag`), и оформления нижней части страницы (`footer`).

Пример использования
-------------------------
.. code-block:: python

    # Пример вьюхи (view) в Django
    from django.shortcuts import render

    def product_list(request):
        # Должен быть реализован логикой получения данных,
        # например из базы данных
        products = Product.objects.all()
        total_price = sum([product.price for product in products])
        currency = "USD" # Например

        context = {
            'language': 'en',
            'title': 'Product List',
            'description': 'List of available products',
            'products': products,
            'price': total_price,
            'currency': currency,
        }

        return render(request, 'template_1.html', context)