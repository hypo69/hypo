Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber` для сбора данных о товаре с сайта `visualdg.co.il`. Класс наследуется от `Grbr` и содержит методы для извлечения различных полей товара (например, `name`, `description`, `price`).  Код использует асинхронный подход (`async def`) для обработки запросов к веб-драйверу. Он реализует декоратор `close_pop_up` (хотя он и закомментирован), который может использоваться для закрытия всплывающих окон на странице перед извлечением данных.  Внутри класса `Graber` реализована функция `grab_page` для сбора данных и функция `fetch_all_data` для вызова функций обработки отдельных полей, принимающих `kwargs` для гибкого вызова отдельных функций.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует библиотеки, такие как `asyncio`, `pydantic`, `src.suppliers`, `src.product`, `src.webdriver`, `src.logger`, и другие, необходимые для работы с веб-драйвером, обработкой данных и логированием.

2. **Определение класса `Graber`:** Определяется класс `Graber`, наследующий от `Grbr`.

3. **Инициализация класса:** В конструкторе `__init__` класса `Graber` происходит инициализация и настройка глобальных переменных.

4. **Определение асинхронной функции `grab_page`:** Эта функция отвечает за сбор всех данных о товаре.

5. **Вызов функций обработки полей:** Внутри `grab_page` вызывается функция `fetch_all_data`, которая, в свою очередь, вызывает функции обработки конкретных полей (например, `id_product`, `name`, `price`).  Важно, что эти функции принимают аргумент `kwards`, который позволяет передавать значения из внешней функции.

6. **Возврат данных:** Функция `grab_page` возвращает объект `ProductFields`, содержащий собранные данные.

Пример использования
-------------------------
.. code-block:: python

    from src.suppliers.visualdg.graber import Graber
    from src.webdriver import Driver
    from src.product import ProductFields
    import asyncio

    async def main():
        driver = Driver()
        graber = Graber(driver)
        
        # Предварительные данные для товара:
        product_data = {"id_product": "12345"} 
        
        try:
            product_fields: ProductFields = await graber.grab_page(driver, **product_data)
            print(product_fields.name)  # Пример доступа к полю "name"
            # Обратите внимание, что вы должны получить ProductFields с данными о товаре.
        except Exception as e:
            print(f"Ошибка: {e}")
        finally:
            await driver.quit()

    asyncio.run(main())