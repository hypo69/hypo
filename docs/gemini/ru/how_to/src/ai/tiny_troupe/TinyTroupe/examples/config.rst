Как использовать файл конфигурации
========================================================================================

Описание
-------------------------
Файл `config.ini` содержит настройки для интеграции с сервисом OpenAI (или Azure OpenAI).  Он определяет тип API, параметры модели, время ожидания, количество попыток и другие важные настройки для взаимодействия с этим сервисом.  Также, он определяет параметры для работы с встраиванием текста и кешированием API-вызовов. Наконец, задаёт настройки для предотвращения вредоносного контента и нарушения авторских прав.

Шаги выполнения
-------------------------
1. **Выбор типа API:**  В секции `[OpenAI]` устанавливается тип API `API_TYPE`.  По умолчанию используется `openai`.  Для Azure OpenAI необходимо изменить значение на `azure`.

2. **Настройка параметров модели:**  В секции `[OpenAI]` задаются параметры модели (например, `MODEL`, `MAX_TOKENS`, `TEMPERATURE`, `FREQ_PENALTY`, `PRESENCE_PENALTY`),  время ожидания `TIMEOUT`, максимальное количество попыток `MAX_ATTEMPTS`, время ожидания между попытками `WAITING_TIME` и фактор экспоненциального увеличения времени ожидания `EXPONENTIAL_BACKOFF_FACTOR`.

3. **Настройка параметров встраивания текста:** В секции `[OpenAI]` устанавливается модель для встраивания текста (`EMBEDDING_MODEL`).

4. **Включение/выключение кеширования API-вызовов:** В секции `[OpenAI]` устанавливается значение `CACHE_API_CALLS` для активации/деактивации кеширования вызовов API. В случае активации, указывается имя файла для кеширования `CACHE_FILE_NAME`.

5. **Установка максимальной длины отображаемого контента:**  `MAX_CONTENT_DISPLAY_LENGTH` устанавливает максимальную длину текста, который будет отображаться в приложениях, использующих эти настройки.

6. **Настройка предотвращения вредоносного контента и нарушения авторских прав:** В секции `[Simulation]` устанавливаются флаги `RAI_HARMFUL_CONTENT_PREVENTION` и `RAI_COPYRIGHT_INFRINGEMENT_PREVENTION` для включения/выключения систем предотвращения вредоносного контента и нарушения авторских прав.

7. **Настройка уровня логирования:** В секции `[Logging]` задается уровень детализации сообщений журнала (`LOGLEVEL`).  Доступные значения: `ERROR`, `WARNING`, `INFO`, `DEBUG`.

Пример использования
-------------------------
.. code-block:: python

    import configparser

    config = configparser.ConfigParser()
    config.read('config.ini')

    api_type = config['OpenAI']['API_TYPE']
    model = config['OpenAI']['MODEL']
    max_tokens = int(config['OpenAI']['MAX_TOKENS'])

    print(f"Используется API: {api_type}")
    print(f"Модель: {model}")
    print(f"Максимальное количество токенов: {max_tokens}")