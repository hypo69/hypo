Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет функцию `set_project_root`, которая находит корневую директорию проекта.  Он ищет директории вверх от текущей директории, пока не найдет директорию, содержащую файлы `pyproject.toml`, `requirements.txt` или `.git`.  Если такая директория найдена,  то она добавляется в `sys.path`. В случае успеха, функция возвращает корневую директорию проекта. Далее код загружает настройки из файла `settings.json`, если он существует,  и  содержимое файла `README.MD`.  Он также извлекает значения из загруженных настроек, если они есть, иначе использует значения по умолчанию для метаданных проекта (имя, версия, описание, автор, авторские права, и ссылка на пожертвования).

Шаги выполнения
-------------------------
1. **Определение функции `set_project_root`**: Код определяет функцию, которая ищет корневую директорию проекта.
2. **Инициализация `__root__`**:  Переменная `__root__` инициализируется текущей директорией, где находится скрипт.
3. **Поиск корневой директории**: Код итеративно проходит по родительским директориям текущей директории.  В каждой родительской директории проверяет наличие файлов `pyproject.toml`, `requirements.txt` или `.git`. Если какой-либо из них найден, `__root__` устанавливается на эту директорию, и цикл прерывается.
4. **Добавление корневой директории в `sys.path`**: Если корневая директория не присутствует в `sys.path`, то она добавляется в начало списка путей.
5. **Возврат корневой директории**: Функция возвращает найденную корневую директорию.
6. **Получение корневой директории проекта**:  Вызывается функция `set_project_root()` для определения корня проекта и результат сохраняется в переменной `__root__`.
7. **Загрузка настроек**: Код пытается загрузить настройки из файла `settings.json` в переменную `settings`.
8. **Обработка ошибок при чтении настроек**: Если файл `settings.json` не найден или содержимое некорректно, то происходит обращение к блоку `...` и этот шаг пропускается, а `settings` остаётся `None`.
9. **Загрузка документации**: Аналогично, код пытается загрузить документ из `README.MD` в `doc_str`.
10. **Обработка ошибок при чтении документации**: Если файл `README.MD` не найден или содержимое некорректно, то происходит обращение к блоку `...` и этот шаг пропускается, а `doc_str` остаётся `None`.
11. **Получение метаданных**: Код извлекает значения из загруженных настроек (`settings`), при необходимости используя значения по умолчанию, если настройки не загрузились или конкретных ключей нет.  В результате хранятся переменные `__project_name__`, `__version__`, `__doc__`, `__details__`, `__author__`, `__copyright__`, `__cofee__`
12. **Возвращение значений**:  Код возвращает собранные метаданные проекта.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.goog.text_to_speech.header import set_project_root, __root__, __project_name__, __version__, __doc__

    # Пример вызова функции set_project_root
    root_dir = set_project_root()
    print(f"Корневая директория проекта: {root_dir}")

    print(f"Название проекта: {__project_name__}")
    print(f"Версия проекта: {__version__}")
    print(f"Документация: {__doc__}")