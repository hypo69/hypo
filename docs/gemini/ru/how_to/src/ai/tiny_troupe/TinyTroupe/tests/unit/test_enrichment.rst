Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функцию `test_enrich_content`, которая тестирует функциональность класса `TinyEnricher` для обогащения контента.  Функция проверяет, что обогащенный контент существенно длиннее исходного (минимум в 3 раза).  Тест использует тестовые данные в виде текста для обогащения, требует достижения определенного размера результата и выводит отладочные сообщения.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:**  Код импортирует модули `pytest`, `textwrap`, `logging`, `sys` и `testing_utils`, а также класс `TinyEnricher` из модуля `tinytroupe.enrichment`.  Важно отметить, что `sys.path.append` добавляет пути к директориям, чтобы Python мог найти нужные файлы.
2. **Подготовка тестовых данных:**  Содержимое для обогащения (`content_to_enrich`) и требования (`requirements`) задаются с помощью `textwrap.dedent`.  Это позволяет избежать проблем с отступами.
3. **Инициализация и вызов функции обогащения:** Создается экземпляр класса `TinyEnricher`, и вызывается метод `enrich_content` с заданными значениями.  Аргументы `requirements`, `content`, `content_type`, `context_info` и `context_cache` определяют входные данные для функции обогащения.
4. **Проверка результата:** Проверяется, что возвращаемое значение `result` не равно `None`.  Также проверяется, что длина обогащенного текста (`result`) больше или равна длине исходного текста (`content_to_enrich`) * 3, чтобы удовлетворить требованию по увеличению размера.
5. **Логирование результатов:**  Выводится отладочная информация о длине обогащенного контента, длине исходного контента и самом результате обогащения.
6. **Утверждение:**  Тест завершается утверждением, что обогащенный контент достаточно длинный.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    import textwrap
    # ... (Импорт других необходимых библиотек и классов)
    
    # ... (Определение content_to_enrich и requirements как в примере кода)
    
    result = TinyEnricher().enrich_content(requirements=requirements, content=content_to_enrich, content_type="Document", context_info="WonderCode was approached by Microsoft to for a partnership.", context_cache=None, verbose=True)
    
    assert result is not None
    assert len(result) >= len(content_to_enrich) * 3, "Result is not 3 times bigger"