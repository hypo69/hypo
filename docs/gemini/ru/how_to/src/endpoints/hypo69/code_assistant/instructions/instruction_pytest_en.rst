Как написать тесты с помощью `pytest`
========================================================================================

Описание
-------------------------
Этот документ предоставляет инструкции по написанию тестов для кода с помощью фреймворка `pytest`. Он включает в себя пошаговое руководство, примеры и рекомендации для создания полных и эффективных наборов тестов.

Шаги выполнения
-------------------------
1. **Проанализируй код**: Тщательно изучи предоставленный код, определи функции, классы или методы, которые нужно протестировать.  Определи важные сценарии (валидные входные данные, некорректные входные данные, граничные случаи) и ожидаемые результаты.
2. **Определи необходимые фикстуры**: Если функции в коде зависят от данных (например, базы данных, файлов), создай фикстуры для предоставления этих данных в тестовых функциях. Фикстуры определяются с помощью декоратора `@pytest.fixture`.
3. **Создай тестовые функции**: Напиши тестовые функции для каждой функции, класса или метода. Имена функций должны быть описательными (например, `test_function_valid_input`, `test_function_invalid_input`).
4. **Валидные входные данные**: Напиши тесты для проверки корректной работы кода с корректными входными данными.
5. **Некорректные входные данные**: Создай тесты, которые проверяют обработку некорректных данных, например, отсутствующих параметров, неверных типов данных, пустых строк.
6. **Граничные случаи**: Тестируй код с крайними значениями параметров: максимальные и минимальные значения, значения на границах диапазонов.
7. **Обработка исключений**: Использование `pytest.raises` для проверки, что код обрабатывает исключения (например, `ValueError`, `TypeError`) корректно в случае некорректных входных данных.
8. **Изоляция тестов**: Убедись, что каждый тест независим от других тестов. Используй фикстуры для изоляции тестовых данных и предотвращения влияния одного теста на другой.
9. **Документация**: Дополни тестовые функции документацией с помощью строки документации (`"""Docstring"""`). Документируй ожидаемое поведение и условия теста.


Пример использования
-------------------------
```python
import pytest
import my_code  # Импортируешь свой код

@pytest.fixture
def example_data():
    """Provides test data for the function."""
    return {"key1": "value1", "key2": 123}


def test_function1_valid_input(example_data):
    """Проверяет правильную работу функции с корректными данными."""
    result = my_code.function1(example_data)
    assert result == "expected_output"

def test_function1_invalid_input():
    """Проверяет обработку некорректных входных данных."""
    with pytest.raises(TypeError):
        my_code.function1(123)

def test_function1_empty_input():
    """Проверяет обработку пустого входного словаря."""
    result = my_code.function1({})
    assert result is None


```
```
```
```

```
**Дополнительные советы**

- Используй ясные и точные сообщения об ошибках в тестах.
-  Используй конвенции именования для тестов (например, `test_function_name`).
- Разделяй тесты на отдельные файлы.
- Добавляй тесты для различных сценариев и вариантов использования.