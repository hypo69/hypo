"""
<HOCKEY>:
=================
Сложность: 4
-----------------
Игра в хоккей, где игрок пытается забить голы, управляя нападающим, а компьютер - вратарем. Игра происходит в текстовом режиме. Игрок указывает угол броска (от 1 до 10), а компьютер случайным образом выбирает угол для защиты (от 1 до 10).
-----------------
Правила игры:
1. Игрок вводит угол броска от 1 до 10.
2. Компьютер случайным образом выбирает угол для защиты от 1 до 10.
3. Если угол броска игрока и угол защиты компьютера не совпадают, игрок забивает гол.
4. Игрок получает одно очко за каждый забитый гол.
5. Игра продолжается до тех пор, пока игрок не захочет её завершить.
-----------------
Алгоритм:
1. Инициализация:
   - Установить счет игрока в 0.
   - Вывести приветственное сообщение.
2. Игровой цикл:
   - Вывести текущий счет игрока.
   - Запросить у игрока угол броска (от 1 до 10).
   - Если ввод некорректен (не число или не в диапазоне от 1 до 10), запросить ввод снова.
   - Сгенерировать случайный угол защиты для компьютера (от 1 до 10).
   - Если угол броска игрока и угол защиты компьютера не совпадают:
        - Увеличить счет игрока на 1.
        - Вывести сообщение "ГОЛ!".
   - Иначе, вывести сообщение "Вратарь отбил!".
   - Спросить игрока, хочет ли он сыграть еще раз (ввести "ДА" или "НЕТ").
   - Если игрок вводит "НЕТ", выйти из цикла.
3. Завершение:
   - Вывести финальный счет игрока.
   - Вывести сообщение "ДО СВИДАНИЯ!".
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> Initialize(Инициализация счета = 0);
    Initialize --> DisplayWelcome(Вывести приветственное сообщение);
    DisplayWelcome --> GameLoopStart(Начало игрового цикла);
    GameLoopStart --> DisplayScore(Вывести текущий счет);
    DisplayScore --> GetShotAngle(Запросить угол броска);
    GetShotAngle --> ValidateShotAngle(Проверка корректности ввода угла);
    ValidateShotAngle -- Invalid Input --> GetShotAngle;
    ValidateShotAngle -- Valid Input --> GenerateDefenseAngle(Сгенерировать случайный угол защиты);
    GenerateDefenseAngle --> CompareAngles(Сравнить углы броска и защиты);
    CompareAngles -- Angles Different --> IncrementScore(Увеличить счет на 1);
    IncrementScore --> DisplayGoal(Вывести сообщение "ГОЛ!");
    DisplayGoal --> AskPlayAgain(Спросить "Сыграть еще?");
    CompareAngles -- Angles Equal --> DisplaySave(Вывести сообщение "Вратарь отбил!");
    DisplaySave --> AskPlayAgain;
    AskPlayAgain -- Yes --> GameLoopStart;
    AskPlayAgain -- No --> DisplayFinalScore(Вывести финальный счет);
    DisplayFinalScore --> DisplayGoodbye(Вывести сообщение "До свидания!");
    DisplayGoodbye --> End(End);
```
"""
import random

def get_player_shot_angle():
    """
    Запрашивает у игрока угол броска и проверяет корректность ввода.

    Returns:
        int: Угол броска игрока (целое число от 1 до 10).
    """
    while True:
        try:
            shot_angle = int(input("Введите угол броска (1-10): "))
            if 1 <= shot_angle <= 10:
                return shot_angle
            else:
                print("Пожалуйста, введите число от 1 до 10.")
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите число.")

def get_computer_defense_angle():
    """
    Генерирует случайный угол защиты для компьютера.

    Returns:
        int: Случайный угол защиты компьютера (целое число от 1 до 10).
    """
    return random.randint(1, 10)

def play_hockey():
    """
    Основная функция, реализующая игру в хоккей.
    """
    player_score = 0  # Начальный счет игрока
    print("Добро пожаловать в текстовый хоккей!")

    while True:
        print(f"Счет: {player_score}")
        
        player_shot = get_player_shot_angle() # Получаем корректный угол броска игрока
        computer_defense = get_computer_defense_angle() # генерируем угол защиты компьютера
        
        if player_shot != computer_defense: # Если углы не совпадают, игрок забивает гол
            player_score += 1 # увеличиваем счет игрока
            print("ГОЛ!")
        else:
            print("Вратарь отбил!")

        play_again = input("Сыграть еще раз? (ДА/НЕТ): ").upper() #спрашиваем, хочет ли игрок сыграть еще раз
        if play_again != "ДА":
            break

    print(f"Финальный счет: {player_score}") # выводим финальный счет
    print("ДО СВИДАНИЯ!") # выводим прощальное сообщение

if __name__ == "__main__":
    play_hockey()
"""
Пояснения:
1. `get_player_shot_angle()`:
    - Запрашивает ввод угла броска у игрока.
    - Использует цикл `while True`, чтобы обеспечить корректный ввод (целое число от 1 до 10).
    - `try-except` блок обрабатывает исключение `ValueError`, возникающее при некорректном вводе.
    - Возвращает введенный угол броска, если он корректен.

2. `get_computer_defense_angle()`:
    - Генерирует случайное целое число от 1 до 10, представляющее угол защиты компьютера.
    - Использует функцию `random.randint()`.
    - Возвращает случайный угол защиты.

3. `play_hockey()`:
    - Инициализирует счет игрока `player_score` значением 0.
    - Выводит приветственное сообщение.
    - Запускает основной игровой цикл `while True`.
        - Выводит текущий счет игрока.
        - Получает угол броска игрока, используя функцию `get_player_shot_angle()`.
        - Генерирует угол защиты компьютера, используя функцию `get_computer_defense_angle()`.
        - Сравнивает угол броска игрока и угол защиты компьютера.
        - Если углы не совпадают, увеличивает счет игрока на 1 и выводит сообщение "ГОЛ!".
        - Иначе, выводит сообщение "Вратарь отбил!".
        - Запрашивает у игрока, хочет ли он сыграть еще раз.
        - Если ввод не "ДА", выходит из цикла.
    - Выводит финальный счет игрока.
    - Выводит прощальное сообщение "ДО СВИДАНИЯ!".

4. `if __name__ == "__main__":`
    -  Запускает функцию `play_hockey()`, когда скрипт запускается напрямую.

5. Документирование:
    - Код снабжен комментариями на русском языке, объясняющими назначение переменных, функций и шагов алгоритма.
    - Имена переменных осмысленные (например, `player_score`, `shot_angle`, `computer_defense`).
    - Блок-схема в формате Mermaid отражает логику программы.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'