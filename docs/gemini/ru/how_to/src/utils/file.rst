Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для работы с файлами, включая чтение, запись, поиск и обработку файлов в каталогах. Он предоставляет инструменты для работы с различными типами данных (строки, списки, словари) и поддерживает различные режимы работы (чтение, запись, добавление). Код также умеет обрабатывать ошибки и выводить логи в журнал.


Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует модули `os`, `json`, `fnmatch`, `pathlib`, `typing`, и `logger`. Эти модули обеспечивают функциональность для работы с файлами, JSON, регулярными выражениями, путями к файлам, типизацией и логированием.

2. **`save_text_file(data, file_path, mode="w", exc_info=True)`:**  Эта функция записывает данные в текстовый файл.
    - Она принимает данные `data` (строка, список строк или словарь).
    - `file_path` указывает путь к файлу, куда будут записаны данные.
    - `mode` задаёт режим записи (`w` - запись, `a` - добавление).
    - `exc_info` определяет, будет ли подробная информация об ошибке записываться в журнал.
    - Создаёт родительскую директорию, если она не существует.
    - В зависимости от типа данных `data` выполняет запись в файл (строка, список или JSON-представление словаря).
    - Возвращает `True`, если запись прошла успешно, иначе `False`.

3. **`read_text_file(file_path, as_list=False, extensions=None, exc_info=True)`:** Эта функция считывает содержимое файла или каталога.
    - Принимает `file_path` (путь к файлу или каталогу).
    - `as_list=False` - считывает всё содержимое файла как строку. `as_list=True` - считывает по строкам в список.
    - `extensions` - фильтрует файлы в каталоге по расширениям.
    - Обрабатывает случаи, когда `file_path` - файл или каталог.
    - При чтении каталога, рекурсивно читает файлы в нём и вложенных каталогах, если заданы `extensions`.
    - Возвращает содержимое файла (строку или список строк) или `None`, если произошла ошибка.

4. **`get_filenames(directory, extensions="*", exc_info=True)`:**  Получает список имён файлов в директории, опционально фильтруя по расширениям.
   - `directory`: путь к директории.
   - `extensions`: список расширений (или один символ '*' для всех файлов).
   - Возвращает список имён файлов.

5. **`recursively_yield_file_path(root_dir, patterns="*", exc_info=True)`:**  Генерирует пути к файлам, найденным в каталоге и его подкаталогах.
   - Возвращает генератор, который поочередно выдаёт пути.
   - `patterns`: фильтрует по шаблонам имен файлов.

6. **`recursively_get_file_path(root_dir, patterns="*", exc_info=True)`:**  Возвращает список путей к файлам, соответствующим шаблонам.


7. **`recursively_read_text_files(root_dir, patterns, as_list=False, exc_info=True)`:**  Читает содержимое файлов, найденных рекурсивно, фильтруя их по шаблонам.
   - Возвращает список содержимого файлов (строки или списки строк).

8. **`get_directory_names(directory, exc_info=True)`:** Возвращает список имён подкаталогов в указанной директории.


9. **`read_files_content(root_dir, patterns, as_list=False, exc_info=True)`:** Читает все файлы, соответствующие шаблонам, в указанном каталоге, включая вложенные.


10. **`remove_bom(file_path)`:** Удаляет BOM (Byte Order Mark) из текстового файла.

11. **`traverse_and_clean(directory)`:** Обрабатывает все файлы в директории, удаляя BOM из Python-файлов.

12. **`main()`:** Точка входа для удаления BOM из Python-файлов в заданном каталоге.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.utils.file import save_text_file, read_text_file, recursively_read_text_files

    # Сохранение данных в файл
    data_to_save = {"key": "value"}
    save_text_file(data_to_save, "my_file.json")

    # Чтение файла
    file_content = read_text_file("my_file.json")
    print(file_content)

    # Рекурсивное чтение файлов в каталоге
    root_directory = "/path/to/your/directory"
    file_contents = recursively_read_text_files(root_directory, "*.txt")
    for content in file_contents:
        print(content)