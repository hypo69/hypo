Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот модуль `hypotez/src/utils/image.py` предоставляет асинхронные функции для загрузки, сохранения и получения данных изображений. Он содержит три функции: `save_png_from_url`, `save_png` и `get_image_data`.  Первые две функции предназначены для работы с изображениями, а третья - для получения данных из файла.  Все функции обрабатывают возможные ошибки и записывают информацию об ошибках в лог.

Шаги выполнения
-------------------------
1. **`save_png_from_url(image_url: str, filename: str | Path) -> str | None`**:
    - Принимает URL изображения и имя файла для сохранения.
    - Использует `aiohttp` для асинхронной загрузки изображения с указанного URL.
    - Обрабатывает потенциальные ошибки во время загрузки (например, если URL некорректен или нет доступа к ресурсу).
    - Вызывает функцию `save_png` для сохранения полученных данных изображения в файл.
    - Возвращает путь к сохранённому файлу или `None` при ошибках.

2. **`save_png(image_data: bytes, file_name: str | Path) -> str | None`**:
    - Принимает бинарные данные изображения и имя файла для сохранения.
    - Создаёт необходимые директории, если они не существуют (используя `Path.parent.mkdir`).
    - Использует `aiofiles` для асинхронного записи данных в файл в формате PNG.
    - Проверяет, что файл был успешно создан.
    - Проверяет размер файла после записи (проверяет на нулевой размер).
    -  Использует `PIL.Image` для открытия и сохранения изображения в формате PNG.
    - Возвращает путь к сохранённому файлу или `None` при ошибках.

3. **`get_image_data(file_name: str | Path) -> bytes | None`**:
    - Принимает имя файла.
    - Проверяет существование файла с помощью `Path.exists()`.
    - Если файл не найден, возвращает `None` и записывает сообщение в лог.
    - Использует стандартный `open` для чтения бинарных данных файла в режиме "rb".
    - Обрабатывает потенциальные ошибки при чтении файла (например, если файл повреждён или не существует).
    - Возвращает бинарные данные файла или `None` при ошибках.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from hypotez.src.utils.image import save_png_from_url

    async def main():
        # Загрузка изображения с URL
        result = await save_png_from_url("https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Example.jpg/1200px-Example.jpg", "example.png")

        if result:
            print(f"Изображение успешно сохранено: {result}")
        else:
            print("Ошибка при сохранении изображения.")

    asyncio.run(main())


.. code-block:: python

    import asyncio
    from hypotez.src.utils.image import save_png

    async def main():
        # Предварительно загрузите изображение в image_data
        with open("example.png", "rb") as f:
            image_data = f.read()

        # Сохранение изображения
        result = await save_png(image_data, "saved_image.png")
        if result:
            print("Изображение успешно сохранено")
        else:
            print("Ошибка при сохранении")

    asyncio.run(main())

.. code-block:: python

    from hypotez.src.utils.image import get_image_data
    import asyncio

    async def main():
        # Получение данных изображения
        image_data = get_image_data("saved_image.png")
        if image_data:
            print("Изображение получено")
        else:
            print("Ошибка при получении данных изображения")

    asyncio.run(main())