"""
<HI Q>:
=================
Сложность: 3
-----------------
Игра "HI Q" - это головоломка, где на поле с 15-ю пронумерованными позициями нужно убрать все фишки, перепрыгивая через них. За один ход можно перепрыгнуть фишкой через соседнюю по горизонтали или вертикали на свободную позицию, при этом перепрыгнутая фишка убирается с поля.  Цель игры - оставить на доске только одну фишку.

Правила игры:
1. Игровое поле состоит из 15 позиций, расположенных в форме ромба.
2. В начале игры на всех позициях, кроме позиции 8, находятся фишки.
3. За один ход игрок должен выбрать фишку и перепрыгнуть ею через соседнюю фишку по горизонтали или вертикали на пустую позицию.
4. Фишка, через которую перепрыгнули, удаляется с поля.
5. Игра продолжается, пока не останется одна фишка или не останется ходов.
6. Выигрыш - если осталась одна фишка.

-----------------
Алгоритм:
1. Инициализация: Создается игровое поле (массив positions) и заполняется фишками (кроме позиции 8).
2. Игровой цикл:
   - Вывод текущего состояния поля.
   - Запрос хода игрока (выбор фишки и направления прыжка).
   - Проверка допустимости хода:
     - Проверка, что выбранная позиция существует и на ней есть фишка.
     - Проверка, что есть соседняя фишка в выбранном направлении.
     - Проверка, что позиция для перепрыгивания пустая.
   - Если ход допустим, выполнить ход (переместить фишку и удалить перепрыгнутую).
   - Если ход недопустим, вывести сообщение об ошибке.
   - Проверка, что остались возможные ходы (есть ли фишка, которая может перепрыгнуть).
   - Если ходов нет, завершить игру и вывести сообщение о победе (если осталась одна фишка) или поражении.
3. Завершение игры: Вывести итоговый результат.
-----------------
Блок-схема: 
```mermaid
graph TD
    Start[Начало игры] --> InitBoard[Инициализация доски]
    InitBoard --> PrintBoard[Вывод доски]
    PrintBoard --> InputMove[Ввод хода]
    InputMove --> ValidateMove[Проверка хода]
    ValidateMove -- Ход допустим --> MovePiece[Сделать ход]
    MovePiece --> CheckWin[Проверка на выигрыш]
    CheckWin -- Осталась 1 фишка --> Win[Победа]
    CheckWin -- Ходы есть --> PrintBoard
    CheckWin -- Ходов нет --> GameOver[Игра окончена]
    ValidateMove -- Ход недопустим --> ErrorMessage[Сообщение об ошибке]
    ErrorMessage --> PrintBoard
    GameOver --> CheckRemainingPieces[Проверка оставшихся фишек]
    CheckRemainingPieces -- Осталась 1 фишка --> Win
    CheckRemainingPieces -- Осталось несколько фишек --> Lose[Поражение]
    Win --> End[Конец игры]
    Lose --> End
    End
```
"""
import sys

def print_board(positions):
    """Выводит игровое поле в консоль."""
    print("   ", positions[0], "  ")
    print("  ", positions[1], positions[2], " ")
    print(" ", positions[3], positions[4], positions[5], " ")
    print(positions[6], positions[7], positions[8], positions[9], positions[10])
    print(" ", positions[11], positions[12], positions[13], " ")
    print("  ", positions[14], positions[15], " ")
    print("   ", positions[16], "  ")


def is_valid_move(positions, start_pos, move_direction):
    """Проверяет, является ли ход допустимым."""
    
    # Проверяем что начальная позиция существует
    if start_pos < 1 or start_pos > 16:
        return False

    # Проверяем что на начальной позиции есть фишка
    if positions[start_pos] == ' ':
        return False

    # Определяем соседнюю позицию и позицию для перепрыгивания в зависимости от направления
    if move_direction == 1: # Вверх
        next_pos = start_pos - 4
        jump_pos = start_pos - 8

    elif move_direction == 2: # Вниз
         next_pos = start_pos + 4
         jump_pos = start_pos + 8
    elif move_direction == 3: # Влево
         next_pos = start_pos - 1
         jump_pos = start_pos - 2

    elif move_direction == 4: # Вправо
         next_pos = start_pos + 1
         jump_pos = start_pos + 2

    # Проверяем что есть соседняя позиция
    if next_pos < 1 or next_pos > 16:
        return False

    # Проверяем, что на соседней позиции есть фишка
    if positions[next_pos] == ' ':
         return False

    # Проверяем, что есть позиция для прыжка
    if jump_pos < 1 or jump_pos > 16:
        return False

    # Проверяем что позиция для прыжка пустая
    if positions[jump_pos] != ' ':
        return False
    
    return True

def make_move(positions, start_pos, move_direction):
    """Выполняет ход."""

    # Определяем соседнюю позицию и позицию для перепрыгивания в зависимости от направления
    if move_direction == 1: # Вверх
         next_pos = start_pos - 4
         jump_pos = start_pos - 8

    elif move_direction == 2: # Вниз
         next_pos = start_pos + 4
         jump_pos = start_pos + 8
    elif move_direction == 3: # Влево
         next_pos = start_pos - 1
         jump_pos = start_pos - 2

    elif move_direction == 4: # Вправо
         next_pos = start_pos + 1
         jump_pos = start_pos + 2


    # Делаем ход
    positions[start_pos] = ' ' # Освобождаем начальную позицию
    positions[next_pos] = ' '  # Освобождаем перепрыгнутую позицию
    positions[jump_pos] = 'X' # ставим фишку в конечную позицию
    return positions
    
def check_for_moves(positions):
    """Проверяет, есть ли доступные ходы."""
    for pos in range(1, 17):
      if positions[pos] == 'X':
        for direction in range(1,5):
          if is_valid_move(positions,pos,direction):
            return True
    return False
  
def check_win(positions):
     """Проверяет, выиграл ли игрок."""
     count = 0
     for pos in positions:
         if pos == 'X':
            count +=1
     return count == 1


def main():
    """Основная функция игры."""
    # Инициализация игрового поля, изначально все позиции кроме 8 заняты
    positions = [' '] * 17
    for i in range(1, 17):
        if i != 8:
            positions[i] = 'X'
            
    # Игровой цикл
    while True:
        print_board(positions)
        
        # Ввод хода
        try:
            start_position = int(input("Выберите фишку для хода (1-16): "))
            move_direction = int(input("Выберите направление (1-вверх, 2-вниз, 3-влево, 4-вправо): "))
        except ValueError:
           print("Некорректный ввод, попробуйте еще раз!")
           continue
        # Проверка допустимости хода
        if is_valid_move(positions, start_position, move_direction):
            # Выполняем ход
            positions = make_move(positions,start_position,move_direction)

            # Проверка на победу
            if check_win(positions):
                print_board(positions)
                print("Поздравляем, вы выиграли!")
                break
            
            # Проверяем остались ли еще ходы
            if not check_for_moves(positions):
              print_board(positions)
              print("Игра окончена, ходов больше нет. Вы проиграли!")
              break
        else:
            print("Недопустимый ход, попробуйте еще раз!")


if __name__ == "__main__":
    main()
"""
Пояснения:
=========
1. `print_board(positions)`:
   - Функция для вывода текущего состояния игрового поля в консоль.
   - `positions` - список, представляющий игровое поле. 'X' - фишка, ' ' - пустая позиция.

2. `is_valid_move(positions, start_pos, move_direction)`:
    - Функция проверяет, является ли ход игрока допустимым.
    -  `positions` - список, представляющий игровое поле.
    -  `start_pos` - начальная позиция фишки (индекс в списке positions).
    -  `move_direction` - направление движения (1 - вверх, 2 - вниз, 3 - влево, 4 - вправо).
    - Функция проверяет:
      - Существование начальной позиции.
      - Наличие фишки на начальной позиции.
      - Наличие соседней позиции.
      - Наличие фишки на соседней позиции.
      - Существование позиции для прыжка.
      - Отсутствие фишки на позиции для прыжка.
    - Возвращает `True`, если ход допустим, иначе `False`.
3. `make_move(positions, start_pos, move_direction)`:
   - Функция выполняет ход.
   - `positions` - список, представляющий игровое поле.
   - `start_pos` - начальная позиция фишки.
   - `move_direction` - направление движения.
   - Функция изменяет массив `positions` в соответствии с правилами хода.
    - Освобождает начальную позицию.
    - Освобождает перепрыгнутую позицию.
    - Устанавливает фишку в конечную позицию.
    - Возвращает измененное игровое поле
4. `check_for_moves(positions)`:
   - Функция проверяет, есть ли доступные ходы.
   - Проверяет каждую фишку на возможность хода во всех направлениях.
   - Возвращает True если есть доступные ходы, иначе False
5. `check_win(positions)`:
    - Функция проверяет, выиграл ли игрок.
    - `positions` - список, представляющий игровое поле.
    - Проверяет, осталась ли на доске только одна фишка.
    - Возвращает `True`, если игрок выиграл, иначе `False`.

6. `main()`:
   - Основная функция, управляющая игровым процессом.
   - Инициализирует игровое поле, заполняя фишками все позиции, кроме 8.
   - Организует игровой цикл:
     - Выводит текущее состояние поля.
     - Запрашивает у пользователя координаты и направление хода.
     - Проверяет ход на допустимость.
     - Выполняет ход, если он допустим.
     - Проверяет условия победы.
     - Если нет больше ходов, завершает игру.
     - Выводит результаты игры (победа или поражение).
7.  `if __name__ == "__main__": main()`:
   - Запускает игру при выполнении скрипта.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```