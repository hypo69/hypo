Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для выполнения сценариев, загрузки их из файлов и обработки процесса извлечения информации о продукте и вставки ее в PrestaShop.  Он включает в себя загрузку данных из файлов сценариев, выполнение сценариев, а также вставку данных о продуктах в базу данных PrestaShop.  Файл `executor.py` содержит функции для обработки сценариев, включая загрузку, выполнение и логирование результатов.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**:  Код импортирует нужные модули, включая `os`, `sys`, `requests`, `asyncio`, `time`, `tempfile`, `datetime`, `math`, `pathlib`, `typing`, `json`, и пользовательские модули, связанные с PrestaShop, базой данных, обработкой данных и логированием.

2. **Инициализация журнала**:  Создается словарь `_journal` для хранения данных о выполнении сценариев. Он инициализируется с пустыми полями для файлов сценариев и времени запуска.

3. **Функция `dump_journal`**: Сохраняет данные журнала в файл JSON. Принимает на вход экземпляр поставщика (`s`) и словарь журнала (`journal`).  Формирует путь к файлу журнала, используя информацию о поставщике, добавляет имя файла по текущему времени. Выполняет запись данных в файл JSON.

4. **Функция `run_scenario_files`**: Выполняет список файлов сценариев. Принимает на вход экземпляр поставщика (`s`) и список путей к файлам сценариев (`scenario_files_list`). Обрабатывает различные типы входных данных (`list` или `Path`).  Проверяет список на пустоту, если он пустой использует сценарии из `s.scenario_files`.  Итерируется по списку файлов сценариев, вызывая `run_scenario_file` для каждого файла. Логирует успехи и ошибки выполнения каждого сценария. Возвращает `True` если все сценарии были выполнены успешно, `False` иначе.

5. **Функция `run_scenario_file`**: Загружает и выполняет сценарии из файла. Принимает на вход экземпляр поставщика (`s`) и путь к файлу сценария (`scenario_file`).  Проверяет корректность файла, загружает его как JSON. Итерируется по сценариям в загруженном файле. Устанавливает текущий сценарий (`s.current_scenario`). Вызывает функцию `run_scenario` для выполнения каждого сценария. Логирует результаты. Возвращает `True` если сценарий был выполнен успешно, `False` иначе.

6. **Функция `run_scenario`**: Выполняет полученный сценарий. Принимает на вход экземпляр поставщика (`s`), словарь сценария (`scenario`), имя сценария (`scenario_name`).  Получает драйвер (`s.driver`). Переходит на указанную в сценарии страницу (`scenario['url']`). Получает список продуктов в категории (`s.related_modules.get_list_products_in_category(s)`). Если список пуст, логирует предупреждение.  Итерируется по URL-адресам продуктов.  Для каждого продукта, получает поля продукта (`s.related_modules.grab_product_page(s)`) и выполняет асинхронную обработку страницы (`s.related_modules.grab_page(s)`).  Создает экземпляр класса `Product`, используя полученные поля.  Выполняет вставку данных продукта в PrestaShop с помощью функции `execute_PrestaShop_insert`. Логирует результаты. Возвращает список URL-адресов обработанных продуктов.

7. **Функция `insert_grabbed_data`**: Вставляет данные продукта в PrestaShop.  Выполняет асинхронную вставку данных.

8. **Функция `execute_PrestaShop_insert`**: Вставляет продукт в PrestaShop. Принимает на вход объект `ProductFields`, содержит необходимые данные для вставки. Инициализирует класс `PrestaShop`. Выполняет запрос на вставку. Логирует результаты. Возвращает `True` при успешной вставке, `False` в противном случае.


Пример использования
-------------------------
.. code-block:: python

    # Предположим, у вас есть экземпляр поставщика 'supplier' и список путей к файлам сценариев
    from pathlib import Path
    scenario_files = [Path('path/to/scenario1.json'), Path('path/to/scenario2.json')]

    run_scenario_files(supplier, scenario_files)