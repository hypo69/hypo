Как использовать класс TinyWorld
========================================================================================

Описание
-------------------------
Класс `TinyWorld` представляет собой базовый класс для окружений, в которых агенты взаимодействуют друг с другом и с внешними сущностями (например, поисковыми системами). Он предоставляет структурированный способ определения мира для взаимодействия агентов.  Класс управляет агентами, временем симуляции, обработкой действий агентов и коммуникацией между ними.  Он позволяет выполнять симуляцию в определённое количество шагов или на заданный промежуток времени (минуты, часы, дни).  Класс также содержит методы для добавления, удаления и получения агентов, а также для широковещательной рассылки сообщений всем агентам.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Импортируются нужные модули, включая `logging`, `copy`, `datetime`, классы агентов и вспомогательные функции из `tinytroupe`.

2. **Создание экземпляра TinyWorld:** Создаётся экземпляр класса `TinyWorld` с заданным именем, списком агентов, начальной датой и флагом для широковещательной рассылки при отсутствии целевого агента.

3. **Добавление агентов:** Метод `add_agents` добавляет список агентов в окружение.  Агенты должны быть типа `TinyPerson`.

4. **Управление временем симуляции:** Используйте методы `run`, `skip` или другие методы для управления временем симуляции: `run_minutes`, `run_hours`, `skip_hours` и т.д.  Эти методы изменяют текущую дату симуляции на заданный интервал времени.

5. **Обработка действий агентов:** В методе `_step` происходит обработка действий, выполняемых агентами.  Этот метод вызывает метод `act` для каждого агента, собирает результаты и обрабатывает их.

6. **Выполнение шагов симуляции:** Метод `run` выполняет симуляцию заданное количество шагов. В каждом шаге выполняется `_step`.

7. **Обработка коммуникаций:**  Методы `_handle_actions`, `_handle_reach_out`, `_handle_talk` обрабатывают действия агентов. Они определяют тип действия и действуют в соответствии с ним.  Например, `_handle_reach_out` устанавливает доступность агентов друг для друга.

8. **Распространение сообщений:** Методы `broadcast`, `broadcast_thought`, `broadcast_internal_goal`, `broadcast_context_change` отправляют сообщения всем агентам в среде.

9. **Получение состояния окружения:**  Метод `encode_complete_state` позволяет сохранить состояние окружения в формате словаря.  Метод `decode_complete_state` позволяет восстановить состояние окружения из этого словаря.


Пример использования
-------------------------
```python
import datetime
from tinytroupe.environment import TinyWorld
from tinytroupe.agent import TinyPerson

# Создание агентов
agent1 = TinyPerson(name="Agent 1")
agent2 = TinyPerson(name="Agent 2")

# Создание окружения
env = TinyWorld(name="MyEnvironment", agents=[agent1, agent2], initial_datetime=datetime.datetime(2024, 1, 1))

# Выполнение симуляции на 2 шага
env.run(steps=2)

# Получение действий агентов
actions = env.run(steps=2, return_actions=True)

# Вывод состояния
print(env.pretty_current_interactions())
```
```


```

**Важно:** Пример предполагает, что классы `TinyPerson` и `tinytroupe.agent` уже определены.  Для полной работы необходимо определить соответствующие методы в `TinyPerson` (например, `act`, `socialize`, `listen`).