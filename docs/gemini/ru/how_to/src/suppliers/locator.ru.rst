Как использовать локаторы полей на HTML-странице
==========================================================================================

Описание
-------------------------
Этот документ описывает формат и использование локаторов полей на HTML-страницах. Локаторы определяют, как найти и взаимодействовать с конкретными элементами на веб-странице, используя WebDriver.  Каждое поле имеет уникальный локатор, позволяющий его однозначно идентифицировать и взаимодействовать с ним.

Шаги выполнения
-------------------------
1. **Анализ структуры локатора**: Каждый локатор представляет собой словарь с ключами, описывающими способ поиска элемента на странице.
2. **Идентификация полей**:  Имя словаря соответствует имени поля в классе `ProductFields`.  
3. **Выбор стратегии поиска (`by`):**  Выберите из доступных стратегий (`ID`, `NAME`, `CLASS_NAME`, `TAG_NAME`, `LINK_TEXT`, `PARTIAL_LINK_TEXT`, `CSS_SELECTOR`, `XPATH`) способ поиска элемента.
4. **Назначение селектора (`selector`):**  Укажите селектор (XPath, CSS-селектор и т.д.), который точно описывает искомый элемент на странице.
5. **Указание атрибута (`attribute`):**  Определите, какой атрибут элемента (например, `innerText`, `src`, `id`, `href`) необходимо получить. Если `attribute` имеет значение `null` или `false`, то WebDriver возвращает весь элемент (`WebElement`).
6. **Определение обработки списка элементов (`if_list`):** Если на странице может быть несколько элементов, соответствующих селектору, укажите, какой из них нужно выбрать: `first`, `all`, `last`, или другие варианты.
7. **Управление действиями с элементом (`event`):** Укажите, какие действия необходимо выполнить с элементом (например, `click()`, `screenshot()`, `scroll()`), например, `click()`, `screenshot()`, `send_message()`.  Эти действия выполняются до получения атрибута.
8. **Определение обязательности (`mandatory`):** Укажите, критично ли наличие элемента для работы скрипта. `true` - критически важно, `false` - элемент не обязателен.
9. **Добавление описания (`locator_description`):**  Дополните локатор подробным описанием его назначения.
10. **Обработка сложных локаторов**: При необходимости, можно использовать списки, кортежи или словари внутри ключей локатора для более сложных случаев.

Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from selenium.webdriver.common.by import By

    # Предполагается, что driver уже инициализирован
    # ...

    locator_data = {
        "close_banner": {
            "attribute": null,
            "by": "XPATH",
            "selector": "//button[@id = 'closeXButton']",
            "if_list": "first",
            "use_mouse": False,
            "mandatory": False,
            "event": "click()",
            "locator_description": "Закрываю pop-up окно."
        }
    }

    try:
        element = driver.find_element(By.XPATH, locator_data['close_banner']['selector'])
        if locator_data['close_banner']['event']:
            getattr(element, locator_data['close_banner']['event'])()  # Выполнение события
        if locator_data['close_banner']['attribute']:
            attribute_value = getattr(element, locator_data['close_banner']['attribute'])
            print(f"Значение атрибута: {attribute_value}")
        else:
            print("Весь элемент:")
            print(element)
    except Exception as e:
        if locator_data['close_banner']['mandatory']:
            raise Exception(f"Ошибка при поиске элемента: {e}")
        else:
            print(f"Ошибка при поиске элемента, но это не критично: {e}")