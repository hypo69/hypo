Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует механизмы управления симуляцией.  Класс `Simulation` позволяет создавать, запускать, останавливать и сохранять состояние симуляции.  Он поддерживает кеширование состояния симуляции для последующего возобновления и отката.  Реализована система транзакций для управления изменениями во время работы симуляции. Класс также предоставляет инструменты для работы с агентами, окружениями и фабриками, используемыми в симуляции.

Шаги выполнения
-------------------------
1. **Инициализация:** Создается объект `Simulation` с опциональными параметрами `id` (идентификатор симуляции) и `cached_trace` (предварительно загруженные данные кеша).
2. **Начало симуляции:** Метод `begin()` запускает симуляцию.  Параметр `cache_path` позволяет указать путь к файлу кеша, а `auto_checkpoint` указывает, сохранять ли состояние после каждой транзакции.
3. **Добавление компонентов:** Методы `add_agent()`, `add_environment()`, и `add_factory()` добавляют соответствующие элементы в симуляцию.  Важно, чтобы имена элементов были уникальными в рамках одной симуляции.
4. **Остановка симуляции:** Метод `end()` завершает симуляцию и сохраняет её текущее состояние в кеше (если есть изменения).
5. **Сохранение состояния:** Метод `checkpoint()` сохраняет текущее состояние симуляции в указанном файле кеша.
6. **Транзакции:** Методы `begin_transaction()`, `end_transaction()` и `is_under_transaction()` управляют транзакциями, позволяя группировать изменения и отменять их при необходимости. `_clear_communications_buffers()` очищает буферы коммуникаций агентов и окружений.
7. **Обработка транзакции:**  Декоратор `transactional` позволяет обернуть функцию для выполнения её в контексте транзакции. Внутри транзакции код либо выполняется, либо пропускается (если закешировано).  Функция `_encode_function_output` и `_decode_function_output` кодируют и декодируют результат функции для хранения/восстановления объектов.
8. **Работа с кешем:** Методы `_load_cache_file()` загружает данные из кеша, `_save_cache_file()` сохраняет состояние в кеше, `_skip_execution_with_cache()` пропускает исполнение, полагаясь на кеш. `_is_transaction_event_cached()` проверяет, есть ли событие в кеше. `_drop_cached_trace_suffix()` очищает часть кеша.
9. **Обработка ошибок:** Код содержит обработку `ValueError` для предотвращения ошибок, например, при попытке запустить уже запущенную симуляцию или добавлении агента с уже существующим именем.


Пример использования
-------------------------
.. code-block:: python

    import tinytroupe
    from tinytroupe.agent import TinyPerson
    from tinytroupe.environment import TinyWorld

    # Инициализация симуляции
    sim = tinytroupe.Simulation(id="my_sim")
    tinytroupe.begin(id="my_sim")

    # Создание агента и окружения
    agent = TinyPerson(name="agent1")
    environment = TinyWorld(name="world1")
    sim.add_agent(agent)
    sim.add_environment(environment)

    # Обернутая в transaction функция
    @tinytroupe.transactional
    def my_function(agent):
        # Проведите какие-то действия с агентом
        agent.do_something()
        return agent


    # Вызов обернутой функции
    result = my_function(agent)

    # Остановка симуляции
    tinytroupe.end(id="my_sim")