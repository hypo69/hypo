Как использовать этот блок кода
=========================================================================================\n\nОписание
-------------------------
Данный код отвечает за обработку сообщений, полученных от других вкладок и фреймов расширения браузера Firefox. Он реализует слушателя `browser.runtime.onMessage`, который обрабатывает разные типы сообщений (например, сохранение состояния всплывающего окна, запрос восстановления состояния, вставку CSS в всплывающее окно, отображение всех результатов поиска, запрос параметров и т. д.).  Код также загружает и обновляет CSS-стили, хранит информацию о результатах поиска и управляет настройками расширения (например, атрибуты элементов).

Шаги выполнения
-------------------------
1. **Инициализация:** Код определяет переменные `tx`, `fu`, `popupState`, `popupCss`, `results`, `css`, и `attributes`.  `attributes` хранит атрибуты для поиска, `popupCss` – CSS-стили всплывающего окна, `css` – общие CSS-стили, `results` – результаты поиска.
2. **Загрузка стилей:** Функция `loadDefaultCss` загружает CSS-стили из файла `try_xpath_insert.css` в расширении.
3. **Обработка сообщений:** Функция `genericListener` слушает сообщения из других частей расширения.  Она использует `genericListener.listeners` для обработки конкретных событий.
4. **Обработка отдельных событий:** Разные `genericListener.listeners` обрабатывают специфические сообщения, такие как `storePopupState` (сохраняет состояние всплывающего окна), `requestRestorePopupState` (восстанавливает состояние), `requestInsertStyleToPopup` (вставляет CSS в всплывающее окно), `showAllResults` (отображает результаты поиска), `loadResults` (отправляет результаты), `updateCss` (обновляет CSS-стили), `loadOptions` (загружает параметры) и `requestSetContentInfo` (устанавливает информацию о содержимом).  Обработка включает в себя отправку ответов, загрузку новых данных и взаимодействие с другими частями расширения.
5. **Обновление параметров:** Событие `browser.storage.onChanged` слушает изменения параметров в хранилище браузера. Если параметры `attributes`, `css` или `popupCss` изменяются, код обновляет соответствующие переменные.
6. **Загрузка параметров из хранилища:** Код использует `browser.storage.sync.get` для получения параметров из хранилища браузера (включая `attributes`, `css`, `popupCss`). Если `css` отсутствует, загружается `loadDefaultCss`.
7. **Обработка ошибок:**  `catch(fu.onError)` используется для перехвата ошибок при выполнении различных операций.

Пример использования
-------------------------
.. code-block:: javascript
    // Пример использования функции для отправки сообщения:
    browser.runtime.sendMessage({
        "event": "showAllResults",
        "results": { /* данные для отображения результатов */ }
    });