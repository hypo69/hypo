"""
ZOOP:
=================
Сложность: 4
-----------------
Игра "ZOOP" - это простая игра, где игрок вводит последовательности цифр, и программа отслеживает, является ли каждая новая цифра строго больше предыдущей. Цель игры состоит в том, чтобы ввести как можно более длинную последовательность чисел в порядке возрастания. Если игрок вводит цифру, которая не больше предыдущей, игра заканчивается, и программа выводит длину последовательности.
Правила игры:
1. Игрок вводит последовательность цифр по одной за раз.
2. Первая введенная цифра всегда принимается.
3. Каждая последующая введенная цифра должна быть строго больше предыдущей.
4. Если введена цифра, которая не больше предыдущей, игра заканчивается.
5. После окончания игры программа выводит длину последовательности, которую смог ввести игрок.
-----------------
Алгоритм:
1. Установить длину последовательности в 0.
2. Установить предыдущее число в 0 (или любое значение, которое будет меньше первой цифры, введенной пользователем).
3. Начать цикл "пока игра не закончена":
    3.1 Запросить у игрока ввод числа.
    3.2 Если введенное число больше предыдущего, то:
        3.2.1 Увеличить длину последовательности на 1.
        3.2.2 Присвоить предыдущему числу значение введенного числа.
    3.3 Иначе (если введенное число не больше предыдущего):
        3.3.1 Перейти к шагу 4 (завершить игру).
4. Вывести сообщение "YOUR SCORE IS {длина последовательности}"
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    sequenceLength = 0
    previousNumber = 0
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока игра не закончена"}
    LoopStart -- Да --> InputNumber["Ввод числа пользователем: <code><b>currentNumber</b></code>"]
    InputNumber --> CheckNumber{"Проверка: <code><b>currentNumber > previousNumber</b></code>?"}
    CheckNumber -- Да --> IncreaseLength["<code><b>sequenceLength = sequenceLength + 1</b></code>"]
    IncreaseLength --> UpdatePrevious["<code><b>previousNumber = currentNumber</b></code>"]
    UpdatePrevious --> LoopStart
    CheckNumber -- Нет --> OutputScore["Вывод сообщения: <b>YOUR SCORE IS <code>{sequenceLength}</code></b>"]
    OutputScore --> End["Конец"]
    LoopStart -- Нет --> End
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: sequenceLength (длина последовательности) устанавливается в 0, а previousNumber (предыдущее число) устанавливается в 0.
    LoopStart - Начало цикла, который продолжается, пока игра не закончена.
    InputNumber - Запрос у пользователя ввода числа и сохранение его в переменной currentNumber.
    CheckNumber - Проверка, больше ли введенное число currentNumber предыдущего числа previousNumber.
    IncreaseLength - Увеличение счетчика длины последовательности sequenceLength на 1.
    UpdatePrevious - Обновление значения previousNumber текущим значением currentNumber.
    OutputScore - Вывод сообщения с итоговым счетом (длиной последовательности).
    End - Конец программы.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализация длины последовательности и предыдущего числа
sequenceLength = 0
previousNumber = 0

# Бесконечный цикл для ввода чисел
while True:
    # Запрашиваем у пользователя ввод числа
    try:
        currentNumber = int(input("Введите число: "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверяем, больше ли текущее число предыдущего
    if currentNumber > previousNumber:
        # Если больше, увеличиваем длину последовательности и обновляем предыдущее число
        sequenceLength += 1
        previousNumber = currentNumber
    else:
        # Если не больше, выводим счет и завершаем игру
        print(f"YOUR SCORE IS {sequenceLength}")
        break
"""
Объяснение кода:
1. **Инициализация переменных**:
   - `sequenceLength = 0`: Переменная `sequenceLength` хранит текущую длину последовательности введенных чисел. Изначально установлена в 0.
   - `previousNumber = 0`: Переменная `previousNumber` хранит предыдущее введенное число. Изначально установлена в 0.
2. **Бесконечный цикл `while True:`**:
   - Этот цикл продолжается до тех пор, пока пользователь не введет число, которое не больше предыдущего.
3. **Ввод данных**:
   - `currentNumber = int(input("Введите число: "))`: Запрашивает у пользователя ввод числа и преобразует его в целое число. 
   - `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
4. **Проверка условия**:
   - `if currentNumber > previousNumber:`: Проверяет, больше ли введенное число `currentNumber` предыдущего числа `previousNumber`.
   - Если условие истинно (новое число больше предыдущего):
        - `sequenceLength += 1`: Увеличивает длину последовательности на 1.
        - `previousNumber = currentNumber`: Обновляет значение `previousNumber` текущим введенным числом.
   - `else:`: Если условие ложно (новое число не больше предыдущего):
        -  `print(f"YOUR SCORE IS {sequenceLength}")`: Выводит на экран длину текущей последовательности.
        -  `break`: Завершает цикл `while`, так как игра закончена.
"""
