"""
<GOLF>:
=================
Сложность: 3
-----------------
Игра "Гольф" представляет собой текстовую симуляцию игры в гольф, где игрок пытается забить мяч в лунку за минимальное количество ударов.  Игрок вводит расстояние до лунки, а затем пытается отгадать силу удара, чтобы забить мяч.  Игра ведётся до тех пор, пока игрок не попадёт в лунку.

Правила игры:
1.  Игра начинается с установки случайного расстояния до лунки в диапазоне от 25 до 250 единиц.
2.  Игрок вводит силу удара.
3.  Если сила удара равна расстоянию до лунки, игрок попадает в лунку, игра заканчивается и выводится количество сделанных ударов.
4. Если сила удара меньше расстояния до лунки, расстояние до лунки уменьшается на величину силы удара.
5. Если сила удара больше расстояния до лунки, расстояние до лунки уменьшается на величину силы удара.
6. Игра продолжается до тех пор, пока игрок не попадёт в лунку.

-----------------
Алгоритм:
1.  Установить количество ударов равным 0.
2.  Установить случайное расстояние до лунки в диапазоне от 25 до 250.
3.  Увеличить количество ударов на 1.
4.  Вывести текущее расстояние до лунки.
5.  Запросить у игрока силу удара.
6.  Если сила удара равна расстоянию до лунки, вывести сообщение о победе и количестве ударов, затем завершить игру.
7.  Если сила удара не равна расстоянию до лунки, вычислить новое расстояние до лунки путем вычитания силы удара из текущего расстояния до лунки
8. Вернуться к шагу 3.

-----------------
Блок-схема:
```mermaid
  graph TD
      Start(Start) --> Initialize(Инициализация игры);
      Initialize --> SetRandomDistance(Установить случайное расстояние до лунки);
      SetRandomDistance --> LoopStart(Начало цикла);
      LoopStart --> IncrementShots(Увеличить количество ударов);
      IncrementShots --> DisplayDistance(Показать расстояние до лунки);
      DisplayDistance --> InputPower(Запросить силу удара);
      InputPower --> CheckHit(Проверка попадания);
      CheckHit -- Попадание --> OutputWin(Вывести сообщение о победе и количестве ударов);
      OutputWin --> End(Конец);
      CheckHit -- Промах --> UpdateDistance(Изменить расстояние до лунки);
      UpdateDistance --> LoopStart;
```
"""
import random

def play_golf():
    """
    Запускает игру в гольф.
    """
    shots_count = 0  # Количество ударов, сделанных игроком
    distance_to_hole = random.randint(25, 250) # Задаём случайное расстояние от 25 до 250

    while True: # Бесконечный цикл, пока игрок не попадет в лунку
        shots_count += 1 # Увеличиваем количество ударов на 1
        print(f"Расстояние до лунки: {distance_to_hole}")  # Выводим расстояние до лунки

        try:
            shot_power = int(input("Введите силу удара: ")) # Запрашиваем у игрока силу удара
        except ValueError:
             print("Некорректный ввод, пожалуйста, введите число")
             continue

        if shot_power == distance_to_hole: # Если сила удара равна расстоянию до лунки, то игрок попал
            print(f"Поздравляю! Вы попали в лунку с {shots_count} попытки.") # Выводим сообщение о победе
            break # Завершаем игру
        else:
            distance_to_hole = abs(distance_to_hole - shot_power)  # Вычисляем новое расстояние до лунки

if __name__ == "__main__":
    play_golf()
"""
Пояснения:
`shots_count`: целая переменная, которая хранит количество ударов, сделанных игроком. Инициализируется нулём в начале игры.
`distance_to_hole`: целая переменная, которая хранит текущее расстояние до лунки. Инициализируется случайным целым числом в диапазоне от 25 до 250.
`random.randint(25, 250)`: генерирует случайное целое число в диапазоне от 25 до 250 включительно.
`input("Введите силу удара: ")`: выводит сообщение и ждет ввода от пользователя.  Результат - строка
`int(input(...))`: преобразует введенную строку в целое число.
`while True:`: создает бесконечный цикл, который продолжается до тех пор, пока не будет использована команда `break` для выхода из цикла.
`shots_count += 1`: увеличивает количество ударов на 1.
`print(f"Расстояние до лунки: {distance_to_hole}")`: выводит текущее расстояние до лунки.
`if shot_power == distance_to_hole:`: проверяет, равен ли сила удара расстоянию до лунки.
`print(f"Поздравляю! Вы попали в лунку с {shots_count} попытки.")`: выводит сообщение о победе и количестве ударов.
`break`: прерывает текущий цикл `while`.
`distance_to_hole = abs(distance_to_hole - shot_power)`: вычисляет новое расстояние до лунки путем вычитания силы удара из текущего расстояния и берет модуль результата.
`if __name__ == "__main__":`: Эта строка гарантирует, что код внутри блока `if` будет выполнен только в том случае, если файл запущен напрямую, а не импортирован как модуль.
`play_golf()`: вызывает функцию `play_golf()` для запуска игры.
`try...except`: обрабатывает исключение, которое может возникнуть, если пользователь введет нечисловое значение.
`continue`: переходит к следующей итерации цикла `while`.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
