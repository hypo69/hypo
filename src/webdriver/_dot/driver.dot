
digraph DependencyTree {
    rankdir=LR;
    node [shape=box, style=rounded];

    subgraph cluster_0 {
        label = "src.webdriver.driver";
        color=lightgrey;
        style=dashed;

        subgraph cluster_imports {
            label = "Imports";
            color=lightblue;

            sys;
            pickle;
            time;
            copy;
            pathlibPath [label="pathlib.Path"];
            typing [label="typing (Type, Union)"];
            urllib_parse [label="urllib.parse"];
            selenium_action_chains [label="selenium.webdriver.common.action_chains.ActionChains"];
            selenium_keys [label="selenium.webdriver.common.keys.Keys"];
            selenium_by [label="selenium.webdriver.common.by.By"];
            selenium_expected_conditions [label="selenium.webdriver.support.expected_conditions as EC"];
            selenium_webdriver_wait [label="selenium.webdriver.support.ui.WebDriverWait"];
            selenium_webelement [label="selenium.webdriver.remote.webelement.WebElement"];
            selenium_exceptions [label="selenium.common.exceptions"];
            selenium_exceptions_1 [label="InvalidArgumentException"];
            selenium_exceptions_2 [label="ElementClickInterceptedException"];
            selenium_exceptions_3 [label="ElementNotInteractableException"];
            selenium_exceptions_4 [label="ElementNotVisibleException"];
            src_settings [label="src.settings.gs"];
            src_executor [label="src.webdriver.executor.ExecuteLocator"];
            src_javascript [label="src.webdriver.javascript.js.JavaScript"];
            src_utils [label="src.utils.pprint"];
            src_logger [label="src.logger.logger"];
            src_exceptions [label="src.exceptions.WebDriverException"];
        }

        subgraph cluster_driver_base {
            label = "DriverBase";
            color=lightgreen;

            previous_url [label="previous_url: str"];
            referrer [label="referrer: str"];
            page_lang [label="page_lang: str"];
            ready_state [label="ready_state"];
            get_page_lang [label="get_page_lang"];
            unhide_DOM_element [label="unhide_DOM_element"];
            get_referrer [label="get_referrer"];
            window_focus [label="window_focus"];
            execute_locator [label="execute_locator"];
            click [label="click"];
            get_webelement_as_screenshot [label="get_webelement_as_screenshot"];
            get_attribute_by_locator [label="get_attribute_by_locator"];
            send_message [label="send_message"];
            send_key_to_webelement [label="send_key_to_webelement"];

            driver_payload [label="driver_payload(self)"];
            scroll [label="scroll(self, scrolls: int, frame_size: int, direction: str, delay: float) -> Union[None, bool]"];
            locale [label="locale(self) -> Union[None, str]"];
            get_url [label="get_url(self, url: str) -> bool"];
            extract_domain [label="extract_domain(self, url: str) -> str"];
            _save_cookies_localy [label="_save_cookies_localy(self, to_file: Union[str, Path]) -> bool"];
            page_refresh [label="page_refresh(self) -> bool"];
            window_focus_method [label="window_focus(self)"];
            wait [label="wait(self, interval: float)"];
            delete_driver_logs [label="delete_driver_logs(self) -> bool"];
        }

        subgraph cluster_driver_meta {
            label = "DriverMeta";
            color=lightyellow;

            call [label="__call__(cls, webdriver_cls, *args, **kwargs)"];
            driver_class [label="Driver class"];
            driver_init [label="__init__(self, *args, **kwargs)"];
            driver_payload_method [label="driver_payload()"];
        }

        driver [label="Driver(metaclass=DriverMeta)"];
    }

    driver -> driver_class;
    driver_class -> driver_init;
    driver_class -> driver_payload_method;

    driver_payload -> ready_state;
    driver_payload -> get_page_lang;
    driver_payload -> unhide_DOM_element;
    driver_payload -> get_referrer;
    driver_payload -> window_focus;
    driver_payload -> execute_locator;
    driver_payload -> click;
    driver_payload -> get_webelement_as_screenshot;
    driver_payload -> get_attribute_by_locator;
    driver_payload -> send_message;
    driver_payload -> send_key_to_webelement;

    scroll -> driver_payload;
    locale -> driver_payload;
    get_url -> driver_payload;
    extract_domain -> driver_payload;
    _save_cookies_localy -> driver_payload;
    page_refresh -> driver_payload;
    window_focus_method -> driver_payload;
    wait -> driver_payload;
    delete_driver_logs -> driver_payload;
}
