Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для выполнения сценариев, загрузки их из файлов, извлечения информации о продукте и вставки её в PrestaShop. Он обрабатывает список файлов сценариев, выполняя каждый файл по отдельности.  Внутри каждого файла сценариев код разбирает список сценариев, выполняет каждый из них, регистрируя успехи и ошибки.  Он также включает функции для сохранения журнала выполнения сценариев.

Шаги выполнения
-------------------------
1. **Инициализация:** Модуль импортирует необходимые библиотеки (os, sys, requests, asyncio, time, tempfile, datetime, math, pathlib, typing, json, ...), а также классы и модули из других частей приложения (header, gs, utils.printer, utils.jjson, product, endpoints.prestashop, db, logger, logger.exceptions).  Определяются глобальные переменные, например, _journal, для хранения журнала выполнения.

2. **Сохранение журнала:** Функция `dump_journal` сохраняет данные журнала в файл JSON.

3. **Выполнение списка файлов сценариев:** Функция `run_scenario_files` принимает список путей к файлам сценариев (или один путь) и выполняет их последовательно.
    - Если входной параметр `scenario_files_list` - это объект Path, он преобразуется в список из одного элемента.
    - Если входной параметр `scenario_files_list` не является списком или объектом Path, генерируется исключение TypeError.
    - Если список пуст, используется значение `s.scenario_files`.
    - Для каждого файла сценариев:
        - Создаётся запись в журнале.
        - Вызывается функция `run_scenario_file` для загрузки и выполнения сценариев из файла.
        - Отмечается успех или неудача выполнения сценария в журнале.
        - Обрабатываются возможные исключения (FileNotFoundError, json.JSONDecodeError) и записываются в журнал.

4. **Выполнение сценария из файла:** Функция `run_scenario_file` загружает сценарии из файла JSON, используя `j_loads`.
   - Для каждого сценария из файла:
        - Устанавливает текущий сценарий в экземпляре `s` (по всей видимости, экземпляр класса, представляющего поставщика).
        - Вызывает `run_scenario` для выполнения сценария.
        - Обрабатываются возможные исключения и регистрируются в журнале.
        - Возвращает True, если все сценарии в файле выполнены успешно.

5. **Выполнение сценариев:** Функция `run_scenarios` принимает список сценариев или один сценарий в виде словаря.  Если нет входного списка сценариев, берет его из `s.current_scenario`.
   - Преобразует входной параметр `scenarios` в список, если это не список.
   - Для каждого сценария:
       - Вызывает `run_scenario` для его выполнения.
       - Добавляет результат выполнения в список `res`.
       - Сохраняет журнал.
   - Возвращает список результатов выполнения сценариев `res`.


6. **Выполнение одного сценария:** Функция `run_scenario` принимает экземпляр поставщика, сценарий (словарь) и имя сценария.
   - Получает экземпляр драйвера (предположительно, для взаимодействия с веб-страницей).
   - Переходит на указанную в сценарии страницу.
   - Получает список продуктов из категории. Если продуктов нет или они не загружены,  логирует предупреждение.
   - Для каждого продукта в списке:
       - Переходит на страницу продукта. Если перехода не происходит, логирует ошибку и пропускает продукт.
       - Получает информацию о продукте с страницы.
       - Создает объект `Product`.
       - Выполняет функцию `insert_grabbed_data`, чтобы вставить данные в PrestaShop.
       - Если происходит ошибка при сохранении продукта, логирует ошибку.
   - Возвращает список URL-адресов продуктов.


7. **Вставка данных в PrestaShop:** Функция `execute_PrestaShop_insert` выполняет POST-запрос в PrestaShop для вставки данных о продукте.  Использует `PrestaShop` класс для взаимодействия с API.  Принимает id продукта, имя, категорию, цену, описание и дополнительные параметры (код купона, даты акции).  Возвращает True, если вставка прошла успешно, False иначе.


Пример использования
-------------------------
.. code-block:: python

    from pathlib import Path
    from hypotez.src.scenario import executor
    from hypotez.src.scenario import supplier

    s = supplier.Supplier(...)  # Инициализация экземпляра класса поставщика
    scenario_files = [Path("./scenarios/scenario1.json"), Path("./scenarios/scenario2.json")]

    executor.run_scenario_files(s, scenario_files)