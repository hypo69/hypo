"""
<BOAT>:
=================
Сложность: 3
-----------------
Игра "BOAT" - это простая игра, в которой игрок пытается потопить корабль противника, делая выстрелы по сетке 10x10. 
Игрок вводит координаты выстрела, и программа сообщает, попал ли выстрел в корабль.
Игра заканчивается, когда игрок потопит корабль.

Правила игры:
1. Корабль противника имеет длину 3 клетки и размещен на случайных координатах по горизонтали или вертикали на поле 10x10.
2. Игрок делает выстрелы, указывая координаты строки и столбца (от 1 до 10).
3. Если выстрел попадает в корабль, программа сообщает об этом.
4. Игра продолжается, пока игрок не потопит весь корабль.
-----------------
Алгоритм:
1. Генерируется случайное расположение корабля (три последовательные клетки по горизонтали или вертикали).
2. Игроку предлагается ввести координаты выстрела (строку и столбец).
3. Проверяется, попал ли выстрел в корабль.
4. Если попал, сообщается о попадании, и счетчик попаданий увеличивается.
5. Если счетчик попаданий равен 3, игра заканчивается победой игрока.
6. Если не попал, ничего не сообщается и игра продолжается.
7. Переход к шагу 2.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> GenerateShip(Генерация корабля);
    GenerateShip --> InputGuess(Ввод координат выстрела);
    InputGuess --> CheckHit(Проверка попадания);
    CheckHit -- Попал --> IncrementHits(Увеличить счетчик попаданий);
    CheckHit -- Не попал --> InputGuess;
    IncrementHits --> CheckWin(Проверка победы);
    CheckWin -- Победа --> OutputWin(Вывод сообщения о победе);
    CheckWin -- Не победа --> InputGuess;
    OutputWin --> End(Конец);
```
"""
import random

def generate_ship():
    """
    Генерирует случайное расположение корабля на поле 10x10.

    Корабль имеет длину 3 клетки и может быть расположен по горизонтали или вертикали.

    Returns:
        list: Список кортежей, представляющих координаты клеток корабля.
    """
    orientation = random.choice(['horizontal', 'vertical'])
    if orientation == 'horizontal':
        row = random.randint(1, 10)
        col = random.randint(1, 8)  # Чтобы корабль не выходил за пределы поля
        ship_coords = [(row, col), (row, col + 1), (row, col + 2)]
    else:  # orientation == 'vertical'
        row = random.randint(1, 8)  # Чтобы корабль не выходил за пределы поля
        col = random.randint(1, 10)
        ship_coords = [(row, col), (row + 1, col), (row + 2, col)]
    return ship_coords


def check_hit(guess_row, guess_col, ship_coords):
    """
    Проверяет, попадает ли выстрел в корабль.

    Args:
        guess_row (int): Строка выстрела.
        guess_col (int): Столбец выстрела.
        ship_coords (list): Список координат корабля.

    Returns:
        bool: True, если выстрел попал в корабль, False в противном случае.
    """
    return (guess_row, guess_col) in ship_coords


def main():
    """
    Основная функция игры "BOAT".
    """
    ship_coords = generate_ship() # генерируем случайные координаты корабля
    hits = 0 #счетчик попаданий
    
    print("Игра 'BOAT'")
    print("Попробуйте потопить корабль противника. Координаты от 1 до 10.")

    while hits < 3: #цикл продолжается пока количество попаданий меньше 3
        try:
           guess_row = int(input("Введите строку выстрела (1-10): ")) #запрос на ввод строки
           guess_col = int(input("Введите столбец выстрела (1-10): ")) #запрос на ввод столбца
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите целые числа от 1 до 10.") # обработка ошибок при вводе
            continue

        if not (1 <= guess_row <= 10 and 1 <= guess_col <= 10): #проверка на коректность ввода координат
            print("Некорректные координаты. Введите числа от 1 до 10.") # если координаты не коректны выводим ошибку
            continue
        
        if check_hit(guess_row, guess_col, ship_coords): #проверяем попали ли мы в корабль
            print("Попадание!") #если попали выводим сообщение о попадании
            hits += 1 # увеличиваем счетчик попаданий
        else:
            print("Мимо.") #если не попали выводим сообщение что мимо
            
    print("Вы потопили корабль! Победа!") # когда цикл завершен (потоплен корабль) поздравляем с победой

if __name__ == "__main__":
    main()
"""
Пояснения:
1. **`generate_ship()`**: Эта функция генерирует координаты корабля случайным образом. Она выбирает случайную ориентацию (горизонтальную или вертикальную), случайную начальную строку и столбец, а затем генерирует координаты трех последовательных клеток корабля.
2. **`check_hit(guess_row, guess_col, ship_coords)`**: Эта функция проверяет, попадает ли выстрел, введенный пользователем, в корабль. Она принимает координаты выстрела и координаты корабля и возвращает `True`, если выстрел попал, и `False` в противном случае.
3.  **`main()`**:
    -  `ship_coords = generate_ship()`: Генерируем координаты корабля.
    -  `hits = 0`: Инициализируем счетчик попаданий.
    -  `print("Игра 'BOAT'")`: Выводим приветственное сообщение.
    -  `while hits < 3:`: Запускаем основной игровой цикл. Игра продолжается до тех пор, пока не будет сделано 3 попадания.
    -   `try ... except`: обрабатываем возможную ошибку ввода (если пользователь ввел не число)
    -   `if not (1 <= guess_row <= 10 and 1 <= guess_col <= 10):`: проверяем коректность введенных координат
    - `if check_hit(guess_row, guess_col, ship_coords):`: проверяем попадание в корабль.
    -  `print("Вы потопили корабль! Победа!")`:  Сообщаем о победе игрока.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```