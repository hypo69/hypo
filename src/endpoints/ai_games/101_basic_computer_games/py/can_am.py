"""
CAN AM:
=================
Сложность: 5
-----------------
Игра "CAN AM" - это гоночная игра, в которой игрок управляет автомобилем, перемещаясь по трассе, представленной в виде числовой оси. 
Цель игры - достичь финиша, который находится на расстоянии 200 миль от старта. 
Игрок начинает игру с начальной скоростью, количеством топлива и состоянием шин. 
Во время игры игрок может выбирать действие на каждом шаге: ехать, заправиться, починить шины, или сменить действие. 
Игра заканчивается, когда игрок достигает финиша, заканчивается топливо, или состояние шин становится критическим.

Правила игры:
1. Игрок начинает гонку с определенной начальной скоростью (80 миль в час), запасом топлива (20 галлонов) и состоянием шин (5 единиц из 5).
2. Игрок может выполнить одно из следующих действий на каждом шаге игры:
    -  Ехать: увеличивает пройденное расстояние на основе текущей скорости и уменьшает количество топлива и состояние шин.
    -  Заправиться: увеличивает количество топлива, но тратит время (шаг)
    -  Починить шины: увеличивает состояние шин, но тратит время (шаг).
3. Игрок выигрывает, когда пройденное расстояние достигает 200 миль.
4. Игрок проигрывает, если заканчивается топливо (FUEL=0) или шины полностью изношены (TIRES=0).
5. Состояние шин уменьшается на единицу каждые 20 миль.
6. Расход топлива увеличивается на единицу за каждые 10 миль.
7. Выбор неверного действия на шаге, приводит к потере времени.
-----------------
Алгоритм:
1.  Инициализировать начальное расстояние (0 миль), топливо (20 галлонов), состояние шин (5), скорость (80 миль/ч).
2.  Начать игровой цикл: пока не достигнут финиш (200 миль), топливо не закончилось или шины не изношены:
    2.1 Вывести текущую информацию об игре: расстояние, топливо, состояние шин, скорость.
    2.2 Запросить у игрока действие: (D)rive, (F)uel, (T)ires, (C)hange
    2.3 В зависимости от действия:
        - (D)rive: 
            - Увеличить пройденное расстояние на основе скорости.
            - Уменьшить топливо на основе пройденного расстояния.
            - Уменьшить состояние шин, если необходимо.
        - (F)uel: 
            - Увеличить запас топлива.
            - Вывести сообщение о заправке.
        - (T)ires: 
            - Увеличить состояние шин.
            - Вывести сообщение о починке шин.
        - (C)hange: Вывести сообщение об ошибке.
    2.4 Проверить условия окончания игры:
        - Если пройдено расстояние >= 200 миль, вывести сообщение о победе и завершить игру.
        - Если топливо <= 0, вывести сообщение о проигрыше (нет топлива) и завершить игру.
        - Если состояние шин <= 0, вывести сообщение о проигрыше (шины изношены) и завершить игру.
3.  Вывести сообщение об окончании игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    distance = 0<br>
    fuel = 20<br>
    tires = 5<br>
    speed = 80
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не достигнут финиш, нет топлива, шины не изношены"}
    LoopStart -- Да --> DisplayStatus["Вывод текущего состояния: <br><code><b>distance, fuel, tires, speed</b></code>"]
    DisplayStatus --> InputAction["Запрос действия: (D)rive, (F)uel, (T)ires, (C)hange"]
    InputAction --> CheckAction{"Проверка действия"}
    CheckAction -- D --> DriveAction["<p align='left'>Действие 'Ехать':
    <code><b>
    distance = distance + speed
    fuel = fuel - (distance / 10)
    if (distance % 20 == 0) tires = tires - 1
    </b></code></p>"]
    CheckAction -- F --> FuelAction["Действие 'Заправить': <code><b>fuel = fuel + 10</b></code>"]
    CheckAction -- T --> TiresAction["Действие 'Починить шины': <code><b>tires = tires + 2</b></code>"]
    CheckAction -- C --> ChangeAction["Действие 'Сменить': <br>Вывести сообщение об ошибке"]
    DriveAction --> CheckWinLose{"Проверка условий победы/проигрыша"}
    FuelAction --> CheckWinLose
    TiresAction --> CheckWinLose
    ChangeAction --> CheckWinLose
    CheckWinLose --> CheckWin{"Проверка: <code><b>distance >= 200?</b></code>"}
     CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU MADE IT!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> CheckFuel{"Проверка: <code><b>fuel <= 0?</b></code>"}
    CheckFuel -- Да --> OutputLoseFuel["Вывод сообщения: <b>OUT OF FUEL</b>"]
    OutputLoseFuel --> End
    CheckFuel -- Нет --> CheckTires{"Проверка: <code><b>tires <= 0?</b></code>"}
    CheckTires -- Да --> OutputLoseTires["Вывод сообщения: <b>TIRES WORN OUT</b>"]
    OutputLoseTires --> End
    CheckTires -- Нет --> LoopStart
    LoopStart -- Нет --> End
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: distance (пройденное расстояние) устанавливается в 0, fuel (количество топлива) устанавливается в 20, tires (состояние шин) устанавливается в 5, speed (скорость) устанавливается в 80.
    LoopStart - Начало цикла, который продолжается пока не достигнут финиш или не закончилось топливо или шины.
    DisplayStatus - Вывод текущего состояния игры: distance, fuel, tires, speed.
    InputAction - Запрос действия от игрока: (D)rive, (F)uel, (T)ires, (C)hange.
    CheckAction - Проверка выбранного действия.
    DriveAction - Действие "Ехать": увеличивает пройденное расстояние, уменьшает количество топлива, уменьшает состояние шин, если это необходимо.
    FuelAction - Действие "Заправить": увеличивает количество топлива.
    TiresAction - Действие "Починить шины": увеличивает состояние шин.
    ChangeAction - Действие "Сменить": выводит сообщение об ошибке.
    CheckWinLose - Проверка условий победы/проигрыша.
    CheckWin - Проверка, достигнут ли финиш (distance >= 200).
    OutputWin - Вывод сообщения о победе.
    CheckFuel - Проверка, закончилось ли топливо (fuel <= 0).
    OutputLoseFuel - Вывод сообщения о проигрыше из-за отсутствия топлива.
    CheckTires - Проверка, изношены ли шины (tires <= 0).
    OutputLoseTires - Вывод сообщения о проигрыше из-за изношенных шин.
    End - Конец программы.
"""
import math

# Инициализация переменных
distance = 0       # Пройденное расстояние
fuel = 20         # Количество топлива
tires = 5         # Состояние шин
speed = 80        # Скорость

# Основной игровой цикл
while True:
    # Вывод текущей информации об игре
    print(f"DISTANCE={distance}, FUEL={fuel}, TIRES={tires}, SPEED={speed}")
    
    # Запрос действия у игрока
    action = input("Действие? (D)rive, (F)uel, (T)ires, (C)hange: ").upper()

    # Обработка выбранного действия
    if action == 'D':
        # Ехать:
        distance += speed  # Увеличиваем пройденное расстояние
        fuel -= math.ceil(distance / 10)  # Уменьшаем топливо (за каждые 10 миль)
        if distance % 20 == 0:  # Уменьшаем шины, если необходимо
            tires -= 1
        print("Вы едете.")

    elif action == 'F':
        # Заправиться
        fuel += 10  # Увеличиваем количество топлива
        print("Вы заправляетесь.")

    elif action == 'T':
        # Починить шины
        tires += 2  # Увеличиваем состояние шин
        print("Вы ремонтируете шины.")
    elif action == 'C':
        print("Ошибка выбора, попробуй еще раз.")
    else:
         print("Неверный ввод, попробуйте D, F, T или C.")

    # Проверка условий окончания игры
    if distance >= 200:
        print("YOU MADE IT!")
        break  # Выход из цикла, если игрок достиг финиша
    if fuel <= 0:
        print("OUT OF FUEL")
        break  # Выход из цикла, если закончилось топливо
    if tires <= 0:
        print("TIRES WORN OUT")
        break  # Выход из цикла, если шины изношены
"""
Пояснения:
1.  **Импорт модуля `math`**:
    -   `import math`: Импортирует модуль `math`, который используется для округления значений.
2.  **Инициализация переменных**:
    -   `distance = 0`: Инициализирует переменную `distance` для хранения пройденного расстояния, начиная с 0.
    -   `fuel = 20`: Инициализирует переменную `fuel` для хранения количества топлива, начиная с 20.
    -   `tires = 5`: Инициализирует переменную `tires` для хранения состояния шин, начиная с 5.
    -   `speed = 80`: Инициализирует переменную `speed` для хранения текущей скорости, начиная с 80.
3.  **Основной игровой цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока не будет выполнено условие выхода (`break`).
    -   `print(f"DISTANCE={distance}, FUEL={fuel}, TIRES={tires}, SPEED={speed}")`: Выводит текущее состояние игры (пройденное расстояние, топливо, состояние шин, скорость).
    -   `action = input("Действие? (D)rive, (F)uel, (T)ires, (C)hange: ").upper()`: Запрашивает у пользователя действие (ехать, заправить, починить шины или сменить) и переводит ввод в верхний регистр.
4.  **Обработка действий**:
    -  `if action == 'D':`: Обработка действия "ехать".
        -  `distance += speed`: Увеличивает пройденное расстояние на значение текущей скорости.
        -  `fuel -= math.ceil(distance / 10)`: Уменьшает количество топлива в зависимости от пройденного расстояния (каждые 10 миль). Функция `math.ceil()` округляет результат деления вверх до ближайшего целого числа.
        -  `if distance % 20 == 0:`: Проверяет, кратно ли пройденное расстояние 20.
        -  `tires -= 1`: Уменьшает состояние шин на 1, если расстояние кратно 20.
    - `elif action == 'F':`: Обработка действия "заправиться".
        - `fuel += 10`: Увеличивает количество топлива на 10.
    - `elif action == 'T':`: Обработка действия "починить шины".
        - `tires += 2`: Увеличивает состояние шин на 2.
    -  `elif action == 'C'`: Обработка действия "сменить".
        - выводит сообщение об ошибке
    - `else:`: Обработка неверного ввода.
        - `print("Неверный ввод, попробуйте D, F, T или C.")`: Выводит сообщение об ошибке, если введено что-то, отличное от D, F, T или C.
5.  **Условия окончания игры**:
    -   `if distance >= 200:`: Проверяет, достигло ли пройденное расстояние 200 миль.
        -   `print("YOU MADE IT!")`: Выводит сообщение о победе.
        -   `break`: Завершает цикл, если игрок достиг финиша.
    -   `if fuel <= 0:`: Проверяет, закончилось ли топливо.
        -   `print("OUT OF FUEL")`: Выводит сообщение о проигрыше из-за отсутствия топлива.
        -   `break`: Завершает цикл, если закончилось топливо.
    -   `if tires <= 0:`: Проверяет, изношены ли шины.
        -   `print("TIRES WORN OUT")`: Выводит сообщение о проигрыше из-за изношенных шин.
        -   `break`: Завершает цикл, если шины изношены.
"""
```