Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет класс `PrestaShop`, предназначенный для взаимодействия с веб-сервисом API PrestaShop. Он позволяет выполнять операции CRUD (создание, чтение, обновление, удаление), поиск и загрузку изображений.  Класс обрабатывает ответы API и данные, предоставляя методы для различных действий.  Он поддерживает формат данных JSON и XML.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**  Код импортирует необходимые библиотеки, такие как `requests`, `xml.etree.ElementTree`, `enum`, и другие, для работы с API.

2. **Определение констант и перечислений:**  Определяется константа `MODE` и перечисление `Format`, которые задают режим работы (например, 'dev') и типы возвращаемых данных (JSON или XML).

3. **Класс `PrestaShop`:** Класс `PrestaShop` содержит методы для взаимодействия с API:
    - `__init__`: Инициализирует класс, устанавливает API ключ, домен, формат данных и другие параметры. Также инициализирует сеанс `requests`.
    - `ping`: Проверяет доступность веб-сервиса, отправляя запрос HEAD.
    - `_check_response`: Проверяет код ответа (status_code) и обрабатывает ошибки.
    - `_parse_response_error`: Парсит ошибку из ответа API в зависимости от его формата (JSON или XML).
    - `_prepare`: Подготавливает URL запроса, включая параметры.
    - `_exec`: Выполняет HTTP-запрос к API с различными методами (GET, POST, PUT, DELETE).  Важный момент: этот метод обрабатывает загрузку данных и подготовку запросов с параметрами, включая фильтрацию, выбор полей, сортировку, ограничение результатов.
    - `_parse`: Парсит ответ API в JSON или XML, обрабатывает ошибки парсинга.
    - `create`, `read`, `write`, `unlink`, `search`, `create_binary`:  Это методы для выполнения конкретных операций с ресурсами в PrestaShop (создание, чтение, обновление, удаление, поиск, загрузка бинарных данных, например, изображений).
    - `get_data`: Загружает данные из ресурса и сохраняет их в файл.
    - `remove_file`: Удаляет файл.
    - `get_apis`, `get_languages_schema`, `upload_image_async`, `upload_image`, `get_product_images`: Методы для дополнительных действий.


4. **Логирование ошибок:**  Код включает логирование ошибок, например, при возникновении проблем с парсингом или возвратом некорректного ответа.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.endpoints.prestashop.api.api import PrestaShop

    # ... (вставьте ваш код для инициализации API_KEY, API_DOMAIN и других настроек)

    api = PrestaShop(API_DOMAIN="https://your-prestashop-domain.com", API_KEY="your-api-key", default_lang=1, debug=True)

    # Пример создания записи
    data = {
        'tax': {
            'rate': 3.00,
            'active': '1',
            'name': {'language': {'attrs': {'id': '1'}, 'value': '3% tax'}}
        }
    }
    try:
      rec = api.create('taxes', data)
      print(f"Запись создана: {rec}")
    except Exception as e:
      print(f"Ошибка при создании: {e}")