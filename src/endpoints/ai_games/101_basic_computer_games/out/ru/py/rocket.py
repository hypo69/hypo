
"""
ROCKET:
=================
Сложность: 5
-----------------
Игра "Ракета" - это текстовая игра, в которой игрок пытается посадить ракету на Луну, управляя ее тягой. Игрок вводит число, представляющее собой процент тяги, и игра моделирует посадку, учитывая гравитацию и инерцию ракеты. Цель состоит в том, чтобы приземлиться с минимальной скоростью, не разбившись.
Правила игры:
1. Игрок вводит процент тяги (0-100) на каждом шаге.
2. Игра моделирует изменение высоты и скорости ракеты в зависимости от тяги и гравитации.
3. Игрок выигрывает, если ракета успешно приземляется на Луну с небольшой скоростью.
4. Игрок проигрывает, если ракета разбивается о поверхность Луны (слишком большая скорость) или улетает слишком высоко.
-----------------
Алгоритм:
1. Установить начальную высоту `altitude` в 1200.
2. Установить начальную скорость `velocity` в 0.
3. Установить ускорение свободного падения (гравитацию) `gravity` в 1.5.
4. Начать цикл, пока высота `altitude` больше 0:
   4.1 Вывести текущую высоту `altitude` и скорость `velocity`.
   4.2 Запросить у игрока процент тяги `thrust`.
   4.3 Если тяга `thrust` меньше 0 или больше 100, то перейти к шагу 4.2
   4.4 Вычислить новое значение скорости `velocity`:
    `velocity = velocity - gravity + (thrust * 0.15)`
   4.5 Вычислить новое значение высоты `altitude`:
    `altitude = altitude + velocity`
   4.6 Если высота `altitude` меньше 0, перейти к шагу 5.
   4.7 Если высота `altitude` больше 10000, вывести сообщение "YOU BLEW IT - YOU ARE NOW IN ORBIT!" и завершить игру.
5. Если скорость `velocity` больше -10 или меньше -25:
   5.1 Вывести сообщение "CRASH - YOU BLEW IT!!!" и завершить игру.
6. Вывести сообщение "GOOD LANDING!" и завершить игру.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    altitude = 1200<br>
    velocity = 0<br>
    gravity = 1.5
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока altitude > 0"}
    LoopStart -- Да --> OutputStatus["Вывод: <b>altitude, velocity</b>"]
    OutputStatus --> InputThrust["Ввод тяги пользователем: <code><b>thrust</b></code>"]
    InputThrust --> ValidateThrust{"Проверка: <code><b>0 <= thrust <= 100</b></code>?"}
    ValidateThrust -- Нет --> InputThrust
    ValidateThrust -- Да --> CalculateVelocity["<code><b>velocity = velocity - gravity + (thrust * 0.15)</b></code>"]
    CalculateVelocity --> CalculateAltitude["<code><b>altitude = altitude + velocity</b></code>"]
    CalculateAltitude --> CheckAltitude{"Проверка: <code><b>altitude < 0</b></code>?"}
    CheckAltitude -- Да --> CheckCrash{"Проверка: <code><b>velocity > -10 or velocity < -25</b></code>?"}
    CheckCrash -- Да --> OutputCrash["Вывод: <b>CRASH - YOU BLEW IT!!!</b>"]
    CheckCrash -- Нет --> OutputLanding["Вывод: <b>GOOD LANDING!</b>"]
    OutputCrash --> End["Конец"]
    OutputLanding --> End
    CheckAltitude -- Нет --> CheckOrbit{"Проверка: <code><b>altitude > 10000</b></code>?"}
    CheckOrbit -- Да --> OutputOrbit["Вывод: <b>YOU BLEW IT - YOU ARE NOW IN ORBIT!</b>"]
    OutputOrbit --> End
    CheckOrbit -- Нет --> LoopStart
    LoopStart -- Нет --> End

```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: начальная высота (altitude = 1200), начальная скорость (velocity = 0) и гравитация (gravity = 1.5).
    LoopStart - Начало цикла, который продолжается, пока высота ракеты (altitude) больше 0.
    OutputStatus - Вывод текущей высоты (altitude) и скорости (velocity) ракеты.
    InputThrust - Запрос у пользователя ввода значения тяги (thrust) ракеты.
    ValidateThrust - Проверка введенного значения тяги (thrust) на корректность: должно быть от 0 до 100. Если тяга некорректна, цикл возвращается к запросу ввода тяги.
    CalculateVelocity - Расчет новой скорости ракеты (velocity) с учетом текущей скорости, гравитации и тяги.
    CalculateAltitude - Расчет новой высоты ракеты (altitude) с учетом текущей высоты и скорости.
    CheckAltitude - Проверка, не опустилась ли ракета ниже 0 (не столкнулась ли с поверхностью).
    CheckCrash - Если ракета столкнулась с поверхностью, проверяется, не разбилась ли она (скорость > -10 или скорость < -25).
    OutputCrash - Вывод сообщения о катастрофе (CRASH - YOU BLEW IT!!!), если ракета разбилась при столкновении.
    OutputLanding - Вывод сообщения об успешной посадке (GOOD LANDING!), если ракета не разбилась при столкновении.
    CheckOrbit - Проверка, не улетела ли ракета слишком высоко (altitude > 10000).
    OutputOrbit - Вывод сообщения о выходе на орбиту (YOU BLEW IT - YOU ARE NOW IN ORBIT!), если ракета улетела слишком высоко.
    End - Конец программы.

"""
__author__ = 'hypo69 (hypo69@davidka.net)'
import time
# Начальная высота ракеты
altitude = 1200
# Начальная скорость ракеты
velocity = 0
# Ускорение свободного падения (гравитация)
gravity = 1.5

# Основной игровой цикл
while altitude > 0:
    # Вывод текущей высоты и скорости
    print(f"Высота: {altitude:.2f}, Скорость: {velocity:.2f}")
    
    # Ввод тяги от пользователя
    while True:
        try:
            thrust = int(input("Введите тягу (0-100): "))
            if 0 <= thrust <= 100:
                break
            else:
                print("Тяга должна быть от 0 до 100. Попробуйте еще раз.")
        except ValueError:
            print("Пожалуйста, введите целое число.")
        time.sleep(0.5) # задержка что бы не захлебнутся в сообщениях

    # Обновление скорости
    velocity = velocity - gravity + (thrust * 0.15)
    # Обновление высоты
    altitude = altitude + velocity

    # Проверка на уход с орбиты
    if altitude > 10000:
        print("YOU BLEW IT - YOU ARE NOW IN ORBIT!")
        break
    
# Проверка на приземление
if altitude <= 0:
    if velocity > -10 or velocity < -25:
        print("CRASH - YOU BLEW IT!!!")
    else:
        print("GOOD LANDING!")
"""
Пояснения:
1.  **Инициализация переменных**:
   -   `altitude = 1200`: Устанавливает начальную высоту ракеты на 1200.
   -   `velocity = 0`: Устанавливает начальную скорость ракеты на 0.
   -   `gravity = 1.5`: Устанавливает ускорение свободного падения (гравитацию) на 1.5.
2.  **Основной цикл `while altitude > 0:`**:
    -   Цикл выполняется, пока высота ракеты `altitude` больше 0. Это значит, что ракета еще не приземлилась и не улетела в космос.
    -   `print(f"Высота: {altitude:.2f}, Скорость: {velocity:.2f}")`: Выводит текущую высоту и скорость ракеты.
3.  **Ввод данных**:
    -   `while True:`: Бесконечный цикл, который позволяет запрашивать ввод тяги до тех пор, пока ввод не будет корректным.
    -  `try...except ValueError`: Обрабатывает ошибку, если пользователь вводит не целое число.
    -  `thrust = int(input("Введите тягу (0-100): "))`: Запрашивает у пользователя ввод тяги и преобразует ввод в целое число.
    -   `if 0 <= thrust <= 100:`: Проверяет, находится ли введенное значение тяги в допустимом диапазоне от 0 до 100. Если значение корректное, цикл ввода завершается.
    -  `else`: Если значение некорректное, выводится сообщение об ошибке, и цикл ввода начинается заново.
    - `time.sleep(0.5)` -  делает задержку в пол секунды. Что бы не захлебнуться в сообщениях. 
4. **Обновление состояния**:
    -   `velocity = velocity - gravity + (thrust * 0.15)`: Вычисляет новую скорость ракеты, учитывая текущую скорость, гравитацию и тягу.
    -   `altitude = altitude + velocity`: Вычисляет новую высоту ракеты, учитывая текущую высоту и скорость.
5.  **Проверка на уход с орбиты**:
    -   `if altitude > 10000:`: Проверяет, не улетела ли ракета слишком высоко.
    -  `print("YOU BLEW IT - YOU ARE NOW IN ORBIT!")`: Выводит сообщение, что ракета ушла на орбиту.
    -   `break`: Завершает цикл, если ракета улетела в космос.
6.  **Проверка на приземление**:
    -   `if altitude <= 0:`: Проверяет, приземлилась ли ракета.
        - `if velocity > -10 or velocity < -25:`: Проверяет, разбилась ли ракета при посадке (скорость больше -10 или меньше -25).
        -  `print("CRASH - YOU BLEW IT!!!")`: Выводит сообщение о катастрофе.
        -  `else:`: Если ракета не разбилась, то посадка удачная.
        -  `print("GOOD LANDING!")`: Выводит сообщение об успешной посадке.
"""
```