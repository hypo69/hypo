Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для выполнения сценариев, загрузки их из файлов, обработки процесса извлечения информации о продуктах и вставки ее в PrestaShop. Он включает в себя взаимодействие с файлами, загрузкой данных из JSON, обработкой списка сценариев и выполнением каждого сценария по отдельности.  Ключевым аспектом является взаимодействие с PrestaShop для добавления данных о продуктах.

Шаги выполнения
-------------------------
1. **Импорт библиотек**:  Код импортирует необходимые библиотеки, такие как `os`, `sys`, `requests`, `asyncio`, `time`, `tempfile`, `datetime`, `math`, `pathlib`, `typing`, `json`, а также пользовательские модули (`header`, `gs`, `printer`, `jjson`, `product`, `prestashop`, `db`, `logger`, `exceptions`).

2. **Инициализация переменных**:  Создается словарь `_journal` для хранения журнальных данных, включая список файлов сценариев.  Устанавливается `_journal['name']`  с текущей датой и временем.

3. **Функция `dump_journal`**: Сохраняет журнальные данные в JSON-файл.  Файл создаётся в папке, соответствующей  `supplier_abs_path`.

4. **Функция `run_scenario_files`**:  Обрабатывает список файлов сценариев. Если входной параметр `scenario_files_list` является единственным файлом, он преобразуется в список. Иначе используется список, заданный в supplier. Если список пустой, он используется список из `s.scenario_files`. Затем, для каждого сценария в списке:
    * Создаёт запись в `_journal['scenario_files']`.
    * Вызывает `run_scenario_file` для выполнения сценария.
    * Записывает сообщение об успехе или ошибке в `_journal`.
    * Обрабатывает возможные исключения при выполнении сценария.
    * Возвращает True, если все сценарии были выполнены успешно, False иначе.

5. **Функция `run_scenario_file`**: Загружает и выполняет сценарии из файла.
    * Загружает сценарии из файла, используя `j_loads`, обрабатывая возможные ошибки (FileNotFoundError, json.JSONDecodeError).
    * Для каждого сценария в загруженном словаре:
        * Устанавливает текущий сценарий в `s.current_scenario`.
        * Вызывает `run_scenario` для выполнения сценария.
        * Записывает сообщения об успехе или ошибке в `_journal`.
        * Возвращает True, если все сценарии были выполнены успешно, False иначе.

6. **Функция `run_scenarios`**:  Выполняет список сценариев (не файлы).
   * Если список сценариев пуст, использует `s.current_scenario`.
   * Преобразует входной параметр `scenarios` в список, если это не список.
   * Выполняет `run_scenario` для каждого сценария и добавляет результат в `res`.
   * Возвращает список результатов или False в случае ошибки.

7. **Функция `run_scenario`**: Выполняет один сценарий.
    * Получает данные о продуктах из веб-страницы, используя `s.related_modules.get_list_products_in_category(s)`.
    * Если список продуктов пуст, выводит предупреждение.
    * Для каждого продукта в списке:
        * Переходит к странице продукта с помощью `d.get_url()`. Обрабатывает ошибки при переходе.
        * Извлекает данные о продукте, используя `s.related_modules.grab_product_page(s)` и `s.related_modules.grab_page(s)`, обрабатывая возможные ошибки.
        * Создает объект `Product`.
        * Выполняет вставку данных продукта в PrestaShop с помощью `execute_PrestaShop_insert`. Обрабатывает возможные ошибки при вставке.
    * Возвращает список URL адресов обработанных продуктов или None если нет обработанных данных.

8. **Функция `insert_grabbed_data`**: Вставляет данные о продукте в PrestaShop. Эта функция вызывается после получения данных о продукте.  Она делегирует выполнение асинхронной функции `execute_PrestaShop_insert`.

9. **Функция `execute_PrestaShop_insert`**: Асинхронно вставляет данные о продукте в PrestaShop используя класс `PrestaShop`. Эта функция является центральной точкой для отправки данных в PrestaShop.


Пример использования
-------------------------
```python
# Предположим, что у вас есть экземпляр класса 'Supplier'
# и список путей к файлам сценариев.

# Например, если вы хотите выполнить сценарии из файла 'scenarios.json'
# supplier.scenario_files = Path('scenarios.json')
# run_scenario_files(supplier, supplier.scenario_files)

# Или, если у вас есть список файлов сценариев:
# scenario_files_list = [Path('scenario1.json'), Path('scenario2.json')]
# run_scenario_files(supplier, scenario_files_list)


```
```
```
```
```