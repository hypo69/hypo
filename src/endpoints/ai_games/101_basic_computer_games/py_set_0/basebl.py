"""
BASEBL:
=================
Сложность: 3
-----------------
Бейсбол - это игра, в которой игрок пытается угадать четырехзначное число, сгенерированное компьютером. После каждой попытки компьютер сообщает, сколько цифр угадано на правильной позиции (страйк), и сколько цифр угадано, но на неправильной позиции (бол).
Правила игры:
Игрок пытается угадать четырехзначное число, сгенерированное компьютером. Каждая цифра числа должна быть уникальной.
После каждой попытки компьютер сообщает количество "страйков" (цифры угаданы на правильных позициях) и "болов" (цифры угаданы, но на неправильных позициях).
Игра продолжается до тех пор, пока игрок не угадает число полностью (4 страйка).
-----------------
Алгоритм:
1.  Инициализация:
    1.1. Сгенерировать случайное 4-значное число, где все цифры уникальны.
    1.2. Установить количество попыток в 0.
2.  Начало игры:
    2.1. Запросить у игрока 4-значное число.
    2.2. Проверить корректность ввода (4 цифры, уникальность).
    2.3. Если ввод некорректный, вывести сообщение об ошибке и вернуться к шагу 2.1.
3.  Подсчет страйков и болов:
    3.1. Для каждой цифры в вводе игрока сравнить её с соответствующей цифрой в загаданном числе.
    3.2. Если цифры совпадают и их позиции совпадают, увеличить количество страйков.
    3.3. Если цифры совпадают, но их позиции не совпадают, увеличить количество болов.
4.  Вывод результатов:
    4.1. Вывести количество страйков и болов для данной попытки.
    4.2. Увеличить счетчик попыток.
5.  Проверка победы:
    5.1. Если количество страйков равно 4, игрок победил. Вывести сообщение о победе и количество попыток. Завершить игру.
    5.2. Если количество страйков не равно 4, вернуться к шагу 2.1.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> GenerateSecretNumber{Генерация секретного числа};
    GenerateSecretNumber --> SetAttemptsToZero{Обнулить кол-во попыток};
    SetAttemptsToZero --> InputNumber{Запрос числа от игрока};
    InputNumber --> ValidateInput{Проверка ввода};
    ValidateInput -- Invalid --> InputError{Ошибка ввода}
    InputError --> InputNumber
    ValidateInput -- Valid --> CalculateStrikesAndBalls{Подсчет страйков и болов};
    CalculateStrikesAndBalls --> OutputResult{Вывод результатов};
    OutputResult --> IncrementAttempts{Увеличить кол-во попыток};
    IncrementAttempts --> CheckWin{Проверка победы};
    CheckWin -- Win --> OutputWin{Сообщение о победе}
    OutputWin --> End(End);
    CheckWin -- Not Win --> InputNumber;
```
"""
import random

def generate_secret_number():
    """
    Генерирует случайное 4-значное число с уникальными цифрами.

    Returns:
        str: Строка, представляющая секретное число.
    """
    digits = list(range(10))  # Создаем список цифр от 0 до 9
    random.shuffle(digits)  # Перемешиваем цифры в случайном порядке
    secret_number = "".join(map(str, digits[:4])) # Берем первые 4 цифры и преобразуем в строку
    return secret_number

def validate_input(guess):
    """
    Проверяет, что ввод пользователя - это 4-значное число с уникальными цифрами.

    Args:
        guess (str): Ввод пользователя.

    Returns:
        bool: True, если ввод корректный, False - в противном случае.
    """
    if not guess.isdigit() or len(guess) != 4:
        return False  # Проверяем, что ввод состоит из 4 цифр
    if len(set(guess)) != 4:
        return False # Проверяем на уникальность
    return True

def calculate_strikes_and_balls(secret_number, guess):
    """
    Вычисляет количество страйков и болов на основе ввода пользователя.

    Args:
        secret_number (str): Секретное число.
        guess (str): Ввод пользователя.

    Returns:
        tuple: Кортеж из (количество страйков, количество болов).
    """
    strikes = 0  # Количество угаданных цифр на своих местах
    balls = 0    # Количество угаданных цифр не на своих местах
    for i, digit in enumerate(guess):
        if digit == secret_number[i]:
            strikes += 1 # Если цифра и позиция совпадают, увеличиваем страйки
        elif digit in secret_number:
             balls += 1  # Если цифра есть в секретном числе, но не на той позиции, увеличиваем болы
    return strikes, balls

def play_baseball():
    """
    Функция для запуска игры "Бейсбол".
    """
    secret_number = generate_secret_number()  # Генерируем секретное число
    attempts = 0  # Счетчик попыток
    print("Добро пожаловать в игру Бейсбол!")
    print("Я загадал 4-значное число с уникальными цифрами.")

    while True:
        guess = input("Введите ваш вариант: ") # Запрашиваем у пользователя ввод числа
        if not validate_input(guess): # Проверяем корректность ввода
            print("Некорректный ввод. Введите 4-значное число с уникальными цифрами.")
            continue # Если ввод неверный, просим ввести число заново
        
        attempts += 1 # Увеличиваем количество попыток
        strikes, balls = calculate_strikes_and_balls(secret_number, guess) # Вычисляем страйки и болы
        print(f"Страйки: {strikes}, Болы: {balls}") # Выводим результат

        if strikes == 4: # Проверяем, выиграл ли игрок
            print(f"Поздравляю, вы угадали число за {attempts} попыток!") # Выводим сообщение о победе
            break # Завершаем игру

if __name__ == "__main__":
    play_baseball() # Запускаем игру
"""
Пояснения:
1.  Функция `generate_secret_number()`:
    -   Создает список цифр от 0 до 9.
    -   Перемешивает цифры случайным образом.
    -   Берет первые 4 цифры из перемешанного списка и преобразует их в строку, которая представляет секретное число.

2.  Функция `validate_input(guess)`:
    -   Проверяет, что ввод пользователя состоит из 4 цифр.
    -   Проверяет, что все цифры во вводе уникальны.
    -   Возвращает True, если ввод корректный, False - в противном случае.

3.  Функция `calculate_strikes_and_balls(secret_number, guess)`:
    -   Инициализирует счетчики страйков и болов нулем.
    -   Проходит по каждой цифре во вводе пользователя.
    -   Если цифра и позиция совпадают с секретным числом, увеличивает счетчик страйков.
    -   Если цифра есть в секретном числе, но не на своей позиции, увеличивает счетчик болов.
    -   Возвращает кортеж из количества страйков и болов.

4.  Функция `play_baseball()`:
    -   Генерирует секретное число.
    -   Инициализирует счетчик попыток.
    -   Приветствует игрока и объясняет правила игры.
    -   Запускает цикл, пока игрок не угадает число.
    -   Запрашивает у пользователя ввод числа.
    -   Проверяет корректность ввода.
    -   Увеличивает счетчик попыток.
    -   Вычисляет страйки и болы.
    -   Выводит результаты.
    -   Проверяет, выиграл ли игрок.
    -   Выводит сообщение о победе и заканчивает игру, если игрок выиграл.

5.  Условный оператор `if __name__ == "__main__":`
    -   Используется для того, чтобы вызывать функцию `play_baseball()` только при прямом запуске скрипта, а не при его импорте.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```