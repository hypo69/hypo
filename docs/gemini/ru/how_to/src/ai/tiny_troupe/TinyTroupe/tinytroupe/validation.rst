Как использовать функцию validate_person
========================================================================================

Описание
-------------------------
Функция `validate_person` предназначена для валидации экземпляра класса `TinyPerson` с помощью LLM OpenAI. Она задаёт серию вопросов экземпляру `TinyPerson` и оценивает ответы с помощью LLM. Результатом является оценка доверия к валидации (число от 0.0 до 1.0). В случае неудачи возвращается значение `None`.

Шаги выполнения
-------------------------
1. **Инициализация текущих сообщений:** Создаётся пустой список `current_messages` для хранения диалога.
2. **Генерация запроса валидации:** Загружается шаблон запроса из файла `prompts/check_person.mustache`.  Шаблон используется для создания запроса,  где можно передать ожидаемые параметры (`expectations`).
3. **Формирование пользовательского запроса:** Создаётся запрос для LLM, содержащий:
    - Начальный запрос `system_prompt` (из шаблонного файла).
    - Текст с инструкциями (`user_prompt`), включая мини-биографию (`person.minibio()`) или информацию о персонаже (`person.generate_agent_specification()`).
4. **Логирование:** Выводится информация о начале валидации персонажа.
5. **Отправка сообщений LLM:** Изначально в список `current_messages` добавляются системный запрос и пользовательский запрос. Эти сообщения отправляются LLM.
6. **Диалог с LLM:**  Цикл повторяется пока не будет получен ответ содержащий ````json` или сообщение будет отсутствовать.
    - Из полученного ответа извлекаются вопросы.
    - Запросы отправляются `TinyPerson` для получения ответа.
    - Ответы `TinyPerson` добавляются в список `current_messages`.
    - Ответ LLM добавляется в текущий список сообщений, и LLM запрашивает новый ответ.
7. **Обработка результата:**
    - Если получен ответ, содержащий ````json`, то из него извлекается JSON-контент.
    -  Из JSON-контента извлекается оценка (`score`) и обоснование (`justification`).
    - Логируется полученное значение оценки и обоснования.
    - Возвращается оценка и обоснование.
    - Если получено пустое сообщение или нет ````json`, возвращает None для оценки и None для обоснования.


Пример использования
-------------------------
.. code-block:: python

    from tinytroupe.validation import TinyPersonValidator
    from tinytroupe.agent import TinyPerson
    # ... (создание объекта TinyPerson) ...

    validator = TinyPersonValidator()
    score, justification = validator.validate_person(person, expectations="The person should be friendly.")
    if score is not None:
        print(f"Оценка валидации: {score:.2f}")
        print(f"Обоснование: {justification}")
    else:
        print("Ошибка валидации.")