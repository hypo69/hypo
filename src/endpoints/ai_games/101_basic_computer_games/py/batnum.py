"""
BATNUM: BATNUM
=================
Сложность: 3
-----------------
Игра "Битва номеров" - это игра, в которой два игрока по очереди выбирают номера от 1 до 10.
Цель игры состоит в том, чтобы сумма выбранных номеров игрока была как можно ближе к 100, не превышая её. 
Игрок, набравший сумму ближе к 100, не превышая 100, побеждает.

Правила игры:
1. Два игрока по очереди выбирают числа от 1 до 10.
2. Выбранные числа суммируются для каждого игрока.
3. Игрок, чья сумма ближе к 100, не превышая её, выигрывает.
4. Если оба игрока превышают 100, выигрывает тот, чья сумма меньше.
5. Если оба игрока набрали одинаковую сумму и не превысили 100, то ничья.
-----------------
Алгоритм:
1.  Инициализация:
    - Установить сумму первого игрока в 0.
    - Установить сумму второго игрока в 0.
2.  Игровой цикл:
    - Цикл для каждого игрока (дважды):
        - Вывести текущую сумму игрока.
        - Запросить ввод числа от 1 до 10.
        - Прибавить введенное число к сумме игрока.
    - Вывести итоговую сумму для каждого игрока.
3.  Определение победителя:
    - Если сумма первого игрока больше 100 и сумма второго игрока больше 100:
        - Если сумма первого игрока меньше суммы второго игрока, объявить победителем первого игрока.
        - Иначе, объявить победителем второго игрока.
    - Иначе, если сумма первого игрока больше 100:
        - Объявить победителем второго игрока.
    - Иначе, если сумма второго игрока больше 100:
        - Объявить победителем первого игрока.
    - Иначе:
        - Если сумма первого игрока больше суммы второго игрока:
            - Объявить победителем первого игрока.
        - Иначе, если сумма первого игрока меньше суммы второго игрока:
            - Объявить победителем второго игрока.
        - Иначе:
            - Объявить ничью.
4.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeSums["<p align='left'>Инициализация сумм:
    <code><b>
    player1Sum = 0
    player2Sum = 0
    </b></code></p>"]
    InitializeSums --> Player1TurnStart{"Начало хода первого игрока"}
    Player1TurnStart --> OutputPlayer1Sum["Вывод текущей суммы первого игрока: <code><b>player1Sum</b></code>"]
    OutputPlayer1Sum --> InputPlayer1Number["Ввод числа от 1 до 10 для первого игрока: <code><b>player1Number</b></code>"]
    InputPlayer1Number --> UpdatePlayer1Sum["<code><b>player1Sum = player1Sum + player1Number</b></code>"]
    UpdatePlayer1Sum --> Player2TurnStart{"Начало хода второго игрока"}
    Player2TurnStart --> OutputPlayer2Sum["Вывод текущей суммы второго игрока: <code><b>player2Sum</b></code>"]
    OutputPlayer2Sum --> InputPlayer2Number["Ввод числа от 1 до 10 для второго игрока: <code><b>player2Number</b></code>"]
    InputPlayer2Number --> UpdatePlayer2Sum["<code><b>player2Sum = player2Sum + player2Number</b></code>"]
    UpdatePlayer2Sum --> OutputFinalSums["Вывод итоговой суммы первого игрока: <code><b>player1Sum</b></code>, и второго игрока: <code><b>player2Sum</b></code>"]
    OutputFinalSums --> CheckBothOver100{"Проверка: <code><b>player1Sum > 100 и player2Sum > 100?</b></code>"}
    CheckBothOver100 -- Да --> CheckPlayer1Less{"Проверка: <code><b>player1Sum < player2Sum?</b></code>"}
    CheckPlayer1Less -- Да --> OutputPlayer1Wins1["Вывод сообщения: <b>Победил первый игрок</b>"]
    CheckPlayer1Less -- Нет --> OutputPlayer2Wins1["Вывод сообщения: <b>Победил второй игрок</b>"]
    OutputPlayer1Wins1 --> End["Конец"]
    OutputPlayer2Wins1 --> End
    CheckBothOver100 -- Нет --> CheckPlayer1Over100{"Проверка: <code><b>player1Sum > 100?</b></code>"}
    CheckPlayer1Over100 -- Да --> OutputPlayer2Wins2["Вывод сообщения: <b>Победил второй игрок</b>"]
    OutputPlayer2Wins2 --> End
    CheckPlayer1Over100 -- Нет --> CheckPlayer2Over100{"Проверка: <code><b>player2Sum > 100?</b></code>"}
    CheckPlayer2Over100 -- Да --> OutputPlayer1Wins2["Вывод сообщения: <b>Победил первый игрок</b>"]
    OutputPlayer1Wins2 --> End
    CheckPlayer2Over100 -- Нет --> CheckPlayer1Greater{"Проверка: <code><b>player1Sum > player2Sum?</b></code>"}
    CheckPlayer1Greater -- Да --> OutputPlayer1Wins3["Вывод сообщения: <b>Победил первый игрок</b>"]
    OutputPlayer1Wins3 --> End
    CheckPlayer1Greater -- Нет --> CheckPlayer1Less2{"Проверка: <code><b>player1Sum < player2Sum?</b></code>"}
    CheckPlayer1Less2 -- Да --> OutputPlayer2Wins3["Вывод сообщения: <b>Победил второй игрок</b>"]
    OutputPlayer2Wins3 --> End
    CheckPlayer1Less2 -- Нет --> OutputDraw["Вывод сообщения: <b>Ничья</b>"]
    OutputDraw --> End
```
Legenda:
    Start - Начало программы.
    InitializeSums - Инициализация переменных player1Sum и player2Sum (суммы очков игроков) в 0.
    Player1TurnStart - Начало хода первого игрока.
    OutputPlayer1Sum - Вывод текущей суммы очков первого игрока.
    InputPlayer1Number - Запрос у первого игрока ввода числа от 1 до 10 и сохранение его в переменной player1Number.
    UpdatePlayer1Sum - Обновление суммы очков первого игрока: добавление введенного числа.
    Player2TurnStart - Начало хода второго игрока.
    OutputPlayer2Sum - Вывод текущей суммы очков второго игрока.
    InputPlayer2Number - Запрос у второго игрока ввода числа от 1 до 10 и сохранение его в переменной player2Number.
    UpdatePlayer2Sum - Обновление суммы очков второго игрока: добавление введенного числа.
    OutputFinalSums - Вывод итоговой суммы очков первого и второго игроков.
    CheckBothOver100 - Проверка, больше ли 100 сумма очков обоих игроков.
    CheckPlayer1Less - Если оба игрока превысили 100, проверка, меньше ли сумма первого игрока суммы второго.
    OutputPlayer1Wins1 - Вывод сообщения о победе первого игрока (оба больше 100, но у первого меньше).
    OutputPlayer2Wins1 - Вывод сообщения о победе второго игрока (оба больше 100, и у второго меньше или равно).
    CheckPlayer1Over100 - Если сумма первого игрока больше 100, а второго нет.
    OutputPlayer2Wins2 - Вывод сообщения о победе второго игрока.
    CheckPlayer2Over100 - Если сумма второго игрока больше 100, а первого нет.
    OutputPlayer1Wins2 - Вывод сообщения о победе первого игрока.
     CheckPlayer1Greater - Если ни у кого нет перебора, то проверяем, больше ли сумма первого игрока.
    OutputPlayer1Wins3 - Вывод сообщения о победе первого игрока.
    CheckPlayer1Less2 -  Если сумма первого игрока не больше, то проверяем, меньше ли она.
     OutputPlayer2Wins3 - Вывод сообщения о победе второго игрока.
    OutputDraw - Вывод сообщения о ничьей (суммы равны и не больше 100).
    End - Конец программы.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализация сумм игроков
player1Sum = 0
player2Sum = 0

# Ход первого игрока
print("Ход первого игрока:")
print(f"Текущая сумма первого игрока: {player1Sum}")
try:
    player1Number = int(input("Введите число от 1 до 10: "))
    if 1 > player1Number or player1Number > 10:
        print("Введенное число должно быть от 1 до 10")
        exit()
except ValueError:
    print("Некорректный ввод, введите число")
    exit()
player1Sum += player1Number

# Ход второго игрока
print("\nХод второго игрока:")
print(f"Текущая сумма второго игрока: {player2Sum}")
try:
    player2Number = int(input("Введите число от 1 до 10: "))
    if 1 > player2Number or player2Number > 10:
         print("Введенное число должно быть от 1 до 10")
         exit()
except ValueError:
    print("Некорректный ввод, введите число")
    exit()
player2Sum += player2Number

# Вывод итоговых сумм
print(f"\nИтоговая сумма первого игрока: {player1Sum}")
print(f"Итоговая сумма второго игрока: {player2Sum}")

# Определение победителя
if player1Sum > 100 and player2Sum > 100:
    if player1Sum < player2Sum:
        print("Победил первый игрок")
    else:
        print("Победил второй игрок")
elif player1Sum > 100:
    print("Победил второй игрок")
elif player2Sum > 100:
    print("Победил первый игрок")
else:
    if player1Sum > player2Sum:
        print("Победил первый игрок")
    elif player1Sum < player2Sum:
        print("Победил второй игрок")
    else:
        print("Ничья")
"""
Пояснения:
1.  **Инициализация переменных**:
    -   `player1Sum = 0`:  Инициализирует переменную `player1Sum` для хранения суммы очков первого игрока, начиная с 0.
    -   `player2Sum = 0`: Инициализирует переменную `player2Sum` для хранения суммы очков второго игрока, начиная с 0.

2.  **Ход первого игрока**:
    -   `print("Ход первого игрока:")`: Выводит сообщение, что начался ход первого игрока.
    -   `print(f"Текущая сумма первого игрока: {player1Sum}")`: Выводит текущую сумму очков первого игрока.
    -   `player1Number = int(input("Введите число от 1 до 10: "))`: Запрашивает у первого игрока ввод числа от 1 до 10 и преобразует ввод в целое число.
    -   `player1Sum += player1Number`:  Добавляет введенное число к текущей сумме первого игрока.
    -  **Обработка ошибок**
       - `if 1 > player1Number or player1Number > 10:`: Проверяет, что число не выходит за рамки 1-10, в случае ошибки выводит сообщение и завершает программу.
       - `except ValueError:`,  `print("Некорректный ввод, введите число")`,  `exit()`:  Если ввод не является числом, выводится ошибка и программа завершается.
3.  **Ход второго игрока**:
    -   `print("\nХод второго игрока:")`: Выводит сообщение, что начался ход второго игрока.
    -   `print(f"Текущая сумма второго игрока: {player2Sum}")`: Выводит текущую сумму очков второго игрока.
    -   `player2Number = int(input("Введите число от 1 до 10: "))`: Запрашивает у второго игрока ввод числа от 1 до 10 и преобразует ввод в целое число.
    -   `player2Sum += player2Number`:  Добавляет введенное число к текущей сумме второго игрока.
   -  **Обработка ошибок**
       - `if 1 > player2Number or player2Number > 10:`: Проверяет, что число не выходит за рамки 1-10, в случае ошибки выводит сообщение и завершает программу.
       - `except ValueError:`, `print("Некорректный ввод, введите число")`,  `exit()`:  Если ввод не является числом, выводится ошибка и программа завершается.
4.  **Вывод итоговых сумм**:
    -   `print(f"\nИтоговая сумма первого игрока: {player1Sum}")`: Выводит итоговую сумму очков первого игрока.
    -   `print(f"Итоговая сумма второго игрока: {player2Sum}")`: Выводит итоговую сумму очков второго игрока.

5.  **Определение победителя**:
    -   `if player1Sum > 100 and player2Sum > 100:`: Проверяет, превысила ли сумма обоих игроков 100.
        -  `if player1Sum < player2Sum:`: Если оба игрока превысили 100, то сравниваем у кого перебор меньше.
        -  `print("Победил первый игрок")`: Если у первого игрока сумма меньше, то он побеждает
        -  `else:`: в противном случае
        -  `print("Победил второй игрок")`: побеждает второй игрок
    -   `elif player1Sum > 100:`: Проверяет, превысила ли сумма первого игрока 100.
        -   `print("Победил второй игрок")`: Если первый игрок превысил 100, то побеждает второй.
    -   `elif player2Sum > 100:`: Проверяет, превысила ли сумма второго игрока 100.
        -   `print("Победил первый игрок")`: Если второй игрок превысил 100, то побеждает первый.
    -   `else:`: Если никто не превысил 100, то:
         -  `if player1Sum > player2Sum:`: Если сумма первого игрока больше второго, то:
              - `print("Победил первый игрок")`: побеждает первый игрок
         - `elif player1Sum < player2Sum:`: если сумма первого меньше, чем у второго, то:
               - `print("Победил второй игрок")`: побеждает второй игрок
         - `else:`: в противном случае
               - `print("Ничья")`: ничья
"""
