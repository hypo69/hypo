"""
BOAT:
=================
Сложность: 4
-----------------
Игра "Морской бой" - это текстовая версия классической игры, где игрок должен потопить корабль компьютера, угадывая координаты его расположения на игровом поле размером 8x8. Игрок получает подсказки "Мимо" или "Попал" после каждого выстрела.

Правила игры:
1. Игровое поле представляет собой квадратную сетку 8x8.
2. Компьютер размещает свой корабль на поле случайным образом, занимая 3 последовательные клетки по горизонтали или вертикали.
3. Игрок вводит координаты выстрела в формате "ряд, столбец" (например, "1,2").
4. Если выстрел попадает в корабль, компьютер сообщает "Попал".
5. Если выстрел промахивается, компьютер сообщает "Мимо".
6. Игра продолжается до тех пор, пока игрок не потопит корабль.
-----------------
Алгоритм:
1. Инициализировать игровое поле размером 8x8, заполненное нулями.
2. Случайно выбрать направление (горизонтальное или вертикальное) для корабля.
3. Случайно выбрать координаты начала корабля так, чтобы он не выходил за границы поля.
4. Разместить корабль на поле, присвоив клеткам, которые он занимает, значение 1.
5. Начать цикл "пока корабль не потоплен":
    5.1 Запросить у игрока ввод координат выстрела в формате "ряд, столбец".
    5.2 Преобразовать введенные координаты в индексы массива.
    5.3 Если выстрел попадает в корабль (значение в поле 1), вывести сообщение "Попал" и заменить значение в поле на 2.
    5.4 Если выстрел промахивается (значение в поле 0), вывести сообщение "Мимо".
    5.5 Проверить, есть ли еще клетки корабля (есть ли на поле значение 1). Если нет, вывести сообщение "Потоплен!", и завершить игру.
6. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBoard["<p align='left'>Инициализация игрового поля:
    <code><b>
    board = 8x8 matrix of 0
    </b></code></p>"]
    InitializeBoard --> GenerateShip["<p align='left'>Генерация корабля:
    <code><b>
    direction = random(horizontal, vertical)
    startRow, startCol = random valid coordinates
    place ship on board (1)
    </b></code></p>"]
    GenerateShip --> LoopStart{"Начало цикла: пока корабль не потоплен"}
    LoopStart -- Да --> InputCoordinates["Ввод координат выстрела: <code><b>row, col</b></code>"]
    InputCoordinates --> CheckHit{"Проверка: <code><b>board[row][col] == 1?</b></code>"}
    CheckHit -- Да --> OutputHit["Вывод сообщения: <b>HIT!</b>"]
    OutputHit --> UpdateBoardHit["<code><b>board[row][col] = 2</b></code>"]
    UpdateBoardHit --> CheckShipSunk{"Проверка: <code><b>Is there a 1 on the board?</b></code>"}
    CheckShipSunk -- Да --> LoopStart
    CheckShipSunk -- Нет --> OutputSunk["Вывод сообщения: <b>SUNK!</b>"]
    OutputSunk --> End["Конец"]
    CheckHit -- Нет --> OutputMiss["Вывод сообщения: <b>MISS!</b>"]
    OutputMiss --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeBoard - Инициализация игрового поля: создание двумерного массива (матрицы) 8x8, заполненного нулями.
    GenerateShip - Генерация корабля: случайный выбор направления (горизонтально или вертикально), определение случайных начальных координат и размещение корабля на поле (заполнение 1).
    LoopStart - Начало цикла, который продолжается, пока корабль не потоплен.
    InputCoordinates - Запрос у пользователя ввода координат для выстрела (ряд и столбец).
    CheckHit - Проверка, является ли выстрел попаданием (есть ли в клетке значение 1).
    OutputHit - Вывод сообщения о попадании ("HIT!").
    UpdateBoardHit - Обновление игрового поля: замена значения клетки, в которую попал выстрел, на 2.
    CheckShipSunk - Проверка, есть ли еще клетки корабля на поле (есть ли еще на поле 1).
    OutputSunk - Вывод сообщения о том, что корабль потоплен ("SUNK!").
    End - Конец программы.
    OutputMiss - Вывод сообщения о промахе ("MISS!").
"""
import random

# Инициализация игрового поля 8x8
board = [[0 for _ in range(8)] for _ in range(8)]

# Функция для размещения корабля на доске
def place_ship():
    # Выбираем случайное направление (0 - горизонтальное, 1 - вертикальное)
    direction = random.randint(0, 1)
    if direction == 0:  # Горизонтальное направление
        row = random.randint(0, 7)
        col = random.randint(0, 4) # Чтобы корабль не выходил за границы
        for i in range(3):
            board[row][col + i] = 1
    else: # Вертикальное направление
        row = random.randint(0, 4) # Чтобы корабль не выходил за границы
        col = random.randint(0, 7)
        for i in range(3):
            board[row + i][col] = 1

# Размещаем корабль на поле
place_ship()

# Основной игровой цикл
while True:
    # Выводим поле в консоль для пользователя
    for row in board:
        print(" ".join(map(str, row)))

    # Запрашиваем ввод координат у пользователя
    try:
        coordinates = input("Введите координаты выстрела (ряд, столбец): ")
        row, col = map(int, coordinates.split(','))
        # Проверяем допустимость координат
        if not (0 <= row <= 7 and 0 <= col <= 7):
            print("Неверные координаты. Введите числа от 0 до 7")
            continue
    except ValueError:
        print("Неверный формат ввода. Введите ряд и столбец через запятую, например: 1,2")
        continue

    # Проверяем, был ли выстрел попаданием
    if board[row][col] == 1:
        print("Попал!")
        board[row][col] = 2  # Меняем значение, чтобы не учитывать повторные попадания
        # Проверяем, остались ли еще части корабля
        ship_sunk = True
        for row_b in board:
            if 1 in row_b:
                ship_sunk = False
                break
        if ship_sunk:
            print("Корабль потоплен! Вы выиграли!")
            break

    elif board[row][col] == 0:
        print("Мимо!")

    elif board[row][col] == 2:
         print("Вы уже стреляли в эту клетку. Попробуйте другую.")

"""
Объяснение кода:
1.  **Импорт модуля `random`**:
    -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Инициализация игрового поля**:
    -  `board = [[0 for _ in range(8)] for _ in range(8)]`: Создает двумерный список (матрицу) размером 8x8, представляющий игровое поле, и заполняет его нулями.
3.  **Функция `place_ship()`**:
    -  `direction = random.randint(0, 1)`: Случайно выбирает направление корабля: 0 - горизонтальное, 1 - вертикальное.
    -  **Горизонтальное размещение**:
        -  `row = random.randint(0, 7)`: Выбирает случайный ряд для начала корабля.
        -  `col = random.randint(0, 4)`: Выбирает случайный столбец для начала корабля, учитывая длину корабля, чтобы он не выходил за границы.
        -  `for i in range(3): board[row][col + i] = 1`: Размещает корабль, присваивая значение 1 трем клеткам в выбранном ряду.
    -  **Вертикальное размещение**:
        - `row = random.randint(0, 4)`: Выбирает случайный ряд для начала корабля, учитывая длину корабля, чтобы он не выходил за границы.
        -  `col = random.randint(0, 7)`: Выбирает случайный столбец для начала корабля.
        -  `for i in range(3): board[row + i][col] = 1`: Размещает корабль, присваивая значение 1 трем клеткам в выбранном столбце.
4.  **Вызов функции `place_ship()`**:
    -  `place_ship()`: Вызывает функцию для размещения корабля на поле.
5.  **Основной игровой цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока корабль не будет потоплен.
    -  **Вывод игрового поля**:
        -  `for row in board: print(" ".join(map(str, row)))`: Выводит текущее состояние игрового поля в консоль.
    - **Ввод координат**:
      -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет неверный формат, будет выведено сообщение об ошибке.
      -   `coordinates = input("Введите координаты выстрела (ряд, столбец): ")`: Запрашивает ввод координат у игрока в формате "ряд,столбец".
      -   `row, col = map(int, coordinates.split(','))`: Разделяет введенную строку на ряд и столбец и преобразует их в целые числа.
      -   `if not (0 <= row <= 7 and 0 <= col <= 7):`: Проверяет, находятся ли введенные координаты в допустимых пределах игрового поля.
    -  **Проверка попадания**:
        -   `if board[row][col] == 1:`: Проверяет, есть ли корабль в клетке, в которую стрелял игрок.
        -   `print("Попал!")`: Выводит сообщение о попадании.
        -   `board[row][col] = 2`: Отмечает клетку как "попал", чтобы не учитывать повторные попадания.
        - **Проверка, потоплен ли корабль:**
           - `ship_sunk = True`:  Устанавливает флаг `ship_sunk` в `True`, предполагая, что корабль потоплен.
           -  `for row_b in board:`:  Проходит по всем строкам игрового поля.
           - `if 1 in row_b:`: Если в какой-либо строке есть клетка со значением `1`, то корабль еще не потоплен.
           - `ship_sunk = False`: В этом случае флаг `ship_sunk` сбрасывается в `False`.
           - `if ship_sunk: print("Корабль потоплен! Вы выиграли!"); break`: Если флаг остается `True`, то корабль потоплен, и выводится сообщение о победе и игра завершается.
    -  **Проверка промаха**:
         -   `elif board[row][col] == 0:`: Проверяет, является ли выстрел промахом.
         -  `print("Мимо!")`: Выводит сообщение о промахе.
    -   **Обработка повторного попадания**:
        - `elif board[row][col] == 2:`: Проверяет, стрелял ли игрок ранее в эту клетку.
        - `print("Вы уже стреляли в эту клетку. Попробуйте другую.")`: Выводит сообщение о том, что игрок уже стрелял в эту клетку.
"""
