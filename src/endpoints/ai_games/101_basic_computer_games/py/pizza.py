
"""
PIZZA:
=================
Сложность: 3
-----------------
Игра "Пицца" представляет собой простую текстовую игру, в которой игрок должен угадать количество кусочков пиццы, съеденных пользователем, после получения некоторой подсказки. Компьютер генерирует случайное количество кусочков от 1 до 10. Игрок вводит свое предположение, после чего игра выводит количество съеденных кусочков и проверяет, было ли предположение верным, если нет, игра повторяется.
Правила игры:
1. Компьютер генерирует случайное количество съеденных кусков пиццы от 1 до 10.
2. Компьютер выводит подсказку, в зависимости от количества съеденых кусков.
3. Игрок вводит свое предположение о количестве съеденных кусков пиццы.
4. Компьютер проверяет, угадано ли количество.
5. Если игрок угадал, игра заканчивается, если нет, то игра повторяется.
-----------------
Алгоритм:
1. Сгенерировать случайное целое число от 1 до 10 и сохранить его в переменную `pizzaSlices`.
2. Если количество съеденных кусков 5, то вывести подсказку "A LARGE PIZZA" иначе если количество съеденных кусков меньше 5, то вывести подсказку "A SMALL PIZZA", иначе вывести "MEDIUM PIZZA".
3. Запросить у пользователя ввод числа (количество съеденных кусков).
4. Если введенное число равно `pizzaSlices`, вывести "RIGHT", иначе вернуться к шагу 1.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GeneratePizzaSlices["<p align='left'>Генерация случайного количества кусков пиццы:
    <code><b>
    pizzaSlices = random(1, 10)
    </b></code></p>"]
    GeneratePizzaSlices --> CheckSize["Проверка размера пиццы: <code><b>pizzaSlices</b></code>"]
    CheckSize -- pizzaSlices == 5 --> OutputLarge["Вывод подсказки: <b>A LARGE PIZZA</b>"]
    CheckSize -- pizzaSlices < 5 --> OutputSmall["Вывод подсказки: <b>A SMALL PIZZA</b>"]
    CheckSize -- pizzaSlices > 5 --> OutputMedium["Вывод подсказки: <b>A MEDIUM PIZZA</b>"]
    OutputLarge --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    OutputSmall --> InputGuess
    OutputMedium --> InputGuess
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == pizzaSlices?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>RIGHT</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> GeneratePizzaSlices
```
Legenda:
    Start - Начало программы.
    GeneratePizzaSlices - Генерация случайного количества кусков пиццы: pizzaSlices получает случайное целое значение от 1 до 10.
    CheckSize - Проверка количества кусков пиццы для определения подсказки.
    OutputLarge - Вывод подсказки "A LARGE PIZZA", если pizzaSlices равно 5.
    OutputSmall - Вывод подсказки "A SMALL PIZZA", если pizzaSlices меньше 5.
    OutputMedium - Вывод подсказки "A MEDIUM PIZZA", если pizzaSlices больше 5.
    InputGuess - Запрос у пользователя ввода количества кусков пиццы.
    CheckGuess - Проверка, равно ли введенное пользователем число userGuess загаданному количеству кусков pizzaSlices.
    OutputWin - Вывод сообщения "RIGHT", если числа равны.
    End - Конец программы, если предположение верно.
"""
import random

while True: # Бесконечный цикл для повторения игры, пока не угадают
    # 1. Генерируем случайное количество кусков пиццы (от 1 до 10)
    pizzaSlices = random.randint(1, 10)
    
    # 2. Выводим подсказку в зависимости от количества кусков
    if pizzaSlices == 5:
        print("A LARGE PIZZA") # Если ровно 5 кусков, то выводим "A LARGE PIZZA"
    elif pizzaSlices < 5:
        print("A SMALL PIZZA") # Если меньше 5 кусков, то выводим "A SMALL PIZZA"
    else:
        print("A MEDIUM PIZZA") # Если больше 5 кусков, то выводим "A MEDIUM PIZZA"

    # 3. Запрашиваем у пользователя ввод количества кусков
    try:
        userGuess = int(input("Сколько кусков пиццы было съедено? "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue
        
    # 4. Проверяем, угадал ли пользователь
    if userGuess == pizzaSlices:
        print("RIGHT") # Если угадали, выводим "RIGHT" и завершаем игру
        break
    #Если не угадал, то цикл повторится
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.

2.  **Бесконечный цикл `while True:`**:
    -   Создает бесконечный цикл, который продолжается до тех пор, пока игрок не угадает количество кусков пиццы.

3.  **Генерация случайного количества кусков пиццы**:
    -   `pizzaSlices = random.randint(1, 10)`: Генерирует случайное целое число от 1 до 10 (включительно) и сохраняет его в переменной `pizzaSlices`. Это количество кусков пиццы, которое игрок должен угадать.

4.  **Вывод подсказки**:
    -   `if pizzaSlices == 5:`: Проверяет, равно ли количество кусков пиццы 5. Если да, выводит "A LARGE PIZZA".
    -   `elif pizzaSlices < 5:`: Если количество кусков меньше 5, выводит "A SMALL PIZZA".
    -   `else:`: Если количество кусков больше 5, выводит "A MEDIUM PIZZA".

5.  **Запрос ввода от пользователя**:
    -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `userGuess = int(input("Сколько кусков пиццы было съедено? "))`: Запрашивает у пользователя ввод целого числа и сохраняет его в переменной `userGuess`.

6.  **Проверка предположения пользователя**:
    -   `if userGuess == pizzaSlices:`: Сравнивает ввод пользователя с количеством кусков пиццы. Если они равны:
        -   `print("RIGHT")`: Выводит сообщение "RIGHT", указывающее, что пользователь угадал.
        -   `break`: Прерывает бесконечный цикл, завершая игру.
    -Если условие не выполнилось, цикл повторяется

"""
```