Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код отображает результаты поиска XPath в веб-странице. Он получает данные о результатах (например, сообщение, заголовок, URL, детали контекста и основных результатов) от другого компонента (вероятно, расширения браузера) и динамически обновляет элементы HTML на текущей странице.  Код обрабатывает как основной результат поиска, так и контекстный.  Если контекста нет, то соответствующий блок удаляется.  Функции `updateDetailsTable`, `onError` и другие вспомогательные функции используются для форматирования и отображения результатов в табличном виде.  Также код позволяет загрузить результаты в текстовые файлы, как в обычном, так и в конвертированном формате (JSON).  Существует функциональность для фокусировки на элементах контекста и основных результатах, вероятно, для выделения их в браузере.

Шаги выполнения
-------------------------
1. **Получение результатов поиска:**  Код ожидает сообщения от расширения браузера, содержащего результаты XPath-поиска (`browser.runtime.sendMessage({"event":"loadResults"})`).
2. **Обработка результатов:**  Если получены результаты (`results`), то код извлекает из них необходимую информацию (например, `results.message`, `results.title`, `results.href`, `results.frameId`, `results.context`, `results.main`).
3. **Обновление элементов HTML:**  Полученные данные используются для обновления элементов HTML с соответствующими идентификаторами (`document.getElementById`).  Например, `document.getElementById("message").textContent = results.message;` устанавливает текст сообщения в элемент с id "message".
4. **Обработка контекста:** Если существует контекст (`results.context`), то его данные также обновляются в соответствующих элементах HTML и создается таблица с деталями контекста, используя `fu.updateDetailsTable`.  В противном случае блок контекста удаляется.
5. **Обработка основных результатов:**  Аналогично обрабатываются данные основных результатов (`results.main`), обновляются элементы и создается таблица с их деталями.
6. **Создание ссылок для скачивания:**  Создаются ссылки для скачивания результатов в текстовые файлы (`makeTextDownloadUrl`, `makeInfoText`, `makeConvertedInfoText`), которые позволяют сохранить информацию в формате JSON и обычном текстовом формате.
7. **Регистрация обработчиков событий:**  Код добавляет обработчики событий `click` для элементов таблиц (`context-detail`, `main-details`).  Эти обработчики реагируют на нажатия кнопок в таблицах и отправляют сообщения расширению браузера (`browser.tabs.sendMessage`), чтобы сфокусироваться на соответствующих элементах.

Пример использования
-------------------------
.. code-block:: javascript
    
    // Предположим, что вы имеете доступ к результатам XPath-поиска
    let results = {
        "message": "Успешно",
        "title": "Страница поиска",
        "href": "http://example.com",
        "frameId": 1,
        "context": {
            "method": "xpath",
            "expression": "//div[@class='result']",
            "specifiedResultType": "element",
            "resultType": "nodeset",
            "resolver": "full",
            "itemDetail": [{"type": "div", "name": "result", "value": "Текст результата", "textContent": "Текст результата"}]
        },
        "main": {
            "method": "xpath",
            "expression": "//body",
            "specifiedResultType": "element",
            "resultType": "node",
            "resolver": "full",
            "itemDetails": []
        }
    };

    showAllResults(results);