"""
<BINGO>:
=================
Сложность: 4
-----------------
Игра "Бинго" представляет собой упрощенную версию классической игры, в которой генерируется случайная карточка 5x5 с числами от 1 до 75 (не включая числа, кратные 10, например, 10, 20, 30 и т.д.). 
Пользователю показывается карточка, затем называются случайные числа от 1 до 75.
Если названное число есть на карточке, оно отмечается.
Игра заканчивается, если все числа на карточке отмечены.

Правила игры:
1. Генерируется игровая карточка 5x5 со случайными числами от 1 до 75, исключая числа, кратные 10.
2. Игроку поочередно называются случайные числа от 1 до 75.
3. Если названное число есть на карточке, оно отмечается (заменяется на 0).
4. Игра продолжается до тех пор, пока все числа на карточке не будут отмечены.
5. После завершения игры выводится сообщение о победе.
-----------------
Алгоритм:
1. Инициализировать карточку BINGO:
    1.1 Создать пустую матрицу 5x5.
    1.2 Заполнить матрицу уникальными случайными числами от 1 до 75, исключая числа, кратные 10.
2. Начать цикл "пока на карточке есть неотмеченные числа":
    2.1 Сгенерировать случайное число от 1 до 75.
    2.2 Вывести пользователю случайное число.
    2.3 Проверить, есть ли это число на карточке:
        2.3.1 Если число есть, заменить его в матрице на 0.
        2.3.2 Если числа нет, пропустить ход
    2.4 Вывести карточку в консоль
3. Вывести сообщение "BINGO!"
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBingoCard["<p align='left'>Инициализация карточки BINGO: 
    <code><b>
    bingoCard = 5x5 matrix
    Fill bingoCard with random unique numbers from 1 to 75 (not divisible by 10)
    </b></code></p>"]
    InitializeBingoCard --> LoopStart{"Начало цикла: пока не все числа отмечены"}
    LoopStart -- Да --> GenerateRandomNumber["<code><b>randomNumber = random(1, 75)</b></code>"]
    GenerateRandomNumber --> OutputRandomNumber["Вывод числа: <code><b>randomNumber</b></code>"]
    OutputRandomNumber --> CheckNumberInCard{"Проверка: <code><b>randomNumber</b></code> есть в <code><b>bingoCard</b></code>?"}
    CheckNumberInCard -- Да --> MarkNumberOnCard["Заменить <code><b>randomNumber</b></code> на 0 в <code><b>bingoCard</b></code>"]
    MarkNumberOnCard --> OutputBingoCard["Вывод карточки <code><b>bingoCard</b></code>"]
    OutputBingoCard --> LoopStart
    CheckNumberInCard -- Нет --> OutputBingoCard
    LoopStart -- Нет --> OutputWin["Вывод сообщения: <b>BINGO!</b>"]
    OutputWin --> End["Конец"]
```

Legenda:
    Start - Начало игры.
    InitializeBingoCard - Инициализация игровой карточки BINGO: создается матрица 5x5, заполненная случайными уникальными числами от 1 до 75 (не кратными 10).
    LoopStart - Начало цикла, который продолжается, пока не все числа на карточке отмечены.
    GenerateRandomNumber - Генерация случайного числа от 1 до 75.
    OutputRandomNumber - Вывод сгенерированного случайного числа на экран для пользователя.
    CheckNumberInCard - Проверка, есть ли сгенерированное число на игровой карточке.
    MarkNumberOnCard - Если число есть на карточке, оно заменяется на 0 (отмечается).
    OutputBingoCard - Вывод текущего состояния игровой карточки на экран.
    OutputWin - Вывод сообщения о победе "BINGO!", когда все числа на карточке отмечены.
    End - Конец игры.
"""
import random

def create_bingo_card():
    """
    Создает и возвращает карточку бинго 5x5.
    
    Карточка содержит уникальные случайные числа от 1 до 75, исключая числа, кратные 10.
    
    Returns:
      list of lists: Карточка бинго.
    """
    card = []
    numbers = [i for i in range(1, 76) if i % 10 != 0] # создаем список чисел от 1 до 75, не кратных 10
    random.shuffle(numbers) # перемешиваем список

    # Заполняем карточку числами из перемешанного списка
    for i in range(5):
        row = []
        for j in range(5):
            row.append(numbers.pop())
        card.append(row)
    return card

def print_bingo_card(card):
    """
    Выводит карточку бинго в консоль.
    
    Args:
        card (list of lists): Карточка бинго для вывода.
    """
    for row in card:
      print(" ".join(str(x).rjust(2) for x in row))
    print()
    
def mark_number(card, number):
  """
    Отмечает число на карточке бинго, заменяя его на 0.

    Args:
      card (list of lists): Карточка бинго.
      number (int): Число для отметки.
  """
  for i in range(len(card)):
        for j in range(len(card[i])):
            if card[i][j] == number:
                card[i][j] = 0
                return

def is_bingo(card):
    """
    Проверяет, все ли числа на карточке бинго отмечены (заменены на 0).
    
    Args:
        card (list of lists): Карточка бинго для проверки.
    
    Returns:
        bool: True, если все числа отмечены, иначе False.
    """
    for row in card:
        for num in row:
            if num != 0:
                return False
    return True
  
def play_bingo():
    """
    Запускает игру "Бинго".
    
    Создает карточку бинго, выводит ее на экран, и просит пользователя вводить числа.
    Игра заканчивается, когда все числа на карточке отмечены.
    """
    bingo_card = create_bingo_card() # Создаем игровую карточку
    print("Ваша карточка BINGO:")
    print_bingo_card(bingo_card) # Выводим карточку на экран

    called_numbers = set() # Набор для отслеживания уже названных чисел

    while not is_bingo(bingo_card): # Игровой цикл
       number = random.randint(1, 75) # Генерируем новое случайное число
       
       while number in called_numbers:
        number = random.randint(1, 75) # Генерируем новое случайное число, если такое уже вызывалось
       
       called_numbers.add(number) # Записываем номер в уже вызванные
       print(f"Выпало число: {number}")
       mark_number(bingo_card,number)
       print_bingo_card(bingo_card) # Выводим карточку на экран
    print("BINGO!")

if __name__ == "__main__":
    play_bingo()
    
"""
Объяснение кода:

1.  **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел и перемешивания списков.

2.  **Функция `create_bingo_card()`**:
    - `def create_bingo_card():`: Определяет функцию, которая создает и возвращает карточку бинго.
    - `card = []`: Инициализирует пустой список `card`, который будет представлять собой матрицу 5x5 (карточку бинго).
    - `numbers = [i for i in range(1, 76) if i % 10 != 0]`: Создает список чисел от 1 до 75, исключая числа, кратные 10.
    - `random.shuffle(numbers)`: Перемешивает список чисел случайным образом.
    -  **Заполнение карточки**:
        -   Вложенные циклы `for i in range(5)` и `for j in range(5)`: Перебирают все ячейки матрицы 5x5.
        -   `row.append(numbers.pop())`: Извлекает последнее число из списка `numbers` и добавляет его в текущую строку карточки.
        -   `card.append(row)`: Добавляет сформированную строку в карточку.
    -   `return card`: Возвращает готовую карточку бинго.

3.  **Функция `print_bingo_card(card)`**:
    -  `def print_bingo_card(card):`: Определяет функцию, которая выводит карточку бинго на экран.
    -   Цикл `for row in card`: Перебирает все строки карточки.
    -   `print(" ".join(str(x).rjust(2) for x in row))`: Выводит текущую строку. `str(x).rjust(2)` преобразует каждое число в строку, выравнивая его по правому краю до 2 символов, и " ".join() вставляет пробелы между числами.
    -   `print()`: Добавляет пустую строку после вывода карточки для лучшего форматирования.

4.  **Функция `mark_number(card, number)`**:
    - `def mark_number(card, number):`: Определяет функцию, которая отмечает число на карточке бинго.
    -  **Поиск и замена числа**:
        -  Вложенные циклы `for i in range(len(card))` и `for j in range(len(card[i]))`: Перебирают все ячейки карточки.
        -  `if card[i][j] == number:`: Проверяет, равно ли текущее число искомому.
        -  `card[i][j] = 0`: Если число найдено, оно заменяется на 0.
        -  `return`: Завершает функцию после первой замены.

5.  **Функция `is_bingo(card)`**:
    - `def is_bingo(card):`: Определяет функцию, которая проверяет, все ли числа на карточке отмечены.
    -  **Проверка всех чисел**:
        -   Цикл `for row in card`: Перебирает все строки карточки.
        -   Цикл `for num in row`: Перебирает все числа в текущей строке.
        -   `if num != 0:`: Если найдено неотмеченное число (не равное 0), возвращает `False`.
    -  `return True`: Если все числа отмечены, возвращает `True`.

6.  **Функция `play_bingo()`**:
    -  `def play_bingo():`: Определяет функцию, которая запускает игру "Бинго".
    -  `bingo_card = create_bingo_card()`: Создает карточку бинго.
    -  `print("Ваша карточка BINGO:")`: Выводит сообщение о начале игры.
    -  `print_bingo_card(bingo_card)`: Выводит карточку на экран.
    - `called_numbers = set()`: Создает множество для хранения уже вызванных чисел, чтобы избежать повторений
    -   **Игровой цикл**:
        -  `while not is_bingo(bingo_card)`: Выполняется, пока на карточке есть неотмеченные числа.
        - `number = random.randint(1, 75)`: Генерирует случайное число.
        -  `while number in called_numbers`: Генерирует новое число, пока оно уже не было вызвано.
        - `called_numbers.add(number)`: Добавляет число в множество вызванных.
        -  `print(f"Выпало число: {number}")`: Выводит выпавшее число.
        -  `mark_number(bingo_card, number)`: Отмечает число на карточке.
        -  `print_bingo_card(bingo_card)`: Выводит обновленную карточку на экран.
    -   `print("BINGO!")`: Выводит сообщение о победе, когда все числа отмечены.

7. **Условный запуск игры**:
    -   `if __name__ == "__main__":`: Проверяет, что файл запущен как основной, а не импортирован как модуль.
    -  `play_bingo()`: Вызывает функцию `play_bingo()` для запуска игры.
"""
