Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Данный код представляет собой модуль `test_driver.py` с тестами для класса `DriverBase`. Тесты проверяют различные методы класса, включая работу с JavaScript, прокруткой страницы, получением локали, URL, домена, сохранением куки, обновлением страницы, ожиданиями и удалением логов.  Тесты используют `pytest` и `unittest.mock` для создания фиктивных объектов и методов, чтобы изолировать тестируемый код и избежать взаимодействия с реальными веб-страницами.

Шаги выполнения
-------------------------
1. **Импорт необходимых модулей:** Код импортирует модули `pytest`, `unittest.mock`, `selenium.common.exceptions`, `DriverBase`, и `logger`.

2. **Определение класса `TestDriverBase`:** Создается класс, содержащий тесты.

3. **Определение фикстуры `driver_base`:** Фикстура создаёт экземпляр класса `DriverBase` для использования в тестах.

4. **Определение тестов:** Каждая функция в классе `TestDriverBase` представляет собой отдельный тест.
    * Тесты `test_driver_payload`, `test_scroll`, `test_locale`, `test_get_url`, `test_extract_domain`, `test_save_cookies_localy`, `test_page_refresh`, `test_wait`, `test_delete_driver_logs` проверяют соответствующие методы класса `DriverBase`.
    * В тесте `test_driver_payload` используются `patch` для подмены объектов `JavaScript` и `ExecuteLocator`, чтобы проверить, что методы `driver_base` взаимодействуют с этими объектами корректно.
    * Тест `test_scroll` тестирует прокрутку страницы с использованием `Mock` для имитации работы с `execute_script` и `wait`.
    * Тест `test_locale` тестирует получение локали, проверяя как работу с meta-тегами, так и альтернативный вариант получения локали.
    * Тест `test_get_url` проверяет корректность получения URL страницы,  используя Mock для имитации работы с `get`, `ready_state` и `wait`.
    * Тест `test_extract_domain` проверяет корректность извлечения домена из URL.
    * Тест `test_save_cookies_localy` проверяет сохранение куки в файле, используя Mock для имитации работы с файлами и pickle.
    * Тест `test_page_refresh` тестирует обновление страницы.
    * Тест `test_wait` тестирует механизм ожидания.
    * Тест `test_delete_driver_logs` проверяет удаление логов драйвера, используя Mock для имитации работы с файловой системой.

5. **Использование pytest:** Модуль `test_driver.py` запускается с помощью pytest для выполнения тестов.


Пример использования
-------------------------
.. code-block:: bash

    # Запуск тестов с помощью pytest
    pytest hypotez/src/webdriver/_pytest/test_driver.py