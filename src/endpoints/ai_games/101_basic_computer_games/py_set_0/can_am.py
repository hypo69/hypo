"""
<CAN AM>:
=================
Сложность: 4
-----------------
Игра "CAN AM" - это гоночная игра, где игрок управляет автомобилем, пытаясь проехать 10 кругов по трассе. Игрок вводит скорость (от 0 до 200 миль/час), и игра моделирует движение автомобиля, учитывая износ шин. Если шины изношены более чем на 100%, происходит авария, и игра заканчивается. Цель игры - проехать все круги с минимальным износом шин.
-----------------
Правила игры:
1.  Игрок начинает с 0 пройденных кругов и износом шин 0%.
2.  На каждом круге игрок вводит скорость от 0 до 200 миль/час.
3.  Скорость влияет на износ шин, износ расчитывается по формуле: износ = износ + (скорость/10) + случайное число от 0 до 1.
4.  Если износ шин превышает 100%, игрок проигрывает (происходит авария).
5.  Игра продолжается, пока игрок не проедет 10 кругов или не произойдет авария.
-----------------
Алгоритм:
1. Установить количество пройденных кругов (completed_laps) равным 0.
2. Установить износ шин (tire_wear) равным 0.
3. Пока количество пройденных кругов меньше 10:
    4. Вывести номер текущего круга.
    5. Запросить у игрока скорость (speed).
    6. Вычислить износ шин (tire_wear) по формуле: tire_wear = tire_wear + (speed / 10) + случайное число от 0 до 1.
    7. Если износ шин (tire_wear) больше 100, то вывести сообщение об аварии и завершить игру.
    8. Увеличить количество пройденных кругов на 1.
4. Если игра дошла до этого момента (пройдено 10 кругов), то вывести сообщение о победе.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> Initialize(Initialize Variables);
    Initialize --> LoopStart{Completed Laps < 10?};
    LoopStart -- Yes --> DisplayLap(Display Current Lap);
    DisplayLap --> InputSpeed(Input Speed);
    InputSpeed --> CalculateTireWear(Calculate Tire Wear);
    CalculateTireWear --> CheckTireWear{Tire Wear > 100?};
    CheckTireWear -- Yes --> Crash(Crash - Game Over);
    CheckTireWear -- No --> IncrementLaps(Increment Completed Laps);
    IncrementLaps --> LoopStart;
    LoopStart -- No --> Win(Win - Game Completed);
    Crash --> End(End);
    Win --> End;
```
"""
import random

def can_am():
    """
    Симуляция гоночной игры "CAN AM".
    """
    # Инициализация переменных
    completed_laps = 0  # Количество пройденных кругов
    tire_wear = 0      # Износ шин

    # Основной игровой цикл
    while completed_laps < 10:
        print(f"\nКруг {completed_laps + 1}")  # Вывод номера текущего круга
        
        # Запрос скорости у игрока
        while True:
            try:
                speed = int(input("Введите скорость (0-200 миль/час): "))
                if 0 <= speed <= 200:
                    break  # Выход из цикла, если ввод корректный
                else:
                     print("Скорость должна быть от 0 до 200. Попробуйте еще раз.")
            except ValueError:
                print("Некорректный ввод. Введите целое число.")

        # Расчет износа шин
        tire_wear += speed / 10 + random.random()  

        # Проверка на аварию
        if tire_wear > 100:
            print("Авария! Ваши шины изношены.")
            return # Завершение игры
            
        completed_laps += 1 # Увеличение количества пройденных кругов

    # Если игрок проехал все круги
    print("Поздравляем! Вы завершили гонку!")

if __name__ == "__main__":
    can_am()
"""
Пояснения:
1.  **`can_am()` Function:**
    *   `completed_laps`: Целочисленная переменная, отслеживающая количество пройденных игроком кругов.
    *   `tire_wear`: Переменная с плавающей точкой, представляющая износ шин в процентах.
    *   Цикл `while completed_laps < 10:`: Основной игровой цикл, который выполняется, пока игрок не пройдет 10 кругов.
    *   `print(f"\nКруг {completed_laps + 1}")`: Выводит номер текущего круга.
    *   `input("Введите скорость (0-200 миль/час): ")`: Запрашивает у игрока ввод скорости.
    *   `tire_wear += speed / 10 + random.random()`: Обновляет износ шин на основе введенной скорости и случайного числа.
    *   `if tire_wear > 100:`: Проверяет, не превысил ли износ шин 100%. Если превысил, игра заканчивается с сообщением об аварии.
    *   `completed_laps += 1`: Увеличивает количество пройденных кругов.
    *   `print("Поздравляем! Вы завершили гонку!")`: Выводит сообщение о победе, если игрок успешно проехал 10 кругов.
2.  **`if __name__ == "__main__":`:**
    *   Этот блок кода гарантирует, что функция `can_am()` будет вызываться только при непосредственном запуске скрипта, а не при его импорте как модуля.
3. **Дополнительно**
    *   Введена обработка исключений ValueError, чтобы предотвратить сбой программы при вводе некорректных данных.
    *   Введёна проверка скорости, для соответсвия условию игры (0-200 миль/час).
    *   Использованы более понятные имена переменных и констант, чтобы код был более читабельным.
    *  Добавлены комментарии на русском языке, поясняющие каждый шаг алгоритма
    *  Удалено ограничение на "целочисленное значение" переменной `tire_wear`, так как износ в игре может быть дробным числом

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'