Как использовать ExecuteLocator для работы с WebDriver
========================================================================================

Описание
-------------------------
Этот модуль предоставляет класс `ExecuteLocator` для выполнения действий на веб-страницах с помощью WebDriver. Он обрабатывает словари локейторов, содержащие инструкции о том, как найти и взаимодействовать с веб-элементами.  Модуль поддерживает навигацию, взаимодействие с элементами, отправку сообщений, получение атрибутов, создание скриншотов и обработку ошибок.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Импортируются классы и функции из Selenium, а также внутренние модули для работы с настройками, логированием и обработкой исключений.

2. **Инициализация `ExecuteLocator`:** Создается экземпляр класса `ExecuteLocator` с экземпляром WebDriver.  Это подготавливает драйвер для дальнейших операций.  Параметром может быть указан драйвер (Chrome, Firefox, и т.д.).

3. **Обработка локейтора:**  Метод `execute_locator` принимает словарь `locator` в качестве аргумента.  Этот словарь содержит инструкции о том, как найти элемент (xpath, id, css-селектор) и выполнить действие (например, клик, отправка текста).

4. **Работа с элементом:**  В зависимости от действий, указанных в локейторе, вызываются соответствующие методы:
    - `get_webelement_by_locator`: Находит элемент на странице по заданному локейтору, ожидая его появления. Возвращает элемент, список элементов или `False`, если элемент не найден.
    - `get_attribute_by_locator`: Получает значение атрибута найденного элемента(ов).
    - `send_message`: Отправляет текст в элемент (например, в поле ввода). Поддерживает симуляцию набора текста с настраиваемой скоростью.
    - `get_webelement_as_screenshot`: Создает скриншот найденного элемента.
    - `click`: Выполняет клик на элементе. Обрабатывает навигацию по страницам и открытия новых окон.

5. **Обработка ошибок:**  В коде используются блоки `try-except` для перехвата и логирования ошибок (например, `NoSuchElementException`, `TimeoutException`), чтобы обрабатывать ситуации, когда элемент не найден или время ожидания истекло.

Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from src.webdriver import ExecuteLocator, Chrome
    # ... (импорты других необходимых библиотек)

    # Создаем экземпляр WebDriver
    driver = webdriver.Chrome()

    # Создаем экземпляр ExecuteLocator, используя WebDriver
    executor = ExecuteLocator(driver)

    # Словарь локейтора (пример)
    locator = {
        "element": {"by": "xpath", "value": "//input[@id='myInput']"},
        "action": "send_keys",
        "keys": "test message",
    }

    try:
        # Выполняем действие
        result = executor.execute_locator(locator)
        if result:
            print(f"Action successful: {result}")
        else:
            print("Action failed.")
    except Exception as e:
        print(f"An error occurred: {e}")

    # Закрываем браузер
    driver.quit()