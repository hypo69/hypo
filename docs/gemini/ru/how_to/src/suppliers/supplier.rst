Как использовать класс Supplier
========================================================================================

Описание
-------------------------
Класс `Supplier` представляет собой базовый класс для работы с различными поставщиками. Он отвечает за загрузку настроек поставщика, выполнение сценариев и вход на сайт.  Класс использует Pydantic для валидации данных и логирование для отслеживания процесса.

Шаги выполнения
-------------------------
1. **Инициализация объекта класса Supplier:**
   Создается экземпляр класса `Supplier` с необходимыми параметрами, такими как `supplier_prefix`.  Этот префикс используется для импорта специфичных для поставщика модулей и нахождения файла настроек.

2. **Проверка префикса поставщика:**
   Валидируется `supplier_prefix`,  проверяется, что он не пустой. В случае пустого значения генерируется исключение `ValueError`.

3. **Загрузка настроек поставщика:**
   Метод `_payload` загружает настройки из файла `supplier_prefix_settings.json` с помощью `j_loads_ns`. Настройки включают в себя правила расчета цен, локаль, список файлов сценариев, локаторы элементов страницы и другие параметры.
   - Если файл настроек не найден или содержит невалидные данные, генерируется исключение `DefaultSettingsException`, а загрузка считается неудачной.
   - Если загрузка настроек происходит успешно, параметры загружаются в атрибуты объекта класса.

4. **Импорт модуля, связанного с поставщиком:**
   Метод `_payload` импортирует модуль, специфичный для текущего поставщика, основываясь на `supplier_prefix`. Имя модуля формируется как `src.suppliers.supplier_prefix`.

5. **Вход на сайт (метод login):**
   Метод `login` вызывает функцию входа из импортированного модуля, передавая экземпляр класса `Supplier`.

6. **Выполнение сценариев (методы run_scenario_files, run_scenarios):**
   Методы `run_scenario_files` и `run_scenarios` позволяют выполнять заранее подготовленные сценарии, связанные с данным поставщиком.  `run_scenario_files` обрабатывает файлы сценариев, а `run_scenarios` — набор сценариев в виде списка словарей.  Если `scenario_files` не указан при вызове `run_scenario_files`, используется значение из атрибута `self.scenario_files`.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.suppliers.supplier import Supplier
    import gs
    # Предположим, что у вас есть объект gs.path.src

    # Создание объекта Supplier
    supplier_instance = Supplier(supplier_prefix='amazon')

    # Проверка успешной загрузки настроек
    if supplier_instance._payload():
        # Выполнение сценариев (например, из списка словарей)
        scenarios = [{'action': 'search', 'query': 'example_product'}]
        success = supplier_instance.run_scenarios(scenarios)

        # Или выполнение сценариев из файла
        files = ['scenario1.json', 'scenario2.json']
        success = supplier_instance.run_scenario_files(files)

        if success:
            print("Сценарии выполнены успешно.")
        else:
            print("Ошибка при выполнении сценариев.")
    else:
      print("Ошибка загрузки настроек")