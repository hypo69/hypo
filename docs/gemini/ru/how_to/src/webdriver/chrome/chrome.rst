Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует класс `Chrome`, который предоставляет интерфейс для работы с веб-драйвером Chrome. Он настраивается с помощью файла конфигурации `chrome.json`, позволяя гибко изменять настройки, такие как user-agent и профиль браузера.  Класс обеспечивает централизованное управление настройками, поддержку профилей браузера и расширенную обработку ошибок и логов.  Он также интегрирует функциональность для работы с JavaScript (получение языка страницы, состояния загрузки, ссылки referrer, отображение элементов DOM, фокусировка окна), и для выполнения локаторов.  Код гарантирует единственный экземпляр WebDriver, предотвращая ненужные ресурсы.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует необходимые модули, включая `selenium`, `fake_useragent`, `pathlib`, и другие для работы с веб-драйвером, обработкой файлов и т.д.

2. **Инициализация конфигурации:**  Загружает настройки из файла `chrome.json` с помощью `j_loads_ns`.  Проверяет корректность файла. Если файл не корректен, выводит сообщение об ошибке и завершает работу.

3. **Создание объекта `ChromeOptions`:** Создает экземпляр класса `ChromeOptions` для настройки Chrome WebDriver.

4. **Обработка опций и настроек из файла `chrome.json`:**
   - Проходит по опциям и настройкам из `config.options` и `config.headers`, добавляя их в объект `options`.
   - Использует функцию `normalize_path` для замены переменных среды в путях `profile_directory` и `binary_location`.
   - Устанавливает `user-data-dir` для использования пользовательского профиля.
   - Устанавливает `binary_location` для указания пути к исполняемому файлу Chrome.

5. **Создание объекта `ChromeService`:** Создает экземпляр `ChromeService` с указанным путем к исполняемому файлу Chrome (`executable_path`).

6. **Инициализация драйвера:** Используя `super().__init__(options=options)`, создаёт экземпляр Chrome WebDriver с заданными параметрами.

7. **Обработка исключений:** Включает обработку исключений `WebDriverException` и общих ошибок, выводит подробные логи.

8. **Инициализация дополнительных функций:** Вызывает функцию `_payload()`, которая инициализирует объекты для выполнения локаторов (`ExecuteLocator`) и JavaScript-операций (`JavaScript`).  Это добавляет функциональность для работы с DOM-элементами, выполнением JavaScript-кода и т.д.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.webdriver.chrome import Chrome

    # Инициализируем драйвер
    driver = Chrome()

    # Получаем страницу
    driver.get("https://www.example.com")

    # Находим элемент по селектору CSS
    element = driver.find_element("css selector", "p")

    # Выводим текст элемента
    print(element.text)

    # Закрываем драйвер
    driver.quit()