
"""
MUGWMP:
=================
Сложность: 4
-----------------
Игра "MUGWMP" - это текстовая игра, в которой игрок пытается угадать четырехзначное число, сгенерированное компьютером. После каждой попытки игроку сообщается количество правильных цифр и их точное положение в загаданном числе, в виде X правильных цифр в правильной позиции и Y правильных цифр в неправильной позиции. Игра продолжается, пока игрок не угадает число.

Правила игры:
1. Компьютер генерирует случайное четырехзначное число, где каждая цифра уникальна и не повторяется.
2. Игрок вводит свое четырехзначное число, также с уникальными цифрами.
3. После каждой попытки компьютер сообщает игроку два значения:
   -  X: Количество цифр, которые угаданы и находятся на правильных позициях.
   -  Y: Количество цифр, которые угаданы, но находятся на неправильных позициях.
4. Игра продолжается до тех пор, пока игрок не угадает все 4 цифры в правильном порядке (т.е. пока X не станет равным 4).
-----------------
Алгоритм:
1. Сгенерировать случайное четырехзначное число, где каждая цифра уникальна.
2. Начать игровой цикл "пока число не угадано":
  2.1. Запросить у игрока ввод четырехзначного числа.
  2.2. Проверить, является ли введенное число корректным (состоит из 4 цифр, где каждая цифра уникальна). Если не корректно, вывести сообщение об ошибке и перейти к 2.1.
  2.3. Сравнить введенное число с загаданным числом и подсчитать количество правильных цифр на правильных позициях (X) и количество правильных цифр на неправильных позициях (Y).
  2.4. Вывести результаты в формате "X-Y", где X - количество цифр в правильной позиции, а Y - количество цифр в неправильной позиции.
  2.5. Если X равно 4, то выводится сообщение о победе и игра заканчивается.
  2.6. Если X не равно 4, то перейти к началу цикла (2).
3. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateTargetNumber["<p align='left'>Генерация 
    <code><b>targetNumber</b></code> - случайного 4-значного числа с уникальными цифрами</p>"]
    GenerateTargetNumber --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart --> InputUserGuess["Ввод 
    <code><b>userGuess</b></code> - 4-значного числа от пользователя"]
    InputUserGuess --> ValidateInput["Проверка:
    <code><b>userGuess</b></code> - корректное 4-значное число с уникальными цифрами?"]
    ValidateInput -- Да --> CheckGuess["Сравнение 
    <code><b>userGuess</b></code> с <code><b>targetNumber</b></code>, подсчет 
    <code><b>correctPosition</b></code> и 
    <code><b>correctNumber</b></code>"]
    CheckGuess --> OutputResult["Вывод: 
    <code><b>correctPosition</b></code>-<code><b>correctNumber</b></code>"]
    OutputResult --> CheckWin{"Проверка: 
    <code><b>correctPosition == 4</b></code>?"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    ValidateInput -- Нет --> OutputError["Вывод сообщения: <b>Некорректный ввод</b>"]
    OutputError --> LoopStart
```

Legenda:
    Start - Начало игры.
    GenerateTargetNumber - Генерация случайного 4-значного числа с уникальными цифрами и сохранение его в переменной targetNumber.
    LoopStart - Начало цикла, который повторяется, пока игрок не угадает число.
    InputUserGuess - Запрос у пользователя ввода 4-значного числа и сохранение его в переменной userGuess.
    ValidateInput - Проверка корректности ввода: является ли userGuess 4-значным числом с уникальными цифрами.
    CheckGuess - Сравнение userGuess с targetNumber. Подсчет correctPosition (количество цифр на правильных позициях) и correctNumber (количество правильных цифр в неправильных позициях).
    OutputResult - Вывод результатов сравнения в формате correctPosition-correctNumber.
    CheckWin - Проверка, равен ли correctPosition 4 (все цифры угаданы в правильных позициях).
    OutputWin - Вывод сообщения о победе.
    End - Конец игры.
    OutputError - Вывод сообщения об ошибке некорректного ввода.

"""
import random

def generate_target_number():
    """Генерирует случайное 4-значное число с уникальными цифрами."""
    digits = list(range(10))  # Создаем список цифр от 0 до 9
    random.shuffle(digits)  # Перемешиваем цифры случайным образом
    # выбираем первые 4 цифры из перемешанного списка
    return "".join(map(str, digits[:4]))  

def validate_user_guess(user_guess):
  """Проверяет, является ли ввод пользователя корректным."""
  if not user_guess.isdigit() or len(user_guess) != 4:
      return False # Проверка: 4 цифры, только цифры
  if len(set(user_guess)) != 4:
      return False # Проверка уникальности цифр.
  return True

def check_guess(target_number, user_guess):
  """Сравнивает загаданное число с пользовательским вводом."""
  correct_position = 0  # Количество цифр на правильных позициях
  correct_number = 0  # Количество цифр в неправильных позициях
    
  for i in range(4):
    if user_guess[i] == target_number[i]:
        correct_position += 1 # если цифра и позиция совпадают
    elif user_guess[i] in target_number:
        correct_number += 1 # если цифра есть, но не на той позиции
  return correct_position, correct_number

# 1. Генерируем случайное число
targetNumber = generate_target_number()
# Основной игровой цикл
while True:
    # 2.1 Запрашиваем ввод от пользователя.
    userGuess = input("Введите четырехзначное число с уникальными цифрами: ")

    # 2.2 Проверяем корректность ввода.
    if not validate_user_guess(userGuess):
        print("Некорректный ввод! Пожалуйста, введите 4 уникальные цифры.")
        continue  # Если ввод некорректный, начинаем цикл заново
    # 2.3 Сравниваем введенное число с загаданным и получаем результаты
    correct_position, correct_number = check_guess(targetNumber, userGuess)
    # 2.4 Выводим подсказку.
    print(f"{correct_position}-{correct_number}")
    # 2.5 Проверяем, выиграл ли игрок.
    if correct_position == 4:
        print("ПОЗДРАВЛЯЮ! Вы угадали число!")
        break # Конец игры
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Функция `generate_target_number()`**:
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает список цифр случайным образом.
    -   `return "".join(map(str, digits[:4]))`: Выбирает первые четыре цифры из перемешанного списка и возвращает их в виде строки, которая представляет собой загаданное число.
3.  **Функция `validate_user_guess(user_guess)`**:
    -   `if not user_guess.isdigit() or len(user_guess) != 4:`: Проверяет, состоит ли ввод пользователя из 4 цифр.
    -    `if len(set(user_guess)) != 4:`: Проверяет, являются ли все цифры уникальными (используется преобразование строки в множество для определения уникальных символов).
    -   `return True`: возвращает `True`, если ввод прошел все проверки, в противном случае `False`
4.  **Функция `check_guess(target_number, user_guess)`**:
    -   `correct_position = 0` и `correct_number = 0`: Инициализирует счетчики для правильных позиций и правильных чисел.
    -   Цикл `for i in range(4)`: Перебирает каждую цифру в числах.
    -   `if user_guess[i] == target_number[i]`: Если цифра и ее позиция совпадают, увеличивает счетчик `correct_position`.
    -   `elif user_guess[i] in target_number`: Если цифра есть в загаданном числе, но на другой позиции, увеличивает счетчик `correct_number`.
    -   `return correct_position, correct_number`: Возвращает количество цифр на правильных позициях и количество цифр на неправильных позициях.
5.  **Основной игровой цикл**:
    -   `targetNumber = generate_target_number()`: Генерирует загаданное число.
    -   `while True`: Бесконечный цикл, который продолжается, пока игрок не угадает число.
    -   `userGuess = input("Введите четырехзначное число с уникальными цифрами: ")`: Запрашивает у пользователя ввод.
    -   `if not validate_user_guess(userGuess):`: Проверяет ввод пользователя с помощью функции `validate_user_guess`.
    -   `print("Некорректный ввод! Пожалуйста, введите 4 уникальные цифры.")`: Выводит сообщение об ошибке при некорректном вводе.
    -   `continue`: Начинает цикл заново, если ввод некорректный.
    -  `correct_position, correct_number = check_guess(targetNumber, userGuess)`: Вызывает функцию `check_guess` для сравнения и получает результат сравнения.
    -  `print(f"{correct_position}-{correct_number}")`: Выводит результат сравнения.
    -   `if correct_position == 4:`: Проверяет, угадал ли игрок все 4 цифры.
    -   `print("ПОЗДРАВЛЯЮ! Вы угадали число!")`: Выводит сообщение о победе.
    -   `break`: Завершает игровой цикл.
"""
```