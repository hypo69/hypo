Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода описывает структуру запроса к модели Gemini AI для создания описания компьютера.  Код определяет формат входных данных (JSON) и ожидаемый формат выходных данных (также JSON), который содержит информацию о компонентах компьютера, их описаниях, а также перевод этих данных на иврит и русский язык.  Он описывает требования к модели, включая определение типа сборки, генерирование заголовков и описаний на двух языках, перевод названий и описаний компонентов, и структурирование результата в JSON формате.  Код содержит примеры входных и выходных данных, ключевые инструкции, и важные соображения для модели.

Шаги выполнения
-------------------------
1. **Подготовьте входные данные:**  Создайте JSON массив, содержащий информацию о компонентах компьютера, следуя формату `Example Input`. Каждый объект в массиве должен содержать `product_id`, `product_title`, `product_description` и `image_local_saved_path`.

2. **Запустите запрос к модели:**  Отправьте подготовленные входные данные в модель Gemini AI, ожидая JSON ответ, который соответствует формату `Example Output`.

3. **Обработайте результат:**  Полученный JSON содержит информацию о типе сборки (например, `gaming`, `workstation`), заголовок и описание на иврите и русском языке, и информацию о каждом компоненте, переведенную на оба языка. Обратите внимание на правильную структуру и форматы в выходных данных.

4. **Проверьте достоверность и точность:**  Проверьте переведенные названия и описания на предмет точности и корректности, особенно в технических аспектах.

Пример использования
-------------------------
.. code-block:: python

    import json

    # Пример входных данных (JSON)
    input_data = [
        {"product_id": "1", "product_title": "Процессор Intel i9-14900K", "product_description": "Высокопроизводительный процессор для игр и профессиональных задач", "image_local_saved_path": "path/to/image1.jpg"},
        {"product_id": "2", "product_title": "Видеокарта NVIDIA RTX 4060 Ti", "product_description": "Высокопроизводительная видеокарта для игр и 3D-рендеринга", "image_local_saved_path": "path/to/image2.jpg"}
    ]

    # Предполагаемый ответ от модели (JSON)
    # (Здесь будет ответ от модели, генерируемый в соответствии с форматом Example Output.)
    output_data = {
        # ... (выходные данные) ...
    }
    
    # Декодирование и обработка JSON-ответа
    try:
        data = json.loads(output_data) # Если выходной ответ — строка
        # Работа с результатом data ...
    except json.JSONDecodeError as e:
        print(f"Ошибка декодирования JSON: {e}")