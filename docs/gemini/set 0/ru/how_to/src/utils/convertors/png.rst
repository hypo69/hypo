Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит класс `TextToImageGenerator`, предназначенный для генерации изображений PNG из текстовых строк.  Класс предоставляет функции для задания пути вывода, центрирования текста на изображении, создания PNG-изображений, проверки строк на пустоту или комментарии, а также для обработки существующих файлов, вычисления размеров текста и шрифта, настройки логирования и обработки ошибок.  Дополнительно реализована функция `webp2png` для конвертации изображений WEBP в PNG.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует `pathlib`, `typing`, `PIL` (Pillow) и `logger` для работы с путями, типами данных, обработкой изображений и логированием соответственно.

2. **Определение класса `TextToImageGenerator`:** Класс `TextToImageGenerator` содержит методы для генерации изображений.  Метод `__init__` задаёт значения по умолчанию для параметров, таких как папка вывода, размер холста, отступ, цвет фона и цвет текста.

3. **Метод `generate_images`:** Этот метод принимает список текстовых строк `lines`, опциональный путь вывода `output_dir`, настройки для изображения (шрифт, размер, отступ, цвета) и параметр `clobber`, определяющий перезапись существующих файлов. Метод итерируется по каждой строке в списке, создаёт имя файла PNG, проверяет, существует ли файл с таким именем, и если нет, то генерирует изображение с помощью метода `generate_png` и сохраняет его в указанный каталог.

4. **Метод `generate_png`:** Этот метод принимает текстовую строку, размер холста, отступ, цвет фона, цвет текста и шрифт. Метод создаёт новое изображение с заданным размером и цветом фона, вычисляет позицию для центрирования текста, отрисовывает текст с заданными параметрами и возвращает созданное изображение.

5. **Метод `center_text_position`:** Этот метод рассчитывает координаты для центрирования текста на изображении.  Он определяет ширину и высоту текста на основе заданного шрифта и вычисляет координаты, необходимые для центрирования текста по горизонтали и вертикали на холсте.

6. **Функция `webp2png`:** Данная функция принимает пути к входному изображению в формате WEBP и вывода в формате PNG. Она пытается открыть WEBP-изображение с помощью `Image.open`, преобразовать его в формат PNG и сохранить по указанному пути.  В случае ошибки, выводит сообщение об ошибке в консоль.

7. **Обработка ошибок:** Код содержит обработку исключений `try...except`, чтобы перехватить и обработать потенциальные ошибки при работе с файлами и изображениями, что повышает устойчивость кода.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.utils.convertors.png import TextToImageGenerator

    async def main():
        generator = TextToImageGenerator()
        lines = ["Hello", "World", "Example"]
        output_dir = "./output_images"  # Папка для вывода изображений
        images = await generator.generate_images(lines, output_dir=output_dir, canvas_size=(800, 600))
        for image_path in images:
            print(f"Изображение сохранено: {image_path}")

    if __name__ == "__main__":
        import asyncio
        asyncio.run(main())