"""
PIZZA:
=================
Сложность: 3
-----------------
Игра "Пицца" представляет собой простую текстовую игру, в которой игрок должен угадать количество кусочков пиццы, которые съели друзья. Игрок вводит свою догадку, а программа сообщает, была ли догадка верной, больше или меньше загаданного числа. Игра продолжается до тех пор, пока игрок не угадает правильное число.
Правила игры:
1. Компьютер случайно выбирает число от 1 до 10 (включительно), которое представляет количество съеденных кусочков пиццы.
2. Игрок вводит свою догадку о количестве съеденных кусочков пиццы.
3. Компьютер сравнивает догадку игрока с загаданным числом.
4. Если догадка верна, игра заканчивается, и игрок побеждает.
5. Если догадка больше загаданного числа, компьютер сообщает, что догадка была "слишком большой".
6. Если догадка меньше загаданного числа, компьютер сообщает, что догадка была "слишком маленькой".
7. Игрок может делать новые попытки до тех пор, пока не угадает число.
-----------------
Алгоритм:
1. Инициализация:
   - Сгенерировать случайное целое число (pizzaSlices) в диапазоне от 1 до 10 включительно.
2. Основной цикл игры:
   - Запросить у игрока догадку (guess) о количестве съеденных кусков пиццы.
   - Сравнить догадку (guess) с загаданным количеством (pizzaSlices):
      - Если догадка равна загаданному числу, вывести сообщение о выигрыше и завершить игру.
      - Если догадка больше загаданного числа, вывести сообщение, что догадка "слишком большая".
      - Если догадка меньше загаданного числа, вывести сообщение, что догадка "слишком маленькая".
   - Повторять цикл, пока игрок не угадает число.
-----------------
Блок-схема:
```mermaid
graph TD
    Start --> GenerateRandomNumber;
    GenerateRandomNumber --> InputGuess;
    InputGuess --> CompareGuess;
    CompareGuess -- Guess == pizzaSlices --> OutputWinMessage;
    CompareGuess -- Guess > pizzaSlices --> OutputTooHigh;
    CompareGuess -- Guess < pizzaSlices --> OutputTooLow;
    OutputWinMessage --> End;
    OutputTooHigh --> InputGuess;
    OutputTooLow --> InputGuess;
    End
```
"""
import random

def play_pizza_game():
    """
    Функция запускает игру "Пицца".
    """
    # 1. Инициализация: генерируем случайное число от 1 до 10 включительно
    pizzaSlices = random.randint(1, 10)
    
    # 2. Основной цикл игры
    while True:
        # Запрашиваем у игрока догадку
        try:
            guess = int(input("Сколько кусков пиццы съели ваши друзья? (1-10): "))
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue # Если ввод не корректен, переходим к следующей итерации цикла
        
        # Проверяем, чтобы догадка была в диапазоне от 1 до 10
        if not 1 <= guess <= 10:
            print("Пожалуйста, введите число от 1 до 10.")
            continue  # Если догадка вне диапазона, переходим к следующей итерации цикла
            
        # Сравниваем догадку с загаданным числом
        if guess == pizzaSlices:
            print("Правильно! Вы угадали!")
            break # Выходим из цикла, игра завершена
        elif guess > pizzaSlices:
            print("Слишком много. Попробуйте еще раз.")
        else:
            print("Слишком мало. Попробуйте еще раз.")
            

if __name__ == "__main__":
    play_pizza_game()
"""
Пояснения:
1.  `import random`: Импортируем модуль `random` для генерации случайных чисел.
2.  `def play_pizza_game():`: Определяем функцию `play_pizza_game`, которая содержит основную логику игры.
3.  `pizzaSlices = random.randint(1, 10)`: Генерируем случайное целое число от 1 до 10 включительно и сохраняем его в переменной `pizzaSlices`. Это число представляет загаданное количество съеденных кусков пиццы.
4.  `while True:`: Запускаем бесконечный цикл, который будет продолжаться, пока игрок не угадает число.
5.  `try-except` блок:
     -  `guess = int(input(...))`: Запрашиваем у игрока догадку и преобразуем ввод в целое число.
     -  `except ValueError`: Обрабатываем ошибку, если игрок ввел не целое число. Выводим сообщение об ошибке и переходим к следующей итерации цикла.
6.   `if not 1 <= guess <= 10:`: Проверяем, что введенное число находится в диапазоне от 1 до 10. Если число вне диапазона, выводим сообщение об ошибке и переходим к следующей итерации цикла.
7.  `if guess == pizzaSlices:`: Сравниваем догадку игрока с загаданным числом. Если они равны, выводим сообщение о победе и выходим из цикла с помощью `break`.
8.  `elif guess > pizzaSlices:`: Если догадка больше загаданного числа, выводим сообщение "Слишком много".
9.  `else:`: Если догадка меньше загаданного числа, выводим сообщение "Слишком мало".
10. `if __name__ == "__main__":`: Проверяем, что скрипт запущен напрямую, а не импортирован как модуль.
11. `play_pizza_game()`: Запускаем игру, вызывая функцию `play_pizza_game`.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```