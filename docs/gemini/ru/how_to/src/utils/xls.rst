Как использовать модуль xls для работы с Excel-файлами
=========================================================================================

Описание
-------------------------
Модуль `xls` предоставляет функции для конвертации Excel-файлов (`xls`) в JSON и обратно.  Он позволяет обрабатывать несколько листов и сохранять JSON-данные обратно в Excel. Модуль использует библиотеку pandas для работы с Excel.  Встроенная обработка ошибок позволяет избежать аварийного завершения программы при проблемах с файлом или данными.  Он использует логгирование для отслеживания ошибок и успешных операций.

Шаги выполнения
-------------------------
1. **Импортировать необходимые библиотеки:** Модуль импортирует `pandas`, `json`, `logging` и `pathlib` для работы с файлами и данными.

2. **Настроить логгирование:**  `logging.basicConfig()` инициализирует систему логгирования для записи сообщений об ошибках и успешных операциях.

3. **Функция `read_xls_as_dict`:**
   - Принимает путь к Excel-файлу (`xls_file`),  опциональный путь к файлу JSON (`json_file`) и имя листа (`sheet_name`).
   - Проверяет существование Excel-файла. Если файл не найден, выводит сообщение об ошибке и возвращает `False`.
   - Читает Excel-файл с помощью `pd.ExcelFile`.
   - Если `sheet_name` не указан, считывает все листы в Excel-файле, конвертирует их в `dict` и возвращает его. В противном случае считывает указанный лист и конвертирует в `dict`.
   - Обрабатывает возможные ошибки чтения листа с помощью `try...except`. Если произошла ошибка, выводит сообщение об ошибке и возвращает `False`.
   - Если `json_file` указан, сохраняет полученные данные в JSON-файл.
   - Возвращает `data_dict` (словарь данных) или `False` в случае ошибки.

4. **Функция `save_xls_file`:**
   - Принимает данные в формате `Dict[str, List[Dict]]` (`data`) и путь к Excel-файлу (`file_path`).
   - Создает новый Excel-файл с помощью `pd.ExcelWriter`.
   - Для каждого листа в `data` создает `DataFrame` и сохраняет его в Excel-файл на соответствующем листе с помощью `to_excel`.
   - Обрабатывает возможные ошибки сохранения с помощью `try...except`, выводит сообщение об ошибке и возвращает `False`.
   - Возвращает `True` в случае успешного сохранения.


Пример использования
-------------------------
.. code-block:: python

    import json
    from hypotez.src.utils.xls import read_xls_as_dict, save_xls_file
    
    # Читаем данные из Excel-файла в JSON
    data = read_xls_as_dict('input.xlsx', 'output.json', 'Sheet1')
    if data:
        print(data)  # Печатаем получившиеся данные
    else:
        print("Ошибка чтения Excel-файла.")

    # Пример сохранения данных из JSON в Excel
    data_to_save = {'Sheet1': [{'column1': 'value1', 'column2': 'value2'}, {'column1': 'value3', 'column2': 'value4'}]}
    success = save_xls_file(data_to_save, 'output.xlsx')
    if success:
        print("Данные успешно сохранены в output.xlsx")
    else:
        print("Ошибка сохранения в Excel.")