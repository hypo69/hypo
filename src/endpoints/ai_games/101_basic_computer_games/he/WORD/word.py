"""
FROG:
=================
קושי: 5
-----------------
המשחק "צפרדע" הוא משחק קפיצות בו השחקן מנסה להגיע לצד השני של הנהר על ידי קפיצה מעל אבנים. בכל תור, השחקן בוחר לאיזה אבן לקפוץ, והמשחק קובע אם הקפיצה הצליחה, לאן הגיע השחקן, והאם הוא טבע. המשחק מסתיים כאשר השחקן הגיע לצד השני או טבע.

חוקי המשחק:
1. השחקן מתחיל בעמדה 1 (הצד האחד של הנהר).
2. הנהר מכיל 10 אבנים, המסומנות במספרים 2 עד 11.
3. השחקן צריך להגיע לאבן 12 (הצד השני של הנהר) כדי לנצח.
4. בכל תור, השחקן בוחר לאיזו אבן לקפוץ.
5. אם השחקן קופץ לאבן שקיימת, הוא מגיע אליה.
6. אם השחקן קופץ למקום לא קיים, הוא טבע.
7. אם השחקן מגיע לאבן 12, הוא ניצח.
-----------------
אלגוריתם:
1. הגדר את מיקום השחקן ההתחלתי כ-1.
2. הדפס הוראות משחק והצג את מיקום השחקן הנוכחי.
3. התחל לולאה "כל עוד השחקן לא הגיע לסוף ולא טבע":
    3.1 קבל קלט מהשחקן לאיזה אבן לקפוץ.
    3.2 אם הקלט אינו מספר, הדפס הודעת שגיאה וחזור לשלב 3.1.
    3.3 אם השחקן קפץ למקום שגדול מ 11 (כלומר צד שני של הנהר) - השחקן ניצח, צא מהלולאה.
    3.4 אם השחקן קפץ למקום קטן מ 2, השחקן טבע, צא מהלולאה.
    3.5 עדכן את מיקום השחקן למיקום אליו הוא קפץ.
    3.6 אם השחקן הגיע למקום 12, הוא ניצח, צא מהלולאה.
    3.7 הדפס את מיקום השחקן.
4. אם השחקן הגיע לצד השני, הדפס הודעת ניצחון.
5. אחרת (השחקן טבע), הדפס הודעה על טביעה.
6. סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializePosition["<p align='left'>אתחול מיקום:
    <code><b>
    playerPosition = 1
    </b></code></p>"]
    InitializePosition --> OutputInstructions["הדפס הוראות משחק"]
    OutputInstructions --> LoopStart{"תחילת לולאה: כל עוד לא ניצח או טבע"}
    LoopStart -- כן --> InputJump["קלט אבן לקפיצה: <code><b>jumpTo</b></code>"]
    InputJump --> ValidateInput{"בדיקה: <code><b>jumpTo</b></code> הוא מספר?"}
    ValidateInput -- לא --> OutputError["הצג הודעה: <b>קלט לא תקין</b>"]
    OutputError --> LoopStart
    ValidateInput -- כן --> CheckWin{"בדיקה: <code><b>jumpTo > 11</b></code>?"}
    CheckWin -- כן --> OutputWin["הצג הודעה: <b>ניצחת!</b>"]
    OutputWin --> End["סוף"]
    CheckWin -- לא --> CheckLose{"בדיקה: <code><b>jumpTo < 2</b></code>?"}
    CheckLose -- כן --> OutputLose["הצג הודעה: <b>טבעת!</b>"]
    OutputLose --> End
    CheckLose -- לא --> UpdatePosition["<code><b>playerPosition = jumpTo</b></code>"]
    UpdatePosition --> CheckFinalPosition{"בדיקה: <code><b>playerPosition == 12</b></code>?"}
    CheckFinalPosition -- כן --> OutputWin
     CheckFinalPosition -- לא --> OutputPosition["הצג מיקום: <code><b>playerPosition</b></code>"]
    OutputPosition --> LoopStart
     LoopStart -- לא --> End
```

Legenda:
    Start - התחלת התוכנית.
    InitializePosition - אתחול מיקום השחקן ל-1 (תחילת הנהר).
    OutputInstructions - הצגת הוראות המשחק לשחקן.
    LoopStart - תחילת הלולאה הראשית, כל עוד השחקן לא ניצח או טבע.
    InputJump - קבלת קלט מהמשתמש, לאיזו אבן לקפוץ (jumpTo).
    ValidateInput - בדיקה האם הקלט הוא מספר תקין.
    OutputError - הצגת הודעת שגיאה אם הקלט אינו מספר.
     CheckWin - בדיקה האם השחקן קפץ מעבר לנהר - ניצחון.
     OutputWin - הצגת הודעת ניצחון.
      End - סיום התוכנית.
    CheckLose - בדיקה האם השחקן קפץ למים - הפסד.
     OutputLose - הצגת הודעת הפסד - טביעה.
    UpdatePosition - עדכון מיקום השחקן למיקום שאליו קפץ.
     CheckFinalPosition - בדיקה האם השחקן הגיע לצד השני של הנהר.
    OutputPosition - הצגת מיקום השחקן הנוכחי.
"""

import sys

"""
הסברים:
המשחק FROG מדמה קפיצה של צפרדע על אבנים בנהר.
השחקן מתחיל במיקום 1 וצריך להגיע למיקום 12.
בכל תור, השחקן מזין את מספר האבן אליה הוא רוצה לקפוץ.
אם השחקן קופץ מעבר לאבנים או למים, הוא מפסיד.
"""

def play_frog_game():
    # מיקום התחלתי של השחקן
    playerPosition = 1

    # הדפסת הוראות למשתמש
    print("אתה צפרדע שצריכה לחצות נהר על ידי קפיצה על אבנים.")
    print("הנהר כולל 10 אבנים, ממספר 2 עד 11.")
    print("עליך להגיע לאבן 12 כדי לנצח.")
    print("אם תקפוץ מעבר לאבנים או למים - טבעת!")
    print("בחר לאיזו אבן אתה רוצה לקפוץ בכל תור.")

    # לולאת המשחק
    while True:
        print(f"אתה נמצא כרגע במיקום: {playerPosition}")
        try:
           # קבלת קלט מהמשתמש
            jumpTo = int(input("לאיזו אבן אתה רוצה לקפוץ? "))
        except ValueError:
            print("קלט לא תקין. אנא הזן מספר שלם.")
            continue

        # בדיקה האם השחקן ניצח
        if jumpTo > 11 :
            print("הגעת לצד השני של הנהר! ניצחת!")
            break

        # בדיקה האם השחקן טבע
        if jumpTo < 2:
            print("טבעת במים! הפסדת!")
            break

        # עדכון מיקום השחקן
        playerPosition = jumpTo
        if playerPosition == 12:
          print("הגעת לצד השני של הנהר! ניצחת!")
          break

if __name__ == "__main__":
    play_frog_game()

"""
הסבר מפורט לקוד:
1.  **ייבוא המודול `sys`**:
   - `import sys`: ייבוא המודול `sys`, שאינו בשימוש ישיר במשחק הנוכחי, אך ייתכן ויועיל במקרים אחרים.

2.  **פונקציה `play_frog_game()`**:
    - `def play_frog_game():`: הגדרת פונקציה המכילה את לוגיקת המשחק.
    - `playerPosition = 1`: אתחול מיקום הצפרדע ל-1, שהוא תחילת המסלול.

3.  **הדפסת הוראות משחק**:
    - הדפסת הסבר על המשחק, כולל מטרת המשחק (להגיע לאבן 12), כללי המשחק, וההשלכות של קפיצות שגויות.

4.  **לולאת המשחק `while True:`**:
    - לולאה אינסופית המאפשרת המשך משחק עד שהשחקן מנצח או מפסיד.

5.  **הצגת מיקום נוכחי וקבלת קלט מהמשתמש**:
    - הדפסת מיקום השחקן הנוכחי.
    -  `try...except ValueError`: בלוק try-except מטפל בשגיאות קלט אפשריות. אם המשתמש יזין משהו שאינו מספר שלם, יוצג הודעת שגיאה.
    - `jumpTo = int(input("לאיזו אבן אתה רוצה לקפוץ? "))`: קבלת קלט מהמשתמש, המציין לאיזו אבן הוא רוצה לקפוץ והמרתו למספר שלם.

6.  **בדיקת תנאי ניצחון**:
    - `if jumpTo > 11:`: בדיקה האם השחקן קפץ לאבן 12 או מעבר לה - ניצחון.
    - `print("הגעת לצד השני של הנהר! ניצחת!")`: הדפסת הודעת ניצחון.
     - `break`: סיום הלולאה אם השחקן ניצח.

7.  **בדיקת תנאי הפסד**:
    - `if jumpTo < 2:`: בדיקה האם השחקן קפץ למים.
    -  `print("טבעת במים! הפסדת!")`: הדפסת הודעת הפסד.
      - `break`: סיום הלולאה אם השחקן הפסיד.

8.  **עדכון מיקום השחקן**:
    -`playerPosition = jumpTo`: עדכון מיקום הצפרדע, למיקום שאליו קפץ.

9.  **בדיקה אם השחקן הגיע לצד השני של הנהר**:
   - `if playerPosition == 12:`: בדיקה האם השחקן הגיע לאבן 12 (ניצחון).
   - `print("הגעת לצד השני של הנהר! ניצחת!")`: הדפסת הודעה על ניצחון.
   - `break`: סיום הלולאה (והמשחק) אם המספר נוחש.

10. **הפעלת המשחק**:
    - `if __name__ == "__main__":`: בלוק זה מבטיח שהקוד ירוץ רק כאשר הסקריפט מופעל ישירות ולא כאשר הוא מיובא כמודול.
    - `play_frog_game()`: קריאה לפונקציה להפעלת המשחק.

"""
