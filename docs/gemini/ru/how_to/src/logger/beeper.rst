Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует класс `Beeper` для воспроизведения звуковых сигналов (бипов) в зависимости от уровня события. Класс использует библиотеки `winsound`, `time` и `asyncio`. Он определяет различные уровни событий (например, `INFO`, `WARNING`, `ERROR`) с соответствующими мелодиями, определёнными в `BeepLevel`.  Также реализован декоратор `silent_mode` для отключения звукового оповещения.

Шаги выполнения
-------------------------
1. **Импортирование библиотек:** Код импортирует необходимые библиотеки (`asyncio`, `winsound`, `time`, `enum`, `typing`).

2. **Определение констант:** Определяется переменная `MODE`, скорее всего, для обозначения режима работы.

3. **Определение `note_freq`:** Создается словарь `note_freq`, который хранит частоты различных музыкальных нот. Это необходимо для воспроизведения мелодии.

4. **Определение перечисления `BeepLevel`:** Определяется класс `Enum` с именами уровней событий (`SUCCESS`, `INFO`, `ATTENTION`, `WARNING`, `DEBUG`, `ERROR`, `LONG_ERROR`, `CRITICAL`, `BELL`). Каждый уровень сопоставлен с набором пар (нота, длительность) для воспроизведения мелодии.

5. **Определение класса `BeepHandler`:**  Класс `BeepHandler` обрабатывает уровни логов и вызывает соответствующие звуки.

6. **Определение декоратора `silent_mode`:** Декоратор `silent_mode` проверяет глобальную переменную `Beeper.silent` и пропускает вызов функции, если режим беззвучия включен.

7. **Определение класса `Beeper`:** Класс `Beeper` реализует методы для воспроизведения бипов.

8. **`@staticmethod` и `@silent_mode` в методе `beep`:** Метод `beep` класса `Beeper` принимает уровень события, частоту и длительность бипа. Если уровень события указан как строка, он конвертируется в соответствующий уровень `BeepLevel`. Далее, цикл проходит по мелодии для данного уровня, воспроизводит каждый звук `winsound.Beep` и ждет `time.sleep(0.0)`.

Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from hypotez.src.logger.beeper import Beeper, BeepLevel

    # Включение режима беззвучия
    Beeper.silent = True

    # Воспроизведение бипа для уровня INFO
    asyncio.run(Beeper.beep(BeepLevel.INFO))

    # Отключение режима беззвучия
    Beeper.silent = False


    # Обработчик для воспроизведения звуков в зависимости от уровня логирования
    class MyBeepHandler:
        def handle_log_message(self, record):
            Beeper.beep(record['level'])

    # Пример использования с обработчиком
    handler = MyBeepHandler()
    handler.handle_log_message({'level': BeepLevel.ERROR})