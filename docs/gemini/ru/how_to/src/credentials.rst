Как использовать класс ProgramSettings для загрузки учетных данных
=================================================================

Описание
-------------------------
Класс `ProgramSettings` предназначен для хранения и загрузки глобальных настроек проекта, включая пути, пароли, логины и настройки API.  Он реализован как синглтон, гарантируя, что существует только один экземпляр класса на протяжении всего выполнения программы.  Класс загружает данные из файла настроек `config.json` и учетные данные из базы данных KeePass.

Шаги выполнения
-------------------------
1. **Инициализация:** Создается экземпляр класса `ProgramSettings`:
   ```python
   gs: ProgramSettings = ProgramSettings()
   ```
2. **Поиск корневой директории проекта:**  Метод `set_project_root` находит корневую директорию проекта, начиная с текущей директории и двигаясь вверх по дереву директорий, пока не найдет директорию, содержащую указанные маркерные файлы (например, `pyproject.toml`, `requirements.txt`, `.git`).
3. **Загрузка настроек из файла `config.json`:** Класс загружает настройки из файла `config.json`, находящегося в директории `src` внутри корневой директории проекта.
4. **Загрузка учетных данных из KeePass:**
   - Метод `_open_kp` пытается открыть базу данных KeePass. В случае ошибки выполняется повторная попытка (с уменьшением количества попыток).
   - Если база данных открыта успешно, происходит итерация по разным типам учетных данных (Aliexpress, OpenAI, Gemini, Discord, Telegram, PrestaShop, SMTP, Facebook, GAPI) с использованием функций `_load_*_credentials`, чтобы извлечь соответствующие значения.  В каждой функции `_load_*_credentials` производится поиск определенных групп и записей в базе данных KeePass, а полученные значения сохраняются в атрибуте `credentials` объекта `ProgramSettings`.  Ключевой параметр здесь - проверка наличия необходимых данных.
5. **Настройка путей:** После загрузки данных, класс устанавливает необходимые пути к различным директориям проекта (src, bin, log, tmp, data, secrets, google_drive, external_storage). Эти пути хранятся в атрибуте `path`.
6. **Проверка наличия обновлений:** Вызывается функция `check_latest_release` для проверки наличия обновлений проекта. Если обновление есть, то происходит определенная обработка (не показана в примере, но предполагается).
7. **Установка дополнительных путей в `sys.path`:**  В зависимости от того, что присутствует в `sys.path`, происходит добавление новых бинарных каталогов (GTK, ffmpeg, graphviz, wkhtmltopdf) в `sys.path`.


Пример использования
-------------------------
```python
from hypotez.src.credentials import ProgramSettings

gs = ProgramSettings()  # Инициализация класса

# Доступ к загруженным данным
print(gs.credentials.aliexpress.api_key)  # Получение ключа API AliExpress
print(gs.path.secrets) # Путь к папке с секретными данными
print(gs.now()) # Получение текущей даты и времени
```
```
```
**Важно!** Пример использования предполагает, что вы уже настроили переменные окружения и подготовили необходимые файлы.  Необходимо также создать базу данных KeePass с соответствующей структурой для учетных данных.  Обратите внимание на обработку ошибок в методах `_open_kp` и `_load_*_credentials`.