"""
BAGLES:
=================
Сложность: 6
-----------------
Игра "Бейглы" - это логическая игра-головоломка, в которой игрок пытается угадать трехзначное число, составленное из неповторяющихся цифр. После каждой попытки игрок получает подсказки: "PICO" означает, что одна из цифр угадана и находится на правильной позиции, "FERMI" означает, что одна из цифр угадана, но не на правильной позиции, "BAGELS" означает, что ни одна из цифр не угадана.

Правила игры:
1. Компьютер генерирует случайное трехзначное число из неповторяющихся цифр.
2. Игрок вводит свои предположения в виде трехзначного числа.
3. Компьютер предоставляет подсказки:
    - "PICO" - одна цифра угадана и находится на правильной позиции.
    - "FERMI" - одна цифра угадана, но не на правильной позиции.
    - "BAGELS" - ни одна из цифр не угадана.
4. Подсказки выдаются в порядке расположения цифр в загаданном числе, например если загадано `123` и игрок ввел `142`, то подсказками будет `PICO FERMI`.
5. Игра продолжается до тех пор, пока игрок не угадает число.
6. Если после 10 попыток игрок не угадывает число, то игра заканчивается и выводится загаданное число.
-----------------
Алгоритм:
1. Сгенерировать случайное трехзначное число, состоящее из неповторяющихся цифр (например, 123).
2. Установить количество попыток равным 0.
3. Цикл "пока число не угадано или число попыток меньше 10":
    3.1. Увеличить количество попыток на 1.
    3.2. Запросить у игрока трехзначное число.
    3.3. Сравнить введенное число с загаданным и сгенерировать подсказки "PICO", "FERMI" и "BAGELS".
    3.4. Если число угадано, вывести сообщение о победе и количестве попыток.
    3.5. Если число не угадано, вывести сгенерированные подсказки.
4. Если после 10 попыток число не угадано, вывести загаданное число и сообщение о проигрыше.
5. Конец игры.
-----------------

"""
import random

def generate_secret_number():
    """Генерирует случайное трехзначное число с неповторяющимися цифрами."""
    digits = list(range(10))  # Создаем список цифр от 0 до 9
    random.shuffle(digits)   # Перемешиваем цифры случайным образом
    secret_number = str(digits[0]) + str(digits[1]) + str(digits[2]) # Создаем трехзначное число и преобразуем в строку
    return secret_number

def get_clues(secret_number, user_guess):
    """Генерирует подсказки PICO, FERMI и BAGELS."""
    clues = []
    for i in range(3): # Перебираем по индексам символы чисел
        if user_guess[i] == secret_number[i]: # Если цифра угадана и стоит на своем месте
            clues.append("PICO")
        elif user_guess[i] in secret_number:  # Если цифра угадана, но стоит не на своем месте
            clues.append("FERMI")
    if not clues:   # Если не найдено ни одной подсказки
        return ["BAGELS"]
    return clues

def play_bagels():
    """Основная логика игры Бейглы."""
    secret_number = generate_secret_number()  # Генерируем секретное число
    number_of_guesses = 0 # Инициализируем количество попыток
    
    print("Я загадал трехзначное число, состоящее из неповторяющихся цифр.")
    print("Попробуй угадать его. \nПодсказки:")
    print("PICO - цифра на правильном месте, FERMI - цифра есть, но не на месте, BAGELS - ничего не угадано")
    
    while number_of_guesses < 10:  # Основной игровой цикл
        number_of_guesses += 1 # Увеличиваем счетчик попыток
        
        while True:
            user_guess = input(f"Попытка №{number_of_guesses}. Введите трехзначное число: ") # Получаем ввод пользователя
            if len(user_guess) == 3 and user_guess.isdigit(): # Проверяем валидность введенных данных
               break # Завершаем цикл, если ввод валидный
            else:
               print("Пожалуйста, введите трехзначное число!") # Повторяем запрос, если ввод не валидный
        
        if user_guess == secret_number: # Проверяем, угадал ли пользователь число
            print(f"Поздравляю! Вы угадали число за {number_of_guesses} попыток!")
            return # Завершаем игру, если угадали
        else:
            clues = get_clues(secret_number, user_guess) # Получаем подсказки
            print(" ".join(clues)) # Выводим подсказки пользователю
    
    print(f"Вы проиграли. Загаданное число было: {secret_number}")  # Выводим загаданное число, если не угадали за 10 попыток

if __name__ == "__main__":
    play_bagels() # Запуск игры
```
```
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.

2. **Функция `generate_secret_number()`**:
   - Эта функция генерирует секретное трехзначное число, используя неповторяющиеся цифры.
   - `digits = list(range(10))`: Создает список цифр от 0 до 9.
   - `random.shuffle(digits)`: Перемешивает цифры случайным образом.
   - `secret_number = str(digits[0]) + str(digits[1]) + str(digits[2])`: Собирает первые три цифры из перемешанного списка и преобразует их в строку.
   - `return secret_number`: Возвращает полученное секретное число в виде строки.

3. **Функция `get_clues(secret_number, user_guess)`**:
   - Эта функция сравнивает пользовательское предположение с секретным числом и генерирует подсказки.
   - `clues = []`: Инициализирует список для хранения подсказок.
   - Цикл `for i in range(3)`: Проходит по каждой цифре в трехзначном числе.
      - `if user_guess[i] == secret_number[i]`: Проверяет, если цифра угадана и находится на правильной позиции, добавляет "PICO" в список подсказок.
      - `elif user_guess[i] in secret_number`: Если цифра присутствует в секретном числе, но не на своем месте, добавляет "FERMI" в список подсказок.
   - `if not clues`: Если нет подсказок (цифры не совпадают), возвращает список с единственной подсказкой "BAGELS".
   - `return clues`: Возвращает список подсказок.

4.  **Функция `play_bagels()`**:
    -  `secret_number = generate_secret_number()`: Генерирует секретное число с помощью функции `generate_secret_number()`.
    - `number_of_guesses = 0`: Инициализирует счетчик попыток.
    - Выводится приветственное сообщение и описание подсказок.
    - Цикл `while number_of_guesses < 10`: Основной игровой цикл, выполняющийся, пока количество попыток меньше 10.
       - `number_of_guesses += 1`: Увеличивает количество попыток.
       - Внутренний цикл `while True` для получения и проверки ввода от пользователя.
         - `user_guess = input(f"Попытка №{number_of_guesses}. Введите трехзначное число: ")`: Запрашивает ввод от пользователя.
         - `if len(user_guess) == 3 and user_guess.isdigit()`: Проверяет, является ли ввод трехзначным числом. Если да, то выходим из цикла.
         - `else`: Если ввод неверный, выводится сообщение об ошибке и цикл повторяется.
        - `if user_guess == secret_number`: Проверяет, угадано ли число.
         - Выводит сообщение о победе и завершает игру.
        -  `else`: Если число не угадано:
          - `clues = get_clues(secret_number, user_guess)`: Получает подсказки с помощью функции `get_clues()`.
          - `print(" ".join(clues))`: Выводит полученные подсказки.
    - Если цикл завершается (игрок не угадывает число за 10 попыток), выводит сообщение о проигрыше и загаданное число.

5. **Запуск игры**:
   - `if __name__ == "__main__":`: Проверяет, запущен ли скрипт напрямую.
   - `play_bagels()`: Вызывает функцию `play_bagels()` для начала игры.
```