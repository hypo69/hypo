Как использовать класс TinyFactory
========================================================================================

Описание
-------------------------
Этот код определяет базовый класс `TinyFactory` и производный класс `TinyPersonFactory` для создания и управления объектами.  `TinyFactory` служит основой для различных типов фабрик, упрощая расширение системы, особенно в отношении кэширования транзакций.  `TinyPersonFactory` специализируется на создании объектов `TinyPerson` с использованием OpenAI.  Класс предоставляет статические методы для управления списком всех созданных фабрик (добавление, удаление, получение).  Также реализованы механизмы кэширования состояния фабрики.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Импортируются необходимые модули (`os`, `json`, `chevron`, `logging`, `copy`, `openai_utils`, `TinyPerson`, `utils`, `transactional`).
2. **Определение класса `TinyFactory`**:
    * Создается словарь `all_factories` для хранения всех созданных фабрик.
    * Конструктор `__init__` инициализирует фабрику, устанавливает имя фабрики и ID симуляции, добавляет её в список `all_factories`.
    * Метод `__repr__` возвращает строковое представление фабрики.
    * Статический метод `set_simulation_for_free_factories` устанавливает симуляцию для фабрик, у которых `simulation_id` равно `None`.
    * Статический метод `add_factory` добавляет фабрику в глобальный список `all_factories`.  Проверяется уникальность имени.
    * Статический метод `clear_factories` очищает список `all_factories`.
    * Методы `encode_complete_state` и `decode_complete_state` обеспечивают сериализацию и десериализацию состояния фабрики, важные для кэширования.
3. **Определение класса `TinyPersonFactory`**:
    * Конструктор `__init__` инициализирует `TinyPersonFactory`, используя родительский конструктор `TinyFactory`.
    * Статический метод `generate_person_factories` генерирует список `TinyPersonFactory` объектов с использованием OpenAI. Получает `number_of_factories` и `generic_context_text` в качестве аргументов. Выполняет запросы к OpenAI, используя шаблон запроса.  Возвращает список созданных фабрик.
    * Метод `generate_person` генерирует `TinyPerson` объект с использованием OpenAI на основе контекста и возможных дополнительных характеристик (`agent_particularities`). Использование `chevron` для подстановки параметров в шаблон запроса.  Внутренняя функция `_aux_model_call`  делает вызов к OpenAI и обрабатывает транзакции. Важно для корректного кэширования. Использует декоратор `@transactional` для кэширования вызовов OpenAI.
4. **Метод `_setup_agent`**: Настраивает `TinyPerson` объект с использованием предоставленных параметров.


Пример использования
-------------------------
.. code-block:: python

    import os
    # ... (импорты из кода)

    # Пример создания TinyPersonFactory
    context_text = "Описание контекста"
    factory = TinyPersonFactory(context_text, simulation_id="sim_123")

    # Пример генерации нескольких TinyPersonFactory объектов
    factories = TinyPersonFactory.generate_person_factories(5, context_text)
    
    if factories:
        for factory in factories:
            person = factory.generate_person(agent_particularities="Дружелюбный")
            if person:
                print(person)
    else:
        print("Ошибка генерации фабрик.")