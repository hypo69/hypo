Как использовать этот блок кода
========================================================================================

Описание
-------------------------
Этот блок кода содержит конфигурацию для взаимодействия с сервисами OpenAI или Azure OpenAI. Он определяет типы API, параметры модели, ограничения времени, попыток, а также параметры кеширования и логгирования.  Конфигурация также включает настройки предотвращения вредного контента и нарушения авторских прав.

Шаги выполнения
-------------------------
1. **Выбор типа API**:  Параметр `API_TYPE` определяет, какой API использовать - OpenAI (`openai`) или Azure OpenAI (`azure`).
2. **Настройка параметров модели**: Параметры `MODEL`, `MAX_TOKENS`, `TEMPERATURE`, `FREQ_PENALTY`, `PRESENCE_PENALTY` настраивают модель обработки текста, количество токенов, температуру генерации, штрафы за частоту и присутствие слов.
3. **Определение временных ограничений**:  Параметры `TIMEOUT`, `MAX_ATTEMPTS` и `WAITING_TIME` устанавливают временные ограничения для запросов к API, количество попыток и время ожидания между ними.
4. **Настройка экспоненциального отката**: `EXPONENTIAL_BACKOFF_FACTOR` определяет темп увеличения времени ожидания при ошибках.
5. **Выбор модели встраивания**: Параметр `EMBEDDING_MODEL` определяет модель для встраивания текстов.
6. **Включение/выключение кеширования**: Параметр `CACHE_API_CALLS` включает/выключает кеширование API вызовов.
7. **Указание имени файла кеша**: Параметр `CACHE_FILE_NAME` определяет имя файла для сохранения кеша.
8. **Определение максимальной длины отображаемого контента**: Параметр `MAX_CONTENT_DISPLAY_LENGTH` устанавливает максимальную длину текста, отображаемого в приложении.
9. **Настройка предотвращения вредного контента**: Параметры `RAI_HARMFUL_CONTENT_PREVENTION` и `RAI_COPYRIGHT_INFRINGEMENT_PREVENTION`  включают механизмы защиты от генерирования вредного контента и нарушения авторских прав.
10. **Настройка уровня логгирования**: Параметр `LOGLEVEL` определяет уровень подробности логгирования.

Пример использования
-------------------------
.. code-block:: python

    import configparser

    # Загрузка конфигурации
    config = configparser.ConfigParser()
    config.read('config.ini')

    # Получение значения параметра MODEL
    model = config.get('OpenAI', 'MODEL')
    print(f"Используемая модель: {model}")

    # Получение значения параметра MAX_TOKENS
    max_tokens = config.getint('OpenAI', 'MAX_TOKENS')
    print(f"Максимальное количество токенов: {max_tokens}")