Как использовать функцию crawl_categories_async
========================================================================================

Описание
-------------------------
Функция `crawl_categories_async` асинхронно обходит категории на сайте, рекурсивно собирая их в иерархический словарь. Она принимает URL страницы, глубину рекурсии, WebDriver Selenium, XPath-локатор для поиска ссылок на категории, файл для сохранения данных, ID категории по умолчанию и опциональный словарь категории. Функция возвращает иерархический словарь, содержащий URL и названия категорий, а также информацию о связанных категориях.  Она обрабатывает ошибки и логирует их в случае неудачи.

Шаги выполнения
-------------------------
1. **Проверка начальных данных**: Если переданный параметр `category` равен `None`, то создается новый словарь категории со стандартными полями (url, name, presta_categories, children).
2. **Базовый случай**: Если глубина рекурсии `depth` равна или меньше 0, функция возвращает текущий словарь `category`.
3. **Получение страницы**: Функция `driver.get(url)` загружает страницу по указанному URL. Функция `asyncio.sleep(1)` ожидает загрузки страницы, чтобы избежать ошибок.
4. **Поиск ссылок на подкатегории**: Функция `driver.execute_locator(locator)` находит все ссылки на подкатегории на странице, используя XPath-локатор. Если ссылки не найдены, функция возвращает текущий словарь `category` и логирует ошибку.
5. **Рекурсивный вызов**: Для каждой найденной ссылки на подкатегорию функция `crawl_categories_async` вызывается рекурсивно с уменьшенной глубиной рекурсии. Создается новый словарь `new_category` для каждой подкатегории, содержащий её URL, имя и другие данные.  Перед рекурсивным вызовом функция `_is_duplicate_url` проверяет, не является ли текущая ссылка дубликатом уже посещенной ссылки, предотвращая повторное сканирование одних и тех же страниц.
6. **Обработка ошибок**: Функция заключена в блок `try...except`, обрабатывающий возможные ошибки при выполнении операций. В случае возникновения ошибки функция логирует её и возвращает текущий словарь `category`.
7. **Сборка данных**:  Все результаты рекурсивных вызовов собираются в задаче `asyncio.gather(*tasks)`.
8. **Возврат результата**: Функция возвращает итоговый словарь `category`, содержащий иерархическую структуру найденных категорий.

Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from selenium import webdriver
    from hypotez.src.category.category import Category  # Импортируем класс

    # ... (Ваш код для инициализации драйвера и получения других параметров) ...

    async def main():
        driver = webdriver.Chrome()
        api_credentials = {"username": "your_username", "password": "your_password"}
        category_instance = Category(api_credentials)
        url = "your_url"
        depth = 2
        locator = "//a[@class='category-link']/@href"  # Пример XPath локатора
        dump_file = "categories.json"
        id_category_default = 123  # ID вашей категории по умолчанию

        result = await category_instance.crawl_categories_async(url, depth, driver, locator, dump_file, id_category_default)
        print(result)

        driver.quit()

    if __name__ == "__main__":
        asyncio.run(main())