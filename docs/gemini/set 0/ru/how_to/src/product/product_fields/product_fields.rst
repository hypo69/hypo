Как использовать класс ProductFields
=========================================================================================

Описание
-------------------------
Класс `ProductFields` предназначен для работы с полями товаров в формате API PrestaShop. Он позволяет получать и устанавливать значения полей, соответствующих столбцам таблицы `ps_product` и `ps_product_lang` в базе данных PrestaShop. Класс обрабатывает многоязычные поля, формируя для них соответствующие структуры данных.  Он также предоставляет методы для работы с дополнительными полями, такими как URL изображений.

Шаги выполнения
-------------------------
1. **Импортировать необходимый модуль:**
   ```python
   from hypotez.src.product.product_fields.product_fields import ProductFields
   ```
2. **Создать экземпляр класса `ProductFields`:**
   ```python
   product_fields = ProductFields()
   ```
   Этот шаг инициализирует класс, загружая список полей из файла `fields_list.txt` и дефолтные значения из `product_fields_default_values.json`. Проверяет корректность загрузки.
3. **Установить значения полей:**
   Для установки значения поля, воспользуйтесь методом `setter` (методом с именем поля, но с суффиксом `setter`, например, `product_fields.id_product = 123`). Обратите внимание, что тип данных для `setter` зависит от типа поля в базе данных PrestaShop. В коде приведены примеры с разными типами данных.
4. **Получить значения полей:**
   Для получения значения поля, используйте `getter` (метод с именем поля, например, `product_fields.id_product`).
5. **Работа с многоязычными полями:**
    Для многоязычных полей (например, `name`, `description`), значения устанавливаются и извлекаются в виде словарей, содержащих список словарей. Каждый внутренний словарь содержит атрибут `id` (идентификатор языка) и `value` (значение).  Язык по умолчанию обычно 'en'. Обратите внимание на специальные методы для работы с `description`, `description_short` и др.
6. **Работа с дополнительными полями:**
   Для дополнительных полей, таких как URL изображений, используйте соответствующие методы `setter` и `getter`.
7. **Обработка ошибок:**
   Класс содержит обработку исключений, которые могут возникнуть при работе с базами данных или файлами, что предотвращает внезапное завершение работы приложения.
8. **Установка кода языка (для мультиязычности):**
    Метод `product_fields.page_lang = 'en'` или `product_fields.page_lang = 'ru'` устанавливает код языка, с которого считываются данные. Это необходимо для правильного формирования многоязычных значений.

Пример использования
-------------------------
```python
from hypotez.src.product.product_fields.product_fields import ProductFields
from datetime import date

product_fields = ProductFields()

# Установка значения для поля id_product
product_fields.id_product = 1001

# Установка значения для поля name (многоязычное)
product_fields.name = "Product Name", 'ru'

# Установка значения для поля description (многоязычное)
product_fields.description = "Product description", 'ru'

# Установка значения для поля price
product_fields.price = 19.99

# Установка значения даты
product_fields.available_date = date(2024, 10, 26)


# Получение значений полей
product_id = product_fields.id_product
product_name = product_fields.name
product_price = product_fields.price
available_date = product_fields.available_date


print(f"ID продукта: {product_id}")
print(f"Название продукта: {product_name}")
print(f"Цена продукта: {product_price}")
print(f"Дата доступности: {available_date}")
```
```
```
```


```
**Важно:**  Приведенный пример - упрощённый.  Для корректного использования вам потребуется установить значения для всех необходимых полей, учитывая их типы и специфику.  Обратите внимание на документацию каждого отдельного метода `setter` и `getter` для точного понимания параметров и ожидаемого формата данных.