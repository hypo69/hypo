Инструкции по использованию бота для обучения и тестирования модели
=================================================================

Описание
-------------------------
Данный документ содержит инструкции по использованию Discord бота для обучения и тестирования обученной модели.  Документ включает шаги по запуску бота, подготовке данных, выполнению команды обучения, мониторингу процесса, тестированию и управлению данными.

Шаги выполнения
-------------------------
1. **Проверка работы бота**: Убедитесь, что бот запущен и успешно подключен к Discord.  В консоли должно быть сообщение о входе в систему.
   Пример:
   ```plaintext
   Logged in as YourBotName#1234
   ```

2. **Добавление бота на сервер**:  Убедитесь, что бот добавлен на нужный сервер Discord и имеет необходимые разрешения для чтения и отправки сообщений.

3. **Подготовка данных для обучения**: Подготовьте данные для обучения, которые могут быть в виде текстового массива или в файле.
    * **Обучение с текстовыми данными**: Подготовьте строку с текстовыми данными для обучения.
    * **Обучение с файлом**: Подготовьте файл с обучающими данными, который должен быть доступен на локальной машине.

4. **Использование команды обучения**: Используйте команду `!train` для обучения модели.
    * **Метод 1: Использование текстовых данных напрямую**:
        В канале Discord, где есть доступ к боту, введите команду:
        ```plaintext
        !train "Ваши обучающие данные здесь" positive=True
        ```
        Пример:
        ```plaintext
        !train "Пример обучающих данных" positive=True
        ```
    * **Метод 2: Загрузка файла**:
        Прикрепите файл с обучающими данными к сообщению. В том же сообщении введите команду:
        ```plaintext
        !train positive=True
        ```
        Пример:
        ```plaintext
        !train positive=True
        ```
        Бот сохранит файл и начнёт обучение модели с предоставленными данными.

5. **Мониторинг обучения**: После отправки команды обучения бот должен отправить сообщение о статусе обучения:
   ```plaintext
   Обучение модели начато. ID задачи: <job_id>
   ```

6. **Проверка статуса обучения**: Если необходимо, добавьте дополнительные команды к боту для проверки статуса задачи обучения.  Это обычно включает запросы к объекту модели для получения статуса задачи.

7. **Тестирование модели**: После обучения модели, протестируйте её, используя команду `!test` с тестовыми данными в формате JSON.
    В канале Discord, где есть доступ к боту, введите команду:
    ```plaintext
    !test {"ключ_теста": "значение_теста"}
    ```
    Пример:
    ```plaintext
    !test {"ввод": "Тестовые данные ввода"}
    ```
    Бот ответит с прогнозами модели.


8. **Использование дополнительных команд**: Бот поддерживает другие команды, такие как архивирование файлов и выбор наборов данных.  Используйте эти команды для управления данными и моделью.
    * **Архивирование файлов**:
        ```plaintext
        !archive <путь_к_каталогу>
        ```
        Пример:
        ```plaintext
        !archive /путь/к/каталогу
        ```
    * **Выбор набора данных**:
        ```plaintext
        !select_dataset <путь_к_каталогу_положительных_данных> positive=True
        ```
        Пример:
        ```plaintext
        !select_dataset /путь/к/данным_положительных_примеров positive=True
        ```


9. **Добавление команды вопросов и ответов**:  Чтобы взаимодействовать с обученной моделью через бота, добавьте команду, позволяющую пользователям задавать вопросы и получать ответы. 
   * **Задайте вопрос**: В канале Discord, где есть доступ к боту, введите команду:
      ```plaintext
      !ask Что такое столица Франции?
      ```
   * **Получите ответ**: Бот ответит с ответом модели:
      ```plaintext
      Ответ модели: Столица Франции - Париж.
      ```


Пример использования (команда `!train` с текстовыми данными)
-------------------------
.. code-block:: python

    # ... (ваш код для обработки команды !train) ...
    if message.content.startswith('!train'):
        data = message.content.split(" ")[1]
        # ... (код для обработки параметров, например positive=True) ...
        # ... (код для обучения модели с использованием data) ...
```