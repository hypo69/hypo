Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber` для сбора данных о товарах с сайта `hb.co.il`.  Класс наследуется от базового класса `Grbr` и предоставляет функции для извлечения различных полей товара.  Класс реализует асинхронную функцию `grab_page` для сбора информации о товаре. Внутри функции `grab_page` используется вспомогательная функция `fetch_all_data`, которая вызывает множество других функций для получения значений отдельных полей.  Код поддерживает обработку предварительных действий с помощью декоратора `close_pop_up`, который (по умолчанию) закрывает всплывающие окна.  В реализации предусмотрены аргументы для перечисления методов, которые нужно запустить.


Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует различные модули, включая `asyncio`, `Path`, `SimpleNamespace`, `pydantic`, `webdriver`, и другие, необходимые для работы с веб-драйвером и обработкой данных.

2. **Определение класса `Graber`:** Создается класс `Graber`, наследующийся от класса `Grbr`. В `__init__` инициализируется `supplier_prefix`.

3. **Инициализация драйвера:** В конструкторе класса `Graber` передается экземпляр веб-драйвера.  Он используется для взаимодействия с браузером.

4. **Определение асинхронной функции `grab_page`:** Эта функция предназначена для получения данных о товаре.

5. **Вызов функций для сбора данных:** Внутри функции `grab_page` вызывается функция `fetch_all_data`, которая, в свою очередь, вызывает функции, извлекающие значения отдельных полей. Вызов каждой из этих функций осуществляется с переданными в `fetch_all_data` значениями.

6. **Возврат данных:** Функция `grab_page` возвращает объект `ProductFields`, содержащий собранные данные.


Пример использования
-------------------------
.. code-block:: python

    from src.suppliers.hb.graber import Graber
    from src.webdriver import Driver

    async def main():
        # Инициализация веб-драйвера (предполагается, что у вас есть функциональный веб-драйвер)
        driver = Driver()
        await driver.start_browser()


        # Создание экземпляра класса Graber
        graber = Graber(driver)
        
        # Пример использования, передача словаря с нужными полями
        try:
            product_fields = await graber.grab_page(driver, id_product='123')
            # Обработка полученных данных
            print(product_fields.name)
            print(product_fields.description_short)
        except Exception as e:
            print(f"Ошибка: {e}")


        await driver.close_browser()

    if __name__ == "__main__":
        asyncio.run(main())