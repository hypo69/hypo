"""
NIKOMA:
=================
Сложность: 6
-----------------
Игра "Никома" - это игра в угадывание числа, в которой игрок пытается угадать число от 1 до 100, загаданное компьютером. Игроку дается ограниченное количество попыток. После каждой попытки игрок получает подсказку "Слишком высоко" или "Слишком низко".

Правила игры:
1.  Компьютер загадывает случайное число в диапазоне от 1 до 100.
2.  Игроку дается 7 попыток для угадывания числа.
3.  После каждой попытки компьютер сообщает, является ли введенное число слишком высоким или слишком низким.
4.  Если игрок угадывает число, то игра заканчивается.
5.  Если игрок не угадывает число за 7 попыток, то игра заканчивается, и сообщается загаданное число.
-----------------
Алгоритм:
1. Установить количество попыток равным 7.
2. Сгенерировать случайное число в диапазоне от 1 до 100.
3. Начать цикл с количеством попыток:
  3.1 Запросить у игрока ввод числа.
  3.2 Если введенное число равно загаданному числу, перейти к шагу 5.
  3.3 Если введенное число меньше загаданного числа, вывести сообщение "TOO LOW".
  3.4 Если введенное число больше загаданного числа, вывести сообщение "TOO HIGH".
  3.5 Если количество попыток равно 0, перейти к шагу 6.
4. Повторить шаг 3.
5. Вывести сообщение "YOU GOT IT!".
6. Вывести сообщение "SORRY, THE NUMBER WAS {загаданное число}".
7. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfTries = 7<br>
    targetNumber = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: <code><b>numberOfTries > 0</b></code>"}
    LoopStart -- Да --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess < targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> DecreaseTries["<code><b>numberOfTries = numberOfTries - 1</b></code>"]
     DecreaseTries --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> DecreaseTries
    LoopStart -- Нет --> OutputLose["Вывод сообщения: <b>SORRY, THE NUMBER WAS <code>{targetNumber}</code></b>"]
    OutputLose --> End
```
**Legenda:**
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfTries (количество попыток) устанавливается в 7, а targetNumber (загаданное число) генерируется случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока количество попыток numberOfTries больше 0.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
    DecreaseTries - Уменьшение количества попыток numberOfTries на 1.
    OutputLose - Вывод сообщения о проигрыше и загаданном числе, если попытки закончились.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
import random

# Инициализация количества попыток
numberOfTries = 7
# Генерируем случайное число от 1 до 100
targetNumber = random.randint(1, 100)

# Основной игровой цикл, пока есть попытки
while numberOfTries > 0:
    # Запрашиваем ввод числа у пользователя
    try:
        userGuess = int(input("Угадай число от 1 до 100 (осталось попыток: " + str(numberOfTries) + "): "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверяем, угадано ли число
    if userGuess == targetNumber:
        print("ПОЗДРАВЛЯЮ! Вы угадали число!")
        break  # Завершаем цикл, если число угадано
    elif userGuess < targetNumber:
        print("Слишком низко")  # Сообщаем, что загаданное число больше
    else:
        print("Слишком высоко")  # Сообщаем, что загаданное число меньше
    
    numberOfTries -= 1 # Уменьшаем количество попыток

# Если попытки закончились, выводим сообщение о проигрыше
if numberOfTries == 0:
    print(f"К сожалению, вы не угадали. Загаданное число было {targetNumber}")

"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Инициализация переменных**:
    -   `numberOfTries = 7`:  Инициализирует переменную `numberOfTries` для отслеживания количества оставшихся попыток.
    -   `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в `targetNumber`.
3.  **Основной цикл `while numberOfTries > 0:`**:
    -   Цикл продолжается до тех пор, пока у игрока есть попытки (пока `numberOfTries` больше 0).
    -   **Ввод данных**:
        -    `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -  `userGuess = int(input("Угадай число от 1 до 100 (осталось попыток: " + str(numberOfTries) + "): "))`: Запрашивает у пользователя число и преобразует его в целое число, сохраняя результат в `userGuess`. Также выводится текущее количество оставшихся попыток.
    -   **Условие победы**:
        -   `if userGuess == targetNumber:`: Проверяет, равно ли введенное число загаданному числу.
        -   `print("ПОЗДРАВЛЯЮ! Вы угадали число!")`: Выводит сообщение о победе.
        -   `break`: Завершает цикл (игру), если число угадано.
    -   **Подсказки**:
        - `elif userGuess < targetNumber:`: Проверяет, если введенное число меньше загаданного.
        - `print("Слишком низко")`: Выводит подсказку, что нужно ввести число больше.
        - `else:`: Если число не угадано и не меньше загаданного, то оно больше.
        - `print("Слишком высоко")`: Выводит подсказку, что нужно ввести число меньше.
    -   `numberOfTries -= 1`: Уменьшает количество оставшихся попыток на 1.
4. **Проигрыш**:
    -   `if numberOfTries == 0:`: Проверяет, закончились ли попытки.
    -   `print(f"К сожалению, вы не угадали. Загаданное число было {targetNumber}")`: Выводит сообщение о проигрыше и загаданное число.
"""
