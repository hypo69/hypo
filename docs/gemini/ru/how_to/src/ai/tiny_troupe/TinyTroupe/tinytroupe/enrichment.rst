Как использовать класс TinyEnricher
========================================================================================

Описание
-------------------------
Класс `TinyEnricher` отвечает за обогащение контента с помощью LLM (большая языковая модель). Он принимает требования, исходный контент и дополнительные параметры, использует шаблоны сообщений для взаимодействия с LLM, получает ответ от модели и извлекает код из ответа.  Класс хранит кэш контекста для более эффективного использования предыдущих результатов.

Шаги выполнения
-------------------------
1. **Инициализация:** Создается экземпляр класса `TinyEnricher`. При необходимости, указывается флаг `use_past_results_in_context` для использования кэшированных результатов в контексте.
2. **Подготовка данных:** Формируются параметры для шаблонов сообщений LLM: `requirements`, `content`, `content_type`, `context_info`, `context_cache`.
3. **Создание сообщений:** Используются шаблоны `.mustache` файлов (`enricher.system.mustache`, `enricher.user.mustache`) и подготовленные данные для создания сообщений, которые будут переданы в LLM.
4. **Отправка сообщения в LLM:** Используется клиент `openai_utils` для отправки сообщений в LLM и получения ответа.  Температура (`temperature`) установлена в 0.4 для получения более разнообразных результатов.
5. **Обработка результата:**  Проверяется, получен ли ответ от LLM. Если да, извлекается код из содержимого ответа с помощью функции `utils.extract_code_block`.
6. **Возврат результата:** Возвращается извлеченный код или `None`, если ответ от LLM отсутствует.
7. **Логирование:** Записывается сообщение об обогащении в журнал с уровнем `debug`. Если параметр `verbose` установлен в `True`,  сообщение также выводится в стандартный вывод.


Пример использования
-------------------------
.. code-block:: python

    import os
    import json
    # ... (импорты, как в примере кода) ...

    # Инициализация класса
    enricher = TinyEnricher(use_past_results_in_context=True)

    # Требования
    requirements = "Generate Python code for calculating the sum of two numbers."

    # Исходный контент
    content = "Input two numbers"

    # Обогащение контента
    result = enricher.enrich_content(requirements, content, content_type="code", verbose=True)

    if result:
        print(f"Результат от LLM: \n{result}")
    else:
        print("Результат не получен.")