```MD
Как генерировать HTML-документацию для Python-кода
========================================================================================

Описание
-------------------------
Данный документ описывает инструкции по генерации HTML-документации для Python-файлов. Он охватывает форматирование документации, использование заголовков, списков, ссылок, а также структурированные описания классов, функций и методов с деталями параметров, возвращаемых значений и исключений.


Шаги выполнения
-------------------------
1. **Анализ Python-файла**: Проанализируйте входной Python-файл.
2. **Структура документации**:  Создайте HTML-документацию следуя шаблону, который включает:
    * **Заголовок (h1):**  Название модуля/класса.
    * **Обзор (h2):** Краткое описание содержимого модуля/класса.
    * **Классы (h2):**
        * Для каждого класса:
            * Заголовок (h3): Название класса.
            * Описание (p): Краткое описание класса.
            * Методы (p и ul):  Перечислить методы с краткими описаниями.  Структура описания метода аналогична описанию функции.
    * **Функции (h2):**
        * Для каждой функции:
            * Заголовок (h3): Название функции.
            * Описание (p): Краткое описание функции.
            * Параметры (p и ul):
                * Для каждого параметра:
                    * Имя параметра (в формате `param_name`), тип (в формате `type`), краткое описание.
                    * Указать, если параметр является необязательным (`optional`), и значение по умолчанию.
            * Возвращаемое значение (p и ul):  Тип результата, описание возвращаемого значения.
            * Исключения (p и ul):
                * Для каждого исключения:
                    * Название исключения (в формате `SomeError`) и описание ситуации, при которой оно возникает.


3. **Форматирование HTML**:  Используйте стандартные теги HTML для заголовков, списков и ссылок.
4. **Комментарии**: Используйте предопределенный формат документации в Python коде, который включает `Args`, `Returns`, `Raises`.  Например:


```python
def function(param: str, param1: Optional[str | dict | str] = None) -> dict | None:
    """
    Args:
        param (str): Описание параметра `param`.
        param1 (Optional[str | dict | str], optional): Описание параметра `param1`. Defaults to `None`.

    Returns:
        dict | None: Описание возвращаемого значения. Возвращает словарь или None.

    Raises:
        SomeError: Описание ситуации, при которой возникает исключение `SomeError`.
    """
    # ... тело функции ...
```


5. **Примеры**: Включите примеры использования, где необходимо.
6. **Обработка исключений**:  Используйте `ex` вместо `e` в блоках обработки исключений (например, `try...ex`).
7. **Уровни заголовков**: Согласовано использовать уровни заголовков (h1, h2, h3, h4) во всём файле.
8. **Содержание (TOC)**: В начале документации включить таблицу содержания со ссылками на все основные разделы.


Пример использования (HTML-фрагмент):
-------------------------
```html
<h1>Модуль ИмяМодуля</h1>

<h2>Обзор</h2>
<p>Краткое описание модуля.</p>

<h2>Классы</h2>

<h3>КлассИмя</h3>

<p><strong>Описание</strong>: Краткое описание класса.</p>

<p><strong>Методы</strong>:</p>
<ul>
  <li><code>методИмя</code>: Краткое описание метода.</li>
</ul>

<h2>Функции</h2>

<h3>ФункцияИмя</h3>

<p><strong>Описание</strong>: Краткое описание функции.</p>

<p><strong>Параметры</strong>:</p>
<ul>
  <li><code>параметр1</code> (str): Описание параметра.</li>
  <li><code>параметр2</code> (int, optional): Описание параметра. Значение по умолчанию 0.</li>
</ul>

<p><strong>Возвращаемое значение</strong>:</p>
<ul>
  <li><code>int</code>: Описание возвращаемого значения.</li>
</ul>

<p><strong>Исключения</strong>:</p>
<ul>
  <li><code>Ошибка1</code>: Описание ситуации, при которой возникает исключение.</li>
</ul>
```