"""
<SALVO>:
=================
Сложность: 4
-----------------
Игра "SALVO" представляет собой простую игру, в которой игрок пытается потопить корабли противника, делая ходы в виде координат на игровом поле 10x10. Компьютер случайно генерирует местоположение кораблей, и игрок должен угадать их координаты. Игра заканчивается, когда игрок потопит все корабли.
Правила игры:
1. Игровое поле 10x10.
2. На поле размещены 4 корабля по 1 клетке. Координаты кораблей определяются случайным образом в начале игры.
3. Игрок вводит координаты в виде двух чисел (x, y) в диапазоне от 1 до 10 включительно.
4. Если координаты совпадают с координатами корабля, корабль считается потопленным. 
5. После каждого хода игрока, отображается сообщение о результате ("HIT" или "MISS") и текущее количество оставшихся кораблей.
6. Игра заканчивается, когда все 4 корабля потоплены.
-----------------
Алгоритм:
1. Инициализация:
    - Задается количество кораблей (ships_total = 4)
    - Создается пустой список для хранения координат кораблей ship_locations.
    - Генерируются случайные координаты для каждого из 4 кораблей и помещаются в список ship_locations. Координаты представлены в виде кортежей (x, y)
    - Устанавливается количество потопленных кораблей ships_destroyed в 0.
2. Игровой цикл:
    - Пока количество потопленных кораблей ships_destroyed меньше, чем общее количество кораблей ships_total, выполняются следующие шаги:
        - Запрашивается ввод координат от игрока (x, y) в диапазоне от 1 до 10 включительно.
        - Проверяется, есть ли корабль по заданным координатам:
            - Если есть корабль по этим координатам (ship_hit),
                - Корабль удаляется из списка ship_locations.
                - Количество потопленных кораблей ships_destroyed увеличивается на 1.
                - Выводится сообщение "HIT".
            - Иначе, выводится сообщение "MISS".
        - Выводится количество оставшихся кораблей (ships_total - ships_destroyed).
3. Конец игры:
    - Когда количество потопленных кораблей ships_destroyed становится равным общему количеству кораблей ships_total, игра заканчивается.
    - Выводится сообщение "YOU SUNK ALL MY BATTLESHIPS!".
-----------------
Блок-схема:
```mermaid
    graph TD
        Start[Начало] --> Initialize[Инициализация игры];
        Initialize --> GameLoopStart{Цикл игры: ships_destroyed < ships_total?};
        GameLoopStart -- Yes --> InputCoords[Запрос координат];
        InputCoords --> CheckHit{Проверка на попадание?};
        CheckHit -- Yes --> ShipHit[Уничтожение корабля];
        ShipHit --> UpdateData[Обновление данных];
        UpdateData --> OutputHit[Вывод "HIT"];
        OutputHit --> OutputRemainingShips[Вывод оставшихся кораблей];
        OutputRemainingShips --> GameLoopStart;
        CheckHit -- No --> OutputMiss[Вывод "MISS"];
        OutputMiss --> OutputRemainingShips;
         GameLoopStart -- No --> EndGame[Конец игры];
        EndGame --> End[Конец];
```
"""
import random

def play_salvo():
    """
    Функция реализует игру "SALVO".
    """
    # 1. Инициализация
    ships_total = 4  # Общее количество кораблей
    ship_locations = [] # Список для хранения координат кораблей
    ships_destroyed = 0 # Количество потопленных кораблей

    # Генерация случайных координат для кораблей
    for _ in range(ships_total):
      while True:
            x = random.randint(1, 10)
            y = random.randint(1, 10)
            if (x, y) not in ship_locations:
              ship_locations.append((x, y))
              break
    
    # 2. Игровой цикл
    while ships_destroyed < ships_total:
      try:
        # Запрос координат от игрока
        x = int(input("Введите координату X (1-10): "))
        y = int(input("Введите координату Y (1-10): "))
        if not (1 <= x <= 10 and 1 <= y <= 10):
            print("Координаты должны быть в диапазоне от 1 до 10.")
            continue
      except ValueError:
            print("Некорректный ввод. Пожалуйста, введите целые числа.")
            continue
      
      ship_hit = False # флаг - был ли потоплен корабль в результате выстрела
      # Проверка, есть ли корабль по заданным координатам
      for i, (ship_x, ship_y) in enumerate(ship_locations):
        if x == ship_x and y == ship_y:
          ship_hit = True # Обнаружено попадание
          ship_locations.pop(i) # Удаляем корабль из списка
          ships_destroyed += 1 # Увеличиваем счетчик потопленных кораблей
          print("HIT")
          break # выходим из цикла поиска корабля
      
      if not ship_hit:
          print("MISS")

      # Вывод количества оставшихся кораблей
      remaining_ships = ships_total - ships_destroyed
      print(f"Осталось кораблей: {remaining_ships}")

    # 3. Конец игры
    print("YOU SUNK ALL MY BATTLESHIPS!")
# Запуск игры
if __name__ == "__main__":
    play_salvo()
"""
Пояснения:
1. **Инициализация переменных:**
   - `ships_total`: Хранит общее количество кораблей (4).
   - `ship_locations`: Список, хранящий координаты кораблей. Каждая координата представлена кортежем (x, y).
   - `ships_destroyed`: Количество потопленных кораблей.

2. **Генерация координат кораблей:**
   - Цикл `for _ in range(ships_total)`: Создает координаты для каждого корабля.
   - `while True:`: Бесконечный цикл, пока не будут сгенерированы уникальные координаты.
   - `random.randint(1, 10)`: Генерирует случайные координаты x и y от 1 до 10.
   - `if (x, y) not in ship_locations`: Проверяет, нет ли уже корабля на этих координатах. Если нет, то координаты добавляются в список `ship_locations` и цикл прерывается.

3. **Игровой цикл (`while ships_destroyed < ships_total`)**:
   - Этот цикл продолжается, пока не будут потоплены все корабли.
   - **Ввод координат игрока:**
     - `try-except` блок обрабатывает возможные ошибки ввода, гарантируя, что координаты будут целыми числами в допустимом диапазоне.
     - `input()`: Запрашивает у игрока координаты X и Y.
     - `int()`: Преобразует введенные строки в целые числа.
     - `if not (1 <= x <= 10 and 1 <= y <= 10)`: Проверяет, находятся ли координаты в пределах игрового поля.
   - **Проверка на попадание:**
     - `ship_hit = False`: Устанавливаем флаг, что попадания не было
     - Цикл `for i, (ship_x, ship_y) in enumerate(ship_locations)`: Перебираем координаты кораблей.
     - `if x == ship_x and y == ship_y`: Если координаты, введенные игроком, совпадают с координатами корабля:
       - `ship_hit = True`: Устанавливаем флаг, что корабль потоплен.
       - `ship_locations.pop(i)`: Удаляем корабль из списка, так как он был потоплен.
       - `ships_destroyed += 1`: Увеличиваем счетчик потопленных кораблей.
       - `print("HIT")`: Выводим сообщение о попадании.
       - `break`: Выходим из цикла поиска корабля.
    - `if not ship_hit:` : Если попадания не было
        - `print("MISS")`: Выводим сообщение о промахе.
   - **Вывод оставшихся кораблей:**
     - `remaining_ships = ships_total - ships_destroyed`: Вычисляем количество оставшихся кораблей.
     - `print(f"Осталось кораблей: {remaining_ships}")`: Выводим количество оставшихся кораблей.

4. **Конец игры:**
   - Когда `ships_destroyed` становится равным `ships_total`, цикл `while` завершается.
   - `print("YOU SUNK ALL MY BATTLESHIPS!")`: Выводится сообщение о победе.

5. **Запуск игры:**
   - `if __name__ == "__main__":`: Гарантирует, что функция `play_salvo()` будет вызвана только при прямом запуске скрипта.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'