<DIAMND>:
=================
קושי: 4
-----------------
המשחק "DIAMND" מדמה הדפסה של יהלום על המסך, כאשר השחקן קובע את גודל היהלום (גובהו). המשחק מציג יהלום באמצעות תווי כוכבית ('*'), כאשר גודל היהלום משתנה בהתאם לקלט שהמשתמש מזין.

חוקי המשחק:
1. השחקן מתבקש להזין מספר אי-זוגי חיובי, המייצג את גובה היהלום (מספר השורות במחצית העליונה והתחתונה של היהלום).
2. התוכנית יוצרת ומדפיסה יהלום באמצעות תווי כוכבית, כאשר כל שורה מודפסת במרכז השורה.
3. גודל היהלום תלוי במספר ששורות שהזין המשתמש.

-----------------
אלגוריתם:
1. בקש מהמשתמש להזין מספר אי-זוגי וחיובי, שמייצג את גובה היהלום. שמור את הערך במשתנה `height`.
2. וודא שהקלט תקין:
   -  בדוק שהמספר הוא אי-זוגי. אם לא, בקש מהמשתמש להזין שוב.
   -  בדוק שהמספר הוא חיובי. אם לא, בקש מהמשתמש להזין שוב.
3. הדפס את החלק העליון של היהלום:
    -  התחל לולאה מ-1 עד `height`, בקפיצות של 2 (לכל שורה).
       -  חשב את מספר הרווחים הדרוש לפני הכוכביות: `(height - i) / 2`
       -  הדפס רווחים, ואחריהם את מספר הכוכביות הנוכחי `i`.
4. הדפס את החלק התחתון של היהלום:
    -  התחל לולאה מ- `height - 2` עד 1, בקפיצות של -2 (בסדר יורד).
       -  חשב את מספר הרווחים הדרוש לפני הכוכביות: `(height - i) / 2`
       -  הדפס רווחים, ואחריהם את מספר הכוכביות הנוכחי `i`.
5. סיים את המשחק.

-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InputHeight["קלט: גובה היהלום (height)"]
    InputHeight --> ValidateHeight{"בדיקה: height > 0 וגם height % 2 != 0?"}
    ValidateHeight -- לא --> InputHeight
    ValidateHeight -- כן --> UpperDiamondLoopStart{"לולאה: i = 1 עד height בקפיצות של 2"}
    UpperDiamondLoopStart --> CalculateSpacesUpper["חישוב רווחים: (height - i) / 2"]
    CalculateSpacesUpper --> PrintUpperRow["הדפסת רווחים וכוכביות"]
    PrintUpperRow -->  UpperDiamondLoopEnd{"בסוף הלולאה?"}
    UpperDiamondLoopEnd -- לא --> UpperDiamondLoopStart
    UpperDiamondLoopEnd -- כן --> LowerDiamondLoopStart{"לולאה: i = height - 2 עד 1 בקפיצות של -2"}
    LowerDiamondLoopStart --> CalculateSpacesLower["חישוב רווחים: (height - i) / 2"]
    CalculateSpacesLower --> PrintLowerRow["הדפסת רווחים וכוכביות"]
    PrintLowerRow -->  LowerDiamondLoopEnd{"בסוף הלולאה?"}
    LowerDiamondLoopEnd -- לא --> LowerDiamondLoopStart
    LowerDiamondLoopEnd -- כן --> End["סוף"]
```

Legenda:
    Start - התחלת התוכנית.
    InputHeight - קבלת קלט מהמשתמש לגובה היהלום (height).
    ValidateHeight - בדיקה האם הקלט תקין (חיובי ואי-זוגי). אם לא, חוזרים לקלט.
    UpperDiamondLoopStart - תחילת לולאה ליצירת החלק העליון של היהלום.
    CalculateSpacesUpper - חישוב מספר הרווחים הדרושים לפני הכוכביות בחלק העליון.
    PrintUpperRow - הדפסת השורה הנוכחית של החלק העליון של היהלום.
    UpperDiamondLoopEnd - בדיקה אם הגענו לסוף הלולאה של החלק העליון.
   LowerDiamondLoopStart - תחילת לולאה ליצירת החלק התחתון של היהלום.
    CalculateSpacesLower - חישוב מספר הרווחים הדרושים לפני הכוכביות בחלק התחתון.
    PrintLowerRow - הדפסת השורה הנוכחית של החלק התחתון של היהלום.
    LowerDiamondLoopEnd - בדיקה אם הגענו לסוף הלולאה של החלק התחתון.
    End - סוף התוכנית.
"""
```python
def print_diamond():
    """
    הפונקציה מדפיסה יהלום על המסך, בהתאם לגובה שהמשתמש מכניס.
    הגובה חייב להיות מספר אי-זוגי וחיובי.
    """

    while True: # לולאה אינסופית עד שהמשתמש מזין קלט תקין
        try:
            height = int(input("הזן את גובה היהלום (מספר אי-זוגי וחיובי): "))
            if height <= 0: # בדיקה שהגובה חיובי
                print("הגובה חייב להיות מספר חיובי.")
                continue
            if height % 2 == 0: # בדיקה שהגובה אי-זוגי
                print("הגובה חייב להיות מספר אי-זוגי.")
                continue
            break # אם כל הבדיקות עברו, יוצאים מהלולאה

        except ValueError:
             print("אנא הזן מספר שלם.")


    # הדפסת החלק העליון של היהלום
    for i in range(1, height + 1, 2):  # לולאה מ 1 עד height בקפיצות של 2
        spaces = (height - i) // 2  # חישוב מספר הרווחים הנדרש
        print(" " * spaces + "*" * i) # הדפסת הרווחים והכוכביות

    # הדפסת החלק התחתון של היהלום
    for i in range(height - 2, 0, -2):  # לולאה מ-height - 2 עד 1 בקפיצות של -2
        spaces = (height - i) // 2  # חישוב מספר הרווחים הנדרש
        print(" " * spaces + "*" * i)  # הדפסת הרווחים והכוכביות


# קוד להרצת המשחק אם הוא מופעל ישירות
if __name__ == "__main__":
    print_diamond()
```
<הערות סיום>
הסבר מפורט לקוד:
1. **הגדרת הפונקציה `print_diamond()`**:
    - הפונקציה הזו מכילה את כל הלוגיקה ליצירת והדפסת היהלום.
2. **לולאת קלט ראשית `while True:`**:
    - הלולאה הזו רצה עד שהמשתמש מזין קלט תקין (מספר אי-זוגי וחיובי).
    - `try...except ValueError:`: מטפל בשגיאות קלט שבהן המשתמש מזין משהו שאינו מספר שלם.
    - `height = int(input(...))`: מבקש מהמשתמש להזין את גובה היהלום וממיר אותו למספר שלם.
    - `if height <= 0:`: בודק אם הגובה חיובי. אם לא, מדפיס הודעה וממשיך לסיבוב הבא של הלולאה.
    - `if height % 2 == 0:`: בודק אם הגובה אי-זוגי. אם לא, מדפיס הודעה וממשיך לסיבוב הבא של הלולאה.
    - `break`: אם כל הבדיקות עברו בהצלחה, יוצאים מהלולאה.
3. **הדפסת החלק העליון של היהלום**:
    - `for i in range(1, height + 1, 2):`: לולאת `for` שרצה מהמספר 1 עד לגובה היהלום, בקפיצות של 2 (כך שכל פעם מספר הכוכביות גדל ב-2).
    - `spaces = (height - i) // 2`: חישוב מספר הרווחים הנדרש לפני הכוכביות בכל שורה.
    - `print(" " * spaces + "*" * i)`: הדפסת מספר הרווחים והכוכביות המתאימים.
4. **הדפסת החלק התחתון של היהלום**:
    - `for i in range(height - 2, 0, -2):`: לולאת `for` שרצה מהמספר height - 2 עד 1, בקפיצות של -2 (כך שכל פעם מספר הכוכביות קטן ב-2).
     - `spaces = (height - i) // 2`: חישוב מספר הרווחים הנדרש לפני הכוכביות בכל שורה.
    - `print(" " * spaces + "*" * i)`: הדפסת מספר הרווחים והכוכביות המתאימים.
5. **הפעלת המשחק**:
   - `if __name__ == "__main__":`: מבטיח שהפונקציה `print_diamond()` תופעל רק כאשר הסקריפט מופעל ישירות, ולא כאשר הוא מיובא כמודול.
   - `print_diamond()`: קריאה לפונקציה המגדירה את המשחק.
</הערות סיום>
