Как использовать этот блок кода
========================================================================================

Описание
-------------------------
Этот код определяет функцию `set_project_root`, которая находит корневую директорию проекта, начиная с текущего файла. Он ищет файлы `pyproject.toml`, `requirements.txt`, и `.git` в родительских директориях, пока не найдет директорию, содержащую хотя бы один из них.  Если корневая директория найдена, то путь к ней добавляется в `sys.path`, что позволяет импортировать модули из других директорий проекта.  Код также загружает конфигурацию из файла `config.json` и документацию из `README.MD` в переменные `config` и `doc_str`, и инициализирует переменные, связанные с проектом (название, версия, автор, и т.д.), используя эти данные.

Шаги выполнения
-------------------------
1. **Определяет функцию `set_project_root`**:  Функция `set_project_root` принимает кортеж `marker_files` с именами файлов, которые используются для поиска корневой директории проекта.
2. **Находит корневую директорию проекта**: Начиная с текущей директории, функция ищет родительские директории, проверяя существование файлов, указанных в `marker_files`. Если такой файл найден, функция возвращает путь к родительской директории. В противном случае, возвращает путь к текущей директории.
3. **Добавляет корневую директорию в `sys.path`**: Если корневая директория найдена, она добавляется в `sys.path`, чтобы Python мог находить модули из этой директории.
4. **Возвращает корневую директорию**: Функция возвращает найденный путь к корневой директории проекта.
5. **Получает конфигурацию из `config.json`**:  Код пытается открыть файл `config.json` в корневой директории проекта и загрузить из него данные в переменную `config`. Обрабатываются исключения `FileNotFoundError` и `json.JSONDecodeError` в случае отсутствия файла или невалидного JSON.
6. **Получает документацию из `README.MD`**: Код пытается открыть файл `README.MD` в корневой директории проекта и прочитать его содержимое в переменную `doc_str`. Обрабатываются исключения `FileNotFoundError` и `json.JSONDecodeError`.
7. **Инициализирует переменные проекта**:  Код определяет переменные `__project_name__`, `__version__`, `__doc__`, `__details__`, `__author__`, `__copyright__`, `__cofee__`, используя данные из `config` и `doc_str`.  Если значения не найдены, устанавливает значения по умолчанию.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.ai.gemini.header import set_project_root

    # Пример вызова функции для получения пути к корневой директории
    project_root = set_project_root()
    print(f"Корневая директория: {project_root}")


    # Пример использования переменных, полученных из файла config.json:
    print(f"Имя проекта: {__project_name__}")
    print(f"Версия: {__version__}")