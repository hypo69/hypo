Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует класс `CodeAssistant` для обработки файлов кода с помощью модели ИИ Gemini. Он читает код из указанных директорий, формирует запросы к модели, обрабатывает полученные ответы и сохраняет их в файлы в формате RST.  Класс позволяет задать роль (например, "code_checker"), язык и модель ИИ для обработки. Код обрабатывает файлы с учетом списка исключаемых и включаемых файлов. Он обрабатывает ошибки чтения и отвечает на прерывание (Ctrl+C).  Код также включает загрузку переводов для ролей и языков.

Шаги выполнения
-------------------------
1. **Импортирование библиотек:** Код импортирует необходимые библиотеки, включая `asyncio`, `argparse`, `pathlib`, `typing`, `signal`, `time`, `re`, `fnmatch` и др. для работы с файлами, аргументами, таймерами, обработкой сигналов. Также импортируются классы и модули, используемые для работы с Google Generative AI (Gemini) и вспомогательные функции.
2. **Определение класса `CodeAssistant`:** Определяется класс `CodeAssistant`, содержащий методы для инициализации, обработки файлов, создания запросов, сохранения результатов.
3. **Инициализация модели Gemini:**  Внутри конструктора происходит инициализация модели Gemini.
4. **Парсинг аргументов командной строки:** Метод `parse_args` парсит аргументы командной строки, такие как роль, язык, модели, начальные директории и другие настройки, используя `argparse`.
5. **Чтение инструкций:** Свойство `system_instruction` и `code_instruction` загружает инструкции для работы с кодом из файлов `.md`.  Обрабатывает возможные ошибки при чтении файла.
6. **Загрузка переводов:** Свойство `translations` загружает переводы для ролей и языков из файла `translations.json`.
7. **Обработка файлов:** Метод `process_files` перебирает файлы в заданных директориях.  Для каждого файла он:
    * Создаёт запрос к модели.
    * Отправляет запрос модели Gemini.
    * Обрабатывает ответ модели (удаляет внешние кавычки, проверяет префиксы).
    * Сохраняет ответ в файл.
    * Выводит сообщение о обработке файла.
    * Использует `asyncio.sleep` для предотвращения перегрузки системы (20 секунд - это пример, должен быть подходящий для системы интервал).
8. **Создание запроса:** Метод `_create_request` формирует структурированный запрос для модели, содержащий роль, язык, инструкцию, входной код.
9. **Генерация файлов для обработки:** Метод `_yield_files_content` итеративно генерирует пути файлов и их содержимое из заданных директорий, учитывая шаблоны включения и исключения файлов, заданные в конфигурации.
10. **Сохранение ответа:** Метод `_save_response` сохраняет ответ модели в файл, учитывая роль, язык, модель и другие параметры.
11. **Удаление внешних кавычек:** Метод `_remove_outer_quotes` удаляет внешние кавычки из ответа модели, если они присутствуют.
12. **Обработка прерывания:** Метод `_signal_handler` обрабатывает прерывание выполнения (Ctrl+C).
13. **Запуск цикла обработки файлов:** Основная функция `main` запускает цикл, в котором заново загружается конфигурация и обрабатываются файлы для каждой комбинации языков и ролей.

Пример использования
-------------------------
.. code-block:: python

    assistant = CodeAssistant(role='code_checker', lang='ru', model=['gemini'], start_dirs=['..'])
    assistant.process_files()