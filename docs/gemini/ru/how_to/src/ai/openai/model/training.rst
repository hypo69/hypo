Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `OpenAIModel`, который взаимодействует с API OpenAI, управляет моделями и помощниками. Он предоставляет методы для отправки сообщений модели, получения ответов, анализа тональности, динамического обучения и обучения модели на заданных данных. Также включает функции для получения списка доступных моделей и помощников, настройки помощника и сохранения диалогов.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует необходимые библиотеки, включая `OpenAI`, `pandas`, `requests`, `PIL`, и другие, для работы с API, обработкой данных и изображениями.

2. **Определение класса `OpenAIModel`:** Класс `OpenAIModel` содержит атрибуты для хранения ключа API, идентификатора помощника, текущего идентификатора задачи обучения, системных инструкций, списка помощников и диалогового журнала.

3. **Инициализация объекта `OpenAIModel`:** Метод `__init__` инициализирует объект `OpenAIModel`, создает клиента `OpenAI` с использованием предоставленного API-ключа, загружает помощника и создает диалоговый журнал.

4. **Получение списка моделей:** Метод `list_models` динамически получает список доступных моделей из API OpenAI и возвращает его.

5. **Получение списка помощников:** Метод `list_assistants` загружает список помощников из файла `assistants.json` и возвращает его.

6. **Установка помощника:** Метод `set_assistant` устанавливает помощника с указанным идентификатором.

7. **Сохранение диалога:** Метод `_save_dialogue` сохраняет весь диалог в файл JSON.

8. **Анализ тональности:** Метод `determine_sentiment` анализирует тональность сообщения (положительная, отрицательная или нейтральная) на основе словаря ключевых слов.

9. **Отправка сообщения модели:** Метод `ask` отправляет сообщение модели, обрабатывает возможные ошибки (например, повторные попытки) и возвращает ответ. Он также выполняет анализ тональности полученного ответа и сохраняет диалог.

10. **Описание изображения:** Метод `describe_image` отправляет изображение модели для описания, обрабатывает возможные ошибки и возвращает описание в формате JSON.

11. **Описание изображения (requests):** Метод `describe_image_by_requests` отправляет изображение модели для описания с использованием библиотеки `requests`.

12. **Динамическое обучение:** Метод `dynamic_train` загружает предыдущий диалог и выполняет динамическое обучение модели.

13. **Обучение модели:** Метод `train` обучает модель на предоставленных данных (CSV-файл или директория).

14. **Сохранение идентификатора задачи обучения:** Метод `save_job_id` сохраняет идентификатор задачи обучения с описанием в файл.

15. **Главная функция `main`:** В функции `main` демонстрируется инициализация класса `OpenAIModel`, использование методов, связанных с взаимодействием с моделью, а также примеры обучения модели.


Пример использования
-------------------------
.. code-block:: python

    import gs  # Предполагается, что модуль gs определен где-то
    from hypotez.src.ai.openai.model.training import OpenAIModel

    # Путь к изображению
    image_path = gs.path.google_drive / 'images' / 'example_image.jpg'

    # Инициализация объекта OpenAIModel
    model = OpenAIModel(system_instruction="Вы - полезный помощник.", assistant_id="asst_dr5AgQnhhhnef5OSMzQ9zdk9")

    # Запрос к модели
    user_message = "Расскажите о преимуществах использования Python"
    response = model.ask(user_message)
    print(response)

    # Описание изображения
    image_description = model.describe_image(image_path)
    print(image_description)

    # Обучение модели
    training_job_id = model.train(data_file=gs.path.google_drive / 'AI' / 'training_data.csv')
    if training_job_id:
        model.save_job_id(training_job_id, "Обучение новой моделью на данных")