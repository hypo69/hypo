### <BOAT>
```
=================
קושי: 5
-----------------
המשחק BOAT הוא משחק טקסטואלי פשוט בו השחקן מנסה להטביע ספינה על ידי ניחוש הקואורדינטות שלה על גבי לוח משחק. הלוח מיוצג על ידי מערך דו-ממדי של 10x10 תאים. הספינה ממוקמת באקראי, ולשחקן יש 10 ניסיונות לנחש את מיקומה.

חוקי המשחק:
1.  לוח המשחק הוא בגודל 10x10.
2. הספינה ממוקמת באקראי על הלוח.
3. השחקן מזין קואורדינטות (שורה ועמודה) של הניחוש שלו.
4.  אם הניחוש פוגע בספינה, השחקן מנצח.
5. לשחקן יש 10 ניסיונות בלבד לנחש את מיקום הספינה.
6. אם השחקן לא מצליח לפגוע בספינה בתוך 10 ניסיונות, המשחק מסתיים בהפסד.
-----------------
אלגוריתם:
1.  אתחל מערך דו-ממדי בגודל 10x10, המייצג את לוח המשחק. כל תא מאותחל ל-'O'.
2. בחר באופן אקראי קואורדינטות (שורה ועמודה) בין 1 ל-10 למיקום הספינה.
3. אתחל את מספר הניסיונות ל-10.
4. התחל לולאה "כל עוד נותרו ניסיונות":
    4.1. הצג את לוח המשחק.
    4.2. בקש מהשחקן להזין קואורדינטות (שורה ועמודה).
    4.3. אם הקואורדינטות שהוזנו תואמות לקואורדינטות של הספינה:
       4.3.1 הצג הודעה "HIT!"
       4.3.2 צא מהלולאה (המשחק נגמר בניצחון).
    4.4. אחרת:
       4.4.1 אם הקואורדינטות שהוזנו הן בתוך תחום לוח המשחק:
           4.4.1.1 סמן את התא בלוח המשחק ב-'X' כדי לסמן ניחוש שגוי.
       4.4.2 הורד את מספר הניסיונות ב-1.
5. אם מספר הניסיונות הגיע ל-0, הצג הודעה "YOU LOSE."
6. סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeBoard["<p align='left'>אתחול לוח משחק 10x10 (מלא ב-'O')<br>וגם אתחול מיקום ספינה (אקראי) וניסיונות=10</p>"]
    InitializeBoard --> LoopStart{"תחילת לולאה: כל עוד נותרו ניסיונות"}
    LoopStart -- כן --> DisplayBoard["הצג לוח משחק"]
    DisplayBoard --> InputCoordinates["קלט קואורדינטות (שורה, עמודה)"]
    InputCoordinates --> CheckHit{"בדיקה: ניחוש == מיקום ספינה?"}
    CheckHit -- כן --> OutputHit["הצג הודעה: <b>HIT!</b>"]
    OutputHit --> EndWin["סוף: ניצחון"]
    CheckHit -- לא --> CheckValidCoordinates{"בדיקה: קואורדינטות בתחום הלוח?"}
    CheckValidCoordinates -- כן --> MarkMiss["סמן בלוח ניחוש שגוי ('X')"]
    MarkMiss --> DecreaseAttempts["<code><b>ניסיונות = ניסיונות - 1</b></code>"]
    DecreaseAttempts --> LoopStart
    CheckValidCoordinates -- לא --> DecreaseAttempts
    LoopStart -- לא --> OutputLose["הצג הודעה: <b>YOU LOSE.</b>"]
     OutputLose --> EndLose["סוף: הפסד"]
```
Legenda:
   Start - התחלת התוכנית.
   InitializeBoard - אתחול לוח משחק 10x10, מיקום ספינה אקראי, ומספר ניסיונות (10).
   LoopStart - תחילת הלולאה, הממשיכה כל עוד יש ניסיונות.
   DisplayBoard - הצגת לוח המשחק לשחקן.
   InputCoordinates - קליטת קואורדינטות (שורה ועמודה) מהמשתמש.
   CheckHit - בדיקה האם הקואורדינטות שהוזנו תואמות את מיקום הספינה.
   OutputHit - הצגת הודעה "HIT!" אם הפגיעה הצליחה.
   EndWin - סיום המשחק בניצחון.
   CheckValidCoordinates - בדיקה האם הקואורדינטות שהוזנו הן בתוך גבולות הלוח.
   MarkMiss - סימון ניחוש שגוי על הלוח על ידי שימוש ב-'X'.
   DecreaseAttempts - הפחתת מספר הניסיונות ב-1.
   OutputLose - הצגת הודעה "YOU LOSE." כאשר כל הניסיונות נוצלו.
   EndLose - סיום המשחק בהפסד.
"""
```python
import random

# הגדרת גודל לוח המשחק
BOARD_SIZE = 10
# הגדרת מספר הניסיונות
MAX_ATTEMPTS = 10

def initialize_board():
    """
    יוצרת לוח משחק ריק בגודל BOARD_SIZE x BOARD_SIZE, מלא ב-'O'.
    """
    board = []
    for _ in range(BOARD_SIZE):
        row = ['O'] * BOARD_SIZE
        board.append(row)
    return board

def place_ship():
    """
    בוחרת באופן אקראי את מיקום הספינה על הלוח.
    """
    ship_row = random.randint(0, BOARD_SIZE - 1)
    ship_col = random.randint(0, BOARD_SIZE - 1)
    return ship_row, ship_col

def display_board(board):
    """
    מציגה את לוח המשחק הנוכחי למשתמש.
    """
    print("  " + " ".join(str(i) for i in range(1, BOARD_SIZE + 1)))
    for i, row in enumerate(board):
        print(f"{i+1} {' '.join(row)}")

def get_player_guess():
    """
    מבקשת מהמשתמש להזין את ניחוש הקואורדינטות שלו.
    """
    while True:
        try:
            guess_row = int(input(f"נחש שורה (1-{BOARD_SIZE}): ")) - 1
            guess_col = int(input(f"נחש עמודה (1-{BOARD_SIZE}): ")) - 1
            if 0 <= guess_row < BOARD_SIZE and 0 <= guess_col < BOARD_SIZE:
                return guess_row, guess_col
            else:
                print("קואורדינטות לא חוקיות, נסה שוב.")
        except ValueError:
            print("קלט לא חוקי, אנא הזן מספרים שלמים.")

def play_game():
    """
    מגדירה את הלוגיקה של משחק הספינות.
    """
    board = initialize_board() # יצירת לוח המשחק
    ship_row, ship_col = place_ship() # קביעת מיקום הספינה
    attempts = MAX_ATTEMPTS # אתחול מספר הניסיונות

    while attempts > 0:
        display_board(board) # הצגת הלוח למשתמש
        guess_row, guess_col = get_player_guess() # קבלת ניחוש מהמשתמש
        
        if guess_row == ship_row and guess_col == ship_col:
            print("HIT!") # פגיעה בספינה
            return # המשחק הסתיים בניצחון
        else:
            if 0 <= guess_row < BOARD_SIZE and 0 <= guess_col < BOARD_SIZE:
                board[guess_row][guess_col] = 'X' # סימון ניחוש שגוי
            attempts -= 1 # הפחתת מספר הניסיונות
            print(f"ניסיונות נותרו: {attempts}")
    
    print("YOU LOSE.") # המשחק הסתיים בהפסד

if __name__ == "__main__":
    play_game()

```
<הסברים:>
הסבר מפורט של הקוד:

1.  **ייבוא המודול `random`**:
    -   `import random`: ייבוא המודול `random`, המשמש ליצירת מספרים אקראיים.

2.  **הגדרת קבועים**:
    -   `BOARD_SIZE = 10`: קבוע המגדיר את גודל לוח המשחק (10x10).
    -   `MAX_ATTEMPTS = 10`: קבוע המגדיר את מספר הניסיונות המקסימלי לשחקן.

3.  **הפונקציה `initialize_board()`**:
    -   יוצרת לוח משחק ריק בגודל `BOARD_SIZE` x `BOARD_SIZE`.
    -   הלוח מיוצג על ידי רשימה של רשימות, כאשר כל רשימה פנימית מייצגת שורה בלוח.
    -   כל תא בלוח מאותחל ל-'O', המייצג תא ריק.
    -   הפונקציה מחזירה את לוח המשחק המאותחל.

4.  **הפונקציה `place_ship()`**:
    -   בוחרת באופן אקראי את מיקום הספינה בלוח.
    -   היא בוחרת מספר אקראי עבור השורה ועבור העמודה, בטווח שבין 0 ל-`BOARD_SIZE - 1`.
    -   הפונקציה מחזירה את קואורדינטות השורה והעמודה של הספינה.

5.  **הפונקציה `display_board(board)`**:
    -   מציגה את לוח המשחק הנוכחי למשתמש.
    -   היא מדפיסה מספרי עמודות בחלק העליון של הלוח.
    -   לאחר מכן, היא מדפיסה כל שורה בלוח, יחד עם מספר השורה מצד שמאל.
    -   השימוש ב-`" ".join(row)` יוצר מחרוזת אחת מתוך רשימת התאים בשורה, כאשר כל תא מופרד ברווח.

6.  **הפונקציה `get_player_guess()`**:
    -   מבקשת מהמשתמש להזין את ניחוש הקואורדינטות שלו.
    -   היא משתמשת בלולאה `while True` כדי לוודא שהקלט מהמשתמש תקין.
    -   היא קולטת את מספר השורה והעמודה מהמשתמש, ומחסירה 1 כדי להתאים את הקואורדינטות לאינדקסים של הרשימה (האינדקסים מתחילים מ-0).
    -   היא בודקת שהקואורדינטות שהוזנו הן בתוך תחום הלוח (בין 0 ל-`BOARD_SIZE - 1`).
    -   אם הקואורדינטות תקינות, היא מחזירה אותן. אם לא, היא מדפיסה הודעת שגיאה ומבקשת מהמשתמש לנסות שוב.
    -   היא מטפלת בשגיאות קלט אפשריות באמצעות בלוק `try-except` כדי לוודא שהמשתמש מזין מספרים שלמים בלבד.

7.  **הפונקציה `play_game()`**:
    -   הפונקציה הראשית שמגדירה את הלוגיקה של משחק הספינות.
    -   `board = initialize_board()`: יוצרת לוח משחק ריק.
    -   `ship_row, ship_col = place_ship()`: ממקמת את הספינה באופן אקראי.
    -   `attempts = MAX_ATTEMPTS`: מאתחלת את מספר הניסיונות לערך המקסימלי.
    -   הלולאה `while attempts > 0` ממשיכה כל עוד יש לשחקן ניסיונות.
        -   `display_board(board)`: מציגה את לוח המשחק למשתמש.
        -   `guess_row, guess_col = get_player_guess()`: מקבלת ניחוש קואורדינטות מהמשתמש.
        -   `if guess_row == ship_row and guess_col == ship_col`: בודקת האם הניחוש פגע בספינה.
            -   אם כן, מדפיסה את ההודעה "HIT!" ומסיימת את המשחק (הפונקציה מסתיימת על ידי `return`).
        -   `else`: אם הניחוש לא פגע בספינה:
            -   בודקת האם הקואורדינטות שהוזנו הן בתחום הלוח. אם כן, מסמנת את הניחוש השגוי על הלוח בסימן 'X'.
            -   מפחיתה את מספר הניסיונות ב-1.
            -   מציגה למשתמש את מספר הניסיונות שנותרו.
    -   אם הלולאה מסתיימת (כל הניסיונות נוצלו), מודפסת ההודעה "YOU LOSE.".

8.  **הבלוק `if __name__ == "__main__":`**:
    -   מבטיח שהפונקציה `play_game()` תופעל רק כאשר הקובץ מופעל ישירות ולא כאשר הוא מיובא כמודול.

בסיום המשחק, השחקן ינצח אם יפגע בספינה, אחרת, השחקן יפסיד אם כל הניסיונות שלו יסתיימו.
<סוף הסברים>
```
