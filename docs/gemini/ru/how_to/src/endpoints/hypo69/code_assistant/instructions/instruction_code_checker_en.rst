Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит набор инструкций для улучшения качества кода. Он описывает формат документации, правила обработки данных, анализа структуры кода, рефакторинга, и структурирование ответов. Он направлен на повышение читабельности,  понятности и соответствия кода определенным стандартам.

Шаги выполнения
-------------------------
1. **Проанализировать код**: Определить логику, функции и действия, которые выполняет предоставленный код. Обратить внимание на структуру, переменные, функции и их взаимодействие.
2. **Создать реструктурированную документацию**: Преобразовать комментарии и docstrings в формат reStructuredText (RST).  Использовать `j_loads` или `j_loads_ns` из `src.utils.jjson` для работы с файлами JSON.  Добавить комментарии к каждой функции, методу и классу с использованием RST, описывая их назначение, параметры и возвращаемые значения.
3. **Проверить корректность импорта**: Проверить все необходимые импорты и добавить их, если они отсутствуют.  Проверить согласованность имён функций, переменных и импортов с другими файлами проекта.
4. **Внедрить обработку ошибок**: Использовать `from src.logger import logger` для логгирования ошибок.  Минимизировать использование стандартных блоков `try-except`, предпочитая логгирование с помощью `logger.error` при возникновении исключений.
5. **Улучшить комментарии**: Избегать расплывчатых выражений.  Использовать конкретные глаголы ("валидирует", "обрабатывает", "отправляет").
6. **Структурировать ответ**: Сформировать ответ с четкими разделами: «Полученный код», «Улучшенный код», «Внесённые изменения» и «Оптимизированный код».
7. **Комментарии к коду**:  Добавлять подробные пояснения ко всем изменяемым участкам кода с использованием комментариев `#`.
8. **Примеры документации**: Использовать примеры RST документации и улучшений в формате `TODO`.

Пример использования
-------------------------
.. code-block:: python

    # Пример использования функции с обработкой ошибок
    def my_function(input_data):
        """
        Обрабатывает входные данные.

        :param input_data: Входные данные.
        :return: Результат обработки.
        """
        try:
            # Обработка данных
            processed_data = j_loads(input_data)
            # Валидация
            if not processed_data:
                logger.error("Ошибка: входные данные пустые")
                return None
            # Дальнейшая обработка
            result = process_data(processed_data)
            return result
        except json.JSONDecodeError as e:
            logger.error("Ошибка декодирования JSON: %s", e)
            return None
        except Exception as ex:
            logger.error("Произошла ошибка: %s", ex)
            return None