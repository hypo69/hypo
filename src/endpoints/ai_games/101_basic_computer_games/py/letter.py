"""
BAGELS:
=================
Сложность: 6
-----------------
Игра "Bagels" - это логическая игра, в которой игрок должен угадать трехзначное число, загаданное компьютером, используя подсказки "PICO" (одна цифра правильная и на правильном месте), "FERMI" (одна цифра правильная, но на неправильном месте), и "BAGELS" (ни одна цифра не угадана).

Правила игры:
1.  Компьютер загадывает случайное трехзначное число, каждая цифра которого уникальна.
2.  Игрок делает предположение, вводя трехзначное число.
3.  Компьютер предоставляет подсказки:
    - "PICO": Одна из цифр угадана и находится на правильной позиции.
    - "FERMI": Одна из цифр угадана, но находится на неправильной позиции.
    - "BAGELS": Ни одна цифра не угадана.
4.  Игра продолжается до тех пор, пока игрок не угадает число или не решит выйти.
5.  После каждой попытки игроку предоставляются подсказки.
-----------------
Алгоритм:
1.  Генерировать случайное трехзначное число, где все цифры различны.
2.  Начать цикл "пока игрок не угадает число или не решит выйти":
    2.1 Запросить у игрока ввод трехзначного числа.
    2.2 Если ввод игрока равен "QUIT", завершить игру.
    2.3 Сравнить ввод игрока с загаданным числом:
        2.3.1 Если ввод совпадает с загаданным числом, вывести сообщение о выигрыше и завершить игру.
        2.3.2 Если не совпадает, определить подсказки и вывести их:
             -  Для каждой цифры из ввода сравнить её с каждой цифрой из загаданного числа.
             -  Если цифра и позиция совпадают, добавить "PICO" к списку подсказок.
             -  Если цифра совпадает, но позиция не совпадает, добавить "FERMI" к списку подсказок.
         2.3.3 Если список подсказок пуст, вывести "BAGELS".
         2.3.4 Вывести подсказки.
3.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateSecretNumber["Генерация случайного трехзначного числа <code><b>secretNumber</b></code> с уникальными цифрами"]
    GenerateSecretNumber --> GameLoopStart{"Начало цикла: пока не угадали или не QUIT"}
    GameLoopStart -- Да --> InputGuess["Ввод трехзначного числа <code><b>userGuess</b></code>"]
    InputGuess --> CheckQuit{"<code><b>userGuess == 'QUIT'?</b></code>"}
    CheckQuit -- Да --> End["Конец игры"]
    CheckQuit -- Нет --> CheckWin{"<code><b>userGuess == secretNumber?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод: <b>YOU GOT IT!</b>"]
    OutputWin --> End
    CheckWin -- Нет --> InitializeClues["Инициализация списка подсказок <code><b>clues = []</b></code>"]
    InitializeClues --> CheckDigitLoopStart{"Начало цикла: по цифрам <code><b>userGuess</b></code>"}
    CheckDigitLoopStart --> CompareDigits{"Сравнить текущую цифру с цифрами <code><b>secretNumber</b></code>"}
    CompareDigits --> CheckPico{"Совпадение позиции и цифры? "}
    CheckPico -- Да --> AddPico["Добавить 'PICO' в <code><b>clues</b></code>"]
    AddPico --> CheckFermi{"Совпадает только цифра?"}
    CheckPico -- Нет --> CheckFermi
    CheckFermi -- Да --> AddFermi["Добавить 'FERMI' в <code><b>clues</b></code>"]
    AddFermi --> CheckDigitLoopEnd{"Конец цикла по цифрам?"}
    CheckFermi -- Нет --> CheckDigitLoopEnd
    CheckDigitLoopEnd -- Да --> CheckCluesEmpty{"Список подсказок пуст?"}
    CheckDigitLoopStart -- Нет --> CheckCluesEmpty
    CheckCluesEmpty -- Да --> OutputBagels["Вывод: 'BAGELS'"]
    OutputBagels --> GameLoopStart
    CheckCluesEmpty -- Нет --> OutputClues["Вывод подсказок из <code><b>clues</b></code>"]
    OutputClues --> GameLoopStart
    GameLoopStart -- Нет --> End
```
**Legenda**
   Start - Начало программы.
    GenerateSecretNumber - Генерация случайного трехзначного числа с уникальными цифрами и сохранение его в переменной secretNumber.
    GameLoopStart - Начало цикла игры, который продолжается до тех пор, пока игрок не угадает число или не введет 'QUIT'.
    InputGuess - Запрос у игрока ввода трехзначного числа и сохранение его в переменной userGuess.
    CheckQuit - Проверка, равно ли введенное число 'QUIT'.
    End - Конец программы.
    CheckWin - Проверка, равно ли введенное число userGuess загаданному числу secretNumber.
    OutputWin - Вывод сообщения о выигрыше.
    InitializeClues - Инициализация пустого списка подсказок clues.
    CheckDigitLoopStart - Начало цикла для перебора цифр введенного числа userGuess.
    CompareDigits - Сравнение текущей цифры userGuess с цифрами secretNumber.
     CheckPico - Проверка, совпадает ли цифра и позиция.
    AddPico - Добавление подсказки 'PICO' в список clues.
    CheckFermi - Проверка, совпадает ли только цифра.
    AddFermi - Добавление подсказки 'FERMI' в список clues.
    CheckDigitLoopEnd - Конец цикла перебора цифр.
     CheckCluesEmpty - Проверка, пуст ли список clues.
    OutputBagels - Вывод сообщения 'BAGELS', если список подсказок пуст.
    OutputClues - Вывод списка подсказок.
"""
import random

def generate_secret_number():
    """Генерирует случайное трехзначное число с уникальными цифрами."""
    digits = list(range(10)) # создаем список цифр от 0 до 9
    random.shuffle(digits) # перемешиваем список случайным образом
    # исключаем случай, когда первая цифра 0
    while digits[0] == 0:
      random.shuffle(digits)
    # формируем число из первых трех цифр
    return str(digits[0]) + str(digits[1]) + str(digits[2])

def get_clues(secret_number, user_guess):
    """Формирует подсказки для текущей попытки."""
    clues = [] # список для хранения подсказок
    # проходим по каждой цифре в введенном числе
    for i in range(len(user_guess)):
        # если цифра и позиция совпадают - добавляем PICO
        if user_guess[i] == secret_number[i]:
            clues.append("PICO")
        # если цифра есть в числе, но не на той позиции - добавляем FERMI
        elif user_guess[i] in secret_number:
            clues.append("FERMI")
    # если список подсказок пуст, значит ни одна цифра не угадана
    if not clues:
        return ["BAGELS"] # возвращаем BAGELS, если подсказок нет
    else:
        clues.sort()
        return clues # возвращаем отсортированный список подсказок

def play_bagels():
    """Основная логика игры Bagels."""
    secret_number = generate_secret_number() # генерируем секретное число
    print("Я загадал трехзначное число. Попробуй угадать!")

    while True:
        user_guess = input("Ваш вариант: ") # просим пользователя ввести вариант
        
        if user_guess.upper() == "QUIT":
            print("Выход из игры.")
            break # выходим из цикла, если пользователь ввел QUIT

        if user_guess == secret_number:
            print("Вы угадали! Это было число", secret_number)
            break # выходим из цикла, если пользователь угадал число
        
        clues = get_clues(secret_number, user_guess) # получаем подсказки для введенного числа
        print("Подсказки:", " ".join(clues)) # выводим подсказки пользователю

if __name__ == "__main__":
    play_bagels()
"""
Пояснения:
1. **Импорт модуля `random`:**
   - `import random`: Импортирует модуль random для генерации случайных чисел.

2.  **Функция `generate_secret_number()`:**
    -   Создает случайное трехзначное число с уникальными цифрами.
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает список случайным образом.
    -   `while digits[0] == 0`: Проверяет, не является ли первая цифра нулем. Если да, то перемешивает список заново.
     -   `return str(digits[0]) + str(digits[1]) + str(digits[2])`: Возвращает строку, представляющую трехзначное число.

3.  **Функция `get_clues(secret_number, user_guess)`:**
    -   Принимает загаданное число `secret_number` и введенное пользователем число `user_guess`.
    -   `clues = []`: Инициализирует пустой список для хранения подсказок.
    -   Цикл `for i in range(len(user_guess)):`: Проходит по каждой цифре в числе, введенном пользователем.
         -  `if user_guess[i] == secret_number[i]`: Проверяет, если цифра и ее позиция в введенном числе совпадают с загаданным числом. Если да, добавляет подсказку "PICO" в список подсказок.
         - `elif user_guess[i] in secret_number:`: Проверяет, если цифра из введенного числа присутствует в загаданном числе, но на другой позиции. Если да, добавляет подсказку "FERMI" в список подсказок.
    -   `if not clues`: Проверяет, пуст ли список подсказок. Если да, возвращает список, содержащий только "BAGELS", что означает, что ни одна цифра не угадана.
    - `else`: Если список подсказок не пуст, то сортирует его и возвращает.

4.  **Функция `play_bagels()`:**
    -   `secret_number = generate_secret_number()`: Генерирует случайное трехзначное число.
    -   `print("Я загадал трехзначное число. Попробуй угадать!")`: Выводит сообщение, что компьютер загадал число.
    -  `while True:`: Запускает бесконечный цикл, который будет продолжаться, пока игрок не угадает число или не введет "QUIT".
        -   `user_guess = input("Ваш вариант: ")`: Запрашивает у пользователя ввод варианта числа.
        -   `if user_guess.upper() == "QUIT":`: Проверяет, ввел ли пользователь "QUIT". Если да, завершает игру.
        -  `if user_guess == secret_number`: Проверяет, угадал ли пользователь число.
             -  Если угадал, то выводит сообщение о победе и завершает игру.
        -    `clues = get_clues(secret_number, user_guess)`: Получает подсказки для текущего ввода пользователя.
        -    `print("Подсказки:", " ".join(clues))`: Выводит подсказки пользователю.

5.  **Запуск игры:**
    -   `if __name__ == "__main__":`: Проверяет, запущен ли скрипт напрямую.
    -   `play_bagels()`: Вызывает функцию для начала игры.
"""
```