Как использовать класс Chrome
========================================================================================

Описание
-------------------------
Этот класс расширяет `selenium.webdriver.Chrome`, предоставляя дополнительные функции для настройки и инициализации экземпляра Chrome WebDriver. Он предназначен для продвинутых случаев использования, включая поиск свободных портов, настройку параметров и инициализацию WebDriver.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:**
   Код импортирует необходимые библиотеки, такие как `os`, `socket`, `pathlib`, `typing`, `selenium`, `fake_useragent` и другие из проекта.

2. **Определение класса `Chrome`:**
   Класс `Chrome` наследуется от `webdriver.Chrome`.

3. **Инициализация `Chrome`:**
   Метод `__init__` инициализирует экземпляр `Chrome`.
   - Получает опции пользователя (`user_agent`). Если нет значения по умолчанию, то использует рандомное значение из библиотеки `fake_useragent`.
   - Загружает настройки из файла `chrome.json` используя функцию `j_loads`.
   - Определяет директорию профиля для Chrome.
   - Определяет пути к `chromedriver` и `chrome` бинарникам.  Ключевой момент: код корректно адаптирует путь, заменяя 'chrome' на переменную `gs.default_webdriver` если таковая присутствует.
   - Устанавливает опции Chrome с помощью метода `set_options`.
   - Добавляет аргумент `user-data-dir` для использования заданного профиля.
   - Создает службу Chrome (`ChromeService`) с указанным исполняемым файлом.
   - Находит свободный порт. Если свободный порт найден, добавляет аргумент `--port` в опции Chrome.  В противном случае выводится критическое сообщение об отсутствии свободных портов.
   - Инициализирует драйвер (`super().__init__`).
   - Включает обработку исключений (`try...except`) для надежности.

4. **Поиск свободного порта:**
   Метод `find_free_port` ищет свободный порт в заданном диапазоне (9500-9599).
   - Использует `socket.socket` для проверки доступности порта.

5. **Настройка опций (`set_options`):**
   Метод `set_options` настраивает опции Chrome.
   - Обрабатывает опции из файла `chrome.json` (или пустое значение).
   - Добавляет аргументы в опции Chrome, такие как `--headless=no`, `--disable-gpu` и т.д., если они присутствуют в настройках.
   - Поддерживает заголовки HTTP.

6. **Использование класса `Chrome`:**
   После успешной инициализации экземпляра класса `Chrome`, можно использовать его для управления Chrome WebDriver, например, для открытия веб-страниц и взаимодействия с ними.


Пример использования
-------------------------
.. code-block:: python

    from src import gs
    from src.webdriver.chrome import Chrome
    
    # Создаем экземпляр Chrome WebDriver
    chrome_driver = Chrome()
    
    # Если инициализация прошла успешно, то driver не будет None
    if chrome_driver.d is not None:
        # Используем WebDriver для работы с сайтом
        chrome_driver.d.get("https://www.example.com")
        # ... Дополнительные действия с WebDriver
        # ...
        chrome_driver.d.quit()