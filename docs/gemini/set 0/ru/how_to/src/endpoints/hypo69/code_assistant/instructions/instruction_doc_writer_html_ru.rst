Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит инструкции по генерации HTML-документации для Python-файлов.  Документация должна быть структурирована, включать оглавление, а также подробные описания функций, классов и методов с указанием параметров, возвращаемых значений и возможных исключений.  Инструкции также описывают формат комментариев для Python-кода, который должен использоваться для автоматической генерации документации.

Шаги выполнения
-------------------------
1. **Анализ входного Python-файла**: Прочитайте код Python, чтобы понять назначение модуля, его основные классы и функции.
2. **Формирование HTML-структуры**: Создайте HTML-шаблон, который будет содержать заголовки разного уровня (h1, h2, h3, h4), списки (ul, ol),  разделы для описания функций, классов и методов.
3. **Добавление заголовков**:  Добавьте заголовок уровня 1 (<h1>) для названия модуля. Далее, добавьте заголовки 2-го (<h2>) и 3-го (<h3>) уровня для разделов "Обзор", "Классы", "Функции".
4. **Определение оглавления (TOC)**: Для каждого модуля создайте оглавление, содержащее ссылки на все важные разделы.
5. **Добавление описаний**:
    * Для модулей: Добавьте краткое описание назначения и функциональности.
    * Для классов: Укажите краткое описание класса и его методов.
    * Для функций и методов: Включите блок с описанием функции/метода, её параметров, возвращаемых значений и возможных исключений, следуя заданному шаблону (см. пример в инструкции).
6. **Включение комментариев**: Убедитесь, что код Python содержит правильно отформатированные комментарии, соответствующие заданному шаблону, для автоматической генерации документации.
7. **Добавление примеров (если необходимо)**:  При необходимости, введите примеры использования функций и методов для лучшего понимания их поведения.
8. **Форматирование HTML**: Используйте правильный синтаксис HTML для всех заголовков, списков и ссылок.
9. **Создание HTML-файла**: Сохраните результат в формате `.html`

Пример использования
-------------------------
.. code-block:: python

    # Пример структуры комментариев для функции:

    def my_function(param1: int, param2: str = "default") -> str:
        """
        Args:
            param1 (int): Описание параметра param1.
            param2 (str, optional): Описание параметра param2. По умолчанию значение равно "default".

        Returns:
            str: Описание возвращаемого значения.

        Raises:
            ValueError: Описание ситуации, в которой возникает исключение ValueError.
        """
        # ...код функции...
        return "Результат функции"