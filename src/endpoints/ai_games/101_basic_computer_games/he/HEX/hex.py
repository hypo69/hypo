"""
HEX:
=================
קושי: 6
-----------------
המשחק "הקס" הוא משחק לוח לשני שחקנים, בו כל שחקן מנסה ליצור נתיב רצוף של משושים בצבע שלו מצד אחד של הלוח לצד השני. הלוח הוא בצורת מקבילית עם צדדים מקבילים שונים. בגרסה הזו, המחשב משחק נגד השחקן, כשכל שחקן מסמן את המשושים שלו עם X או O.

חוקי המשחק:
1. לוח המשחק הוא רשת משושים, בגודל קבוע 10x10.
2. המחשב משחק כ"שחקן 1", ומסומן ב-X, השחקן משחק כ"שחקן 2" ומסומן ב-O.
3. השחקנים מתחלפים בתורות, וכל שחקן בוחר משושה ריק לסמן.
4. המטרה היא לחבר בין שני הצדדים הנגדיים של הלוח בעזרת המשושים המסומנים שלך.
5. שחקן 1 מנסה לחבר את הצד השמאלי עם הצד הימני, ושחקן 2 מנסה לחבר את הצד העליון עם הצד התחתון.
6. המשחק ממשיך עד שאחד השחקנים מצליח לחבר את הצדדים שלו, או עד שהלוח מלא.
-----------------
אלגוריתם:
1. אתחל לוח משחק ריק בגודל 10x10, המיוצג על ידי מערך דו-ממדי (רשימה של רשימות) כאשר כל משבצת מכילה רווח (" ").
2. אתחל משתנה שחקן נוכחי ל"שחקן 1" (מחשב, X).
3. התחל לולאת משחק ראשית:
    3.1 אם השחקן הנוכחי הוא "שחקן 1":
       3.1.1 בחר באקראי משושה ריק בלוח, וסמן אותו ב-X.
    3.2 אחרת (השחקן הנוכחי הוא "שחקן 2"):
       3.2.1 קבל קלט מהשחקן: קואורדינטות של משושה בלוח.
       3.2.2 אם המשושה תפוס, חזור לשלב 3.2.1.
       3.2.3 סמן את המשושה ב-O.
    3.3 בדוק אם השחקן הנוכחי ניצח (פונקציית ניצחון).
        3.3.1 אם שחקן ניצח, הצג הודעה מתאימה וסיים את המשחק.
    3.4 אם אין מנצח והלוח מלא, הצג הודעה "תיקו" וסיים את המשחק.
    3.5 החלף את השחקן הנוכחי לשחקן הבא.
4. סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeBoard["<p align='left'>אתחול לוח ריק 10x10
    <code><b>board = [[' ' for _ in range(10)] for _ in range(10)]</b></code>
    <br><code><b>currentPlayer = 'X'</b></code></p>"]
    InitializeBoard --> GameLoopStart{"תחילת לולאה: כל עוד אין מנצח"}
    GameLoopStart -- כן --> CheckPlayer{"בדיקה: <code><b>currentPlayer == 'X'?</b></code>"}
    CheckPlayer -- כן --> ComputerMove["<p align='left'><b>תור מחשב</b><br>
    <code><b>computerMove = chooseRandomEmptyCell()</b></code><br>
    <code><b>board[computerMove[0]][computerMove[1]] = 'X'</b></code></p>"]
    ComputerMove --> CheckWin["בדיקה: <code><b>isWinner()?</b></code>"]
    CheckPlayer -- לא --> PlayerMove["<p align='left'><b>תור שחקן</b><br>
    <code><b>getInputFromPlayer()</b></code><br>
      <code><b>board[row][col] = 'O'</b></code></p>"]
    PlayerMove --> CheckWin
    CheckWin -- כן --> OutputWinner["הצגת הודעה: <b>ניצחון לשחקן הנוכחי</b>"]
    OutputWinner --> End["סוף"]
    CheckWin -- לא --> CheckFull{"בדיקה: <code><b>isBoardFull()?</b></code>"}
    CheckFull -- כן --> OutputTie["הצגת הודעה: <b>תיקו</b>"]
    OutputTie --> End
    CheckFull -- לא --> SwitchPlayer["החלף שחקן: <code><b>currentPlayer = 'O' if currentPlayer == 'X' else 'X'</b></code>"]
   SwitchPlayer --> GameLoopStart
    GameLoopStart -- לא --> End
```

Legenda:
    Start - התחלת התוכנית.
    InitializeBoard - אתחול לוח המשחק הריק בגודל 10x10 וקביעת השחקן הנוכחי (מחשב - X).
    GameLoopStart - תחילת הלולאה הראשית של המשחק, כל עוד אין מנצח.
    CheckPlayer - בדיקה מי השחקן הנוכחי (X - מחשב, O - שחקן).
    ComputerMove - מהלך המחשב: בחירת משבצת ריקה באופן אקראי וסימונה ב-X.
    PlayerMove - מהלך השחקן: קבלת קלט מהשחקן (קואורדינטות של משבצת) וסימונה ב-O.
    CheckWin - בדיקה האם השחקן הנוכחי ניצח.
    OutputWinner - אם שחקן ניצח, הצגת הודעת ניצחון.
    End - סיום המשחק.
    CheckFull - אם אין מנצח, בדיקה האם הלוח מלא.
    OutputTie - אם הלוח מלא, הצגת הודעת תיקו.
    SwitchPlayer - החלפת השחקן הנוכחי לשחקן הבא.
"""
import random

# פונקציה ליצירת לוח משחק ריק
def create_board():
    # יוצרת לוח משחק ריק 10x10 ומחזירה אותו
    return [[' ' for _ in range(10)] for _ in range(10)]

# פונקציה להדפסת הלוח
def print_board(board):
    # מדפיסה את הלוח למסך, עם קואורדינטות שורה ועמודה
    print("   ", end="")
    for i in range(10):
        print(f"{i} ", end="")
    print()
    print("  ---------------------")
    for i, row in enumerate(board):
        print(f"{i}| ", end="")
        print(" ".join(row))
    print("  ---------------------")


# פונקציה לבחירת משבצת ריקה אקראית עבור המחשב
def choose_random_empty_cell(board):
    # מוצאת את כל המשבצות הריקות בלוח
    empty_cells = [(row_index, col_index)
                   for row_index, row in enumerate(board)
                   for col_index, cell in enumerate(row)
                   if cell == ' ']
    # אם יש משבצות ריקות, בוחרת אחת מהן באופן אקראי ומחזירה את הקואורדינטות שלה
    if empty_cells:
        return random.choice(empty_cells)
    return None

# פונקציה לקבלת קלט מהשחקן
def get_player_input(board):
    # מבקשת מהשחקן להזין קואורדינטות של משבצת
    while True:
        try:
            row = int(input("הזן את מספר השורה (0-9): "))
            col = int(input("הזן את מספר העמודה (0-9): "))
            # בדיקה האם הקואורדינטות חוקיות והמשבצת ריקה
            if 0 <= row < 10 and 0 <= col < 10 and board[row][col] == ' ':
                return row, col
            else:
                print("קואורדינטות לא חוקיות או משבצת תפוסה. נסה שוב.")
        except ValueError:
            print("קלט לא חוקי. הזן מספרים בלבד.")

# פונקציה לבדיקת ניצחון (צריכה להיות מיושמת בגרסה מתקדמת)
def is_winner(board, player):
    # פונקציית בדיקת ניצחון ריקה
    # המימוש המלא של בדיקת ניצחון דורש אלגוריתם מורכב יותר
    # ובגרסה זו הוסר על מנת לפשט את הקוד.
    # פונקציה זו תחזיר תמיד False כרגע
    return False

# פונקציה לבדיקה האם הלוח מלא
def is_board_full(board):
    # בודקת האם כל המשבצות בלוח מלאות, אם כן מחזירה True, אחרת False
    for row in board:
        if ' ' in row:
            return False
    return True

def play_hex():
    # יוצרת את הלוח ומגדירה שחקן נוכחי
    board = create_board()
    currentPlayer = 'X' # מתחיל עם המחשב
    # לולאת משחק ראשית
    while True:
        print_board(board) # מדפיסה את הלוח
        # תור המחשב
        if currentPlayer == 'X':
            print("תור המחשב...")
            computer_move = choose_random_empty_cell(board) # בוחר משבצת ריקה
            if computer_move:
                row, col = computer_move
                board[row][col] = 'X' # מסמן את המשבצת ב-X
            else:
               print("אין מהלכים אפשריים למחשב")
        # תור השחקן
        else:
            print("תורך, שחקן (O).")
            row, col = get_player_input(board) # מקבלת קלט מהשחקן
            board[row][col] = 'O' # מסמנת את המשבצת ב-O

        # בדיקת ניצחון
        if is_winner(board, currentPlayer):
            print_board(board)
            print(f"שחקן {currentPlayer} ניצח!")
            break # מסיימת את הלולאה אם מישהו ניצח
        # בדיקה אם הלוח מלא
        if is_board_full(board):
            print_board(board)
            print("תיקו!")
            break # מסיימת את הלולאה אם אין מקום לשחק
        # מעבר לשחקן הבא
        currentPlayer = 'O' if currentPlayer == 'X' else 'X'

# הפעלת המשחק
if __name__ == "__main__":
    play_hex()

"""
הסבר הקוד:
1.  **ייבוא מודול `random`**:
     -  `import random`: ייבוא המודול `random` ליצירת בחירה אקראית של תאים.
2.  **פונקציה `create_board()`**:
     -  יוצרת לוח משחק ריק בגודל 10x10. כל תא מאותחל לרווח (' ').
     -  מחזירה את הלוח שנוצר.
3.  **פונקציה `print_board(board)`**:
     -  מדפיסה את הלוח למסך בצורה ברורה עם מספרי השורות והעמודות.
4.  **פונקציה `choose_random_empty_cell(board)`**:
     -  מוצאת את כל התאים הריקים בלוח.
     -  בוחרת תא ריק באופן אקראי מתוך הרשימה ומחזירה את הקואורדינטות שלו.
     -  אם אין תאים ריקים, מחזירה `None`.
5.  **פונקציה `get_player_input(board)`**:
     -  מבקשת מהשחקן להזין קואורדינטות של תא בלוח.
     -  מוודאת שהקלט תקין (מספרים שלמים בטווח 0-9) ושמדובר בתא ריק.
     -  אם הקלט תקין, מחזירה את קואורדינטות התא.
     -  אם הקלט לא תקין, מדפיסה הודעת שגיאה ומבקשת מהשחקן לנסות שוב.
6. **פונקציה `is_winner(board, player)`**:
    -   פונקציה זו נועדה לבדוק האם יש ניצחון בלוח.
    -  המימוש הנוכחי פשוט ואינו בודק ניצחון, ומחזיר תמיד `False`
    -  בגרסה מתקדמת, פונקציה זו צריכה לממש אלגוריתם מורכב לבדיקת ניצחון
7.  **פונקציה `is_board_full(board)`**:
     -  בודקת האם כל התאים בלוח מלאים.
     -  אם הלוח מלא, מחזירה `True`, אחרת `False`.
8.  **פונקציה `play_hex()`**:
     -  הפונקציה הראשית של המשחק, המנהלת את מהלך המשחק.
     -  אתחול: יוצרת את הלוח, מגדירה את השחקן הנוכחי כ-'X' (המחשב).
     -  לולאה ראשית: ממשיכה עד שיש מנצח או שהלוח מלא.
         -  מדפיסה את הלוח.
         -  תור המחשב (`currentPlayer == 'X'`):
             -  בוחרת משבצת ריקה באופן אקראי באמצעות הפונקציה `choose_random_empty_cell()`.
             -  מסמנת את המשבצת שנבחרה ב-'X' בלוח.
         -  תור השחקן (`currentPlayer == 'O'`):
             -  מבקשת מהשחקן להזין קואורדינטות באמצעות הפונקציה `get_player_input()`.
             -  מסמנת את המשבצת שנבחרה ב-'O' בלוח.
         -  בדיקת ניצחון: קוראת לפונקציה `is_winner()` כדי לבדוק האם יש מנצח.
         -  בדיקת תיקו: אם אין מנצח, בודקת האם הלוח מלא באמצעות `is_board_full()`.
         -  מעבר בין שחקנים: משנה את השחקן הנוכחי ('X' ל-'O' או להפך).
     -  לאחר סיום הלולאה, מדפיסה הודעה על ניצחון או על תיקו.
9.  **הפעלת המשחק**:
     -  `if __name__ == "__main__":`: מבטיח שהפונקציה `play_hex()` תופעל רק כאשר הקובץ מורץ ישירות.
     -  `play_hex()`: קריאה לפונקציה להפעלת המשחק.
"""
