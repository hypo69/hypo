Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Mexiron`, который отвечает за извлечение, обработку и сохранение данных о продуктах от различных поставщиков.  Класс использует Selenium WebDriver для взаимодействия с веб-страницами, AI модель Google Gemini для обработки данных и Facebook API для публикации сообщений.  Код включает в себя функции для выбора грабера в зависимости от поставщика, конвертации данных в подходящий формат для AI, сохранения данных, обработки их с помощью AI модели и публикации результатов в Facebook.

Шаги выполнения
-------------------------
1. **Инициализация класса `Mexiron`**:
    - Создается экземпляр класса `Mexiron`, передается объект `Driver` (Selenium WebDriver) и (необязательно) имя процесса `mexiron_name`.
    - Загружает конфигурацию из файла `kazarinov.json`.
    - Определяет временную метку (`timestamp`) и путь к директории сохранения данных (`export_path`).
    - Загружает системные и командные инструкции для AI модели из файлов `system_instruction_mexiron.md` и `command_instruction_mexiron.md`.
    - Инициализирует экземпляр класса `GoogleGenerativeAI` с необходимыми ключами и инструкциями.

2. **Выполнение сценария `run_scenario`**:
    - Принимает на вход список URL адресов страниц продуктов, цену, необязательное имя процесса и дополнительные инструкции.
    - **Обработка URL**: Перебирает URL адреса. Для каждого URL:
        - Выбирает соответствующий грабер (функция `get_graber_by_supplier_url`).
        - Открывает URL страницу через WebDriver.
        - Парсит данные продукта с помощью выбранного грабера (функция `grab_page`).
        - Конвертирует полученные данные в формат, ожидаемый AI (функция `convert_product_fields`).
        - Сохраняет данные продукта в JSON файл (функция `save_product_data`).
    - **Обработка с помощью AI**: Обрабатывает полученные данные с помощью AI модели (функция `process_ai`). Полученные данные передаются в модель для обработки, перевода на `ru` и `he` и сохранения.
    - **Создание отчета**: Создает отчет в HTML и PDF формате (функция `create_report`).
    - **Публикация в Facebook**: Публикует сообщения о продуктах в Facebook (функция `post_facebook`).


3. **Обработка исключений**: В коде присутствуют многочисленные проверки и обработка исключений (например, при невозможности открыть страницу или получить данные).


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.webdriver import Driver
    from hypotez.src.endpoints.kazarinov.scenarios.scenario_pricelist import Mexiron

    async def main():
        driver = Driver()
        await driver.start()
        
        urls = [
            "https://morlevi.co.il/product-page-1",
            "https://ksp.co.il/product-page-2",
        ]
        
        mexiron = Mexiron(driver)
        result = await mexiron.run_scenario(urls=urls)
        await driver.quit()
        if result:
            print("Сценарий выполнен успешно!")
        else:
            print("Произошла ошибка при выполнении сценария.")

    if __name__ == "__main__":
        import asyncio
        asyncio.run(main())