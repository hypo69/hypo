<CHOMP>
=================
קושי: 2
-----------------
המשחק CHOMP הוא משחק אסטרטגיה לשני שחקנים, המשוחק על לוח דמוי טבלה, כאשר כל משבצת בלוח מייצגת "עוגייה". בפינה השמאלית העליונה יש עוגייה "מורעלת". כל שחקן בתורו בוחר עוגייה ואוכל אותה, יחד עם כל העוגיות שמימין ומתחתיה. המפסיד הוא השחקן שנאלץ לאכול את העוגייה המורעלת.

חוקי המשחק:
1. המשחק מתחיל עם לוח עוגיות בגודל משתנה (שורות ועמודות)
2. השחקנים מתחלפים בתורם.
3. בכל תור, השחקן בוחר עוגייה ואוכל אותה, יחד עם כל העוגיות הנמצאות מימין ומתחתיה.
4. העוגייה בפינה השמאלית העליונה נחשבת "מורעלת".
5. השחקן שאוכל את העוגייה המורעלת מפסיד.
-----------------
אלגוריתם:
1. אתחל את גודל לוח המשחק (מספר שורות ועמודות).
2. הגדר את המשחק כפעיל (משתנה bolean) והגדר את תור השחקן הראשון.
3. כל עוד המשחק פעיל, בצע:
    3.1 הצג את לוח המשחק הנוכחי.
    3.2 קבל את קואורדינטות העוגייה שהשחקן בחר לאכול (מספר שורה ועמודה).
    3.3 בדוק האם הקלט תקין, אם לא, חזור לשלב 3.2.
    3.4 "אכול" את העוגייה הנבחרת ואת כל העוגיות שמימין ומתחתיה. 
    3.5 אם העוגייה המורעלת נאכלה, הצג הודעת הפסד לשחקן הנוכחי וסיים את המשחק.
    3.6 העבר את התור לשחקן הבא.
4. סיום המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeBoard["<p align='left'>אתחול:
    <code><b>
    rows = input("מספר שורות: ")<br>
    cols = input("מספר עמודות: ")<br>
    board = array(rows, cols) # מלא ב-O
    currentPlayer = 1
    gameOver = False
    </b></code></p>"]
    InitializeBoard --> LoopStart{"תחילת לולאה: כל עוד המשחק לא נגמר"}
    LoopStart -- כן --> DisplayBoard["הצגת הלוח: <code><b>board</b></code>"]
    DisplayBoard --> InputMove["קלט תור שחקן: <code><b>row, col</b></code>"]
    InputMove --> ValidateMove{"בדיקה: <code><b>row, col תקין?</b></code>"}
    ValidateMove -- לא --> InputMove
    ValidateMove -- כן --> EatCookies["<p align='left'>אכילת עוגיות:
    <code><b>board[row:, col:] = X</b></code></p>"]
    EatCookies --> CheckWin{"בדיקה: <code><b>board[0, 0] == X?</b></code>"}
    CheckWin -- כן --> OutputLose["הצגת הודעה: <b>שחקן <code>{currentPlayer}</code> הפסיד!</b>"]
    OutputLose --> End["סוף"]
    CheckWin -- לא --> NextPlayer["העברת תור לשחקן הבא: <code><b>currentPlayer = 3 - currentPlayer</b></code>"]
    NextPlayer --> LoopStart
    LoopStart -- לא --> End
```

Legenda:
    Start - התחלת התוכנית.
    InitializeBoard - אתחול משתנים: קבלת מספר שורות ועמודות מהמשתמש, יצירת לוח משחק (מערך דו-ממדי) מלא ב-'O' , הגדרת שחקן התור הראשון (1) והגדרת מצב המשחק כלא-נגמר (gameOver=False).
    LoopStart - תחילת לולאה, הממשיכה כל עוד המשחק לא הסתיים.
    DisplayBoard - הצגת הלוח למשתמש.
    InputMove - קבלת קלט מהמשתמש - שורת ועמודת העוגייה הנבחרת.
    ValidateMove - בדיקה שהקלט מהמשתמש תקין (בתוך גבולות הלוח)
    EatCookies - "אכילת" העוגייה הנבחרת וכל העוגיות שמימין ומתחתיה ע"י החלפתן ב- 'X'.
    CheckWin - בדיקה האם העוגייה המורעלת (פינה שמאלית עליונה) נאכלה (הפכה ל-'X').
    OutputLose - הצגת הודעה על הפסד השחקן הנוכחי.
    End - סוף המשחק.
    NextPlayer - מעבר לתור השחקן הבא.
"""
import numpy as np

def print_board(board):
    """
     פונקציה להדפסת לוח המשחק.
    Args:
        board (np.array): מערך דו מימדי המייצג את לוח המשחק
    """
    for row in board:
        print(" ".join(row))

def is_valid_move(board, row, col):
    """
    פונקציה לבדיקה האם התור שהשחקן בחר תקין (בגבולות הלוח).

    Args:
        board (np.array): מערך דו מימדי המייצג את לוח המשחק
        row (int): מספר השורה
        col (int): מספר העמודה

    Returns:
        bool: True אם התור תקין, אחרת False
    """
    rows, cols = board.shape
    if 0 <= row < rows and 0 <= col < cols and board[row,col] == 'O':
        return True
    return False


def play_chomp():
    """
    פונקציה המנהלת את משחק CHOMP
    """
    # קבלת גודל הלוח מהמשתמש
    while True:
        try:
            rows = int(input("הזן את מספר השורות בלוח: "))
            cols = int(input("הזן את מספר העמודות בלוח: "))
            if rows > 0 and cols > 0:
                break
            else:
                print("מספר השורות והעמודות חייב להיות גדול מאפס")
        except ValueError:
            print("אנא הזן מספר שלם")
    # אתחול הלוח
    board = np.array([['O'] * cols for _ in range(rows)])
    # הגדרת השחקן הנוכחי (1 או 2)
    current_player = 1
    # משחק פעיל כל עוד לא הגיעו לניצחון
    game_over = False
    
    while not game_over:
        # הצגת הלוח
        print_board(board)
        
        # קבלת קלט מהשחקן הנוכחי
        while True:
            try:
                row = int(input(f"שחקן {current_player}, בחר שורה: ")) - 1
                col = int(input(f"שחקן {current_player}, בחר עמודה: ")) - 1
                if is_valid_move(board, row, col):
                   break
                else:
                   print("בחירה לא תקינה, אנא בחר משבצת פנויה בתוך גבולות הלוח")
            except ValueError:
                print("אנא הזן מספר שלם")
        
        # אכילת העוגיות
        board[row:, col:] = 'X'

        # בדיקה אם השחקן הנוכחי אכל את העוגייה המורעלת
        if board[0, 0] == 'X':
            print_board(board)
            print(f"שחקן {current_player} הפסיד!")
            game_over = True
        else:
            # העברת התור לשחקן הבא
            current_player = 3 - current_player
    
if __name__ == "__main__":
    play_chomp()
"""
הסבר הקוד:
1.  **ייבוא המודול `numpy`**:
    - `import numpy as np`: ייבוא המודול `numpy` ומתן קיצור השם `np`, המאפשר עבודה נוחה עם מערכים.
2. **הפונקציה `print_board(board)`:**
   -   מקבלת את לוח המשחק כמערך דו-מימדי ומדפיסה אותו בצורה ברורה לקונסולה.
   -   לולאה שעוברת על כל שורה בלוח ומדפיסה אותה.
3. **הפונקציה `is_valid_move(board, row, col)`:**
   -  פונקציה זו בודקת אם המהלך שהשחקן רוצה לבצע הוא חוקי.
   -  הפונקציה בודקת שערכי השורה והעמודה נמצאים בתוך גבולות המערך ושהמשבצת לא נאכלה (ערך O).
   -   מחזירה `True` אם המהלך חוקי ו-`False` אם לא.
4. **הפונקציה `play_chomp()`:**
   -   זוהי הפונקציה הראשית של המשחק המכילה את כל הלוגיקה של המשחק.
   -   **קבלת גודל הלוח**:
        -   המשתמש מתבקש להכניס את גודל הלוח (מספר השורות ומספר העמודות).
        -   לולאת `while` מבטיחה קבלת ערכים תקינים מהמשתמש (מספרים שלמים גדולים מאפס).
   -   **אתחול הלוח**:
        -   `board = np.array([['O'] * cols for _ in range(rows)])`: יצירת לוח המשחק כ-`numpy array` בגודל הנדרש ומילוי ב-'O' (עוגיות).
   -  **אתחול משתנים**:
        -  `current_player = 1`: הגדרת השחקן הנוכחי כשחקן 1.
        -  `game_over = False`: משתנה המציין האם המשחק הסתיים או לא.
   -   **לולאת המשחק `while not game_over`**:
        -   לולאה שממשיכה עד שהמשחק נגמר.
        -   `print_board(board)`: הדפסת לוח המשחק הנוכחי.
        -    **קבלת תור שחקן**:
             -   לולאת `while` מבטיחה שהשחקן הנוכחי יכניס קואורדינטות תקינות.
             -   המשתמש מתבקש להכניס את שורת ועמודת העוגייה שברצונו לאכול.
             -   הפונקציה `is_valid_move()` בודקת שהקלט תקין.
         -   **אכילת עוגיות**:
             -    `board[row:, col:] = 'X'`: עדכון הלוח ע"י אכילת העוגייה שנבחרה וכל העוגיות שמימין ומתחתיה ע"י החלפת הערך שלהן ב-X.
        -   **בדיקת ניצחון**:
            -   `if board[0, 0] == 'X'`: בדיקה האם העוגייה המורעלת נאכלה.
             -    אם כן, המשחק מסתיים והשחקן הנוכחי מוכרז כמפסיד.
        -    **העברת תור**:
            -  `current_player = 3 - current_player`: העברת התור לשחקן השני ע"י החלפת הערך של המשתנה `current_player`.
5. **הפעלת המשחק**:
    - `if __name__ == "__main__":`: הקוד בבלוק זה מופעל רק אם התוכנית מורצת כסקריפט ראשי ולא כמודול מיובא.
    - `play_chomp()`: קריאה לפונקציה `play_chomp()` שמפעילה את המשחק.
"""
