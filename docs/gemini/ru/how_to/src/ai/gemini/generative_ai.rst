Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет класс `GoogleGenerativeAI`, предназначенный для взаимодействия с API Google Generative AI.  Он позволяет отправлять текстовые запросы, получать ответы и управлять диалогами, а также сохранять историю в текстовых и JSON файлах.  Класс обрабатывает возможные ошибки (например, сетевые проблемы, ошибки API, проблемы с авторизацией) и предоставляет средства для описания изображений.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**  Код импортирует необходимые библиотеки, такие как `google.generativeai`, `requests`, `pathlib`, `datetime`, `json` и другие, для работы с API, управлением файлами и обработкой времени.

2. **Определение констант и параметров:**  Определяется константа `MODE` и создаются переменные для хранения API ключа (`api_key`), имени модели (`model_name`), конфигурации генерации (`generation_config`), инструкции для системы (`system_instruction`), путей для сохранения диалогов и истории.

3. **Инициализация класса `GoogleGenerativeAI`:**
    * Передаются необходимые параметры (API ключ, имя модели, конфигурация генерации, инструкция для системы) в конструктор класса.
    * Создаются пути для сохранения диалогов (`dialogue_log_path`, `dialogue_txt_path`) и истории (`history_dir`, `history_txt_file`, `history_json_file`).
    * Инициализируется объект модели `genai.GenerativeModel` с заданными параметрами.

4. **Обработка запроса к модели (`ask`):**
    * Метод `ask` принимает текстовый запрос (`q`) и обрабатывает его в цикле с определенным числом попыток (`attempts`).
    * Внутри цикла происходит попытка получения ответа от модели `generate_content`.
    * При успешном получении ответа, сохраняется диалог в текстовые и JSON файлы.
    * При ошибках (сетевые, API, аутентификации, невалидные входные данные) происходит обработка исключений и попытка повторного запроса, с учетом экспоненциального бэк-оффа.
    * В случае непредвиденных ошибок, возвращается None.

5. **Сохранение диалога (`_save_dialogue`):**
    * Метод сохраняет диалог в текстовые и JSON файлы для последующего использования.

6. **Описание изображения (`describe_image`):**
    * Метод принимает путь к изображению (`image_path`).
    * Кодирует изображение в base64.
    * Отправляет закодированное изображение в модель для получения описания.
    * Возвращает описание или None при ошибке.

7. **Другие методы:**
    * Метод `start_chat` начинает диалог с моделью.
    * Метод `chat`  отправляет сообщения в чат, обрабатывает ответы и сохраняет их.
    * `config` получает конфигурацию из файла.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.ai.gemini.generative_ai import GoogleGenerativeAI
    import os

    # Замените на ваш API ключ
    api_key = os.environ.get('GOOGLE_GENERATIVE_AI_API_KEY')

    if api_key:
      ai = GoogleGenerativeAI(api_key=api_key)
      response = ai.ask("Что такое Python?")
      print(response)
    else:
      print("API key not found. Please set GOOGLE_GENERATIVE_AI_API_KEY environment variable.")