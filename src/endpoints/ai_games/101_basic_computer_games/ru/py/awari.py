"""
<AWARI>:
=================
Сложность: 7
-----------------
Игра "Авари" - это настольная игра, имитирующая африканскую игру с использованием доски и фишек. Игроки по очереди берут фишки из одного из своих "домов" и последовательно раскладывают их по следующим домам, в попытке захватить фишки из домов противника. Цель - захватить как можно больше фишек.

Правила игры:
1.  Игровое поле состоит из 14 домов, расположенных в два ряда по 7 домов в каждом. 
2.  В начале игры в каждом доме находится по 4 фишки.
3.  Игроки ходят по очереди, начиная с первого игрока.
4.  В свой ход игрок выбирает один из своих домов (в нижней части поля) и берет из него все фишки.
5.  Затем игрок по часовой стрелке раскладывает по одной фишке в каждый следующий дом.
6.  Если последняя фишка попадает в пустой дом на стороне игрока, и в доме напротив есть фишки, то они захватываются и помещаются в "общий банк".
7.  Игра заканчивается, когда все дома с одной стороны доски становятся пустыми.
8. Победителем считается игрок, собравший больше фишек в "общий банк".

-----------------
Алгоритм:
1.  Инициализация:
    1.1 Создать массив `board` из 14 элементов, представляющий доску, каждый элемент которого равен 4.
    1.2 Установить переменную `turn` в 0 (игрок 1).
    1.3 Установить переменные `score1` и `score2` в 0 (счет игроков).
    1.4 Определить функцию `showBoard`, для отображения текущего состояния доски.
    1.5 Определить функцию `move`, для выполнения хода игрока.
    1.6 Определить функцию `checkEnd`, для проверки окончания игры.
2. Игровой цикл:
  2.1. Повторять, пока игра не закончится:
    2.1.1 Отобразить доску, используя функцию `showBoard`.
    2.1.2 Вывести сообщение, какой игрок сейчас ходит.
    2.1.3 Запросить у игрока номер дома, из которого он хочет взять фишки.
    2.1.4 Выполнить ход, используя функцию `move`.
    2.1.5 Переключить ход на другого игрока.
3.  Проверка окончания игры:
    3.1 Вызвать функцию `checkEnd`.
    3.2 Если игра закончилась, то перейти к шагу 4, иначе перейти к шагу 2.1.
4.  Подсчет очков:
    4.1 Подсчитать общее количество фишек у каждого игрока.
    4.2 Вывести победителя, основываясь на количестве фишек.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGame["Инициализация игры: 
    <br><code><b>board[14] = 4</b></code><br><code><b>turn = 0</b></code><br><code><b>score1 = 0</b></code><br><code><b>score2 = 0</b></code>"]
    InitializeGame --> GameLoopStart{"Начало игрового цикла: пока игра не закончится"}
    GameLoopStart -- Да --> DisplayBoard["Отображение доски: <code><b>showBoard()</b></code>"]
    DisplayBoard --> PlayerTurn["Определение игрока: <code><b>turn</b></code>"]
    PlayerTurn --> GetMove["Запрос номера дома: <code><b>houseNumber</b></code>"]
    GetMove --> MakeMove["Выполнение хода: <code><b>move(houseNumber)</b></code>"]
    MakeMove --> SwitchPlayer["Смена игрока: <code><b>turn = 1 - turn</b></code>"]
    SwitchPlayer --> CheckEnd{"Проверка окончания игры: <code><b>checkEnd()</b></code>"}
     CheckEnd -- Нет --> GameLoopStart
    CheckEnd -- Да --> CalculateScores["Подсчет очков: <code><b>score1, score2</b></code>"]
    CalculateScores --> DisplayWinner["Вывод победителя"]
    DisplayWinner --> End["Конец"]
```
    
Legenda:
   Start - Начало программы.
   InitializeGame - Инициализация игровых переменных: `board` (игровое поле) заполняется значениями 4 для каждого из 14 домов, `turn` (текущий игрок) устанавливается в 0 (игрок 1), `score1` и `score2` (счет игроков) устанавливаются в 0.
   GameLoopStart - Начало основного игрового цикла, который продолжается до тех пор, пока игра не закончится.
   DisplayBoard - Отображение текущего состояния игрового поля с помощью функции `showBoard()`.
   PlayerTurn - Определение текущего игрока на основе значения переменной `turn`.
   GetMove - Запрос у текущего игрока номера дома, из которого он хочет взять фишки для хода.
   MakeMove - Выполнение хода игрока с использованием выбранного номера дома и функции `move(houseNumber)`.
   SwitchPlayer - Смена текущего игрока путем переключения значения переменной `turn` (0 -> 1 или 1 -> 0).
   CheckEnd - Проверка окончания игры с использованием функции `checkEnd()`.
   CalculateScores - Подсчет очков для каждого игрока на основе фишек, собранных во время игры, с сохранением их в `score1` и `score2`.
   DisplayWinner - Вывод сообщения о победителе на основе подсчитанных очков.
   End - Конец программы.
"""

__author__ = 'hypo69 (hypo69@davidka.net)'

import time

def showBoard(board):
    """
    Выводит на экран текущее состояние доски.

    Args:
        board (list): Список, представляющий игровое поле.
    """
    print("   ", end="")
    for i in range(6, -1, -1):
       print(f"{i:>2}", end=" ")
    print()
    print("  +-----------------------+")
    print("1 |", end=" ")
    for i in range(13, 6, -1):
        print(f"{board[i]:>2}", end=" ")
    print("|")
    print("  |                       |")
    print("2 |", end=" ")
    for i in range(7):
        print(f"{board[i]:>2}", end=" ")
    print("|")
    print("  +-----------------------+")
    print("   ", end="")
    for i in range(7):
        print(f"{i:>2}", end=" ")
    print()


def move(board, houseNumber, turn):
    """
    Выполняет ход игрока, обновляя доску и захватывая фишки.
    Args:
        board (list): Список, представляющий игровое поле.
        houseNumber (int): Номер дома, из которого игрок берет фишки.
        turn (int): Номер текущего игрока (0 или 1).
    """
    stones = board[houseNumber]
    board[houseNumber] = 0
    currentHouse = houseNumber
    
    while stones > 0:
        currentHouse = (currentHouse + 1) % 14
        board[currentHouse] += 1
        stones -= 1

    # Если последняя фишка попала в пустой дом игрока
    if turn == 0 and currentHouse >= 0 and currentHouse <= 6 and board[currentHouse] == 1:
        oppositeHouse = 12 - currentHouse
        if board[oppositeHouse] > 0:
            # Забираем фишки
            print(f"Игрок 1 захватил фишки из дома {oppositeHouse} ")
            board[14] += board[oppositeHouse] + 1
            board[oppositeHouse] = 0
            board[currentHouse] = 0
    elif turn == 1 and currentHouse >= 7 and currentHouse <= 13 and board[currentHouse] == 1 :
         oppositeHouse = 12 - currentHouse
         if board[oppositeHouse] > 0:
            # Забираем фишки
             print(f"Игрок 2 захватил фишки из дома {oppositeHouse}")
             board[15] += board[oppositeHouse] + 1
             board[oppositeHouse] = 0
             board[currentHouse] = 0
    
def checkEnd(board):
  """
    Проверяет, закончилась ли игра.
    Args:
        board (list): Список, представляющий игровое поле.

    Returns:
        bool: True, если игра закончилась, False в противном случае.
    """
  sum1 = sum(board[0:7])
  sum2 = sum(board[7:14])
  if sum1 == 0 or sum2 == 0:
    return True
  else:
    return False

def print_winner(board):
  """
    Выводит на экран победителя игры
     Args:
        board (list): Список, представляющий игровое поле.
    """
  score1 = board[14]
  score2 = board[15]
  print("Игра закончена!")
  print(f"Счет игрока 1: {score1}")
  print(f"Счет игрока 2: {score2}")
  if score1 > score2:
        print("Победил игрок 1!")
  elif score2 > score1:
        print("Победил игрок 2!")
  else:
      print("Ничья!")

def play_awari():
    """
    Запускает игровой процесс.
    """
    # 1. Инициализация
    board = [4] * 16 # Игровое поле 14 домов + 2 банка для игроков
    turn = 0 # 0 - игрок 1, 1 - игрок 2
    board[14] = 0 # Банк для игрока 1
    board[15] = 0 # Банк для игрока 2
    # 2. Игровой цикл
    while True:
        # 2.1. Отображение доски
        showBoard(board)
        # 2.2. Вывод сообщения, какой игрок сейчас ходит
        print(f"Ход игрока {turn + 1}")
        # 2.3. Запрос номера дома
        while True:
          try:
            houseNumber = int(input("Выберите номер дома для хода: "))
            if (turn == 0 and (houseNumber < 0 or houseNumber > 6)) or (turn == 1 and (houseNumber < 7 or houseNumber > 13)):
               print("Неверный номер дома для вашего хода. Попробуйте еще раз.")
            elif board[houseNumber] == 0:
                print("В этом доме нет фишек. Попробуйте еще раз.")
            else:
              break
          except ValueError:
              print("Неверный ввод. Пожалуйста, введите целое число.")

        # 2.4. Выполнение хода
        move(board, houseNumber, turn)
        # 2.5. Переключение хода
        turn = 1 - turn
        # 3. Проверка окончания игры
        if checkEnd(board):
            break
    # 4. Подсчет очков и определение победителя
    print_winner(board)


if __name__ == "__main__":
    play_awari()
"""
Пояснения:
1. **Импорт модуля `time`**:
   - `import time`: Импортирует модуль time, который используется для добавления задержки.

2.  **Функция `showBoard(board)`**:
   -   Отображает текущее состояние игровой доски.
   -   Принимает список `board`, представляющий дома с фишками.
   -  Выводит номера домов для каждого игрока и количество фишек в них в формате таблицы.
   
3.  **Функция `move(board, houseNumber, turn)`**:
   -  Выполняет ход игрока, обновляя состояние игровой доски.
   -  `board (list)`: Список, представляющий игровое поле.
   - `houseNumber (int)`: Номер дома, из которого игрок берёт фишки.
   -  `turn (int)`: Номер текущего игрока (0 или 1).
    -  Извлекает количество фишек из выбранного дома, обнуляет его и распределяет фишки по следующим домам.
   -  Если последняя фишка попала в пустой дом игрока, проверяет есть ли фишки напротив.
   -  Если фишки напротив есть, то они захватываются и помещаются в банк игрока.
   
4. **Функция `checkEnd(board)`**:
    -   Проверяет, закончилась ли игра. Игра заканчивается когда у одного из игроков все дома пустые
    -   Принимает список `board`, представляющий доску.
    -   Возвращает `True`, если игра закончилась, иначе `False`.

5. **Функция `print_winner(board)`**:
    -   Выводит на экран победителя игры
    -   Принимает список `board`, представляющий доску.
    -  Определяет победителя на основе количества фишек в банках каждого игрока.

6.  **Функция `play_awari()`**:
   -   Основная функция, запускающая игровой процесс.
   -   Инициализирует игровую доску, устанавливая по 4 фишки в каждый дом, а также банки игроков.
   -   Запускает игровой цикл, пока игра не закончится.
   -  В цикле запрашивает у игрока номер дома, выполняет ход, меняет игрока, проверяет окончание игры.
   -  После окончания игры выводит победителя.

7.  **Запуск игры**:
   -  `if __name__ == "__main__":`: Гарантирует, что код будет выполнен при запуске файла напрямую.
   -  `play_awari()`: Запускает игру "Авари".
"""
