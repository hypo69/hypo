Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код отвечает за отображение результатов поиска, выполненного расширением `tryxpath`. Он получает данные о результатах поиска (в переменной `results`) и заполняет различные элементы HTML на странице, включая заголовки, URL, выражения поиска, детали контекста и результаты поиска.  Код также предоставляет возможность скачать результаты в текстовом формате (с JSON и без).  Он обрабатывает контекстные данные (`results.context`) и основные результаты (`results.main`), заполняя соответствующие таблицы.  При нажатии на кнопки в таблицах, код отправляет сообщения в активную вкладку, чтобы сфокусироваться на конкретном элементе.

Шаги выполнения
-------------------------
1. **Получение результатов:** Код ожидает получения данных о результатах поиска через событие `load`.  `browser.runtime.sendMessage` отправляет запрос, а затем обрабатывает полученные данные (`results`).


2. **Обработка результатов:**
    - Заполняет элементы HTML с данными из `results` (заголовок, сообщение, URL, `frameId`, и т.д.).
    - Обрабатывает контекстные данные (`results.context`):
        - Если контекст есть, обновляет элементы HTML, связанные с контекстом.
        - Обновляет таблицу с деталями контекста (`fu.updateDetailsTable`) используя функцию `fu.updateDetailsTable`.
    - Обрабатывает основные результаты (`results.main`)
        - Обновляет элементы HTML, связанные с основными результатами.
        - Обновляет таблицу с деталями основных результатов (`fu.updateDetailsTable`).


3. **Обработка ошибок:** При ошибках вызов `catch(fu.onError)` обрабатывает исключения.

4. **Функция `makeTextDownloadUrl`**:  Создает ссылку для скачивания текста.

5. **Функции `makeInfoText` и `makeConvertedInfoText`**:  Формируют текстовое представление результатов для скачивания (с/без JSON).


6. **Обработка событий клика:**
    - При клике по кнопке в таблице контекста отправляет сообщение `browser.tabs.sendMessage` в активную вкладку, чтобы сфокусироваться на соответствующем контекстном элементе.
    - При клике по кнопке в таблице основных результатов (`main-details`) отправляет сообщение в активную вкладку, чтобы сфокусироваться на элементе по индексу.

7. **Установление обработчиков событий:**  Добавляет обработчики событий `load`, клика на кнопки в таблице контекста и в таблице основных результатов.


Пример использования
-------------------------
.. code-block:: javascript

    // Пример того, как вызвать функцию showAllResults
    let sampleResults = {
        "message": "some message",
        "title": "some title",
        "href": "some url",
        "frameId": 123,
        "context": {
            "method": "some method",
            "expression": "some expression",
            "specifiedResultType": "some type",
            "resultType": "some type",
            "resolver": "some resolver",
            "itemDetail": [{"type": "type1", "name": "name1", "value": "value1", "textContent": "text1"}]
        },
        "main": {
            "method": "some method",
            "expression": "some expression",
            "specifiedResultType": "some type",
            "resultType": "some type",
            "resolver": "some resolver",
            "itemDetails": [{"type": "type1", "name": "name1", "value": "value1", "textContent": "text1"}, {"type": "type2", "name": "name2", "value": "value2", "textContent": "text2"}]
        }
    };
    showAllResults(sampleResults);