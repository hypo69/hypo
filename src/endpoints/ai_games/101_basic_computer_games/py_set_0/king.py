"""
KING:
=================
Сложность: 4
-----------------
Игра "KING" - это простая игра, в которой игрок пытается угадать задуманное компьютером случайное число в диапазоне от 1 до 100. Компьютер сообщает, больше или меньше загаданное число, чем предположение игрока.
Правила игры:
1. Компьютер генерирует случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свое предположение.
3. Компьютер сравнивает предположение игрока с загаданным числом и сообщает, больше или меньше предположение, чем загаданное число.
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число.
5. После угадывания числа, игра заканчивается.
-----------------
Алгоритм:
1. Установить начальное количество попыток, равным 0.
2. Сгенерировать случайное число в диапазоне от 1 до 100 и присвоить его переменной `secretNumber`.
3. В цикле:
   3.1 Увеличить количество попыток на 1.
   3.2 Запросить у игрока ввод предположения и присвоить его переменной `guess`.
   3.3 Если `guess` равно `secretNumber`, то вывести сообщение "YOU GOT IT IN <попыток> TRIES" и завершить игру.
   3.4 Если `guess` меньше `secretNumber`, то вывести сообщение "TOO LOW".
   3.5 Если `guess` больше `secretNumber`, то вывести сообщение "TOO HIGH".
4. Перейти к шагу 3.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> Initialize(Инициализация: attempts = 0);
    Initialize --> GenerateSecretNumber(Генерировать случайное secretNumber от 1 до 100);
    GenerateSecretNumber --> InputGuess(Ввод предположения guess от игрока);
    InputGuess --> IncrementAttempts(Увеличить attempts на 1);
    IncrementAttempts --> CheckGuess(Проверка: guess == secretNumber?);
    CheckGuess -- Yes --> OutputWin(Вывести "YOU GOT IT IN attempts TRIES");
    OutputWin --> End(End);
    CheckGuess -- No --> CheckLow(Проверка: guess < secretNumber?);
    CheckLow -- Yes --> OutputLow(Вывести "TOO LOW");
    OutputLow --> InputGuess;
     CheckLow -- No --> CheckHigh(Проверка: guess > secretNumber?);
     CheckHigh -- Yes --> OutputHigh(Вывести "TOO HIGH");
     OutputHigh --> InputGuess;
     CheckHigh -- No --> InputGuess;
```
"""
import random

def play_king():
    """
    Функция, реализующая игру "KING".

    Игра заключается в отгадывании случайного числа, загаданного компьютером.
    """
    # Инициализация количества попыток
    attempts = 0

    # Генерация случайного числа от 1 до 100
    secret_number = random.randint(1, 100)

    # Бесконечный цикл, пока игрок не угадает число
    while True:
        # Увеличение количества попыток
        attempts += 1

        # Запрос ввода предположения от игрока
        try:
            guess = int(input("GUESS MY NUMBER: "))
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue

        # Проверка, угадано ли число
        if guess == secret_number:
            print(f"YOU GOT IT IN {attempts} TRIES")
            break  # Выход из цикла, если число угадано
        elif guess < secret_number:
            print("TOO LOW")
        else:
            print("TOO HIGH")


if __name__ == "__main__":
    play_king()

"""
Пояснения:
1. `import random`: Импортируем модуль `random` для генерации случайных чисел.
2. `play_king()`: Функция, в которой реализована логика игры.
3. `attempts = 0`: Инициализируем переменную `attempts` (количество попыток) нулем.
4. `secret_number = random.randint(1, 100)`: Генерируем случайное целое число от 1 до 100 и сохраняем его в `secret_number`.
5. `while True`: Бесконечный цикл, который будет выполняться до тех пор, пока игрок не угадает число.
6. `attempts += 1`: Увеличиваем счетчик попыток на 1.
7. `guess = int(input("GUESS MY NUMBER: "))`: Запрашиваем у игрока ввод числа и преобразуем его в целое число. Используется try-except для обработки ошибки, если пользователь введет не число.
8.  `if guess == secret_number:`: Проверяем, равно ли предположение игрока загаданному числу.
   9.  Если условие выполняется, выводим сообщение об успехе и количество попыток, после чего выходим из цикла с помощью `break`.
10. `elif guess < secret_number`: Если предположение меньше загаданного числа, выводим сообщение "TOO LOW".
11. `else`: Если предположение больше загаданного числа, выводим сообщение "TOO HIGH".
12. `if __name__ == "__main__":`: Этот блок кода гарантирует, что функция `play_king()` будет вызвана только при запуске скрипта напрямую.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
