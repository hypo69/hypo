Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует приложение для добавления и удаления пункта контекстного меню ('hypo AI assistant') в контекстное меню рабочего стола и папок Windows Explorer.  Он использует Windows Registry для модификации контекстного меню. Приложение имеет графический интерфейс с кнопками для добавления и удаления пункта меню и выхода.  Код работает с использованием PyQt6 и модуля `winreg` для взаимодействия с реестром Windows.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**  Код импортирует модули `winreg` для взаимодействия с реестром Windows, `os` для работы с файлами и путями, `QtWidgets` из PyQt6 для создания графического интерфейса, и, предположительно, `header` и `gs` для дополнительных настроек или доступа к ресурсам проекта.

2. **Функция `add_context_menu_item`:**
   - Определяет путь в реестре для создания нового пункта меню (`key_path`).
   - Использует `reg.CreateKey` для создания новой записи в реестре в указанном пути.
   - Устанавливает имя пункта меню (`reg.SetValue`) с помощью `reg.REG_SZ` (строка).
   - Определяет путь для команды, связанной с пунктом (`command_key`).
   - Использует `gs.path.src` для получения пути к файлу скрипта (подробности, как получить путь, см. в примере).
   - Проверяет существование файла скрипта с помощью `os.path.exists`. Если файл отсутствует, выводит сообщение об ошибке и завершает функцию.
   - Записывает в реестр команду запуска скрипта с помощью `python` (включая путь к файлу и аргумент `%1`).
   - Выводит подтверждающее сообщение об успешном добавлении пункта меню.
   - Обрабатывает возможные ошибки при работе с реестром и выводит соответствующие сообщения.


3. **Функция `remove_context_menu_item`:**
   - Определяет путь к пункту меню в реестре (`key_path`).
   - Использует `reg.DeleteKey` для удаления записи из реестра.
   - Выводит подтверждающее сообщение об успешном удалении пункта меню.
   - Обрабатывает случаи, когда пункта меню не существует (`FileNotFoundError`) или при других ошибках.

4. **Класс `ContextMenuManager`:**
   - Наследуется от `QtWidgets.QWidget` для создания главного окна приложения.
   - Инициализирует интерфейс (`initUI`).
   - Создает кнопки "Добавить пункт меню", "Удалить пункт меню", "Выход".
   - Связывает клики по кнопкам с соответствующими функциями (с помощью `clicked.connect`).
   - Устанавливает заголовок окна.
   - Создает вертикальную компоновку.
   - Устанавливает компоновку в окно.

5. **Основной блок кода (`if __name__ == "__main__":`)**
   - Инициализирует приложение PyQt6 (`QtWidgets.QApplication`).
   - Создает и отображает главное окно (`window`).
   - Запускает цикл обработки событий приложения (`app.exec()`).


Пример использования
-------------------------
.. code-block:: python

    # Пример использования функции add_context_menu_item.
    # Предполагается, что gs.path.src  уже инициализирован и содержит корректный путь.
    # Например, в файле header.py или gs.py
    import header
    import gs
    gs.path.src = "/path/to/your/src/folder"

    try:
      add_context_menu_item()
    except Exception as e:
      print(f"Ошибка при добавлении: {e}")


    # Пример использования функции remove_context_menu_item.
    try:
      remove_context_menu_item()
    except Exception as e:
      print(f"Ошибка при удалении: {e}")