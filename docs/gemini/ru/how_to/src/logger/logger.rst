Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот модуль предоставляет утилиту для ведения журнала (логгера) как синглтон с различными уровнями и форматами логирования, включая консоль, файл и JSON. Он использует паттерн проектирования "синглтон", гарантируя, что в приложении используется только один экземпляр логгера. Логгер поддерживает различные уровни логирования и форматы вывода, а также может добавлять цвет к сообщениям в консоли, основываясь на уровне важности. Модуль содержит классы для реализации синглтона, кастомного форматера JSON, и логгера, и предоставляет методы для записи сообщений различного уровня важности, с возможностью указания цвета и информации об исключениях.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Модуль импортирует `threading`, `traceback`, `logging`, `typing`, `colorama`, `datetime`, `json` и `inspect` для работы с потоками, отслеживанием стека вызовов, логированием, типами данных, цветами консоли, датами, JSON и анализом стека вызовов.

2. **Определение метакласса `SingletonMeta`:** Этот метакласс реализует паттерн проектирования "синглтон", гарантируя, что существует только один экземпляр класса.

3. **Определение класса `JsonFormatter`:** Этот класс расширяет `logging.Formatter` и предоставляет кастомный формат логирования в формате JSON.

4. **Определение класса `Logger`:** Этот класс реализует логгер как синглтон. Он содержит атрибуты для разных типов логгеров (консоль, файлы, JSON) и флаг `_initialized`,  указывающий, был ли логгер инициализирован.

5. **Метод `_configure_logger`:** Настраивает и возвращает логгер с заданными параметрами (имя, путь к файлу, уровень логирования, форматер, режим файла).

6. **Метод `initialize_loggers`:** Инициализирует логгеры для вывода в консоль, файлы (информация, отладка, ошибки) и JSON.  Проверяет, был ли логгер инициализирован, и добавляет обработчики для каждого типа логгера.

7. **Методы `_format_message`, `_ex_full_info`:** Форматируют сообщение с опциональными цветом и информацией об исключениях (включая файл, функцию и номер строки, где вызван метод логгирования).

8. **Метод `log`:** Общий метод для записи сообщений на заданном уровне важности с опциональными цветом и информацией об исключениях. Записывает сообщения в консоль, файл JSON, и файлы с информацией, отладкой и ошибками, в зависимости от уровня важности.

9. **Методы `info`, `success`, `warning`, `debug`, `error`, `critical`:**  Специализированные методы для логирования сообщений на разных уровнях важности (информация, успех, предупреждение, отладка, ошибка, критическая ошибка) с опциональными параметрами цвета. Используют метод `log` для записи сообщений.

Пример использования
-------------------------
.. code-block:: python

    import colorama

    logger = Logger()
    logger.initialize_loggers(info_log_path='info.log', debug_log_path='debug.log', errors_log_path='errors.log', json_log_path='log.json')
    try:
        some_code_that_might_raise_exception()
    except Exception as ex:
        logger.error("Произошла ошибка", ex, exc_info=True, colors=(colorama.Fore.WHITE, colorama.Back.RED))


    logger.info('Это информационное сообщение.')
    logger.debug('Это отладочное сообщение.')
    logger.warning('Это предупреждение.')
    logger.success("Успешное действие.")