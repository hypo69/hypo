"""
BULLCOW:
=================
Сложность: 7
-----------------
Игра "Быки и коровы" - это игра, в которой компьютер выбирает секретное четырехзначное число, состоящее из неповторяющихся цифр. Игрок пытается угадать это число, и после каждой попытки компьютер сообщает количество "быков" (цифры на правильных позициях) и "коров" (цифры, присутствующие в числе, но на неправильных позициях). Цель игры - угадать число за минимальное количество попыток.

Правила игры:
1. Компьютер выбирает секретное четырехзначное число, состоящее из неповторяющихся цифр.
2. Игрок вводит свои предположения о загаданном числе.
3. После каждой попытки компьютер сообщает количество "быков" и "коров".
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число.
-----------------
Алгоритм:
1.  Сгенерировать случайное четырехзначное число, все цифры которого различны.
2.  Установить счетчик попыток в 0.
3.  Начать цикл "пока число не угадано":
    3.1 Увеличить счетчик попыток на 1.
    3.2 Запросить у игрока ввод четырехзначного числа.
    3.3 Проверить корректность ввода (четыре цифры, все цифры разные). Если ввод некорректен, вернуться к шагу 3.2.
    3.4 Подсчитать количество "быков" (цифр на правильных позициях).
    3.5 Подсчитать количество "коров" (цифр, присутствующих в числе, но на неправильных позициях).
    3.6 Вывести количество "быков" и "коров" для текущей попытки.
    3.7 Если количество "быков" равно 4, перейти к шагу 4.
4. Вывести сообщение о победе и количестве попыток.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateSecretNumber["Сгенерировать секретное число: <code><b>secretNumber</b></code>"]
    GenerateSecretNumber --> InitializeGuesses["Инициализировать количество попыток: <code><b>numberOfGuesses = 0</b></code>"]
    InitializeGuesses --> LoopStart{"Начало цикла: пока число не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> ValidateGuess{"Проверка ввода: <code><b>userGuess</b></code> - 4 цифры, все разные?"}
    ValidateGuess -- Нет --> InputGuess
    ValidateGuess -- Да --> CalculateBullsCows["Вычисление быков и коров"]
    CalculateBullsCows --> OutputBullsCows["Вывод: <code><b>быков</b></code>, <code><b>коров</b></code>"]
    OutputBullsCows --> CheckWin{"Проверка: <code><b>быков = 4?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> End
```
**Legenda:**
    Start - Начало программы.
    GenerateSecretNumber - Генерация секретного четырехзначного числа, состоящего из уникальных цифр.
    InitializeGuesses - Инициализация счетчика количества попыток, устанавливается в 0.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    ValidateGuess - Проверка корректности ввода: проверяется, состоит ли число из 4 уникальных цифр. Если ввод некорректный, то возвращается к запросу ввода.
    CalculateBullsCows - Вычисление количества "быков" и "коров" на основе введенного и загаданного чисел.
    OutputBullsCows - Вывод пользователю количества "быков" и "коров".
    CheckWin - Проверка, равно ли количество "быков" 4.
    OutputWin - Вывод сообщения о победе, если число угадано, с указанием количества попыток.
    End - Конец программы.
"""

import random

def generate_secret_number():
    """Генерирует случайное четырехзначное число с неповторяющимися цифрами."""
    digits = list(range(10))
    random.shuffle(digits)
    return "".join(map(str, digits[0:4]))

def calculate_bulls_cows(secret, guess):
    """Вычисляет количество быков и коров для заданных секретного и введенного чисел."""
    bulls = 0
    cows = 0
    for i in range(4):
        if secret[i] == guess[i]:
            bulls += 1
        elif guess[i] in secret:
            cows += 1
    return bulls, cows

# 1. Генерация секретного числа
secretNumber = generate_secret_number()
# 2. Инициализация счетчика попыток
numberOfGuesses = 0

# 3. Основной игровой цикл
while True:
    # 3.1 Увеличение счетчика попыток
    numberOfGuesses += 1
    # 3.2 Запрос ввода числа у пользователя
    userGuess = input("Введите четырехзначное число с неповторяющимися цифрами: ")
    # 3.3 Проверка корректности ввода
    if not (len(userGuess) == 4 and userGuess.isdigit() and len(set(userGuess)) == 4):
        print("Некорректный ввод. Пожалуйста, введите четырехзначное число с неповторяющимися цифрами.")
        continue
    
    # 3.4 и 3.5 Подсчет быков и коров
    bulls, cows = calculate_bulls_cows(secretNumber, userGuess)
    # 3.6 Вывод результатов
    print(f"Быки: {bulls}, Коровы: {cows}")
    # 3.7 Проверка на победу
    if bulls == 4:
        print(f"Поздравляю! Вы угадали число за {numberOfGuesses} попыток!")
        break
"""
Пояснения:
1.  **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, необходимый для генерации случайного числа.
2.  **Функция `generate_secret_number()`**:
    -   `def generate_secret_number():`: Определяет функцию для генерации случайного 4-значного числа с неповторяющимися цифрами.
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
    -   `return "".join(map(str, digits[0:4]))`: Возвращает строку, представляющую случайное число из первых 4 цифр списка.
3.  **Функция `calculate_bulls_cows(secret, guess)`**:
    -   `def calculate_bulls_cows(secret, guess):`: Определяет функцию для подсчета быков и коров.
    -   `bulls = 0; cows = 0`: Инициализирует счетчики быков и коров.
    -   `for i in range(4):`: Цикл для перебора цифр в загаданном и введенном числах.
    -   `if secret[i] == guess[i]:`: Проверяет, есть ли цифра на той же позиции ("бык").
    -   `elif guess[i] in secret:`: Проверяет, есть ли цифра в загаданном числе, но на другой позиции ("корова").
    -   `return bulls, cows`: Возвращает количество быков и коров.
4.  **Основная часть программы**:
    -   `secretNumber = generate_secret_number()`: Генерирует секретное число.
    -   `numberOfGuesses = 0`: Инициализирует счетчик попыток.
    -   `while True:`: Бесконечный цикл, который продолжается до угадывания числа.
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток.
    -   `userGuess = input("Введите четырехзначное число с неповторяющимися цифрами: ")`: Запрашивает ввод числа у пользователя.
    -   `if not (len(userGuess) == 4 and userGuess.isdigit() and len(set(userGuess)) == 4):`: Проверяет корректность ввода (4 цифры, все уникальные).
    -   `print("Некорректный ввод...")`: Сообщает об ошибке, если ввод некорректный.
    -   `bulls, cows = calculate_bulls_cows(secretNumber, userGuess)`: Вызывает функцию для подсчета быков и коров.
    -   `print(f"Быки: {bulls}, Коровы: {cows}")`: Выводит результат.
    -   `if bulls == 4:`: Проверяет, угадано ли число (4 быка).
    -   `print(f"Поздравляю! Вы угадали число за {numberOfGuesses} попыток!")`: Сообщает о победе.
    -   `break`: Выход из цикла.
"""
