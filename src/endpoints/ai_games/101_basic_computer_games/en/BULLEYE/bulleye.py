"""
<BULLEYE>:
=================
Сложность: 4
-----------------
Игра "Буллит" - это игра, в которой игрок пытается угадать координаты на мишени. Мишень представляет собой окружность, разделенную на несколько зон, каждая из которых приносит игроку разное количество очков. Игрок вводит координаты (x, y) и получает очки в зависимости от того, в какую зону мишени попал его выстрел. Игра заканчивается, когда игрок набирает 100 или больше очков.

Правила игры:
1. Мишень представляет собой круг с радиусом 10.
2. Центр мишени имеет координаты (0, 0).
3. Мишень разделена на следующие зоны:
    - Попадание в центр (радиус 1): 10 очков.
    - Попадание во внутренний круг (радиус 5): 5 очков.
    - Попадание во внешний круг (радиус 10): 2 очка.
    - Промах (за пределами радиуса 10): 0 очков.
4. Игрок вводит координаты выстрела (x, y).
5. Игра продолжается до тех пор, пока игрок не наберет 100 очков или больше.
-----------------
Алгоритм:
1. Установить счет игрока в 0.
2. Начать цикл "пока счет игрока меньше 100":
   2.1 Запросить у игрока ввод координат x и y.
   2.2 Вычислить расстояние от точки (x, y) до центра (0, 0).
   2.3 В зависимости от расстояния, начислить очки:
        - Если расстояние <= 1, добавить 10 очков.
        - Иначе если расстояние <= 5, добавить 5 очков.
        - Иначе если расстояние <= 10, добавить 2 очка.
        - Иначе добавить 0 очков.
   2.4 Вывести текущий счет игрока.
3. Вывести сообщение "YOU SCORED {счет игрока} POINTS."
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeScore["<code><b>playerScore = 0</b></code>"]
    InitializeScore --> LoopStart{"Начало цикла: пока <code><b>playerScore < 100</b></code>"}
    LoopStart -- Да --> InputCoordinates["Ввод координат <code><b>x, y</b></code>"]
    InputCoordinates --> CalculateDistance["<code><b>distance = sqrt(x^2 + y^2)</b></code>"]
    CalculateDistance --> CheckCenter{"Проверка: <code><b>distance <= 1?</b></code>"}
    CheckCenter -- Да --> Add10Points["<code><b>playerScore = playerScore + 10</b></code>"]
    Add10Points --> OutputScore["Вывод текущего счета <code><b>playerScore</b></code>"]
    OutputScore --> LoopStart
    CheckCenter -- Нет --> CheckInner{"Проверка: <code><b>distance <= 5?</b></code>"}
    CheckInner -- Да --> Add5Points["<code><b>playerScore = playerScore + 5</b></code>"]
    Add5Points --> OutputScore
    OutputScore --> LoopStart
    CheckInner -- Нет --> CheckOuter{"Проверка: <code><b>distance <= 10?</b></code>"}
    CheckOuter -- Да --> Add2Points["<code><b>playerScore = playerScore + 2</b></code>"]
    Add2Points --> OutputScore
    OutputScore --> LoopStart
    CheckOuter -- Нет --> Add0Points["<code><b>playerScore = playerScore + 0</b></code>"]
    Add0Points --> OutputScore
    OutputScore --> LoopStart
    LoopStart -- Нет --> OutputFinalScore["Вывод сообщения: <b>YOU SCORED <code>{playerScore}</code> POINTS.</b>"]
    OutputFinalScore --> End["Конец"]
```

Legenda:
    Start - Начало игры.
    InitializeScore - Инициализация переменной playerScore (счет игрока) в 0.
    LoopStart - Начало цикла, который продолжается, пока счет игрока меньше 100.
    InputCoordinates - Запрос у пользователя ввода координат x и y.
    CalculateDistance - Вычисление расстояния от точки (x, y) до центра (0, 0).
    CheckCenter - Проверка, находится ли расстояние в пределах центральной зоны (радиус 1).
    Add10Points - Добавление 10 очков к счету игрока, если попадание в центр.
    OutputScore - Вывод текущего счета игрока.
    CheckInner - Проверка, находится ли расстояние в пределах внутреннего круга (радиус 5).
    Add5Points - Добавление 5 очков к счету игрока, если попадание во внутренний круг.
    CheckOuter - Проверка, находится ли расстояние в пределах внешнего круга (радиус 10).
    Add2Points - Добавление 2 очка к счету игрока, если попадание во внешний круг.
    Add0Points - Добавление 0 очков к счету игрока, если промах.
    OutputFinalScore - Вывод сообщения о конечном счете игрока после завершения игры.
    End - Конец игры.
"""
import math

# Инициализация счета игрока
playerScore = 0

# Основной игровой цикл
while playerScore < 100:
    try:
        # Запрос координат у пользователя
        x = float(input("Введите координату x: "))
        y = float(input("Введите координату y: "))
    except ValueError:
        print("Пожалуйста, введите числовые значения для координат.")
        continue

    # Вычисление расстояния от точки (x, y) до центра (0, 0)
    distance = math.sqrt(x**2 + y**2)

    # Начисление очков в зависимости от зоны попадания
    if distance <= 1:
        playerScore += 10
    elif distance <= 5:
        playerScore += 5
    elif distance <= 10:
        playerScore += 2
    else:
        playerScore += 0
    
    # Вывод текущего счета
    print(f"Текущий счет: {playerScore}")

# Вывод сообщения о завершении игры
print(f"YOU SCORED {playerScore} POINTS.")
"""
Объяснение кода:
1.  **Импорт модуля `math`**:
    -  `import math`: Импортирует модуль `math`, который используется для математических операций, таких как вычисление квадратного корня.
2.  **Инициализация счета игрока**:
    - `playerScore = 0`: Инициализирует переменную `playerScore`, которая хранит текущий счет игрока, начиная с 0.
3.  **Основной игровой цикл `while playerScore < 100:`**:
    -   Цикл выполняется, пока счет игрока меньше 100.
    -   **Ввод координат**:
        -   `try...except ValueError:`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не числовые значения, то выводится сообщение об ошибке.
        -   `x = float(input("Введите координату x: "))`: Запрашивает у пользователя координату x и преобразует ее в число с плавающей точкой.
        -   `y = float(input("Введите координату y: "))`: Запрашивает у пользователя координату y и преобразует ее в число с плавающей точкой.
    -   **Вычисление расстояния**:
        -   `distance = math.sqrt(x**2 + y**2)`: Вычисляет расстояние от точки (x, y) до центра (0, 0) по формуле sqrt(x^2 + y^2).
    -   **Начисление очков**:
        -   `if distance <= 1:`: Проверяет, попала ли точка в центр мишени (радиус 1). Если да, то к счету добавляется 10 очков.
        -   `elif distance <= 5:`: Проверяет, попала ли точка во внутреннюю зону мишени (радиус 5). Если да, то к счету добавляется 5 очков.
        -   `elif distance <= 10:`: Проверяет, попала ли точка во внешнюю зону мишени (радиус 10). Если да, то к счету добавляется 2 очка.
        -   `else:`: Если точка не попала ни в одну из зон, то к счету добавляется 0 очков.
    -   **Вывод текущего счета**:
         -   `print(f"Текущий счет: {playerScore}")`: Выводит текущий счет игрока после каждого выстрела.
4. **Вывод конечного счета**:
     -   `print(f"YOU SCORED {playerScore} POINTS.")`: Выводит сообщение с конечным счетом, когда игрок наберет 100 и более очков.
"""
