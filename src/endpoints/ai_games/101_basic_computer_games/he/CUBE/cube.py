<CUBE>:
=================
קושי: 2
-----------------
המשחק "CUBE" הוא משחק פשוט בו השחקן צריך לנחש את המספר המוגרל על ידי המחשב. המחשב מגריל מספר אקראי מ-1 עד 6. השחקן מזין ניחוש. המשחק מסתיים כאשר השחקן מנחש נכונה.

חוקי המשחק:
1. המחשב מגריל מספר אקראי בין 1 ל-6.
2. השחקן מזין ניחוש.
3. אם הניחוש נכון, המשחק מסתיים ומוצגת הודעה.
4. אם הניחוש לא נכון, המשחק מבקש ניחוש נוסף.
-----------------
אלגוריתם:
1. הגרל מספר אקראי בין 1 ל-6 ושמור אותו כ-`targetNumber`.
2. התחל לולאה "כל עוד לא נוחש":
    2.1. בקש מהמשתמש להזין ניחוש ושמור אותו כ-`userGuess`.
    2.2. אם הניחוש שווה למספר המוגרל, הצג הודעת ניצחון וסיים את המשחק.
    2.3. אם הניחוש לא שווה למספר המוגרל, המשך בלולאה.
3. סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeTargetNumber["<code><b>targetNumber = random(1, 6)</b></code>"]
    InitializeTargetNumber --> LoopStart{"תחילת לולאה: כל עוד לא נוחש"}
    LoopStart --> InputGuess["קלט מספר מהמשתמש: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"בדיקה: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- כן --> OutputWin["הצגת הודעה: <b>YOU GOT IT!</b>"]
    OutputWin --> End["סוף"]
    CheckGuess -- לא --> LoopStart
```
Legenda:
    Start - התחלת התוכנית.
    InitializeTargetNumber - יצירת מספר אקראי בין 1 ל-6 ושמירתו במשתנה `targetNumber`.
    LoopStart - תחילת הלולאה, הממשיכה כל עוד המספר לא נוחש.
    InputGuess - קלט מספר מהמשתמש ושמירתו במשתנה `userGuess`.
    CheckGuess - בדיקה האם המספר שהוזן שווה למספר המוגרל.
    OutputWin - הצגת הודעת ניצחון אם המספר נוחש.
    End - סוף התוכנית.
"""
import random

# הפונקציה הראשית של המשחק
def play_cube_game():
    # הגרלת מספר אקראי בין 1 ל-6
    targetNumber = random.randint(1, 6)
    
    # לולאת המשחק
    while True:
        # קלט מהמשתמש
        try:
            userGuess = int(input("נחש מספר בין 1 ל-6: "))
        except ValueError:
            print("אנא הזן מספר שלם.")
            continue
        
        # בדיקה אם הניחוש נכון
        if userGuess == targetNumber:
            print("מזל טוב! ניחשת נכון!")
            break # סיום המשחק
        else:
            print("נסה שוב.")

# הפעלת המשחק רק אם הקובץ מופעל ישירות
if __name__ == "__main__":
    play_cube_game()
"""
הסבר הקוד:
1. **ייבוא המודול `random`**:
   - `import random`: ייבוא מודול `random` כדי לייצר מספר אקראי.

2. **הגדרת הפונקציה `play_cube_game()`**:
   - `def play_cube_game():`: הגדרת פונקציה המכילה את כל הלוגיקה של המשחק.
   
3. **הגרלת מספר אקראי**:
   - `targetNumber = random.randint(1, 6)`: יצירת מספר שלם אקראי בין 1 ל-6 (כולל 1 ו-6) והשמתו למשתנה `targetNumber`. זהו המספר שהמשתמש צריך לנחש.
   
4. **לולאת המשחק `while True:`**:
   - לולאה אינסופית, אשר תרוץ עד שהמשתמש ינחש נכון.
   
5. **קלט מהמשתמש**:
   - `userGuess = int(input("נחש מספר בין 1 ל-6: "))`: הצגת הודעה למשתמש להזין ניחוש, והמרתו למספר שלם.
   - `try...except ValueError`: טיפול בשגיאת קלט, אם המשתמש לא הזין מספר שלם.
6.  **בדיקת הניחוש**:
   - `if userGuess == targetNumber:`: בדיקה האם הניחוש של המשתמש (`userGuess`) שווה למספר המוגרל (`targetNumber`).
   - `print("מזל טוב! ניחשת נכון!")`: אם הניחוש נכון, מוצגת הודעה למשתמש שהוא ניצח.
   - `break`: סיום הלולאה, והמשחק.
   - `else:`: אם הניחוש אינו נכון.
   - `print("נסה שוב.")`: מוצגת הודעה למשתמש שהוא טעה, והלולאה ממשיכה לסיבוב נוסף.
    
7. **הפעלת המשחק**:
   - `if __name__ == "__main__":`: בדיקה אם הקובץ מורץ ישירות (ולא מיובא כמודול).
   - `play_cube_game()`: אם הקובץ מורץ ישירות, המשחק מופעל על ידי קריאה לפונקציה.

"""
