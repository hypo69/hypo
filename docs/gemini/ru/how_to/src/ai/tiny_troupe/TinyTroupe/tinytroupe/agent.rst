Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот модуль предоставляет основные классы и функции для агентов TinyTroupe. Агенты представляют собой симулированных людей или сущности, которые могут взаимодействовать друг с другом и с окружением, получая стимулы и генерируя действия. Агенты обладают когнитивными состояниями, которые обновляются по мере взаимодействия с окружением и другими агентами. Они также могут хранить и извлекать информацию из памяти и выполнять действия в среде. В отличие от агентов, цель которых — предоставлять поддержку для основанных на ИИ помощников или других инструментов повышения производительности, агенты TinyTroupe стремятся представлять человекоподобное поведение, которое включает особенности, эмоции и другие человеческие черты, которых нельзя ожидать от инструмента повышения производительности.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Модуль импортирует необходимые библиотеки, такие как `os`, `csv`, `json`, `ast`, `textwrap`, `datetime`, `chevron`, `logging`, `tinytroupe.utils`, `tinytroupe.control`, `rich`, `copy`, и `typing`.  Это обеспечивает доступ к функциям для работы с файлами, данными, временем, шаблонами, логгированием, утилитами TinyTroupe, управления симуляцией и т.д.
2. **Определение конфигурации:** Модуль читает конфигурационный файл и устанавливает значения по умолчанию для параметров, таких как модель встраивания (`embedding_model`), максимальная длина отображаемого содержимого (`max_content_display_length`). Эти значения могут быть настроены в конфигурационном файле.
3. **Инициализация модели встраивания (Embedding):**  Модуль инициализирует модель встраивания `OpenAIEmbedding`, которая используется для преобразования текста в векторные представления.  Это важно для поиска информации в памяти.
4. **Определение класса `TinyPerson`:**  Определяется основной класс `TinyPerson`, представляющий собой симулированного человека.  Этот класс содержит методы для инициализации, взаимодействия, хранения и извлечения информации, а также для выполнения действий в среде.
5. **Инициализация `TinyPerson`:**  Класс `TinyPerson` может быть инициализирован с именем, памятью, когнитивными способностями.  В `_post_init` методе происходит дополнительная инициализация, включая создание буферов для сообщений, действий, доступных агентов, и отображаемых сообщений.
6. **Генерация приглашения для агента:** Метод `generate_agent_prompt` генерирует приглашение для агента на основе шаблона из файла `prompts/tinyperson.mustache`. Это приглашение определяет поведение агента и используется для общения с агентом.
7. **Сброс приглашения (`reset_prompt`):**  Этот метод обновляет приглашение агента, учитывая новую информацию или изменения в его конфигурации, включая сообщения из памяти.
8. **Определение значений в конфигурации (`define`):**  Методы `define`, `define_several`, `define_relationships` позволяют изменять значения в конфигурации агента.
9. **Управление отношениями между агентами (`related_to`, `clear_relationships`):**  Методы позволяют определять и изменять отношения между агентами, например, "друг", "коллега".
10. **Добавление когнитивных способностей (`add_mental_faculties`, `add_mental_faculty`):**  Агенты могут иметь различные когнитивные способности, например, "восприятие файлов", "восприятие веб-страниц".
11. **Действие (`act`):**  Этот метод позволяет агенту выполнять действия в среде, обновляя внутреннее когнитивное состояние.
12. **Прослушивание (`listen`):**  Этот метод позволяет агенту принимать входные данные (сообщения) от других агентов или человека, обновляя его когнитивное состояние.
13. **Социализация (`socialize`):** Этот метод обрабатывает социальные стимулы (описания социальных ситуаций).
14. **Визуальное восприятие (`see`):**  Этот метод обрабатывает визуальные стимулы (описания визуальных ситуаций).
15. **Размышление (`think`):** Этот метод позволяет агенту внутренне размышлять, что может влиять на его последующие действия.
16. **Внутренняя формализация цели (`internalize_goal`):** Агент может сформулировать и принять внутреннюю цель.
17. **Наблюдение (`_observe`):**  Этот метод служит общим обработчиком для различных способов наблюдения (слушать, видеть, думать, внутренняя формализация цели).
18. **Комбинированные методы (`listen_and_act`, `see_and_act`, `think_and_act`):** Методы для удобства сочетания восприятия и реакции.
19. **Чтение документов (`read_documents_from_folder`, `read_documents_from_web`):**  Методы позволяют загрузить документы из файлов или веб-сайтов, интегрируя их в память агента.
20. **Перемещение (`move_to`):**  Изменение текущего местоположения агента и контекста.
21. **Управление доступными агентами (`make_agent_accessible`, `make_agent_inaccessible`, `make_all_agents_inaccessible`):**  Контроль доступных для взаимодействия агентов.
22. **Генерация сообщения (`_produce_message`):**  Метод формирует и отправляет сообщение для API OpenAI.
23. **Обновление когнитивного состояния (`_update_cognitive_state`):**  Обновляет когнитивное состояние агента, учитывая новые стимулы.
24. **Отображение коммуникации (`_display_communication`):** Метод отображает и сохраняет коммуникацию агента в буфере.
25. **Возврат действий (`pop_latest_actions`, `pop_actions_and_get_contents_for`):**  Возвращает выполненные действия.
26. **Сохранение и загрузка спецификации агента (`save_spec`, `load_spec`):**  Возможность сохранения и загрузки состояния агента для последующего использования.
27. **Класс `TinyMemory`:** Базовый класс для различных типов памяти.
28. **Класс `EpisodicMemory`:** Класс, реализующий эпизодическую память.
29. **Класс `SemanticMemory`:** Класс, реализующий семантическую память, позволяющий хранить и искать информацию из документов.
30. **Классы `TinyMentalFaculty`, `RecallFaculty`, `FilesAndWebGroundingFaculty`, `TinyToolUse`:**  Представляют когнитивные способности агента, например, возможность вспоминать из памяти, использовать инструменты, использовать файлы и веб-страницы.

Пример использования
-------------------------
.. code-block:: python

    # Создаем агента
    agent = TinyPerson(name="Alice")

    # Задаем вопрос
    agent.listen("Привет, как дела?")

    # Агент отвечает
    agent.act()
```