"""
HORSES:
=================
Сложность: 3
-----------------
Игра "Скачки" - это простая игра, где несколько игроков угадывают, какая из лошадей финиширует первой. 
Игроки делают ставки на лошадей, а затем компьютер "запускает" скачки, определяя победителя случайным образом.
Игроки получают призы в зависимости от того, угадали ли они победителя.
Правила игры:
1. Игроку предлагается выбрать одну из пяти лошадей, указав ее номер (1-5).
2. После выбора игроком, компьютер случайным образом определяет победителя.
3. Если игрок угадал победителя, он получает приз в размере 5.
4. Иначе игрок не получает ничего.
5. Игра продолжается до тех пор, пока игрок не захочет выйти.
-----------------
Алгоритм:
1.  Начало игры.
2.  Показать меню выбора лошади (номера от 1 до 5).
3.  Запросить у игрока номер выбранной лошади.
4.  Сгенерировать случайное число от 1 до 5 для определения победителя.
5.  Если игрок выбрал лошадь-победителя:
    5.1. Сообщить игроку о победе и начислить приз (5).
6.  Иначе:
    6.1. Сообщить игроку, что он не выиграл.
7.  Спросить игрока, хочет ли он сыграть еще раз.
8.  Если игрок не хочет играть, завершить игру.
9.  Иначе, вернуться к шагу 2.
10. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> DisplayMenu["Отображение меню выбора лошади (1-5)"]
    DisplayMenu --> InputChoice["Запрос выбора лошади у игрока: <code><b>userChoice</b></code>"]
    InputChoice --> GenerateWinner["Генерация случайного номера лошади-победителя: <code><b>winnerHorse</b></code>"]
    GenerateWinner --> CheckWin{"Проверка: <code><b>userChoice == winnerHorse?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>Вы выиграли! Приз 5</b>"]
    OutputWin --> PlayAgainQuestion["Спросить игрока, хочет ли играть снова?"]
    CheckWin -- Нет --> OutputLose["Вывод сообщения: <b>Вы проиграли.</b>"]
     OutputLose --> PlayAgainQuestion
    PlayAgainQuestion -- Да --> DisplayMenu
    PlayAgainQuestion -- Нет --> End["Конец"]
```
    
Legenda:
    Start - Начало игры.
    DisplayMenu - Отображение меню выбора лошади (1-5).
    InputChoice - Запрос ввода номера выбранной лошади у игрока.
    GenerateWinner - Генерация случайного номера лошади-победителя.
    CheckWin - Проверка, совпадает ли выбор игрока с номером победившей лошади.
    OutputWin - Вывод сообщения о победе и начислении приза.
    OutputLose - Вывод сообщения о проигрыше.
    PlayAgainQuestion - Запрос у игрока, хочет ли он сыграть еще раз.
    End - Конец игры.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'
# Основной игровой цикл
while True:
    # Выводим меню с номерами лошадей
    print("Выберите лошадь (1-5):")
    try:
        # Запрашиваем ввод от пользователя номера лошади
        userChoice = int(input())
         # Проверяем, что выбор пользователя в допустимом диапазоне
        if userChoice < 1 or userChoice > 5:
            print("Пожалуйста, выберите номер от 1 до 5.")
            continue
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue
    
    # Генерируем случайным образом номер лошади победителя
    winnerHorse = random.randint(1, 5)
    # Проверяем, угадал ли игрок победителя
    if userChoice == winnerHorse:
         # Если угадал, то сообщаем о победе и выдаем приз
        print("Вы выиграли! Приз 5")
    else:
        # Если не угадал, то сообщаем об этом
        print("Вы проиграли.")
    # Спрашиваем пользователя, хочет ли он сыграть еще раз
    playAgain = input("Хотите сыграть еще раз? (y/n): ")
    # Если пользователь не хочет играть, то заканчиваем игру
    if playAgain.lower() != "y":
        break
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Основной цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока игрок не решит выйти.
3.  **Вывод меню выбора лошади**:
    -   `print("Выберите лошадь (1-5):")`: Выводит на экран сообщение с предложением выбрать лошадь.
4.  **Ввод выбора игрока**:
    -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `userChoice = int(input())`: Запрашивает у пользователя ввод номера выбранной лошади и преобразует его в целое число.
    -  **Проверка ввода:**
        -  `if userChoice < 1 or userChoice > 5:`: Проверяем, что выбор пользователя в допустимом диапазоне (1-5).
        -   `print("Пожалуйста, выберите номер от 1 до 5.")`: Выводим сообщение о недопустимом выборе.
        -   `continue`: Переходим к началу цикла.
5.  **Генерация номера победителя**:
    -   `winnerHorse = random.randint(1, 5)`: Генерирует случайное целое число от 1 до 5 (номер лошади-победителя).
6.  **Проверка выигрыша**:
    -   `if userChoice == winnerHorse:`: Проверяет, совпадает ли выбор игрока с номером победившей лошади.
    -  `print("Вы выиграли! Приз 5")`: Если игрок угадал, выводит сообщение о выигрыше и выдает приз.
    -   `else:`: Если игрок не угадал.
    -  `print("Вы проиграли.")`: Выводит сообщение о проигрыше.
7.  **Предложение сыграть еще раз**:
    -   `playAgain = input("Хотите сыграть еще раз? (y/n): ")`: Запрашивает у игрока, хочет ли он сыграть еще раз.
    -   `if playAgain.lower() != "y":`: Проверяет, ввел ли игрок что-то отличное от "y" (в любом регистре).
    -   `break`: Завершает игровой цикл, если игрок не хочет играть.
"""
```