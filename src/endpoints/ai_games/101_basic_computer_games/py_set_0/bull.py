"""
<BULL>:
=================
Сложность: 3
-----------------
Игра "Быки и Коровы" - это логическая игра, в которой компьютер загадывает четырехзначное число, где все цифры разные. 
Игрок должен отгадать это число, делая предположения. После каждого предположения, компьютер сообщает, 
сколько цифр угадано и находятся на правильном месте (быки), и сколько цифр угадано, но находятся не на своих местах (коровы). 
Цель игры - отгадать число за наименьшее количество попыток.
Правила игры:
1. Компьютер генерирует случайное четырехзначное число, где все цифры разные.
2. Игрок вводит четырехзначное число в качестве предположения.
3. Компьютер сравнивает предположение с загаданным числом и сообщает:
   - Количество "быков" - цифр, которые угаданы и находятся на своих местах.
   - Количество "коров" - цифр, которые угаданы, но находятся не на своих местах.
4. Игрок продолжает делать предположения, пока не отгадает число или не решит закончить игру.
-----------------
Алгоритм:
1. Сгенерировать случайное 4-х значное число с неповторяющимися цифрами.
2. Запросить у игрока 4-х значное число.
3. Инициализировать количество быков и коров нулем.
4. Пройти по каждой цифре введенного числа.
5. Если цифра на той же позиции совпадает в загаданном числе, увеличить счетчик быков.
6. Иначе, если цифра есть в загаданном числе, увеличить счетчик коров.
7. Вывести количество быков и коров.
8. Если количество быков равно 4, то игра закончена, игрок выиграл.
9. Если количество быков не равно 4, то перейти к шагу 2.
10. Если игрок хочет завершить игру, завершить игру.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> GenerateSecretNumber(Генерировать секретное число);
    GenerateSecretNumber --> InputGuess(Ввод предположения игрока);
    InputGuess --> InitializeCounters(Обнулить счетчики быков и коров);
    InitializeCounters --> CheckBullsAndCows(Проверка быков и коров);
    CheckBullsAndCows --> OutputResult(Вывод результата);
    OutputResult --> CheckWin(Проверка на победу);
    CheckWin -- Победа --> End(Конец);
    CheckWin -- Не победа --> InputGuess;
    InputGuess --> CheckQuit(Проверка на выход);
    CheckQuit -- Выход --> End;
    CheckQuit -- Нет выхода --> InitializeCounters;
```
"""
import random

def generate_secret_number():
    """
    Генерирует случайное 4-значное число с неповторяющимися цифрами.
    
    Returns:
        str: Строка, представляющая загаданное число.
    """
    digits = list(range(10))  # Создаем список цифр от 0 до 9.
    random.shuffle(digits) # Перемешиваем список цифр.
    secret_number = ""
    # Извлекаем первые 4 цифры из перемешанного списка и формируем строку загаданного числа.
    for i in range(4):
        secret_number += str(digits[i])
    return secret_number


def check_bulls_and_cows(secret_number, guess):
    """
    Сравнивает предположение с загаданным числом и вычисляет количество быков и коров.
    
    Args:
        secret_number (str): Загаданное число.
        guess (str): Предположение игрока.

    Returns:
        tuple: Кортеж, содержащий количество быков и коров.
    """
    bulls = 0 # Инициализируем счетчик "быков"
    cows = 0  # Инициализируем счетчик "коров"
    for i in range(4):  # Проходим по каждой цифре в предположении
        if guess[i] == secret_number[i]: # Если цифра на той же позиции, то увеличиваем счетчик быков.
            bulls += 1
        elif guess[i] in secret_number: # Если цифра есть в загаданном числе, но не на своем месте, то увеличиваем счетчик коров.
            cows += 1
    return bulls, cows


def play_bulls_and_cows():
    """
    Запускает игру "Быки и Коровы".
    """
    secret_number = generate_secret_number() # Генерируем случайное загаданное число
    print("Я загадал 4-значное число с неповторяющимися цифрами.")
    attempts = 0 # Инициализируем счетчик попыток
    while True:
        attempts += 1 # Увеличиваем счетчик попыток
        guess = input("Введите ваше предположение (или 'q' для выхода): ") # Запрашиваем предположение у игрока
        if guess.lower() == 'q': # Если игрок ввел 'q', то завершаем игру
             print(f"Загаданное число было: {secret_number}")
             print("Игра завершена.")
             break
        if not guess.isdigit() or len(guess) != 4: # Проверяем, что ввод корректный - 4 цифры
            print("Пожалуйста, введите 4-значное число.")
            continue

        bulls, cows = check_bulls_and_cows(secret_number, guess) # Вычисляем количество быков и коров
        print(f"Быки: {bulls}, Коровы: {cows}") # Выводим результаты
        if bulls == 4: # Проверяем, что игрок выиграл
            print(f"Поздравляю! Вы отгадали число за {attempts} попыток.")
            break


if __name__ == "__main__":
    play_bulls_and_cows()
"""
Пояснения:
1.  `generate_secret_number()`:
    -   Генерирует случайное 4-значное число, где все цифры различны.
    -   Использует `random.shuffle()` для перемешивания списка цифр от 0 до 9.
    -   Возвращает строку с загаданным числом.
2.  `check_bulls_and_cows(secret_number, guess)`:
    -   Принимает загаданное число и предположение игрока.
    -   Сравнивает цифры в обоих числах и считает "быков" (совпадение цифры и позиции) и "коров" (совпадение цифры, но не позиции).
    -   Возвращает количество "быков" и "коров".
3.  `play_bulls_and_cows()`:
    -   Основная функция, управляющая игровым процессом.
    -   Вызывает `generate_secret_number()` для генерации загаданного числа.
    -   В цикле while запрашивает предположение пользователя.
    -   Обрабатывает ввод, проверяя его корректность (4 цифры).
    -   Вызывает `check_bulls_and_cows()` для получения результатов.
    -   Выводит результаты пользователю.
    -   Завершает игру, если пользователь отгадал число (4 "быка") или ввел 'q'.
4.  `if __name__ == "__main__":` :
     -    Гарантирует что функция `play_bulls_and_cows()` будет вызвана, при запуске этого скрипта как самостоятельной программы.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'