"""
<CUBE>:
=================
Сложность: 3
-----------------
Игра "Куб" имитирует бросание игрального кубика. Игрок вводит количество бросков, и программа моделирует результаты, выводя каждый бросок на экран.
Правила игры:
1. Игрок вводит количество бросков кубика.
2. Программа имитирует бросок кубика, генерируя случайное число от 1 до 6.
3. Результат каждого броска выводится на экран.
4. После завершения всех бросков игра завершается.
-----------------
Алгоритм:
1. Запросить у пользователя количество бросков кубика (number_of_throws).
2. Инициализировать счетчик бросков (throw_counter) значением 0.
3. Начать цикл, пока счетчик бросков (throw_counter) меньше, чем количество бросков (number_of_throws).
4. Внутри цикла:
    4.1 Сгенерировать случайное целое число в диапазоне от 1 до 6 (dice_roll), имитируя бросок кубика.
    4.2 Увеличить счетчик бросков (throw_counter) на 1.
    4.3 Вывести на экран номер броска и выпавшее значение.
5. Завершить цикл.
6. Игра завершена.
-----------------
Блок-схема: 
```mermaid
graph TD
    Start[Start] --> InputThrows[Input number_of_throws]
    InputThrows --> InitializeCounter[Initialize throw_counter = 0]
    InitializeCounter --> CheckCounter[throw_counter < number_of_throws?]
    CheckCounter -- Yes --> GenerateDiceRoll[Generate random dice_roll (1-6)]
    GenerateDiceRoll --> IncrementCounter[Increment throw_counter by 1]
    IncrementCounter --> OutputResult[Output throw_counter and dice_roll]
    OutputResult --> CheckCounter
    CheckCounter -- No --> End[End]
```
"""
import random # Импортируем модуль random для генерации случайных чисел

def cube_game():
    """
    Функция, реализующая игру "Куб".
    """

    # Запрашиваем у пользователя количество бросков кубика
    while True:
      try:
        number_of_throws = int(input("Сколько раз бросить кубик? "))
        if number_of_throws > 0:
            break # Выходим из цикла, если ввод корректен
        else:
          print("Пожалуйста, введите положительное число.")
      except ValueError:
        print("Неверный ввод. Пожалуйста, введите целое число.")
    
    throw_counter = 0 # Инициализируем счетчик бросков
    
    # Начинаем цикл для имитации бросков кубика
    while throw_counter < number_of_throws:
      # Генерируем случайное число от 1 до 6
      dice_roll = random.randint(1, 6)
      throw_counter += 1 # Увеличиваем счетчик бросков
      # Выводим номер броска и выпавшее значение
      print(f"Бросок {throw_counter}: {dice_roll}")
    
    print("Игра окончена.") # Сообщаем о завершении игры

if __name__ == "__main__":
    cube_game() # Вызываем функцию для запуска игры
"""
Пояснения:
1. Импорт модуля `random`:
   - `import random`: Импортирует модуль `random`, который необходим для генерации случайных чисел.

2. Функция `cube_game()`:
   - `def cube_game():`: Определяет функцию `cube_game`, которая содержит логику игры.

3. Запрос количества бросков:
   - `number_of_throws = int(input("Сколько раз бросить кубик? "))`: Запрашивает у пользователя, сколько раз нужно бросить кубик, и преобразует ввод в целое число.
    - `while True:`: Бесконечный цикл для проверки корректности ввода.
    - `try: ... except ValueError:`: Обработка исключения в случае, если пользователь введет некорректные данные.
    - `if number_of_throws > 0: break`: Проверяет, что количество бросков - положительное число.

4. Инициализация счетчика:
   - `throw_counter = 0`: Инициализирует переменную `throw_counter` нулем. Эта переменная будет отслеживать количество выполненных бросков.

5. Цикл бросков:
   - `while throw_counter < number_of_throws:`: Начинает цикл `while`, который будет выполняться до тех пор, пока количество бросков не станет равным заданному количеству.
    - `dice_roll = random.randint(1, 6)`: Генерирует случайное целое число от 1 до 6, имитируя бросок кубика. Результат сохраняется в переменную `dice_roll`.
    - `throw_counter += 1`: Увеличивает значение счетчика бросков на 1.
    - `print(f"Бросок {throw_counter}: {dice_roll}")`: Выводит на экран сообщение о номере броска и выпавшем значении.

6. Завершение игры:
   - `print("Игра окончена.")`: Выводит сообщение о том, что игра завершена.

7. Запуск игры:
   - `if __name__ == "__main__":`: Это условие гарантирует, что код внутри блока `if` будет выполнен только при прямом запуске файла скрипта, а не при импорте его как модуля.
   - `cube_game()`: Вызывает функцию `cube_game`, чтобы начать игру.

`licence:MIT(../licence)`
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```