"""
SALVO I:
=================
Сложность: 5
-----------------
"Морской бой" - это игра, в которой игрок пытается угадать, где на игровом поле (сетке 5x5) расположен корабль, делая поочередные "выстрелы" по координатам. После каждой попытки игрок получает обратную связь о том, попал он или нет.

Правила игры:
1.  Компьютер генерирует случайным образом координаты однопалубного корабля на сетке 5x5.
2.  Игрок вводит координаты предполагаемого местоположения корабля, разделенные запятой (например, "1,2").
3.  Если координаты совпадают с координатами корабля, игрок выигрывает.
4.  Если координаты не совпадают, игрок получает сообщение "MISS".
5.  Игра продолжается до тех пор, пока игрок не угадает координаты корабля.
-----------------
Алгоритм:
1.  Сгенерировать случайные координаты корабля (строка и столбец) в диапазоне от 1 до 5.
2.  Начать цикл "пока корабль не потоплен":
    2.1. Запросить у игрока координаты выстрела в формате "строка,столбец".
    2.2. Проверить, совпадают ли координаты выстрела с координатами корабля.
    2.3. Если координаты совпадают, вывести сообщение "HIT!" и завершить игру.
    2.4. Если координаты не совпадают, вывести сообщение "MISS" и перейти к началу цикла.
3. Конец игры.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeShip["<p align='left'>Инициализация:
    <code><b>
    shipRow = random(1, 5)
    shipCol = random(1, 5)
    </b></code></p>"]
    InitializeShip --> LoopStart{"Начало цикла: пока корабль не потоплен"}
    LoopStart --> InputGuess["Ввод координат: <code><b>row, col</b></code>"]
    InputGuess --> ValidateInput{"Проверка ввода: <code><b>row</b></code> и <code><b>col</b></code> являются целыми числами от 1 до 5"}
     ValidateInput -- Нет -->  InputError["Вывести сообщение об ошибке ввода"]
     InputError --> LoopStart

    ValidateInput -- Да --> CheckHit{"Проверка: <code><b>row == shipRow</b></code> и <code><b>col == shipCol</b></code>?"}
    CheckHit -- Да --> OutputHit["Вывод сообщения: <b>HIT!</b>"]
    OutputHit --> End["Конец"]
    CheckHit -- Нет --> OutputMiss["Вывод сообщения: <b>MISS</b>"]
    OutputMiss --> LoopStart
    LoopStart -- Нет --> End

```

Legenda:
    Start - Начало программы.
    InitializeShip - Инициализация координат корабля: `shipRow` и `shipCol` - случайные целые числа от 1 до 5.
    LoopStart - Начало цикла, который продолжается, пока корабль не будет "потоплен".
    InputGuess - Запрос у пользователя ввода координат в формате "строка,столбец".
    ValidateInput - Проверка корректности введенных координат: являются ли они целыми числами от 1 до 5.
    InputError - Вывод сообщения об ошибке при некорректном вводе.
    CheckHit - Проверка, совпадают ли введенные координаты с координатами корабля.
    OutputHit - Вывод сообщения "HIT!", если координаты совпадают.
    End - Конец программы.
    OutputMiss - Вывод сообщения "MISS", если координаты не совпадают.
"""
import random

# 1. Генерируем случайные координаты корабля (строка и столбец) от 1 до 5
shipRow = random.randint(1, 5)
shipCol = random.randint(1, 5)

# Основной игровой цикл
while True:
    # 2.1 Запрашиваем у игрока координаты выстрела
    try:
        guess = input("Введите координаты выстрела (строка,столбец), например '1,2': ")
        # Разделяем строку на строку и столбец и преобразуем в целые числа
        guessRow, guessCol = map(int, guess.split(','))
    except ValueError:
        print("Ошибка ввода. Пожалуйста, введите два целых числа, разделенных запятой, например '1,2'.")
        continue

    # 2.2. Проверяем, совпадают ли координаты выстрела с координатами корабля.
    if guessRow == shipRow and guessCol == shipCol:
        # 2.3 Если координаты совпадают, выводим сообщение "HIT!" и завершаем игру.
        print("HIT!")
        break
    else:
        # 2.4 Если координаты не совпадают, выводим сообщение "MISS" и переходим к началу цикла.
        print("MISS")
"""
Пояснения:
1. **Импорт модуля `random`**:
    - `import random`: Импортирует модуль для генерации случайных чисел.
2. **Генерация координат корабля**:
    - `shipRow = random.randint(1, 5)`: Генерирует случайное целое число от 1 до 5 для строки корабля.
    - `shipCol = random.randint(1, 5)`: Генерирует случайное целое число от 1 до 5 для столбца корабля.
3. **Основной игровой цикл `while True:`**:
   -   Бесконечный цикл, который продолжается до тех пор, пока игрок не угадает местоположение корабля (будет выполнена команда `break`).
4. **Ввод координат выстрела**:
    -   `try...except ValueError`: Блок для обработки ошибок ввода (например, если пользователь введет не число или не разделит координаты запятой).
    -   `guess = input("Введите координаты выстрела (строка,столбец), например '1,2': ")`: Запрашивает у пользователя ввод координат и сохраняет в переменную guess.
    -   `guessRow, guessCol = map(int, guess.split(','))`: Разделяет строку ввода на строку и столбец по запятой и преобразует их в целые числа.
5. **Проверка попадания**:
   -   `if guessRow == shipRow and guessCol == shipCol:`: Проверяет, совпадают ли введенные координаты с координатами корабля.
   -   `print("HIT!")`: Выводит сообщение "HIT!", если попадание.
   -   `break`: Завершает цикл (игру) при попадании.
6. **Промах**:
   -   `else:`: Если координаты не совпадают.
   -   `print("MISS")`: Выводит сообщение "MISS".
"""
```