"""
23 MATHES:
=================
Сложность: 4
-----------------
Игра "Угадай число" - это простая игра, в которой компьютер выбирает случайное число, и игрок должен его угадать. После каждой попытки компьютер сообщает, было ли введенное число слишком низким или слишком высоким. Цель игры - угадать число за минимальное количество попыток.

Правила игры:
1. Компьютер выбирает случайное целое число. Диапазон этого числа не указывается.
2. Игрок вводит свои предположения о загаданном числе.
3. После каждой попытки компьютер сообщает, было ли введенное число слишком низким или слишком высоким.
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число.

-----------------
Алгоритм:
1. Установить счетчик попыток в 0.
2. Сгенерировать случайное число.
3. Начать цикл "пока число не угадано":
    3.1 Увеличить счетчик попыток на 1.
    3.2 Запросить у игрока ввод числа.
    3.3 Если введенное число равно загаданному, вывести сообщение о победе и перейти к шагу 4.
    3.4 Если введенное число меньше загаданного, вывести сообщение "TOO LOW".
    3.5 Если введенное число больше загаданного, вывести сообщение "TOO HIGH".
4. Вывести сообщение "YOU GOT IT IN {счетчик попыток} GUESSES!"
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetNumber = random()
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End

```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, а targetNumber (загаданное число) генерируется случайным образом.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
"""


```python
import random

__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализируем счетчик попыток
numberOfGuesses = 0
# Генерируем случайное число от 1 до 100 для игры
targetNumber = random.randint(1, 100)

# Начинаем основной игровой цикл
while True:
    # Увеличиваем счетчик попыток при каждой итерации
    numberOfGuesses += 1
    try:
        # Запрашиваем у пользователя ввод числа и преобразуем его в целое число
        userGuess = int(input("Угадай число: "))
    except ValueError:
        # Обрабатываем ошибку, если пользователь ввел не число
        print("Пожалуйста, введите целое число.")
        continue # Возвращаемся к началу цикла

    # Проверяем, угадано ли число
    if userGuess == targetNumber:
        # Выводим сообщение о победе и количестве попыток
        print(f"YOU GOT IT IN {numberOfGuesses} GUESSES!")
        break  # Завершаем цикл, если число угадано
    elif userGuess < targetNumber:
        # Выводим сообщение, если число меньше загаданного
        print("TOO LOW")
    else:
        # Выводим сообщение, если число больше загаданного
        print("TOO HIGH")
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Инициализация переменных**:
    -   `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses` для подсчета попыток игрока, начиная с 0.
    -   `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 (включительно) и сохраняет его в `targetNumber`. Это число, которое игрок должен угадать.
3.  **Основной игровой цикл `while True:`**:
    -   Создает бесконечный цикл, который будет выполняться, пока игрок не угадает число.
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1 при каждой новой итерации цикла.
    -   **Обработка ввода**:
        - `try...except ValueError`: Блок try-except используется для обработки возможных ошибок ввода. Если пользователь введет что-то, что не является целым числом, программа выведет сообщение об ошибке и перейдет к следующей итерации цикла с помощью `continue`.
        - `userGuess = int(input("Угадай число: "))`: Запрашивает у пользователя ввод числа и преобразует введенную строку в целое число, сохраняя результат в `userGuess`.
    -   **Проверка условия**:
        -   `if userGuess == targetNumber:`: Проверяет, равно ли введенное число загаданному.
            -   Если числа равны, выводится сообщение о победе с указанием количества попыток, и цикл прерывается с помощью `break`.
        -   `elif userGuess < targetNumber:`: Если введенное число меньше загаданного, выводится сообщение "TOO LOW".
        -   `else:`: Если введенное число не равно и не меньше загаданного, значит, оно больше. Выводится сообщение "TOO HIGH".
"""
```
