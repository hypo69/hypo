Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `TimeoutCheck`, содержащий функции для проверки, находится ли текущее время в заданном интервале, с опциональным тайм-аутом. Функция `interval` проверяет, находится ли текущее время в заданном интервале. Функция `interval_with_timeout` выполняет проверку с тайм-аутом, ожидая результат не более заданного времени. `input_with_timeout` ожидает ввод от пользователя с тайм-аутом.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует классы `datetime`, `time` из модуля `datetime` и модуль `threading`.

2. **Определение класса `TimeoutCheck`:** Определяется класс, в котором будут храниться и обрабатываться данные о проверке.

3. **`interval` функция:**
    - Принимает время начала и конца интервала (`start`, `end`). По умолчанию интервал - с 23:00 до 06:00.
    - Получает текущее время.
    - Сравнивает текущее время со временем начала и конца интервала.  Если время начала меньше времени конца, сравнение происходит напрямую.  Если время начала больше времени конца, проверка интервала проходит на возможность попадания в интервал до полуночи или после неё.
    - Возвращает `True`, если текущее время находится в интервале, `False` - в противном случае.


4. **`interval_with_timeout` функция:**
    - Принимает время ожидания (`timeout`), время начала и конца интервала.
    - Создает новый поток для выполнения функции `interval`.
    - Ждет завершения потока или истечения тайм-аута.
    - Если поток не завершился в течение тайм-аута, выводит сообщение об этом и возвращает `False`.
    - Возвращает результат, полученный из функции `interval`, если проверка прошла успешно.

5. **`get_input` функция:**
    - Запрашивает ввод от пользователя.

6. **`input_with_timeout` функция:**
    - Создает новый поток для выполнения функции `get_input`.
    - Ждет завершения потока или истечения тайм-аута.
    - Если поток не завершился в течение тайм-аута, выводит сообщение об этом и возвращает `None`.
    - Возвращает введенные данные.

7. **Пример использования в блоке `if __name__ == '__main__':`:**
    - Создается экземпляр класса `TimeoutCheck`.
    - Вызывается функция `interval_with_timeout` с тайм-аутом 5 секунд.
    - Выводится сообщение о результатах проверки.


Пример использования
-------------------------
.. code-block:: python

    from datetime import time
    from hypotez.src.utils.date_time import TimeoutCheck

    timeout_check = TimeoutCheck()

    # Проверка интервала с таймаутом в 5 секунд
    if timeout_check.interval_with_timeout(timeout=5, start=time(23, 0), end=time(6, 0)):
        print("Текущее время находится в интервале.")
    else:
        print("Текущее время не находится в интервале или произошел таймаут.")