Как использовать класс Chrome
========================================================================================

Описание
-------------------------
Класс `Chrome` расширяет базовый класс `selenium.webdriver.Chrome`, добавляя дополнительные функции для настройки и инициализации WebDriver Chrome.  Он предназначен для сложных случаев использования, предоставляя методы для поиска свободных портов, настройки опций и инициализации WebDriver.  Класс использует файл `chrome.json` для получения путей к ChromeDriver и Chrome исполняемому файлу. Также он позволяет настроить заголовки HTTP-запросов и user-agent.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**:  Код импортирует необходимые модули, такие как `os`, `socket`, `pathlib`, `typing`, `selenium`, `fake_useragent`, `gs`, `j_loads`, `logger`.  Это обеспечивает доступ к функционалу для работы с файлами, сокетами, типами данных, WebDriver, подгрузкой JSON, а также к пользовательскому логгеру.

2. **Определение класса `Chrome`**: Класс `Chrome` наследуется от `selenium.webdriver.Chrome`. Это позволяет использовать методы и атрибуты базового класса, но также добавляет собственные функции.

3. **Инициализация `Chrome`**: Метод `__init__` выполняет следующие действия:
    -  Получает пользовательский агент, если он передан в качестве параметра. В противном случае использует случайное значение из `fake_useragent`.
    -  Загружает настройки из файла `chrome.json` с помощью `j_loads`. Валидирует корректность загрузки настроек. Если файл не загружен, выводит критическую ошибку.
    -  Определяет путь к профилю Chrome.
    -  Определяет пути к ChromeDriver и исполняемому файлу Chrome, считывая их из файла `chrome.json`.  Корректирует пути, если необходимо, используя `gs.default_webdriver`.
    -  Настраивает опции Chrome, используя `set_options` на основе настроек из `chrome.json`.
    -  Добавляет параметр `user-data-dir` для определения директории профиля.
    -  Использует `gs.webdriver_current_port` для поиска свободного порта. Если порт найден, добавляет `--port` аргумент в опции. В противном случае, выводит критическую ошибку.
    -  Создаёт и инициализирует `ChromeService` с заданным исполняемым файлом Chrome.
    -  Инициализирует базовый класс `selenium.webdriver.Chrome`, передавая настройки `options` и `service`.
    -  Обрабатывает возможные ошибки при запуске WebDriver.

4. **Поиск свободного порта**: Метод `find_free_port` ищет свободный порт в указанном диапазоне.  Пробует связать сокет с каждым портом в диапазоне, чтобы определить доступность.

5. **Настройка опций**: Метод `set_options` обрабатывает настройки `options` и `headers` из файла `chrome.json` и добавляет соответствующие аргументы к опциям Chrome.  Он переводит строку параметров в словарь для более удобной обработки.

6. **Использование класса:** После успешной инициализации, `Chrome` можно использовать как обычный экземпляр `webdriver.Chrome`, например, для выполнения задач веб-автоматизации.


Пример использования
-------------------------
.. code-block:: python

    from src.webdriver.chrome import Chrome
    from pathlib import Path

    # Создаем экземпляр класса Chrome
    chrome_driver = Chrome(user_agent={'User-Agent': 'My Custom User-Agent'})

    if chrome_driver:
        # Теперь можно использовать driver как обычный webdriver
        driver = chrome_driver.d
        # ... Ваша логика работы с веб-драйвером ...
        driver.get("https://www.example.com")
        # ...