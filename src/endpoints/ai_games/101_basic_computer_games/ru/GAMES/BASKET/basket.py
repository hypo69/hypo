"""
BASKET:
=================
Сложность: 4
-----------------
Игра "Баскетбол" - это текстовая игра, имитирующая броски баскетбольного мяча. Игрок выбирает дистанцию броска (от 10 до 60 футов), а компьютер определяет результат броска (попадание или промах) на основе вероятности, зависящей от дистанции. Игра продолжается, пока игрок не решит завершить ее.

Правила игры:
1. Игрок вводит дистанцию броска в футах (целое число от 10 до 60).
2. Компьютер рассчитывает вероятность попадания на основе дистанции.
3. Компьютер генерирует случайное число и сравнивает его с вероятностью попадания.
4. Если случайное число меньше или равно вероятности, то бросок считается удачным (попадание), иначе - неудачным (промах).
5. Игра выводит результат броска (попадание или промах).
6. Игрок может продолжать броски, пока не введет 0 для завершения игры.
-----------------
Алгоритм:
1.  Начать цикл "пока игрок не введет 0":
    1.1 Запросить у игрока дистанцию броска в футах (10-60, или 0 для завершения).
    1.2 Если дистанция равна 0, завершить цикл.
    1.3 Если дистанция меньше 10 или больше 60, вывести сообщение об ошибке и перейти к началу цикла.
    1.4 Рассчитать вероятность попадания по формуле: вероятность = (60 - дистанция) / 50.
    1.5 Сгенерировать случайное число от 0 до 1.
    1.6 Если случайное число меньше или равно вероятности, вывести сообщение "That's a hit!".
    1.7 Иначе, вывести сообщение "You missed it!".
2. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> LoopStart{"Начало цикла: пока дистанция не равна 0"}
    LoopStart --> InputDistance["Ввод дистанции: <code><b>distance</b></code>"]
    InputDistance --> CheckEnd{"Проверка: <code><b>distance == 0?</b></code>"}
    CheckEnd -- Да --> End["Конец"]
    CheckEnd -- Нет --> CheckRange{"Проверка: <code><b>10 <= distance <= 60?</b></code>"}
    CheckRange -- Нет --> OutputError["Вывод сообщения об ошибке: <b>Distance must be between 10 and 60</b>"]
    OutputError --> LoopStart
    CheckRange -- Да --> CalculateProbability["<code><b>probability = (60 - distance) / 50</b></code>"]
    CalculateProbability --> GenerateRandom["Генерация случайного числа: <code><b>random_number</b></code>"]
    GenerateRandom --> CheckHit{"Проверка: <code><b>random_number <= probability?</b></code>"}
    CheckHit -- Да --> OutputHit["Вывод сообщения: <b>That's a hit!</b>"]
    OutputHit --> LoopStart
    CheckHit -- Нет --> OutputMiss["Вывод сообщения: <b>You missed it!</b>"]
    OutputMiss --> LoopStart
```

Legenda:
    Start - Начало программы.
    LoopStart - Начало цикла, который продолжается, пока игрок не введет 0.
    InputDistance - Запрос у пользователя ввода дистанции броска и сохранение ее в переменной distance.
    CheckEnd - Проверка, равна ли введенная дистанция 0.
    End - Конец программы.
    CheckRange - Проверка, находится ли введенная дистанция в диапазоне от 10 до 60.
    OutputError - Вывод сообщения об ошибке, если дистанция вне допустимого диапазона.
    CalculateProbability - Вычисление вероятности попадания на основе введенной дистанции.
    GenerateRandom - Генерация случайного числа от 0 до 1.
    CheckHit - Проверка, меньше или равно ли случайное число вычисленной вероятности.
    OutputHit - Вывод сообщения о попадании "That's a hit!".
    OutputMiss - Вывод сообщения о промахе "You missed it!".
"""
import random

# Основной игровой цикл
while True:
    # Запрашиваем у пользователя дистанцию броска
    try:
        distance = int(input("Введите дистанцию броска (10-60 футов, 0 для выхода): "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверяем, хочет ли игрок закончить игру
    if distance == 0:
        print("Игра окончена.")
        break

    # Проверяем, находится ли дистанция в допустимом диапазоне
    if distance < 10 or distance > 60:
        print("Дистанция должна быть между 10 и 60 футами.")
        continue

    # Рассчитываем вероятность попадания
    probability = (60 - distance) / 50

    # Генерируем случайное число от 0 до 1
    random_number = random.random()

    # Проверяем, был ли бросок удачным
    if random_number <= probability:
        print("That's a hit!")  # Выводим сообщение о попадании
    else:
        print("You missed it!")  # Выводим сообщение о промахе
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Основной цикл `while True:`**:
    -  Бесконечный цикл, который продолжается до тех пор, пока игрок не введет 0.
    -   **Ввод данных**:
        -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -  `distance = int(input("Введите дистанцию броска (10-60 футов, 0 для выхода): "))`: Запрашивает у пользователя дистанцию броска и преобразует ее в целое число, сохраняя результат в переменной `distance`.
    -   **Условие выхода**:
        -   `if distance == 0:`: Проверяет, равна ли дистанция 0.
        -  `print("Игра окончена.")`: Выводит сообщение о завершении игры.
        -  `break`: Завершает цикл.
    -  **Проверка дистанции**:
        -   `if distance < 10 or distance > 60:`: Проверяет, находится ли дистанция в допустимом диапазоне от 10 до 60.
        -  `print("Дистанция должна быть между 10 и 60 футами.")`: Выводит сообщение об ошибке, если дистанция вне диапазона.
        -  `continue`: Переходит к следующей итерации цикла.
    -   **Расчет вероятности**:
        -  `probability = (60 - distance) / 50`: Рассчитывает вероятность попадания на основе формулы из оригинальной игры.
    -   **Генерация случайного числа**:
        - `random_number = random.random()`: Генерирует случайное число от 0 до 1 и сохраняет его в `random_number`.
    -   **Проверка результата**:
        -   `if random_number <= probability:`: Проверяет, меньше или равно ли случайное число вычисленной вероятности.
        -   `print("That's a hit!")`: Выводит сообщение о попадании.
        -   `else`: Если случайное число больше вероятности.
        -   `print("You missed it!")`: Выводит сообщение о промахе.
"""
