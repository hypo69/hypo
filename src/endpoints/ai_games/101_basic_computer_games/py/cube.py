"""
CUBE:
=================
Сложность: 5
-----------------
Игра "CUBE" представляет собой симуляцию броска кубиков. Игрок вводит количество бросков, а программа выводит результат каждого броска, а также общий результат в конце.

Правила игры:
1. Игрок вводит количество бросков кубика (от 1 до 10).
2. Для каждого броска генерируется случайное число от 1 до 6 (имитация броска кубика).
3. Результаты каждого броска и общая сумма бросков выводятся на экран.

-----------------
Алгоритм:
1. Запросить у игрока количество бросков кубика.
2. Инициализировать переменную `totalSum` (общая сумма) значением 0.
3. Начать цикл от 1 до количества бросков:
    3.1. Сгенерировать случайное число от 1 до 6 (бросок кубика).
    3.2. Вывести номер броска и результат броска.
    3.3. Прибавить результат броска к `totalSum`.
4. Вывести итоговую сумму всех бросков.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InputNumberOfRolls["<p align='left'>Ввод количества бросков: <code><b>numberOfRolls</b></code></p>"]
    InputNumberOfRolls --> InitializeTotalSum["<p align='left'>Инициализация переменной:
    <code><b>totalSum = 0</b></code></p>"]
    InitializeTotalSum --> LoopStart{"Начало цикла: <code><b>for rollNumber in range(1, numberOfRolls + 1)</b></code>"}
    LoopStart --> GenerateRollResult["<p align='left'>Генерация случайного числа (бросок кубика):
    <code><b>rollResult = random(1, 6)</b></code></p>"]
    GenerateRollResult --> OutputRollResult["<p align='left'>Вывод результата броска:
    <code><b>print(rollNumber, rollResult)</b></code></p>"]
    OutputRollResult --> UpdateTotalSum["<code><b>totalSum = totalSum + rollResult</b></code>"]
    UpdateTotalSum --> LoopEnd{"Конец цикла"}
    LoopEnd -- Да --> LoopStart
    LoopEnd -- Нет --> OutputTotalSum["Вывод общей суммы: <code><b>print(totalSum)</b></code>"]
    OutputTotalSum --> End["Конец"]
```

Legenda:
    Start - Начало программы.
    InputNumberOfRolls - Запрос у пользователя количества бросков кубика и сохранение его в переменной `numberOfRolls`.
    InitializeTotalSum - Инициализация переменной `totalSum` (общая сумма) значением 0.
    LoopStart - Начало цикла, который выполняется для каждого броска кубика.
    GenerateRollResult - Генерация случайного числа от 1 до 6 (имитация броска кубика) и сохранение его в переменной `rollResult`.
    OutputRollResult - Вывод номера текущего броска и его результата на экран.
    UpdateTotalSum - Добавление результата текущего броска (`rollResult`) к общей сумме (`totalSum`).
    LoopEnd - Конец цикла.
    OutputTotalSum - Вывод общей суммы всех бросков на экран.
    End - Конец программы.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'

# Запрашиваем количество бросков кубика у пользователя
while True:
    try:
        numberOfRolls = int(input("Введите количество бросков кубика (от 1 до 10): "))
        if 1 <= numberOfRolls <= 10:
            break
        else:
             print("Пожалуйста, введите число от 1 до 10.")
    except ValueError:
        print("Некорректный ввод, введите целое число от 1 до 10")

# Инициализируем переменную для хранения общей суммы
totalSum = 0

# Цикл для выполнения бросков кубика
for rollNumber in range(1, numberOfRolls + 1):
    # Генерируем случайное число от 1 до 6 (результат броска кубика)
    rollResult = random.randint(1, 6)
    # Выводим на экран номер броска и результат
    print(f"Бросок {rollNumber}: {rollResult}")
    # Добавляем результат броска к общей сумме
    totalSum += rollResult

# Выводим итоговую сумму всех бросков
print(f"Общая сумма: {totalSum}")
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Запрос количества бросков**:
    -   `while True:`: Бесконечный цикл, который продолжается до тех пор, пока пользователь не введет корректное число бросков.
    -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `numberOfRolls = int(input("Введите количество бросков кубика (от 1 до 10): "))`: Запрашивает у пользователя количество бросков кубика и преобразует ввод в целое число.
    -    `if 1 <= numberOfRolls <= 10: break`: Проверяет, находится ли введенное число в диапазоне от 1 до 10. Если да, то цикл завершается с помощью `break`.
    -    `else: print("Пожалуйста, введите число от 1 до 10.")`: Выводит сообщение об ошибке, если число не в диапазоне от 1 до 10.
    -   `except ValueError: print("Некорректный ввод, введите целое число от 1 до 10")`: Выводит сообщение об ошибке, если введенное значение не является целым числом.
3.  **Инициализация общей суммы**:
    -   `totalSum = 0`: Инициализирует переменную `totalSum` для хранения общей суммы результатов бросков кубика.
4.  **Основной цикл бросков**:
    -   `for rollNumber in range(1, numberOfRolls + 1):`: Цикл `for` выполняется для каждого броска кубика, начиная с 1 и до `numberOfRolls` включительно.
    -   `rollResult = random.randint(1, 6)`: Генерирует случайное целое число в диапазоне от 1 до 6, имитируя бросок кубика.
    -   `print(f"Бросок {rollNumber}: {rollResult}")`: Выводит на экран номер текущего броска и его результат.
    -   `totalSum += rollResult`: Добавляет результат текущего броска к общей сумме.
5.  **Вывод общей суммы**:
    -   `print(f"Общая сумма: {totalSum}")`: Выводит итоговую сумму всех бросков кубика.

licence:MIT(../licence)
"""
```