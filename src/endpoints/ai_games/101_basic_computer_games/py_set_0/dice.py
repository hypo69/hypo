"""
<DICE>:
=================
Сложность: 2
-----------------
Игра в кости. Игрок бросает две кости, и программа выводит сумму выпавших очков. 
-----------------
Правила игры:
1. Программа генерирует случайные числа от 1 до 6, имитируя бросок двух игральных костей.
2. Программа выводит сумму выпавших очков.
-----------------
Алгоритм:
1. Начало программы.
2. Сгенерировать случайное число от 1 до 6 и сохранить его в переменную "dice1".
3. Сгенерировать случайное число от 1 до 6 и сохранить его в переменную "dice2".
4. Вычислить сумму dice1 и dice2 и сохранить в переменную "total".
5. Вывести значение переменной "total".
6. Конец программы.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> GenerateDice1(Генерировать dice1: 1-6);
    GenerateDice1 --> GenerateDice2(Генерировать dice2: 1-6);
    GenerateDice2 --> CalculateTotal(total = dice1 + dice2);
    CalculateTotal --> OutputTotal(Вывести total);
    OutputTotal --> End(Конец);
```
"""
import random # импортируем модуль random для генерации случайных чисел

# Начало программы
def dice_game():
    """
    Эта функция имитирует игру в кости.
    """

    # 2. Генерируем случайное число от 1 до 6 для первой кости.
    dice1 = random.randint(1, 6)
    # dice1 - переменная для хранения значения первой кости

    # 3. Генерируем случайное число от 1 до 6 для второй кости.
    dice2 = random.randint(1, 6)
    # dice2 - переменная для хранения значения второй кости

    # 4. Вычисляем сумму значений двух костей
    total = dice1 + dice2
    # total - переменная для хранения суммы значений двух костей

    # 5. Выводим сумму на экран
    print("Сумма выпавших очков:", total)
    
# Запускаем игру.
dice_game()


"""
Пояснения:
1. `import random`: импортирует модуль `random`, который предоставляет функции для работы со случайными числами.
2. `def dice_game():`: определяет функцию с именем `dice_game`, которая содержит всю логику игры.
3. `random.randint(1, 6)`: генерирует случайное целое число в диапазоне от 1 до 6 (включительно), имитируя бросок игральной кости.
4. `dice1` и `dice2`: переменные, хранящие значения, выпавшие на первой и второй костях.
5. `total = dice1 + dice2`: вычисляет сумму очков на двух костях.
6. `print("Сумма выпавших очков:", total)`: выводит результат на экран.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```