"""
# **Amazin** (Maze Generator)

#### Описание
Игра представляет собой генератор лабиринтов, который каждый раз создает уникальный лабиринт с единственным правильным путем. Игрок задает размеры лабиринта, и программа строит его с учетом заданных параметров.

- **Особенности:**
  - Игрок вводит ширину и высоту лабиринта.
  - Программа гарантирует наличие единственного пути через лабиринт.
  - Лабиринт отображается на экране.

---

### Пошаговая инструкция для реализации:

#### 1. **Инициализация игры**
   - Предложить игроку ввести размеры лабиринта (ширину и высоту).
   - Проверить, что введенные размеры корректны (например, больше единицы).

#### 2. **Основная логика генерации лабиринта**
   - Создать матрицу заданного размера, представляющую сетку ячеек.
   - Использовать алгоритм генерации лабиринтов, например, *алгоритм рекурсивного поиска в глубину (DFS)*:
     - Начать с случайной начальной ячейки.
     - Продвигаться к соседним ячейкам, удаляя стены между текущей и следующей ячейкой.
     - Если все соседи уже посещены, вернуться к предыдущей ячейке и продолжить.
     - Завершить процесс, когда все ячейки будут посещены.
   - Гарантировать наличие единственного пути через лабиринт.

#### 3. **Отображение лабиринта**
   - Использовать символы для отображения:
     - `+`, `-`, `|` для стен.
     - Пробелы для проходов.
   - Выводить готовый лабиринт в текстовом виде.

#### 4. **Дополнительные функции**
   - Возможность задать предустановленный размер (например, 10x10), если пользователь ввел некорректные данные.
   - Предупреждение о слишком больших размерах лабиринта для предотвращения перегрузки памяти.

---

### Пример работы программы

1. **Начало работы**:
   ```
   Введите ширину и высоту лабиринта:
   > 10 8
   ```

2. **Вывод лабиринта**:
   ```
   +--+--+--+--+--+--+--+--+--+--+
   |        |        |           |
   +  +--+  +  +--+  +  +--+--+  +
   |     |     |     |        |  |
   +--+  +  +--+  +  +  +--+  +  +
   |     |        |     |     |  |
   +--+--+--+--+--+--+--+--+--+--+
   ```

3. **Выход из программы**:
   ```
   Сгенерировать новый лабиринт? (да/нет):
   > нет
   До свидания!
   ```

---

"""
import random

def create_maze(width, height):
    """Создает лабиринт заданных размеров."""
    # Инициализация матрицы лабиринта
    maze = [['+' for _ in range(2 * width + 1)] for _ in range(2 * height + 1)]

    # Функция для проверки допустимости координат ячейки
    def is_valid(x, y):
        return 0 <= x < height and 0 <= y < width

    # Функция для рекурсивного обхода лабиринта
    def carve_path(x, y):
        # Список возможных направлений для прохода
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        random.shuffle(directions) # Случайное перемешивание направлений

        for dx, dy in directions:
            nx, ny = x + dx, y + dy # Вычисляем координаты следующей ячейки

            # Проверяем, является ли соседняя ячейка в пределах лабиринта, еще не посещена
            if is_valid(nx, ny) and maze[2 * nx + 1][2 * ny + 1] == '+':
                # Удаляем стену между текущей и следующей ячейкой
                maze[2 * x + 1 + dx][2 * y + 1 + dy] = ' '
                maze[2 * nx + 1][2 * ny + 1] = ' ' # Помечаем следующую ячейку как посещенную
                carve_path(nx, ny) # Рекурсивный вызов для дальнейшего обхода

    # Начинаем генерацию лабиринта со случайной ячейки
    start_x = random.randint(0, height - 1)
    start_y = random.randint(0, width - 1)
    maze[2 * start_x + 1][2 * start_y + 1] = ' '
    carve_path(start_x, start_y)
    return maze


def print_maze(maze):
    """Выводит лабиринт на экран."""
    for row in maze:
        print(''.join(row))

def main():
    """Основная функция игры."""
    while True:
        try:
            width = int(input("Введите ширину лабиринта: "))
            height = int(input("Введите высоту лабиринта: "))

            # Проверка корректности размеров
            if width <= 0 or height <= 0:
                print("Размеры лабиринта должны быть больше 0.")
                continue
            if width > 50 or height > 50:
                print("Слишком большие размеры лабиринта. Рекомендуется использовать значения меньше 50.")
                continue

            maze = create_maze(width, height) # Генерация лабиринта
            print_maze(maze) # Вывод лабиринта на экран

        except ValueError:
            print("Неверный формат ввода. Пожалуйста, введите целые числа.")
            continue

        # Предложение сгенерировать еще один лабиринт
        new_maze = input("Сгенерировать новый лабиринт? (да/нет): ").lower()
        if new_maze != 'да':
            print("До свидания!")
            break

if __name__ == "__main__":
    main()