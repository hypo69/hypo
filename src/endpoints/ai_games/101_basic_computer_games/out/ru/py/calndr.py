
"""
CALNDR:
=================
Сложность: 4
-----------------
Игра "Календарь" - это программа, которая выводит календарь на месяц, начиная с указанного дня недели и месяца. Пользователь вводит номер месяца (1-12) и день недели, с которого начинается месяц (1 - понедельник, 7 - воскресенье), а программа выводит календарь.

Правила игры:
1. Пользователь вводит номер месяца (от 1 до 12).
2. Пользователь вводит номер дня недели, с которого начинается месяц (от 1 до 7, где 1 - понедельник, 7 - воскресенье).
3. Программа выводит календарь на указанный месяц, отображая дни недели и числа месяца.
4. Календарь выводится в формате, где каждый день месяца занимает свое место в сетке.
-----------------
Алгоритм:
1. Запросить у пользователя ввод номера месяца (month).
2. Запросить у пользователя ввод дня недели, с которого начинается месяц (startDay).
3. Определить количество дней в месяце (daysInMonth), основываясь на номере месяца.
4. Вывести заголовок с месяцем.
5. Вывести заголовки дней недели (SU MO TU WE TH FR SA).
6. Вывести необходимое количество пробелов перед первым днем месяца, основываясь на startDay.
7. Вывести числа месяца, формируя сетку календаря и переходя на новую строку после каждого воскресенья.
8. Конец программы.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InputMonth["Ввод номера месяца: <code><b>month</b></code>"]
    InputMonth --> InputStartDay["Ввод начального дня недели: <code><b>startDay</b></code>"]
    InputStartDay --> CalculateDaysInMonth["Вычисление дней в месяце: <code><b>daysInMonth</b></code>"]
    CalculateDaysInMonth --> OutputMonthHeader["Вывод заголовка месяца"]
    OutputMonthHeader --> OutputWeekdaysHeader["Вывод заголовков дней недели: <code><b>SU MO TU WE TH FR SA</b></code>"]
    OutputWeekdaysHeader --> OutputInitialSpaces["Вывод начальных пробелов в зависимости от <code><b>startDay</b></code>"]
    OutputInitialSpaces --> LoopDays["Начало цикла по дням месяца: <code><b>for day in range(1, daysInMonth + 1)</b></code>"]
    LoopDays --> OutputDay["Вывод дня: <code><b>day</b></code>"]
    OutputDay --> CheckDayOfWeek{"Проверка: <code><b>(day + startDay - 1) % 7 == 0 ?</b></code>"}
    CheckDayOfWeek -- Да --> OutputNewLine["Вывод новой строки"]
    OutputNewLine --> LoopDays
    CheckDayOfWeek -- Нет --> LoopDays
    LoopDays -- Конец цикла --> End["Конец"]

```
Legenda:
    Start - Начало программы.
    InputMonth - Запрос у пользователя на ввод номера месяца и сохранение его в переменной month.
    InputStartDay - Запрос у пользователя на ввод начального дня недели и сохранение его в переменной startDay.
    CalculateDaysInMonth - Вычисление количества дней в месяце на основе переменной month.
    OutputMonthHeader - Вывод заголовка месяца.
    OutputWeekdaysHeader - Вывод заголовков дней недели (SU MO TU WE TH FR SA).
    OutputInitialSpaces - Вывод начальных пробелов перед первым днем месяца, количество пробелов зависит от startDay.
    LoopDays - Начало цикла, который проходит по всем дням месяца.
    OutputDay - Вывод текущего дня (переменная day).
    CheckDayOfWeek - Проверка, является ли текущий день воскресеньем ((day + startDay - 1) % 7 == 0).
    OutputNewLine - Вывод новой строки, если текущий день - воскресенье.
    End - Конец программы.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'


def print_calendar():
    """
    Функция для вывода календаря на месяц.
    """

    # Запрашиваем ввод номера месяца у пользователя.
    while True:
        try:
            month = int(input("Введите номер месяца (1-12): "))
            if 1 <= month <= 12:
                break # Выходим из цикла, если ввод корректный
            else:
                print("Некорректный ввод, месяц должен быть от 1 до 12.")
        except ValueError:
            print("Некорректный ввод, пожалуйста, введите число.")

    # Запрашиваем ввод начального дня недели у пользователя.
    while True:
      try:
        startDay = int(input("Введите день начала месяца (1=Пн, 7=Вс): "))
        if 1 <= startDay <= 7:
            break # Выходим из цикла, если ввод корректный
        else:
            print("Некорректный ввод, день начала должен быть от 1 до 7.")
      except ValueError:
          print("Некорректный ввод, пожалуйста, введите число.")

    # Определяем количество дней в месяце.
    if month == 2:
        daysInMonth = 28 # Для простоты не учитываем високосный год
    elif month in [4, 6, 9, 11]:
        daysInMonth = 30
    else:
        daysInMonth = 31

    # Выводим заголовок месяца
    month_names = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"]
    print(f"\n{month_names[month-1]}")
    print("SU MO TU WE TH FR SA")

    # Выводим начальные пробелы в зависимости от дня начала месяца.
    for _ in range(startDay - 1):
        print("   ", end="")

    # Выводим дни месяца, формируя сетку календаря.
    for day in range(1, daysInMonth + 1):
        print(f"{day:2d} ", end="")
        # Проверяем, является ли день воскресеньем, и если да, переходим на новую строку.
        if (day + startDay - 1) % 7 == 0:
            print()
    print()

if __name__ == "__main__":
    print_calendar()
"""
Пояснения:
1.  **Функция `print_calendar()`**:
    -   Эта функция содержит всю логику для вывода календаря.

2.  **Ввод данных**:
    -   `while True:`: Используется для создания циклов, которые продолжаются, пока ввод не будет корректным.
    -  `try...except ValueError:`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `month = int(input("Введите номер месяца (1-12): "))`: Запрашивает у пользователя номер месяца и преобразует ввод в целое число.
    -   `if 1 <= month <= 12:`: Проверяет, находится ли введенное значение в допустимом диапазоне (1-12).
    -   `break`: Выходит из цикла ввода, если ввод корректен.
    -  Аналогичные шаги выполняются для ввода начального дня недели `startDay`.

3.  **Определение количества дней в месяце**:
    -   `if month == 2:`: Проверяет, является ли месяц февралем (для простоты принимаем, что в феврале всегда 28 дней).
    -   `elif month in [4, 6, 9, 11]:`: Проверяет, является ли месяц одним из месяцев с 30 днями.
    -   `else:`: Если месяц не является февралем или месяцем с 30 днями, то в нем 31 день.

4.  **Вывод заголовка месяца**:
    -  `month_names = [...]`: Создаем список с названиями месяцев.
    -  `print(f"\n{month_names[month-1]}")`: Выводим название месяца из списка, используя индекс `month-1`.

5.  **Вывод дней недели**:
    -   `print("SU MO TU WE TH FR SA")`: Выводит сокращенные названия дней недели.

6.  **Вывод начальных пробелов**:
    -   `for _ in range(startDay - 1):`: Цикл для вывода пробелов, необходимых для корректного отображения начала месяца. Количество пробелов зависит от `startDay`.

7.  **Вывод дней месяца**:
    -   `for day in range(1, daysInMonth + 1):`: Цикл проходит по всем дням месяца.
    -   `print(f"{day:2d} ", end="")`: Выводит текущий день.
    -   `if (day + startDay - 1) % 7 == 0:`: Проверяет, является ли текущий день воскресеньем (вычисляем остаток от деления на 7 с учетом начального дня).
    -   `print()`: Переходит на новую строку, если день - воскресенье.

8.  **Запуск программы**:
    -   `if __name__ == "__main__":`: Гарантирует, что функция `print_calendar()` будет запущена, только если файл исполняется напрямую.
    -   `print_calendar()`: Вызывает функцию для начала работы программы.
"""
```