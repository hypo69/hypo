Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит набор тестов для модуля `ExecuteLocator` из файла `test_driver_executor.py`. Тесты проверяют функциональность WebDriver и `ExecuteLocator`, включая навигацию по страницам, поиск элементов, взаимодействие с ними (например, отправку сообщений, клики), проверку атрибутов элементов и обработку ошибок.  Тесты написаны с использованием фреймворка pytest и зависят от наличия драйвера WebDriver (Chrome в данном случае).  Код организован в виде тестов, которые используют фикстуры для подготовки и очистки WebDriver.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует `pytest`, `webdriver`, `Service`, `By`, `Options`, `WebElement`, `ActionChains`, `WebDriverWait`, `expected_conditions`, `ExecuteLocator`, `ExecuteLocatorException`. Эти импорты необходимы для работы тестов.

2. **Определение фикстуры `driver`:** Фикстура `driver` настраивает WebDriver (Chrome в данном случае), добавляет опцию "--headless" для запуска в бескрайнем режиме (без отображения окна браузера), устанавливает путь к драйверу ChromeDriver и открывает страницу `http://example.com`.  После выполнения тестов, фикстура закрывает драйвер.

3. **Определение фикстуры `execute_locator`:** Фикстура `execute_locator` создает экземпляр класса `ExecuteLocator`, передавая в него драйвер, установленный в фикстуре `driver`.

4. **Определение тестов:**  Код содержит несколько тестов, каждый из которых проверяет определенную функциональность `ExecuteLocator`.  Тесты используют `execute_locator` для выполнения действий и проверяют их результат (например, утверждение `assert`).

5. **Тестирование навигации:** Тест `test_navigate_to_page` проверяет, что WebDriver успешно переходит на указанную страницу.

6. **Тестирование поиска элементов:** Тесты `test_get_webelement_by_locator_single_element` и `test_get_webelement_by_locator_no_element` проверяют корректность поиска элементов по локаторам.

7. **Тестирование взаимодействия с элементами:** Тесты `test_send_message`, `test_get_attribute_by_locator`, `test_execute_locator_event` проверяют отправку сообщений, получение атрибутов и выполнение событий на элементах.

8. **Тестирование получения ключей локатора:** Тест `test_get_locator_keys` проверяет, что метод `get_locator_keys` возвращает ожидаемые ключи локатора.

9. **Тестирование последовательной навигации и взаимодействия:** Тест `test_navigate_and_interact` проверяет навигацию по страницам и взаимодействие с элементами на разных страницах.

10. **Тестирование обработки некорректных локаторов:** Тест `test_invalid_locator` проверяет, что при некорректном локаторе генерируется ожидаемое исключение `ExecuteLocatorException`.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    # ... (импорты из кода)

    # Предположим, что у вас есть экземпляр драйвера (например, от фикстуры)
    driver = webdriver.Chrome()

    # Инициализируйте ExecuteLocator
    execute_locator = ExecuteLocator(driver)

    # Локатор для элемента
    locator = {"by": "XPATH", "selector": "//h1"}


    # Попробуйте получить элемент
    element = execute_locator.get_webelement_by_locator(locator)

    # Проверьте результат (например, если элемент найден, выполните действие)
    if element:
        element.click()
    else:
        print("Элемент не найден")


    # Убедитесь, что вы корректно закрываете драйвер
    driver.quit()