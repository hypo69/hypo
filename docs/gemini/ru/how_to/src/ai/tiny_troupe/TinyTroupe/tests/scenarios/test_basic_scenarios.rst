Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код описывает тестовую функцию `test_scenario_1`, которая проверяет начальную инициализацию и выполнение симуляции в библиотеке TinyTroupe.  Она создает агента ("TinyPerson") типа "архитектор", задает ему начальные характеристики (возраст, национальность), а затем выполняет ряд действий, включая получение и обработку ввода, и сохраняет чекпоинты симуляции. Функция также проверяет ключевые состояния симуляции (запущена ли симуляция, есть ли кэшированный и исполняемый трассировки).

Шаги выполнения
-------------------------
1. **Инициализация:** Импортируются необходимые модули из библиотеки TinyTroupe, включая классы для агентов, среды, фабрики, экстрактора данных, контроллера и вспомогательные функции.  Также устанавливаются пути для импорта.
2. **Сброс состояния:** Вызывается функция `control.reset()`, что сбрасывает состояние текущей симуляции.
3. **Проверка состояния:** Проверяется, что текущая симуляция `control._current_simulations["default"]` равна `None`. Это означает, что никакая симуляция не запущена.
4. **Начало симуляции:**  Вызывается `control.begin()`, запускается симуляция и проверяется, что её статус `Simulation.STATUS_STARTED`.
5. **Создание агента:** Создается агент `oscar_the_architect` с помощью функции `create_oscar_the_architect()`.
6. **Установка характеристик агента:**  Агенту устанавливаются характеристики "age" и "nationality".
7. **Проверка состояния симуляции:** Проверяется, что у текущей симуляции есть кэшированная трассировка (`cached_trace`) и исполняемая трассировка (`execution_trace`).
8. **Сохранение чекпоинта:** Вызывается `control.checkpoint()`, сохраняющий состояние симуляции.  (В коде есть TODO, указывающий на необходимость проверки создания файла чекпоинта)
9. **Взаимодействие с агентом:** Агент получает и обрабатывает ввод "How are you doing?".
10. **Установка дополнительной характеристики:** Агенту устанавливается характеристика "occupation".
11. **Сохранение дополнительного чекпоинта:**  Повторяется шаг 8.
12. **Завершение симуляции:** Вызывается `control.end()`, завершая симуляцию.

Пример использования
-------------------------
.. code-block:: python

    import pytest
    import logging
    # ... (импорты из примера)

    def test_scenario_1():
        # ... (тело функции test_scenario_1, как в примере)