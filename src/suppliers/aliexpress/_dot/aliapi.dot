

""" Aliexpress  API Scenario
функция `start()` начинает сбор сценария по API, 
обрабатывая файлы XLS из директории `scenanarios\\api\\sources`. 
`start()` обрабатывает только один файл XLS, если он указан, или все файлы в директории, если нет указания на конкретный файл
"""
...
import re
import json
import asyncio
from pathlib import Path
from typing import List, Dict
from types import SimpleNamespace
from requests import get, post
...
from src import gs
from src.utils import jjson, j_loads, j_dumps,  pprint
from src.utils.convertor.xls2dict import xls2dict
from src.utils.convertor.json2csv_dict2csv import json2csv
from src.logger import logger
from .api import AliexpressApi

from src.db.manager_categories import AliexpressCategory, CategoryManager
from src.db.manager_coupons_and_sales import ProductCampaignsManager


class AliApi(AliexpressApi):
    """
    Custom API class for Aliexpress operations.
    """
    
    # Менеджеры работы с базой данных
    manager_categories: CategoryManager = None
    manager_campaigns: ProductCampaignsManager = None
       
    def __init__(self, language:str = 'en', currency:str = 'usd', *args, **kwargs):
        """ Initializes an instance of the AliApi class.
        @param credentials: Dictionary containing API key and secret.
        @param language: The language to use for API requests. Defaults to 'EN'.
        @param currency: The currency to use for API requests. Defaults to 'ILS'."""
        ...
        crd = gs.aliexpress_credentials
        api_key = crd.api_key
        secret = crd.secret
        tracking_id = crd.tracking_id
        super().__init__ (api_key , secret, language, currency, tracking_id)
        # self.manager_categories = CategoryManager()
        # self.manager_campaigns = ProductCampaignsManager(gs.presta_credentials[0])
        ...
    ...
    # def collect_deals_from_url():
    #     """ Я даю URL скидок, купонов и прочей херни, которую получаю по почте от aliexpress"""
    #     ...

    def retrieve_product_details_as_dict(self, product_ids: List) -> Union[dict,List[dict],None]:
        """ Sends a list of products IDs to Ali and receives a list of SimpleNamespace objects with product descriptions.
        @param product_ids: List of product IDs.
        @returns: List of product data.
        @code
        # перевожу из формата SimpleNamespace в dict
            namespace_list = [
            SimpleNamespace(a=1, b=2, c=3),
            SimpleNamespace(d=4, e=5, f=6),
            SimpleNamespace(g=7, h=8, i=9)
            ]

            # Преобразование каждого объекта SimpleNamespace в словарь
            dict_list = [vars(ns) for ns in namespace_list]
            
            # Альтернативно, можно использовать метод __dict__:
            dict_list = [ns.__dict__ for ns in namespace_list]
            
            # Вывод списка словарей
            print(dict_list)
            

            
        @endcode
        """
        ...
        prod_details_ns = self.retrieve_product_details(product_ids)
        prod_details_dict = [vars(ns) for ns in prod_details_ns]
        return prod_details_dict
    
    #def get_affiliate_links(self, links: str | List[str], link_type: int = 0, **kwargs) -> List[AffiliateLink]:
    def get_affiliate_links(self, links: Union[str,list], link_type: int = 0, **kwargs) -> List[SimpleNamespace]:
        """ 
        @param links
        @param link_type: 
        """
        return super().get_affiliate_links(links, link_type, **kwargs)
    
