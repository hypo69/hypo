Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Данный код реализует взаимодействие с моделью Google Generative AI (Gemini) для проекта Kazarinov. Он включает функции для обучения модели на данных, обработки диалоговых запросов и проведения чата с пользователем. Модель использует системные инструкции, хранящиеся в файлах на Google Диске.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует модули `time`, `json`, `random`, `pathlib`, `typing`, а также пользовательские модули для работы с Google Диском, обработкой файлов, модели Gemini, и логгированием.

2. **Определение констант и переменных:** Определяется режим работы (`MODE = 'dev'`) и переменная `base_path`, указывающая на базовый каталог для хранения системных инструкций и файлов обучения.  Загружаются системные инструкции из файлов на Google Диске в список `system_instruction_list`.

3. **Класс `KazarinovAI`:**
    - Инициализирует экземпляры модели Google Generative AI (`gemini_1` и `gemini_2`) с заданными API-ключом, системными инструкциями и файлами истории.  Использует заданный `generation_config` для настройки генерации.
    - **`train` метод:** Обучает модель на данных, считывая их из файлов на Google Диске. Данные считываются по частям (`chunk_size`) для предотвращения ошибок из-за ограничений размера входных данных модели. Загруженные данные отправляются модели по частям, и вывод сохраняется.  
    - **`question_answer` метод:** Обрабатывает ответы на вопросы, считывая вопросы из файлов на Google Диске.
    - **`dialog` метод:** Ведет диалог с пользователем, считывая вопросы из файлов на Google Диске, перемешивая их для разнообразия, и вызывая модель для ответа.
    - **`ask` метод:** Отправляет запрос к модели Gemini, задавая роль `assistant` и вопрос. Возвращает ответ модели.
    
4. **Функция `chat`:**
    - Инициализирует экземпляр класса `KazarinovAI`, передавая системные инструкции из файла.
    - Запускает цикл, ожидая ввода пользователя.
    - Если пользователь вводит `--next`, выбирает случайный вопрос из базы вопросов и отправляет его модели на ответ.
    - Если пользователь вводит `--q`, выход из цикла.
    - Принимает запрос пользователя.
    - Отправляет вопрос модели и выводит полученный ответ.


Пример использования
-------------------------
.. code-block:: python

    import gs
    # ... (остальной код из файла)
    if __name__ == "__main__":
        system_instruction = read_text_file( gs.path.google_drive / 'kazarinov' / 'prompts' / 'system_instruction.txt' )
        k = KazarinovAI(system_instruction = system_instruction)
        k.train()
        #k.dialog()
        
        #Запуск диалога с пользователем
        chat()