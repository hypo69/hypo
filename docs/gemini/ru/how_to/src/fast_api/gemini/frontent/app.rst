Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Данный код реализует простую чат-ботовую функцию на React.js, которая позволяет пользователю вводить сообщения, а приложение отправляет их на сервер (http://localhost:8000/api/chat) для обработки и возвращает ответ от бота. Полученные сообщения пользователя и ответа бота отображаются в чат-боксе.

Шаги выполнения
-------------------------
1. **Создание состояния:** Код использует `useState` для хранения текущего ввода пользователя (`input`) и истории сообщений (`messages`).

2. **Обработка отправки сообщения:** При нажатии на кнопку "Отправить" или при нажатии Enter выполняется функция `sendMessage()`.
    - **Проверка пустого ввода:** Проверяет, пуст ли введённый текст. Если да, функция завершает выполнение.
    - **Формирование объекта сообщения:** Создаёт объект `userMessage` с ролью "user" и содержанием введённого сообщения.
    - **Обновление истории сообщений:** Добавляет `userMessage` в массив сообщений.
    - **Отправка запроса на сервер:** Отправляет POST-запрос на сервер по адресу "http://localhost:8000/api/chat" с JSON данными, содержащими введённый пользователем текст в поле `prompt`.
        - **Обработка ответа сервера:** Обрабатывает полученный ответ от сервера, проверяя статус ответа `response`.
        - **Извлечение ответа бота:** Извлекает ответ бота из ответа сервера и создаёт объект `aiMessage` с ролью "assistant" и содержанием ответа.
        - **Обновление истории сообщений:** Добавляет `userMessage` и `aiMessage` в историю сообщений.
    - **Обработка ошибок:** Обрабатывает возможные ошибки при отправке запроса на сервер.
    - **Очистка поля ввода:** Очищает поле ввода `input`.

3. **Отображение сообщений:** Код отображает историю сообщений в чат-боксе с помощью `map`.
   - **Разделение сообщений по ролям:** Определяет стиль отображения сообщений, разделяя их на сообщения от пользователя и от бота.

4. **Создание интерфейса:** Код создаёт форму ввода с полем для текста и кнопкой "Отправить".
   - **Ввод текста:**  Обрабатывает ввод текста в поле.
   - **Отправка нажатием Enter:** Обрабатывает нажатие клавиши Enter в поле ввода, вызывая функцию `sendMessage`.

5. **Размещение приложения:** Функция `ReactDOM.render` размещает компоненты приложения на странице.


Пример использования
-------------------------
.. code-block:: javascript
    // предполагается, что в проекте уже установлены React, ReactDOM и другие необходимые библиотеки
    import React, { useState } from 'react';
    import ReactDOM from 'react-dom';

    function App() {
        // ... (код функции App из примера) ...
    }

    ReactDOM.render(<App />, document.getElementById('chat-app'));