"""
<BUNNY>:
=================
Сложность: 2
-----------------
Игра "BUNNY" - это простая игра в угадывание числа. Компьютер выбирает случайное число от 1 до 10, и игрок должен угадать это число за ограниченное количество попыток.
-----------------
Правила игры:
1. Компьютер выбирает случайное целое число в диапазоне от 1 до 10.
2. Игроку дается 3 попытки, чтобы угадать загаданное число.
3. После каждой попытки игроку сообщается, правильно ли он угадал число.
4. Если игрок угадывает число, игра заканчивается победой.
5. Если игрок не угадывает число за 3 попытки, игра заканчивается проигрышем.
-----------------
Алгоритм:
1. Задать число попыток = 3.
2. Сгенерировать случайное целое число `randomNumber` в диапазоне от 1 до 10.
3. Вывести на экран сообщение с предложением угадать число.
4. В цикле от 1 до 3 (по количеству попыток):
    a. Запросить у игрока число и сохранить его в переменную `guess`.
    b. Сравнить введенное число `guess` и `randomNumber`.
    c. Если `guess` равен `randomNumber`, вывести сообщение "Ты угадал!" и завершить игру.
    d. Если попытка последняя, вывести сообщение о проигрыше и показать загаданное число.
    e. Иначе (если `guess` не равен `randomNumber`), вывести сообщение "Не правильно. Попробуй еще раз."
5. Если цикл завершился без угадывания, вывести сообщение о проигрыше и показать загаданное число.
-----------------
Блок-схема: 
```mermaid
graph TD
    Start[Начало] --> Initialize[numberOfTries = 3]
    Initialize --> GenerateRandomNumber[randomNumber = случайное число от 1 до 10]
    GenerateRandomNumber --> OutputPrompt[Вывести: "Я загадал число от 1 до 10"]
    OutputPrompt --> LoopStart[Цикл: i от 1 до numberOfTries]
    LoopStart --> InputGuess[Ввести: guess]
    InputGuess --> CheckGuess[guess == randomNumber?]
    CheckGuess -- Yes --> OutputWin[Вывести: "Ты угадал!"]
    OutputWin --> End[Конец]
    CheckGuess -- No --> CheckLastTry[i == numberOfTries?]
    CheckLastTry -- Yes --> OutputLose[Вывести: "Не угадал! Я загадал: " + randomNumber]
    OutputLose --> End
    CheckLastTry -- No --> OutputTryAgain[Вывести: "Не правильно. Попробуй еще раз."]
    OutputTryAgain --> LoopStart
    LoopStart -- Цикл завершен --> OutputLose2[Вывести: "Не угадал! Я загадал: " + randomNumber]
    OutputLose2 --> End
```
"""
import random

def play_bunny():
    """
    Функция запускает игру "BUNNY".
    """
    # 1. Устанавливаем количество попыток
    number_of_tries = 3
    # 2. Генерируем случайное целое число от 1 до 10
    random_number = random.randint(1, 10)
    # 3. Сообщаем игроку о начале игры
    print("Я загадал число от 1 до 10.")

    # 4. Цикл по количеству попыток
    for attempt in range(1, number_of_tries + 1):
        # 4.a Запрашиваем у пользователя число
        try:
            guess = int(input(f"Попытка {attempt}: Введи число: "))
        except ValueError:
           print("Пожалуйста, введите целое число.")
           continue
        
        # 4.b. Сравниваем введенное число с загаданным
        if guess == random_number:
            # 4.c. Если число угадано, сообщаем об этом и заканчиваем игру
            print("Ты угадал!")
            return  # Выход из функции, игра завершена

        # 4.d. Проверяем, не последняя ли это попытка
        if attempt == number_of_tries:
            # Если последняя попытка, сообщаем о проигрыше и показываем загаданное число
            print(f"Не угадал! Я загадал: {random_number}")
        else:
             # 4.e. Если попытка не последняя и число не угадано, просим попробовать еще раз
            print("Не правильно. Попробуй еще раз.")

# Вызов основной функции
if __name__ == '__main__':
    play_bunny()
"""
Пояснения:
1.  Импортируем модуль `random` для генерации случайных чисел.
2.  Функция `play_bunny()`:
    -   `number_of_tries` - переменная, хранящая количество попыток (равно 3).
    -   `random_number` - переменная, хранящая случайное целое число от 1 до 10, которое нужно угадать.
    -   Цикл `for` проходит по количеству попыток.
        -   `attempt` - переменная, хранящая номер текущей попытки.
        -   `guess` - переменная, в которой сохраняется число, введенное игроком.
            -   `try-except` используется для обработки ошибок при вводе числа. Если пользователь введет не целое число, программа выведет сообщение об ошибке и перейдет к следующей итерации цикла.
        -   Если `guess` равен `random_number`, то выводится сообщение "Ты угадал!" и функция завершает работу.
        -   Если текущая попытка последняя (равна `number_of_tries`), то выводится сообщение о проигрыше и загаданное число.
        -   Если текущая попытка не последняя и число не угадано, выводится сообщение "Не правильно. Попробуй еще раз.".
3.  `if __name__ == '__main__':` - этот блок обеспечивает запуск функции `play_bunny()` при запуске скрипта.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```