Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит тесты для модуля `extraction` из проекта `TinyTroupe`. Он демонстрирует экспорт данных в различные форматы (JSON, текст, docx) и нормализацию концепций.  Тесты проверяют корректность экспорта данных, сохранение форматирования и корректность работы нормализатора.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует модули `pytest`, `os`, `json`, `random`, `logging`, `sys`,  а также собственные модули `testing_utils`, `tinytroupe.extraction`, `tinytroupe.utils`, и `docx` (для работы с docx).  Это гарантирует доступ к необходимым функциям для выполнения тестов.

2. **Определение фикстуры `exporter`:** Функция `exporter()` создает экземпляр класса `ArtifactExporter` и задаёт ему базовый каталог для экспорта.  Это позволяет использовать один и тот же экземпляр `ArtifactExporter` в разных тестах.

3. **Функции `test_export_json`, `test_export_text` и `test_export_docx`:** Эти функции тестируют экспорт данных в JSON, текст и docx форматы соответственно.  Они выполняют следующие шаги:
    - Определяют данные для экспорта (`artifact_data`).
    - Вызывают метод `exporter.export()`, чтобы выполнить экспорт в указанный формат.
    - Проверяют, что экспортированный файл существует.
    - Проверяют, что экспортированные данные совпадают с исходными.  Это валидирует корректность экспорта.
    - В `test_export_docx` дополнительно проверяется, что форматирование Markdown сохраняется в docx.

4. **Функция `test_normalizer`:**
    - Определяет список концепций (`concepts`).
    - Создаёт экземпляр класса `Normalizer`, передавая список концепций и параметры `n` (количество нормализованных элементов) и `verbose`.
    - Проверяет, что число нормализованных элементов соответствует заданному параметру `n`.
    - Собирает 5 случайных выборок из списка концепций (`random_concepts_buckets`).
    - Проверяет, что карта нормализации пуста вначале (`normalizer.normalizing_map`).
    - Для каждой выборки выполняет нормализацию (`normalizer.normalize()`) и выводит информацию о результатах.
    - Проверяет, что длина нормализованных элементов совпадает с длиной исходных.
    - Проверяет, что все элементы нормализованных элементов присутствуют в ключах карты нормализации.
    - Проверяет, что размер кэша карты нормализации увеличивается после каждой нормализации.

Пример использования
-------------------------
.. code-block:: python

    import pytest
    # ... (импорты из кода)

    @pytest.fixture
    def exporter():
        return ArtifactExporter(base_output_folder="./test_exports")

    # ... (Другие функции из кода)