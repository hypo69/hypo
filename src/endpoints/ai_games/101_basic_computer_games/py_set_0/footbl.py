"""
<FOOTBL>:
=================
Сложность: 3
-----------------
Игра "Футбол" - это простая текстовая игра, в которой игрок пытается забить гол, выбирая направление удара (лево, центр, право) и силу удара (малая, средняя, большая). Компьютер, в свою очередь, пытается отбить мяч, также выбирая направление. Если направления не совпадают, то засчитывается гол.
Правила игры: 
1. Игрок выбирает направление удара (лево, центр, право).
2. Игрок выбирает силу удара (малая, средняя, большая).
3. Компьютер случайно выбирает направление для отбивания.
4. Если направление удара и отбивания не совпадают, то игрок забивает гол.
5. Игра продолжается до тех пор, пока игрок не захочет закончить.
-----------------
Алгоритм:
1. В начале игры инициализируется счетчик голов player_score = 0.
2. Выводится приглашение начать игру и выбирается первая игра
3. Запрашивается ввод от игрока (направление удара: лево, центр, право)
4. Запрашивается ввод от игрока (сила удара: малая, средняя, большая)
5. Случайным образом генерируется направление отбивания компьютера (лево, центр, право).
6. Проверяется, совпадают ли направление удара игрока и направление отбивания компьютера.
7. Если направления не совпадают, игрок забивает гол, и счетчик player_score увеличивается на 1.
8. Выводится сообщение о результате текущего удара.
9. Выводится текущий счет игрока.
10. Запрашивается ввод, хочет ли игрок продолжить игру, и если нет, то игра заканчивается.
11. Если игра продолжается, то перейти к шагу 3.

-----------------
Блок-схема:
```mermaid
    graph TD
    Start(Начало игры) --> InitializeScore(Инициализация счета player_score = 0);
    InitializeScore --> PlayAgainPrompt(Вывести сообщение о начале игры);
    PlayAgainPrompt --> PlayerDirectionInput(Запросить направление удара игрока (left, center, right));
    PlayerDirectionInput --> PlayerPowerInput(Запросить силу удара игрока (low, medium, high));
    PlayerPowerInput --> GenerateComputerDirection(Случайно выбрать направление отбивания компьютера (left, center, right));
    GenerateComputerDirection --> CheckGoal(Проверить, совпадает ли направление удара игрока с направлением отбивания компьютера);
    CheckGoal -- Да --> OutputMiss(Вывести сообщение 'Goal!');
    OutputMiss --> IncrementScore(Увеличить player_score на 1);
    IncrementScore --> OutputScore(Вывести текущий счет player_score);
    CheckGoal -- Нет --> OutputNoGoal(Вывести сообщение 'no goal!');
	OutputNoGoal --> OutputScore2(Вывести текущий счет player_score);
    OutputScore --> PlayAgainQuery(Спросить, хочет ли игрок играть снова? (Y/N));
	OutputScore2 --> PlayAgainQuery2(Спросить, хочет ли игрок играть снова? (Y/N));

    PlayAgainQuery -- Да --> PlayerDirectionInput;
	PlayAgainQuery2 -- Да --> PlayerDirectionInput;
	PlayAgainQuery -- Нет --> End(Конец игры);
	PlayAgainQuery2 -- Нет --> End(Конец игры);

```
"""
import random

def get_player_direction():
    """
    Запрашивает у игрока направление удара.
    Возвращает введенное направление (left, center, right) в нижнем регистре.
    """
    while True:
        direction = input("Выберите направление удара (left, center, right): ").lower()
        if direction in ["left", "center", "right"]:
            return direction
        else:
            print("Неверное направление. Пожалуйста, выберите left, center или right.")

def get_player_power():
    """
     Запрашивает у игрока силу удара.
    Возвращает введенную силу удара (low, medium, high) в нижнем регистре.
    """
    while True:
        power = input("Выберите силу удара (low, medium, high): ").lower()
        if power in ["low", "medium", "high"]:
           return power
        else:
            print("Неверная сила удара. Пожалуйста, выберите low, medium или high.")

def get_computer_direction():
    """
    Случайно выбирает направление отбивания компьютера.
    Возвращает случайное направление (left, center, right).
    """
    return random.choice(["left", "center", "right"])

def play_football():
    """
    Основная функция игры в футбол.
    Реализует игровой процесс.
    """
    player_score = 0  # Инициализируем счет игрока
    print("Добро пожаловать в игру Футбол!")

    while True:
        # Получаем ввод от игрока
        player_direction = get_player_direction()
        player_power = get_player_power()
        # Получаем направление отбивания компьютера
        computer_direction = get_computer_direction()

        # Сравниваем направления для определения гола
        if player_direction != computer_direction:
            print("Гол!") # Выводим сообщение о голе
            player_score += 1 # Увеличиваем счет игрока на 1
        else:
            print("Не забил!")  # Выводим сообщение что гола нет
        
        print(f"Счет: {player_score}") # Выводим текущий счет игрока

        # Спрашиваем, хочет ли игрок продолжить игру
        play_again = input("Хотите сыграть еще раз? (y/n): ").lower()
        if play_again != "y":
            break # Если игрок не хочет играть, выходим из цикла

if __name__ == "__main__":
    play_football()
"""
Пояснения:
1.  `get_player_direction()`:
    -   Эта функция отвечает за получение ввода от игрока для направления удара.
    -   Использует цикл `while True`, чтобы повторять запрос до тех пор, пока игрок не введет корректное направление (left, center, right).
    -   Возвращает введенное игроком направление в нижнем регистре.

2.  `get_player_power()`:
    -   Эта функция отвечает за получение ввода от игрока для силы удара.
    -   Использует цикл `while True`, чтобы повторять запрос до тех пор, пока игрок не введет корректную силу удара (low, medium, high).
    -   Возвращает введенную игроком силу удара в нижнем регистре.

3.  `get_computer_direction()`:
    -   Эта функция отвечает за генерацию случайного направления отбивания компьютера.
    -   Использует `random.choice` для случайного выбора одного из трех направлений (left, center, right).
    -   Возвращает выбранное направление.

4.  `play_football()`:
    -   Это основная функция, которая управляет игровым процессом.
    -   Инициализирует счетчик голов игрока `player_score` равным 0.
    -   Выводит приветственное сообщение.
    -   Запускает основной игровой цикл `while True`, который продолжается до тех пор, пока игрок не решит закончить игру.
    -   Внутри цикла:
        -   Вызывает `get_player_direction` и `get_player_power` для получения ввода от игрока.
        -   Вызывает `get_computer_direction` для получения случайного направления от компьютера.
        -   Проверяет, совпадают ли направления игрока и компьютера.
        -   Если направления не совпадают, выводит сообщение "Гол!" и увеличивает счет игрока на 1.
        -   Иначе, выводит сообщение "Не забил!".
		-   Выводит текущий счет игрока.
        -   Запрашивает у игрока, хочет ли он сыграть еще раз.
        -   Если игрок вводит что-то кроме "y", цикл прерывается с помощью `break`.

5. `if __name__ == "__main__":`:
   - Эта конструкция гарантирует, что функция `play_football()` будет вызвана только тогда, когда скрипт запускается напрямую, а не импортируется как модуль.
   
6. Комментарии:
   - Все строки кода снабжены подробными комментариями на русском языке, что облегчает понимание кода начинающим программистам.
   - Каждая функция и блок кода снабжены пояснениями о том, для чего они предназначены и как они работают.
   - Осмысленные имена переменных используются для лучшей читаемости кода.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```