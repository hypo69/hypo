Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код реализует функциональность для обработки запросов, связанных с XPath-выражениями. Он отвечает на сообщения, получаемые от расширения браузера, выполняет XPath-запросы на странице, обрабатывает результаты и обновляет отображение результатов в расширении.  Код взаимодействует с хранилищем браузера (browser.storage) для получения и обновления параметров, например, стилей. Код также обрабатывает запросы на фокусировку элементов и фреймов.

Шаги выполнения
-------------------------
1. **Обработка сообщений:** Код устанавливает слушатель сообщений (window.addEventListener("message", ...)) для обработки сообщений, отправленных расширением браузера.

2. **Инициализация:**  Выполняются различные инициализационные действия, в том числе установка флага tx.isContentLoaded для предотвращения повторного выполнения кода.

3. **Обработка разных типов сообщений:** Функция `genericListener` обрабатывает различные типы сообщений, такие как `execute`, `focusItem`, `focusContextItem`, `focusFrame`, `requestShowResultsInPopup`, `resetStyle` и др.

4. **Выполнение XPath-запросов:** При получении сообщения `execute` код выполняет XPath-запрос, получая результаты, включая информацию о контексте и фокусированных элементах.

5. **Обработка результатов:** Полученные результаты (узлы DOM) сохраняются в переменных, и создается ответное сообщение для расширения.

6. **Обновление стилей:** Код обновляет стили на странице, вставляя или обновляя стилизованный элемент.

7. **Обработка фреймов:** Код обрабатывает запросы, связанные с фреймами, включая обнаружение и взаимодействие с фреймами.

8. **Управление фокусом:** При получении запроса на фокусировку, код устанавливает фокус на элемент.

9. **Взаимодействие с расширением:** Ответные сообщения передаются расширению для обновления интерфейса.

10. **Хранение данных:** Используется хранилище браузера (browser.storage) для сохранения и получения данных.


Пример использования
-------------------------
.. code-block:: javascript

    // Пример сообщения, отправляемого расширением:
    browser.runtime.sendMessage({
        "event": "execute",
        "main": {
            "method": "evaluate",
            "expression": "//div[@class='myClass']",
            "resultType": "ANY_TYPE(0)",
            "resolver": ""
        }
    });

    // После обработки сообщения, расширение получит ответ с результатами.