Как использовать модуль логирования (logger.py)
=========================================================================================

Описание
-------------------------
Модуль `logger.py` предоставляет утилиту для логирования, работающую по принципу синглтона.  Он поддерживает различные уровни и форматы логирования (консоль, файл, JSON), а также возможность окраски сообщений в консоли в зависимости от уровня важности.  Модуль содержит класс `Logger` для управления логированием и методы для записи сообщений различных уровней (информация, предупреждение, ошибка и т.д.).

Шаги выполнения
-------------------------
1. **Импортировать модуль:**  Импортировать модуль `logger` в ваш скрипт:

   ```python
   import logger
   ```

2. **Инициализировать логгер:**  Создать экземпляр класса `Logger` и вызвать метод `initialize_loggers`, передавая пути к файлам для разных уровней логирования:

   ```python
   logger = logger.Logger()
   logger.initialize_loggers(info_log_path='info.log', debug_log_path='debug.log', errors_log_path='errors.log', json_log_path='log.json')
   ```
   Это создаст логгеры для консоли, а также для файлов с указанными путями, записывая логи соответствующих уровней.  Пути к файлам могут быть пропущены, если нужно, чтобы логирование происходило только в консоли.

3. **Записать сообщения различных уровней:**  Вызвать методы класса `Logger` (например, `info`, `warning`, `error`) для записи сообщений соответствующего уровня:

   ```python
   logger.info('Это информационное сообщение')
   logger.warning('Это предупреждение')
   logger.error('Это ошибка', ex=Exception('Описание ошибки'))
   ```
   Методы могут принимать необязательный аргумент `ex`, который позволяет передать объект исключения для включения деталей исключения в лог. Также `exc_info=True` для получения полной информации об исключении.

4. **Управление уровнем логирования:**  В зависимости от потребностей, можно изменить уровень логирования, что позволит увидеть только логи определенных уровней. (Пример не показан, так как не является шагом создания логирования, а скорее настройкой существующего)

Пример использования
-------------------------
.. code-block:: python

    import logger
    import colorama

    # ... (другой код в вашем скрипте) ...

    logger = logger.Logger()
    logger.initialize_loggers(info_log_path='info.log', debug_log_path='debug.log', errors_log_path='errors.log', json_log_path='log.json')

    try:
        result = some_function_that_might_raise_an_exception()
        logger.info('Функция выполнилась успешно', colorama.Fore.GREEN)
    except Exception as e:
        logger.error('Ошибка при выполнении функции', ex=e, exc_info=True)

    # ... (остальной код вашего скрипта) ...