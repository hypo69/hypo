Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код обрабатывает запросы от расширения браузера для выполнения XPath-запросов. Он взаимодействует с контекстом страницы, получает элементы, устанавливает фокус на них, и обновляет стиль.  Код реализует логику обработки сообщений, поиска и фокусировки элементов, а также  обновления стилей. Он управляет обработкой ошибок и взаимодействует с хранилищем браузера для сохранения атрибутов и стилей.

Шаги выполнения
-------------------------
1. **Обработка сообщений:** Код слушает сообщения, отправляемые браузерным расширением (`browser.runtime.onMessage`). Разные типы сообщений (`event` в сообщении) вызывают различные функции обработки.

2. **Инициализация:**  Проверяет, был ли код уже выполнен ( `tx.isContentLoaded`). Если да, то возвращается. Инициализирует переменные, такие как `contextItem`, `currentItems`, `focusedItem`, `currentCss` и хранилище `originalAttributes`. Создаёт пустые массивы и значения по умолчанию.

3. **Обработка запроса `execute`:** При получении сообщения `execute` из расширения:
    - Сбрасывает предыдущие результаты (`resetPrev`).
    - Обновляет стили (`updateCss`).
    - Создаёт объект ответа (`sendMsg`) для расширения.
    - Обрабатывает контекст выполнения:
        - Если задан `frameDesignation`, то выполняет поиск фреймов (`traceBlankWindows`), обращается к заданному фрейму (`parseFrameDesignation`), и если фрейм найден, то устанавливает `contextItem` на документ этого фрейма, отмечая, что выполнение происходит во вложенном окне (`inBlankWindow`).
        - Если задан `context`, то выполняет `fu.execExpr` для получения элементов по контексту и устанавливает `contextItem` на первый результат.
    - Выполняет `fu.execExpr` для получения результатов основного XPath-запроса, устанавливает `currentItems` на результат.
    - Формирует ответ (`sendMsg`), содержащий результаты и отправляет его в расширение (`browser.runtime.sendMessage`).
    - Устанавливает атрибуты контекста и текущих элементов (`setMainAttrs`).
    - Обновляет стили (`updateStyleElement`) в случае выполнения в другом фрейме (`inBlankWindow`).

4. **Обработка фокусировки элементов:**  Обрабатывает сообщения о фокусировке (`focusItem`, `focusContextItem`, `focusFrame`) с использованием `focusItem`.  Переносит фокус на заданный элемент.

5. **Обработка стилей:**  Функции `updateCss`, `updateStyleElement`, `removeStyleElement`, `updateAllStyleElements`, `removeAllStyleElements` управляют обновлением и удалением CSS стилей в документе, чтобы они отображались в браузере.

6. **Обработка ошибок:** Функции обработки ошибок (`catch`) в коде обрабатывают исключения при выполнении запросов и отправляют сообщение об ошибке в расширение браузера.

7. **Обновление атрибутов:**  При изменении атрибутов в хранилище, код обновляет переменную `attributes`.

8. **Взаимодействие с фреймами:**  Функции `traceBlankWindows`, `findFrameByMessage`, `setFocusFrameListener`, `initBlankWindow` обрабатывают запросы к фреймам,  устанавливают слушатели сообщений (`addEventListener`) и передают сообщения между фреймами.

Пример использования
-------------------------
.. code-block:: javascript

    // Предположим, у нас есть расширение, которое делает запрос.
    browser.runtime.sendMessage({
        "event": "execute",
        "main": {
            "method": "xpath",
            "expression": "//div[@class='my-class']",
            "resultType": "ANY_TYPE",
            "resolver": ""
        },
        "context": {  // опциональный контекст поиска
          "method": "xpath",
          "expression": "//p",
          "resultType": "NODE_SET",
          "resolver": ""
        }
    });