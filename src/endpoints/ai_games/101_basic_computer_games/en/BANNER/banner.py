"""
FURS:
=================
Сложность: 7
-----------------
Игра "Меховые Торговцы" представляет собой экономическую симуляцию, где игрок выступает в роли торговца мехом, перемещающегося между тремя городами (А, Б и С) с целью получения максимальной прибыли. В каждом городе цены на мех меняются случайным образом, и игрок должен принимать решения о покупке, продаже или перемещении в другой город. Цель игры - накопить как можно больше денег за 10 ходов.

Правила игры:
1. Игрок начинает игру с 1000 долларами и 10 единицами меха.
2. Игрок перемещается между тремя городами (А, Б и С).
3. В каждом городе цены на мех устанавливаются случайно в диапазоне от 100 до 500 долларов за единицу.
4. Игрок может покупать, продавать или не делать ничего в городе.
5. Игрок может переместиться в другой город, потратив 10% своих текущих денег.
6. Игра продолжается 10 ходов.
7. В конце игры подсчитывается общий капитал (деньги + стоимость меха) игрока.

-----------------
Алгоритм:
1.  Инициализировать переменные: 
    - количество денег игрока равно 1000.
    - количество меха игрока равно 10.
    - текущий город игрока равен А.
    - номер хода равен 1.
2. Начать цикл, пока номер хода меньше или равен 10:
    2.1 Сгенерировать случайные цены на мех для каждого города (от 100 до 500).
    2.2 Вывести на экран текущие цены на мех в каждом городе.
    2.3 Вывести на экран текущий баланс денег и меха игрока, а также текущий город и номер хода.
    2.4 Запросить у игрока действие (купить, продать, переместиться, ничего не делать).
    2.5 Обработать действие игрока:
        - если игрок хочет купить:
            - запросить количество меха для покупки.
            - проверить, достаточно ли у игрока денег.
            - если денег достаточно, то обновить количество денег и меха игрока.
        - если игрок хочет продать:
            - запросить количество меха для продажи.
            - проверить, достаточно ли у игрока меха.
            - если меха достаточно, то обновить количество денег и меха игрока.
        - если игрок хочет переместиться:
            - запросить город для перемещения.
            - вычесть стоимость перемещения (10% от текущих денег) из денег игрока.
            - обновить текущий город игрока.
        - если игрок не хочет делать ничего, перейти к следующему ходу.
    2.6 Увеличить номер хода на 1.
3.  Подсчитать общий капитал игрока (деньги + стоимость меха в текущем городе).
4.  Вывести на экран итоговый капитал игрока.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    playerMoney = 1000<br>
    playerFur = 10<br>
    currentCity = 'A'<br>
    turnNumber = 1
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: turnNumber <= 10"}
    LoopStart -- Да --> GeneratePrices["<p align='left'>Сгенерировать случайные цены на мех:
    <code><b>
    priceA = random(100, 500)<br>
    priceB = random(100, 500)<br>
    priceC = random(100, 500)
    </b></code></p>"]
    GeneratePrices --> DisplayInfo["<p align='left'>Вывести информацию:
    <code><b>
     Текущие цены,<br>
     Баланс денег, меха,<br>
     Текущий город,<br>
     Номер хода
    </b></code></p>"]
    DisplayInfo --> GetAction["Запросить действие игрока: <b>buy, sell, move, wait</b>"]
    GetAction --> ActionCheck{"Проверка действия"}
    ActionCheck -- buy --> BuyFur["<p align='left'><b>Действие: Купить мех</b><br>
    Запросить количество,<br>
    Проверить наличие денег,<br>
    Обновить количество денег и меха</p>"]
    ActionCheck -- sell --> SellFur["<p align='left'><b>Действие: Продать мех</b><br>
    Запросить количество,<br>
     Проверить наличие меха,<br>
     Обновить количество денег и меха</p>"]
    ActionCheck -- move --> MoveCity["<p align='left'><b>Действие: Переместиться</b><br>
    Запросить город,<br>
    Вычесть стоимость,<br>
     Обновить текущий город</p>"]
     ActionCheck -- wait --> Wait["<b>Действие: Ничего не делать</b>"]
    BuyFur --> NextTurn
    SellFur --> NextTurn
    MoveCity --> NextTurn
    Wait --> NextTurn
    NextTurn --> IncreaseTurn["<code><b>turnNumber = turnNumber + 1</b></code>"]
     IncreaseTurn --> LoopStart
    LoopStart -- Нет --> CalculateTotalCapital["<p align='left'>Подсчет общего капитала:
        <code><b>
        totalCapital = playerMoney + (playerFur * price(currentCity))
        </b></code></p>"]
    CalculateTotalCapital --> OutputResult["Вывод результата: <b>totalCapital</b>"]
    OutputResult --> End["Конец"]

```
**Legenda**:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: playerMoney (деньги игрока) устанавливается в 1000, playerFur (мех игрока) устанавливается в 10, currentCity (текущий город) устанавливается в 'A', turnNumber (номер хода) устанавливается в 1.
    LoopStart - Начало цикла, который продолжается, пока turnNumber меньше или равно 10.
    GeneratePrices - Генерация случайных цен на мех для городов A, B, C (priceA, priceB, priceC).
    DisplayInfo - Вывод текущей информации: цены на мех, баланс денег и меха, текущий город и номер хода.
    GetAction - Запрос у игрока действия: купить (buy), продать (sell), переместиться (move) или ничего не делать (wait).
    ActionCheck - Проверка выбранного действия.
    BuyFur - Выполнение действия "купить мех": запрос количества, проверка наличия денег, обновление количества денег и меха.
    SellFur - Выполнение действия "продать мех": запрос количества, проверка наличия меха, обновление количества денег и меха.
    MoveCity - Выполнение действия "переместиться": запрос города для перемещения, вычет стоимости перемещения, обновление текущего города.
    Wait - Действие "ничего не делать".
    NextTurn - переход к следующему ходу.
    IncreaseTurn - Увеличение номера хода на 1.
    CalculateTotalCapital - Подсчет общего капитала: playerMoney + (playerFur * price(currentCity)).
    OutputResult - Вывод итогового капитала.
    End - Конец программы.
"""
import random

# Инициализация переменных
playerMoney = 1000  # Начальное количество денег
playerFur = 10    # Начальное количество меха
currentCity = 'A' # Начальный город
turnNumber = 1    # Номер текущего хода

# Основной игровой цикл
while turnNumber <= 10:
    # Генерируем случайные цены для каждого города
    priceA = random.randint(100, 500)
    priceB = random.randint(100, 500)
    priceC = random.randint(100, 500)

    # Выводим текущие цены и состояние игрока
    print(f"\n--- Ход {turnNumber} ---")
    print(f"Цены на мех: A={priceA}, B={priceB}, C={priceC}")
    print(f"Деньги: {playerMoney}, Мех: {playerFur}, Город: {currentCity}")

    # Запрашиваем действие игрока
    action = input("Действие (купить/buy, продать/sell, переместиться/move, ждать/wait): ").lower()

    # Обрабатываем действие игрока
    if action == "купить" or action == "buy":
        try:
            amount = int(input("Сколько меха купить? "))
            if playerMoney >= amount * locals()[f'price{currentCity}']:
                playerMoney -= amount * locals()[f'price{currentCity}']
                playerFur += amount
                print("Покупка совершена.")
            else:
                 print("Недостаточно денег.")
        except ValueError:
             print("Некорректный ввод.")
    elif action == "продать" or action == "sell":
        try:
             amount = int(input("Сколько меха продать? "))
             if playerFur >= amount:
                playerMoney += amount * locals()[f'price{currentCity}']
                playerFur -= amount
                print("Продажа совершена.")
             else:
                print("Недостаточно меха.")
        except ValueError:
             print("Некорректный ввод.")
    elif action == "переместиться" or action == "move":
        city = input("В какой город переместиться (A, B, C)? ").upper()
        if city in ('A', 'B', 'C') and city != currentCity:
            cost = playerMoney * 0.1
            playerMoney -= cost
            currentCity = city
            print(f"Перемещение в {currentCity}. Стоимость: {cost}")
        else:
           print("Некорректный город или вы уже в нем находитесь.")
    elif action == "ждать" or action == "wait":
         print("Ожидание...")
    else:
        print("Неверное действие.")
    
    turnNumber += 1  # Переходим к следующему ходу

# Подсчитываем итоговый капитал
finalCapital = playerMoney + (playerFur * locals()[f'price{currentCity}'])
print(f"\n--- Итого ---")
print(f"Общий капитал: {finalCapital}")

"""
Объяснение кода:
1. **Инициализация переменных**:
   - `playerMoney = 1000`: Начальное количество денег у игрока.
   - `playerFur = 10`: Начальное количество меха у игрока.
   - `currentCity = 'A'`: Начальный город игрока ('A', 'B' или 'C').
   - `turnNumber = 1`: Номер текущего хода.

2. **Основной игровой цикл `while turnNumber <= 10:`**:
   - Цикл выполняется, пока не пройдет 10 ходов.
   - **Генерация цен**:
     - `priceA = random.randint(100, 500)`: Генерирует случайные цены на мех для города A.
     - Аналогично генерируются цены для городов B и C.
   - **Вывод текущей информации**:
     - Выводятся текущий ход, цены на мех в городах, количество денег, количество меха и текущий город игрока.
   - **Ввод действия игрока**:
     - `action = input(...).lower()`: Запрашивает у игрока действие (купить, продать, переместиться, ждать) и переводит ввод в нижний регистр.
   - **Обработка действия игрока `if action == ...:`**:
     - **Покупка меха (`"купить"` или `"buy"`):**
        - Запрашивает количество меха для покупки.
        - Проверяет, достаточно ли денег у игрока.
        - Если достаточно, списывает деньги и добавляет мех.
        - `locals()[f'price{currentCity}']` - динамическое получение цены в текущем городе
     - **Продажа меха (`"продать"` или `"sell"`):**
        - Запрашивает количество меха для продажи.
        - Проверяет, достаточно ли меха у игрока.
        - Если достаточно, добавляет деньги и списывает мех.
     - **Перемещение в другой город (`"переместиться"` или `"move"`):**
        - Запрашивает название города для перемещения.
        - Вычитает 10% от текущих денег как стоимость перемещения.
        - Изменяет текущий город.
     - **Ожидание (`"ждать"` или `"wait"`):**
         - Выводит сообщение об ожидании.
   -  **Неверное действие:**
      - Если введено неверное действие, то выводится сообщение "Неверное действие.".
   - `turnNumber += 1`: Увеличивает номер хода на 1.

3. **Подсчет и вывод итогового капитала**:
   - `finalCapital = playerMoney + (playerFur * locals()[f'price{currentCity}'])`: Подсчитывает общий капитал игрока, суммируя имеющиеся деньги и стоимость меха по цене текущего города.
   - Выводится итоговый капитал игрока.
"""
