"""
BATNUM: BATNUM
=================
Сложность: 2
-----------------
Игра "BATNUM" (Битва чисел) представляет собой простую игру, в которой два игрока по очереди вводят числа от 1 до 10. Цель игры - получить число 100. Каждый игрок добавляет свое число к общей сумме, и игрок, доведящий сумму до 100 или выше, проигрывает.

Правила игры:
1. Два игрока по очереди вводят целые числа от 1 до 10.
2. Каждое введенное число прибавляется к общей сумме.
3. Игрок, после ввода которого сумма достигает 100 или более, проигрывает.
4. Начинает игру первый игрок.
-----------------
Алгоритм:
1. Установить начальную сумму в 0.
2. Начать игровой цикл.
3. Вывести текущую сумму.
4. Запросить у первого игрока ввод числа от 1 до 10.
5. Если введенное число не в диапазоне от 1 до 10, запросить повторный ввод.
6. Добавить введенное число к общей сумме.
7. Проверить, не превысила ли сумма 100. Если превысила, первый игрок проиграл, завершить игру.
8. Вывести текущую сумму.
9. Запросить у второго игрока ввод числа от 1 до 10.
10. Если введенное число не в диапазоне от 1 до 10, запросить повторный ввод.
11. Добавить введенное число к общей сумме.
12. Проверить, не превысила ли сумма 100. Если превысила, второй игрок проиграл, завершить игру.
13. Повторить с шага 3, если сумма не превысила 100.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeSum["Инициализация суммы: <code><b>totalSum = 0</b></code>"]
    InitializeSum --> GameLoopStart{"Начало игрового цикла"}
    GameLoopStart --> OutputCurrentSum1["Вывод текущей суммы"]
    OutputCurrentSum1 --> InputPlayer1["Ввод числа от 1 до 10 игроком 1: <code><b>player1Input</b></code>"]
    InputPlayer1 --> ValidateInput1{"Проверка: <code><b>1 <= player1Input <= 10</b></code>?"}
    ValidateInput1 -- Нет --> InputPlayer1
    ValidateInput1 -- Да --> AddInput1["<code><b>totalSum = totalSum + player1Input</b></code>"]
    AddInput1 --> CheckSum1{"Проверка: <code><b>totalSum >= 100</b></code>?"}
    CheckSum1 -- Да --> OutputPlayer1Lose["Вывод: Игрок 1 проиграл"]
    OutputPlayer1Lose --> End["Конец"]
    CheckSum1 -- Нет --> OutputCurrentSum2["Вывод текущей суммы"]
    OutputCurrentSum2 --> InputPlayer2["Ввод числа от 1 до 10 игроком 2: <code><b>player2Input</b></code>"]
    InputPlayer2 --> ValidateInput2{"Проверка: <code><b>1 <= player2Input <= 10</b></code>?"}
     ValidateInput2 -- Нет --> InputPlayer2
    ValidateInput2 -- Да --> AddInput2["<code><b>totalSum = totalSum + player2Input</b></code>"]
    AddInput2 --> CheckSum2{"Проверка: <code><b>totalSum >= 100</b></code>?"}
    CheckSum2 -- Да --> OutputPlayer2Lose["Вывод: Игрок 2 проиграл"]
    OutputPlayer2Lose --> End
     CheckSum2 -- Нет --> GameLoopStart
```
    
**Legenda**:
    Start - Начало программы.
    InitializeSum - Инициализация переменной totalSum (сумма) в 0.
    GameLoopStart - Начало игрового цикла.
    OutputCurrentSum1 - Вывод текущего значения суммы для игрока 1.
    InputPlayer1 - Запрос у игрока 1 ввода числа от 1 до 10.
    ValidateInput1 - Проверка, что введенное число игрока 1 находится в диапазоне от 1 до 10.
    AddInput1 - Добавление введенного числа игрока 1 к общей сумме.
    CheckSum1 - Проверка, не превысила ли сумма 100 после хода игрока 1.
    OutputPlayer1Lose - Вывод сообщения о проигрыше игрока 1, если сумма равна 100 или более.
    End - Конец программы.
     OutputCurrentSum2 - Вывод текущего значения суммы для игрока 2.
    InputPlayer2 - Запрос у игрока 2 ввода числа от 1 до 10.
    ValidateInput2 - Проверка, что введенное число игрока 2 находится в диапазоне от 1 до 10.
    AddInput2 - Добавление введенного числа игрока 2 к общей сумме.
    CheckSum2 - Проверка, не превысила ли сумма 100 после хода игрока 2.
    OutputPlayer2Lose - Вывод сообщения о проигрыше игрока 2, если сумма равна 100 или более.
"""

# Инициализация суммы
totalSum = 0

# Основной игровой цикл
while True:
    # Ход первого игрока
    print(f"Текущая сумма: {totalSum}")
    while True:
        try:
            player1Input = int(input("Игрок 1, введите число от 1 до 10: "))
            if 1 <= player1Input <= 10:
                break
            else:
                print("Пожалуйста, введите число от 1 до 10.")
        except ValueError:
             print("Пожалуйста, введите целое число.")
    totalSum += player1Input

    # Проверка, не проиграл ли первый игрок
    if totalSum >= 100:
        print("Игрок 1 проиграл!")
        break

    # Ход второго игрока
    print(f"Текущая сумма: {totalSum}")
    while True:
       try:
            player2Input = int(input("Игрок 2, введите число от 1 до 10: "))
            if 1 <= player2Input <= 10:
                break
            else:
                print("Пожалуйста, введите число от 1 до 10.")
       except ValueError:
           print("Пожалуйста, введите целое число.")
    totalSum += player2Input

    # Проверка, не проиграл ли второй игрок
    if totalSum >= 100:
        print("Игрок 2 проиграл!")
        break
"""
Объяснение кода:
1.  **Инициализация суммы**:
    -   `totalSum = 0`: Инициализирует переменную `totalSum` для хранения общей суммы в игре, начиная с 0.
2.  **Основной игровой цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока один из игроков не проиграет.
3.  **Ход первого игрока**:
    -   `print(f"Текущая сумма: {totalSum}")`: Выводит текущую сумму на экран перед ходом игрока 1.
    -   **Цикл ввода для игрока 1**:
        -   `while True:`: Бесконечный цикл для обеспечения корректного ввода игрока.
        -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `player1Input = int(input("Игрок 1, введите число от 1 до 10: "))`: Запрашивает у игрока 1 ввод числа и преобразует его в целое число.
        -   `if 1 <= player1Input <= 10:`: Проверяет, находится ли введенное число в диапазоне от 1 до 10. Если да, то цикл ввода завершается с помощью `break`.
        -   `else:`: Если число вне диапазона, то выводится сообщение с просьбой повторить ввод.
    -   `totalSum += player1Input`: Добавляет введенное число к общей сумме.
    -   `if totalSum >= 100:`: Проверяет, не превысила ли сумма 100.
        -   `print("Игрок 1 проиграл!")`: Выводит сообщение о проигрыше игрока 1.
        -   `break`: Завершает основной игровой цикл.
4.  **Ход второго игрока**:
    -   `print(f"Текущая сумма: {totalSum}")`: Выводит текущую сумму на экран перед ходом игрока 2.
    -    **Цикл ввода для игрока 2**:
        -   `while True:`: Бесконечный цикл для обеспечения корректного ввода игрока.
        -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `player2Input = int(input("Игрок 2, введите число от 1 до 10: "))`: Запрашивает у игрока 2 ввод числа и преобразует его в целое число.
        -   `if 1 <= player2Input <= 10:`: Проверяет, находится ли введенное число в диапазоне от 1 до 10. Если да, то цикл ввода завершается с помощью `break`.
        -   `else:`: Если число вне диапазона, то выводится сообщение с просьбой повторить ввод.
    -   `totalSum += player2Input`: Добавляет введенное число к общей сумме.
    -   `if totalSum >= 100:`: Проверяет, не превысила ли сумма 100.
        -   `print("Игрок 2 проиграл!")`: Выводит сообщение о проигрыше игрока 2.
        -   `break`: Завершает основной игровой цикл.
5. Завершение программы:
    - Цикл while True завершается командой break
"""
