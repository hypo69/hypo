Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Модуль `date_time.py` содержит функции для проверки, попадает ли текущее время в заданный интервал.  Функции позволяют определить, находится ли текущее время в определенном временном интервале с опциональным тайм-аутом.  Функция `interval` проверяет, находится ли текущее время в заданном интервале, а `interval_with_timeout` выполняет эту проверку с ограничением по времени.  Модуль также содержит функцию `input_with_timeout`, которая ожидает ввод от пользователя с таймаутом.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Модуль импортирует классы `datetime` и `time` из библиотеки `datetime` и модуль `threading` для работы с потоками.
2. **Класс `TimeoutCheck`:** Определяется класс `TimeoutCheck`, который содержит методы для проверки времени и ввода с таймаутом.
3. **Метод `interval`:** Метод `interval` принимает начальную и конечную точки временного интервала (в формате `time`). Он определяет, находится ли текущее время в интервале, учитывая случай, когда интервал охватывает полночь. Возвращает `True`, если время в интервале, `False` - в противном случае.
4. **Метод `interval_with_timeout`:** Метод `interval_with_timeout` принимает таймаут (в секундах) и временные границы интервала.  Он запускает метод `interval` в отдельном потоке.  Если проверка завершается раньше таймаута, возвращает результат проверки (`True`/`False`). Если таймаут истекает, выводит сообщение о таймауте и возвращает `False`.
5. **Метод `get_input`:** Запрашивает ввод от пользователя.
6. **Метод `input_with_timeout`:**  Метод `input_with_timeout` принимает таймаут. Запускает метод `get_input` в отдельном потоке, ожидает ввода или таймаута. Если таймаут истекает, возвращает `None`. Иначе, возвращает полученный ввод.
7. **Блок `if __name__ == '__main__':`:**  В этом блоке демонстрируется использование методов. Создается экземпляр класса `TimeoutCheck`, вызывается метод `interval_with_timeout` с таймаутом 5 секунд, и в зависимости от возвращаемого значения выводится соответствующее сообщение.


Пример использования
-------------------------
.. code-block:: python

    from datetime import time
    from hypotez.src.utils.date_time import TimeoutCheck

    timeout_check = TimeoutCheck()

    # Проверка интервала с таймаутом 5 секунд
    if timeout_check.interval_with_timeout(timeout=5, start=time(23, 0), end=time(6, 0)):
        print("Текущее время находится в интервале.")
    else:
        print("Текущее время не находится в интервале или произошел таймаут.")

    # Пример использования input_with_timeout
    user_input = timeout_check.input_with_timeout(timeout=3)
    if user_input:
        print(f"Введенные данные: {user_input}")
    else:
        print("Произошел тайм-аут при вводе.")