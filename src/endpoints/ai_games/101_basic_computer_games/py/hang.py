"""
<HANG>:
=================
Сложность: 3
-----------------
Игра "Виселица" - это игра, в которой игрок должен отгадать загаданное слово, угадывая буквы по одной. За каждую неправильную попытку рисуется часть виселицы, и если виселица будет дорисована полностью, игрок проигрывает. Игрок выигрывает, если отгадает слово до того, как виселица будет дорисована.
Правила игры:
1. Компьютер выбирает случайное слово из списка.
2. Игроку показывается слово в виде набора прочерков, по одному на каждую букву в слове.
3. Игрок вводит букву.
4. Если буква есть в слове, то все соответствующие прочерки заменяются на эту букву.
5. Если буквы нет в слове, то рисуется новая часть виселицы.
6. Игра заканчивается, когда игрок отгадал слово, либо виселица нарисована полностью.
-----------------
Алгоритм:
1.  Задать список слов для игры.
2.  Выбрать случайное слово из списка.
3.  Инициализировать строку для показа игроку, заполнив ее прочерками по числу букв в слове.
4.  Инициализировать счетчик неправильных попыток.
5.  Пока счетчик неправильных попыток меньше 6 и слово не отгадано:
    -   Запросить ввод буквы у игрока.
    -   Если буква есть в слове:
        -   Обновить строку для показа игроку, заменив все соответствующие прочерки на эту букву.
        -   Если все буквы отгаданы, вывести сообщение о победе и завершить игру.
    -   Иначе:
        -   Увеличить счетчик неправильных попыток.
        -   Вывести текущее состояние виселицы.
    -  Показать слово с отгаданными буквами.
6. Если счетчик неправильных попыток равен 6, вывести сообщение о проигрыше и показать загаданное слово.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Start] --> Initialize[Initialize Variables];
    Initialize --> ChooseWord[Choose a random word];
    ChooseWord --> CreateMask[Create a mask with dashes];
    CreateMask --> StartGuessLoop{Incorrect attempts < 6 AND word is not guessed?};
    StartGuessLoop -- Yes --> InputLetter[Input a letter];
    InputLetter --> CheckLetter{Letter in the word?};
    CheckLetter -- Yes --> UpdateMask[Update the mask];
    UpdateMask --> CheckWin{All letters guessed?};
    CheckWin -- Yes --> OutputWin[Output win message];
    OutputWin --> End[End];
    CheckWin -- No --> StartGuessLoop;
    CheckLetter -- No --> IncrementTries[Increment incorrect attempts];
    IncrementTries --> DrawHangman[Draw hangman part];
    DrawHangman --> ShowMask[Show masked word];
     ShowMask --> StartGuessLoop;
    StartGuessLoop -- No --> CheckLose{Incorrect attempts == 6?};
    CheckLose -- Yes --> OutputLose[Output lose message and show the word];
    OutputLose --> End;
    CheckLose -- No --> End;
```
"""
import random

def hangman():
    """
    Реализация игры "Виселица".
    """
    # Список слов для игры
    word_list = ["apple", "banana", "cherry", "date", "elderberry", "fig", "grape"]
    
    # Выбираем случайное слово из списка
    secret_word = random.choice(word_list)
    
    # Создаем маску слова - строку из прочерков той же длины, что и загаданное слово
    masked_word = ["_" for _ in secret_word]
    
    # Инициализируем счетчик неправильных попыток
    incorrect_attempts = 0
    
    # Задаем количество попыток
    max_incorrect_attempts = 6

    # Основной цикл игры
    while incorrect_attempts < max_incorrect_attempts and "_" in masked_word:
        
        print(" ".join(masked_word))
        # Запрашиваем ввод буквы у игрока
        guess = input("Введите букву: ").lower()

        # Проверяем, есть ли буква в слове
        if guess in secret_word:
            # Если буква есть в слове, обновляем маску, заменяя прочерки на букву
            for index, letter in enumerate(secret_word):
                if letter == guess:
                    masked_word[index] = guess
        else:
            # Если буквы нет, увеличиваем счетчик неправильных попыток и рисуем виселицу.
            incorrect_attempts += 1
            draw_hangman(incorrect_attempts)

        
    # Проверяем, выиграл игрок или нет
    if "_" not in masked_word:
        print("Поздравляю, вы выиграли! Загаданное слово:", secret_word)
    else:
        print("Вы проиграли! Загаданное слово было:", secret_word)

def draw_hangman(attempts):
    """
    Отрисовывает текущее состояние виселицы.
    
    Args:
        attempts (int): Число неправильных попыток.
    """
    hangman_stages = [
        """
          --------
          |      |
          |      
          |    
          |      
          |
        -----
        """,
        """
          --------
          |      |
          |      O
          |    
          |      
          |
        -----
        """,
        """
          --------
          |      |
          |      O
          |      |
          |      
          |
        -----
        """,
        """
          --------
          |      |
          |      O
          |     /|
          |      
          |
        -----
        """,
        """
          --------
          |      |
          |      O
          |     /|\\
          |    
          |
        -----
        """,
        """
          --------
          |      |
          |      O
          |     /|\\
          |     / 
          |
        -----
        """,
        """
          --------
          |      |
          |      O
          |     /|\\
          |     / \\
          |
        -----
        """
    ]
    print(hangman_stages[attempts])


if __name__ == "__main__":
    hangman()
"""
Пояснения:
1. **`hangman()`**:
   -  Основная функция, которая запускает игру "Виселица".
   -  `word_list`: Список слов, из которых выбирается случайное слово для игры.
   -  `secret_word`: Случайно выбранное слово из списка.
   -  `masked_word`: Список, представляющий текущее состояние слова для игрока. Заполняется прочерками.
   -  `incorrect_attempts`: Счетчик неправильных попыток.
   -  `max_incorrect_attempts`: Максимальное количество неправильных попыток.
   -  Цикл `while`: Выполняется, пока количество неправильных попыток меньше `max_incorrect_attempts` и в `masked_word` есть прочерки.
   -  Запрашиваем у игрока ввод буквы.
   -  Проверяем, есть ли буква в слове. Если есть, обновляем `masked_word`.
   -  Если буквы нет в слове, увеличиваем счетчик `incorrect_attempts` и вызываем функцию `draw_hangman` для отрисовки виселицы.
   -  После завершения цикла проверяем, выиграл игрок или нет.

2.  **`draw_hangman(attempts)`**:
    -   Функция отрисовывает виселицу на основе количества неправильных попыток.
    -   `hangman_stages`: Список строк, представляющих этапы рисования виселицы.
    -   В зависимости от значения `attempts`, выводит соответствующий этап виселицы.
3.  **`if __name__ == "__main__":`**
    -   Этот блок обеспечивает запуск функции `hangman`, если файл запущен как основная программа.

Использование:
   -  Для запуска игры необходимо запустить данный файл.
   -  Игра будет выводить текущее состояние слова и запрашивать ввод букв до тех пор, пока игрок не отгадает слово или не будет израсходовано количество попыток.

"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```