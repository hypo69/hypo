Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует интерфейс чат-бота на React. Он позволяет пользователю вводить текст, отправлять его на сервер (http://localhost:8000/api/chat), получать ответ от серверной части приложения, и отображать диалог в пользовательском интерфейсе.  Код обрабатывает как пользовательский ввод, так и ответ чат-бота, форматирует и отображает их в виде сообщения в окне чата.  Он также управляет состоянием ввода и обновляет отображение чата.

Шаги выполнения
-------------------------
1. **Создание состояния:** Код инициализирует состояние приложения:
   - `input`: Хранит текст, введенный пользователем.
   - `messages`: Массив объектов, представляющий историю диалога.  Каждый объект содержит роль (user или assistant) и содержимое сообщения.

2. **Обработка отправки сообщения:** Функция `sendMessage` обрабатывает отправку сообщения:
   - **Проверка пустого ввода:** Проверяет, не пустой ли введенный текст. Если пустой,  выполнение функции завершается.
   - **Формирование объекта сообщения:** Создает объект `userMessage`, содержащий роль "user" и введенный текст.
   - **Обновление истории сообщений:** Добавляет `userMessage` в массив `messages`.
   - **Отправка запроса на сервер:** Выполняет запрос POST на сервер по адресу `http://localhost:8000/api/chat` с данными, содержащими введенный текст (prompt).
   - **Обработка ответа сервера:** Ожидает ответ от сервера, парсит JSON-данные.
   - **Формирование сообщения чат-бота:** Создает объект `aiMessage`, содержащий роль "assistant" и полученный ответ от сервера.
   - **Обновление истории сообщений:** Добавляет `userMessage` и `aiMessage` в массив `messages`.
   - **Обработка ошибок:**  Обрабатывает возможные ошибки при запросе на сервер.
   - **Очистка поля ввода:** Обнуляет поле ввода `input`.

3. **Отображение сообщений:**  Компонент `App` отображает сообщения в окне чата:
   - **Цикл по сообщениям:** Перебирает массив `messages`, отображая каждое сообщение с правильной форматировкой (слева для ответа AI, справа для пользовательского ввода).

4. **Ввод и отправка:** Пользовательский интерфейс предоставляет поля ввода текста, а также кнопку отправки сообщения.
   - **Обработка ввода:** Событие `onChange` для поля ввода обновляет состояние `input`.
   - **Обработка нажатия Enter:** При нажатии Enter в поле ввода, отправляется сообщение.
   - **Кнопка отправки:** Кнопка отправляет сообщение при нажатии.


Пример использования
-------------------------
.. code-block:: javascript
    
    // Импортируйте необходимые библиотеки (React, ReactDOM)
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    // ... (ваш код App компонента)
    ReactDOM.render(<App />, document.getElementById('chat-app'));