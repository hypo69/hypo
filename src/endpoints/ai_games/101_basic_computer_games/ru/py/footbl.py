"""
FOOTBL:
=================
Сложность: 5
-----------------
Игра FOOTBL - это симуляция футбольного матча, где игрок управляет командой и пытается забить голы, выбирая, какой удар совершить (низкий, средний или высокий), а компьютер, в свою очередь, выбирает сторону ворот для защиты. Игрок получает очки за каждый забитый гол и играет против компьютера.

Правила игры:
1.  Игрок выбирает тип удара: низкий (LOW), средний (MED) или высокий (HIGH).
2.  Компьютер случайным образом выбирает сторону для защиты: низкую (LOW), среднюю (MED) или высокую (HIGH).
3.  Если тип удара игрока и сторона защиты компьютера не совпадают, игрок забивает гол и получает одно очко.
4.  Игра продолжается до тех пор, пока игрок не решит закончить игру.
5.  В конце игры выводится общее количество забитых голов.
-----------------
Алгоритм:
1.  Инициализировать счетчик голов игрока (goals) нулем.
2.  Начать бесконечный цикл (пока игрок не решит закончить игру).
3.  Вывести на экран варианты удара: LOW, MED, HIGH.
4.  Запросить ввод от пользователя, какой удар он выбирает (low, med, high).
5.  Сгенерировать случайный выбор для компьютера (низкий, средний, высокий).
6.  Если выбор игрока и компьютера не совпадают, увеличить счетчик голов игрока на 1 и вывести сообщение "GOAL!".
7.  Если выбор игрока и компьютера совпадают, вывести сообщение "BLOCKED!".
8.  Спросить пользователя, хочет ли он продолжить игру.
9.  Если пользователь ответил "нет", завершить цикл.
10. Вывести итоговый счет голов игрока.
11. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGoals["<p align='left'>Инициализация: 
    <code><b>playerGoals = 0</b></code></p>"]
    InitializeGoals --> GameLoopStart{"Начало игрового цикла"}
    GameLoopStart --> DisplayOptions["Вывод вариантов удара: LOW, MED, HIGH"]
    DisplayOptions --> GetPlayerChoice["Ввод игрока: выбор удара (low, med, high)"]
    GetPlayerChoice --> GenerateComputerChoice["Случайный выбор компьютера (low, med, high)"]
    GenerateComputerChoice --> CompareChoices{"Сравнение: Выбор игрока <b>==</b> Выбор компьютера"}
    CompareChoices -- Нет --> IncreaseGoals["<code><b>playerGoals = playerGoals + 1</b></code><br>Вывод: <b>GOAL!</b>"]
    IncreaseGoals --> AskContinue["Спросить: Продолжить игру?"]
    CompareChoices -- Да --> OutputBlocked["Вывод: <b>BLOCKED!</b>"]
    OutputBlocked --> AskContinue
    AskContinue -- Да --> GameLoopStart
    AskContinue -- Нет --> OutputTotalGoals["Вывод: Общее количество голов: <code><b>playerGoals</b></code>"]
    OutputTotalGoals --> End["Конец"]
```

Legenda:
    Start - Начало программы.
    InitializeGoals - Инициализация переменной playerGoals (счетчик голов игрока) в 0.
    GameLoopStart - Начало основного игрового цикла.
    DisplayOptions - Вывод на экран вариантов удара: LOW, MED, HIGH.
    GetPlayerChoice - Получение выбора удара от игрока (low, med, high).
    GenerateComputerChoice - Генерация случайного выбора для компьютера (low, med, high).
    CompareChoices - Сравнение выбора игрока с выбором компьютера.
    IncreaseGoals - Если выбор игрока и компьютера не совпадают, счетчик голов увеличивается на 1 и выводится сообщение "GOAL!".
    OutputBlocked - Если выбор игрока и компьютера совпадают, выводится сообщение "BLOCKED!".
    AskContinue - Запрос у пользователя, хочет ли он продолжить игру.
    OutputTotalGoals - Вывод общего количества голов игрока.
    End - Конец программы.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'

import random

# Инициализируем счетчик голов игрока
playerGoals = 0

# Основной игровой цикл
while True:
    # Выводим варианты удара
    print("Выберите удар:")
    print("1 - LOW")
    print("2 - MED")
    print("3 - HIGH")

    # Получаем выбор игрока
    while True:
      try:
         playerChoice = int(input("Ваш выбор (1, 2 или 3): "))
         if 1 <= playerChoice <= 3:
             break
         else:
            print ("Неверный ввод. Введите 1, 2 или 3")
      except ValueError:
        print("Неверный ввод. Введите число.")
    
    # Преобразуем выбор игрока в строку для сравнения
    if playerChoice == 1:
      playerChoiceStr = "LOW"
    elif playerChoice == 2:
      playerChoiceStr = "MED"
    else:
      playerChoiceStr = "HIGH"
    # Генерируем случайный выбор компьютера
    computerChoice = random.choice(["LOW", "MED", "HIGH"])

    # Сравниваем выборы и определяем результат
    if playerChoiceStr != computerChoice:
        playerGoals += 1
        print("ГОЛ!")
    else:
        print("БЛОКИРОВАН!")

    # Спрашиваем, хочет ли игрок продолжить
    playAgain = input("Хотите продолжить? (да/нет): ").lower()
    if playAgain != "да":
        break

# Выводим общее количество голов
print(f"Общее количество голов: {playerGoals}")
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного выбора компьютера.
2.  **Инициализация счетчика голов игрока**:
    -   `playerGoals = 0`: Инициализирует переменную `playerGoals` для подсчета голов игрока.
3.  **Основной игровой цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока игрок не решит закончить игру.
    -   **Вывод вариантов удара**:
        -   `print("Выберите удар:")`: Выводит приглашение для игрока.
        -   `print("1 - LOW")`, `print("2 - MED")`, `print("3 - HIGH")`: Выводятся варианты удара.
    -   **Получение выбора игрока**:
        -  `while True`: цикл для проверки ввода
        -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `playerChoice = int(input("Ваш выбор (1, 2 или 3): "))`: Запрашивает ввод у игрока и преобразует его в целое число.
        -  `if 1 <= playerChoice <= 3:`: Проверяет, чтобы выбор был 1, 2 или 3
    -   **Преобразование выбора игрока в строку**
        -   `if playerChoice == 1:`, `elif playerChoice == 2:`, `else:`: Преобразуем числовое значение в строку для сравнения с выбором компьютера.
        -   `playerChoiceStr = "LOW"`, `playerChoiceStr = "MED"`, `playerChoiceStr = "HIGH"`:  Присваиваем строковое значение выбранному номеру.
    -  **Генерация случайного выбора компьютера**:
        -   `computerChoice = random.choice(["LOW", "MED", "HIGH"])`: Компьютер случайным образом выбирает один из трех вариантов ("LOW", "MED", "HIGH").
    -   **Сравнение выбора игрока и компьютера**:
        -   `if playerChoiceStr != computerChoice:`: Проверяет, не совпадают ли выборы игрока и компьютера.
        -   `playerGoals += 1`: Если выборы не совпадают, увеличивает счетчик голов игрока на 1.
        -   `print("ГОЛ!")`: Выводит сообщение о голе.
        -   `else:`: Если выборы совпадают.
        -   `print("БЛОКИРОВАН!")`: Выводит сообщение о том, что удар был заблокирован.
    -   **Запрос на продолжение игры**:
        -   `playAgain = input("Хотите продолжить? (да/нет): ").lower()`: Спрашивает, хочет ли игрок продолжить игру и приводит ввод к нижнему регистру.
        -   `if playAgain != "да":`: Проверяет, не ответил ли игрок "нет".
        -   `break`: Если игрок не хочет продолжать, цикл завершается.
4.  **Вывод общего количества голов**:
    -   `print(f"Общее количество голов: {playerGoals}")`: Выводит общее количество голов, забитых игроком, после завершения игры.
"""
