"""
BOMBER:
=================
Сложность: 5
-----------------
Игра "Бомбер" представляет собой текстовую игру, в которой игрок должен сбросить бомбу на цель, находящуюся на некотором расстоянии. Игрок вводит расстояние до цели, а игра сообщает, насколько точно была сброшена бомба. Если бомба попала точно в цель, игра завершается.

Правила игры:
1.  Компьютер выбирает случайное расстояние до цели в диапазоне от 1 до 100.
2.  Игрок вводит свое предположение о расстоянии до цели.
3.  После каждой попытки компьютер сообщает, попала ли бомба точно в цель или нет, и если не попала, то насколько близко.
4.  Игра завершается, когда бомба попадает точно в цель.
-----------------
Алгоритм:
1.  Сгенерировать случайное расстояние до цели в диапазоне от 1 до 100.
2.  Начать цикл "пока не угадано":
    2.1 Запросить у игрока ввод расстояния до цели.
    2.2 Если введенное расстояние равно загаданному расстоянию, перейти к шагу 3.
    2.3 Если введенное расстояние больше загаданного расстояния, вывести сообщение "TOO FAR".
    2.4 Если введенное расстояние меньше загаданного расстояния, вывести сообщение "TOO SHORT".
3.  Вывести сообщение "BULLSEYE".
4.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeTargetDistance["<p align='left'>Инициализация:
    <code><b>targetDistance = random(1, 100)</b></code></p>"]
    InitializeTargetDistance --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> InputDistance["Ввод расстояния пользователем: <code><b>userDistance</b></code>"]
    InputDistance --> CheckDistance{"Проверка: <code><b>userDistance == targetDistance?</b></code>"}
    CheckDistance -- Да --> OutputBullseye["Вывод сообщения: <b>BULLSEYE</b>"]
    OutputBullseye --> End["Конец"]
    CheckDistance -- Нет --> CheckFar{"Проверка: <code><b>userDistance > targetDistance</b></code>?"}
    CheckFar -- Да --> OutputFar["Вывод сообщения: <b>TOO FAR</b>"]
    OutputFar --> LoopStart
    CheckFar -- Нет --> OutputShort["Вывод сообщения: <b>TOO SHORT</b>"]
    OutputShort --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeTargetDistance - Инициализация переменной targetDistance (расстояние до цели), генерируется случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока расстояние не угадано.
    InputDistance - Запрос у пользователя ввода расстояния и сохранение его в переменной userDistance.
    CheckDistance - Проверка, равно ли введенное расстояние userDistance загаданному расстоянию targetDistance.
    OutputBullseye - Вывод сообщения о точном попадании, если расстояния равны.
    End - Конец программы.
    CheckFar - Проверка, больше ли введенное расстояние userDistance загаданного расстояния targetDistance.
    OutputFar - Вывод сообщения "TOO FAR", если введенное расстояние больше загаданного.
    OutputShort - Вывод сообщения "TOO SHORT", если введенное расстояние меньше загаданного.
"""
import random

# Генерируем случайное расстояние до цели в диапазоне от 1 до 100
targetDistance = random.randint(1, 100)

# Основной игровой цикл
while True:
    # Запрашиваем ввод расстояния у пользователя
    try:
        userDistance = int(input("Введите расстояние до цели (1-100): "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверяем, угадано ли расстояние
    if userDistance == targetDistance:
        print("BULLSEYE")
        break  # Завершаем цикл, если расстояние угадано
    elif userDistance > targetDistance:
        print("TOO FAR")  # Сообщаем, что расстояние слишком велико
    else:
        print("TOO SHORT")  # Сообщаем, что расстояние слишком мало
"""
Пояснения:
1. **Импорт модуля `random`:**
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2. **Инициализация целевого расстояния:**
   - `targetDistance = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в `targetDistance`. Это и есть загаданное расстояние до цели.
3. **Основной игровой цикл `while True:`:**
    - Бесконечный цикл, который продолжается до тех пор, пока игрок не угадает расстояние до цели (не будет выполнена команда `break`).
    -  **Ввод данных**:
        -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -`userDistance = int(input("Введите расстояние до цели (1-100): "))`: Запрашивает у пользователя ввести расстояние до цели и преобразует его в целое число. Результат сохраняется в переменной `userDistance`.
    - **Проверка попадания в цель:**
        - `if userDistance == targetDistance:`: Проверяет, равно ли введенное пользователем расстояние загаданному расстоянию до цели.
        -`print("BULLSEYE")`: Если расстояния равны, выводится сообщение "BULLSEYE" (точно в цель).
        -`break`: Завершает цикл, так как цель достигнута.
    - **Подсказки:**
        - `elif userDistance > targetDistance:`: Если введенное расстояние больше загаданного, выводится сообщение "TOO FAR" (слишком далеко).
       - `else:`: Если введенное расстояние не равно и не больше загаданного, значит, оно меньше.
        -`print("TOO SHORT")`: Выводится сообщение "TOO SHORT" (слишком близко).
4. **Конец игры:**
   - Цикл `while` завершается, когда игрок угадывает расстояние. Программа заканчивает выполнение.
"""
