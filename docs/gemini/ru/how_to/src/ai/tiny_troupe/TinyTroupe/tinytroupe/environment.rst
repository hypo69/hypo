Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет базовый класс `TinyWorld` для моделирования сред, в которых агенты взаимодействуют друг с другом и внешними сущностями (например, поисковыми системами).  Класс предоставляет методы для добавления и удаления агентов, управления временем симуляции, а также обработки взаимодействий между агентами.  Он также позволяет выполнять симуляцию в заданном количестве шагов и обрабатывать различные временные интервалы. Существует возможность сохранения и отображения коммуникаций между агентами.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Код импортирует необходимые библиотеки, такие как `logging`, `copy`, `datetime`, и классы из модулей `tinytroupe`.  Это подключает функциональность, необходимую для работы среды.
2. **Определение класса `TinyWorld`**: Создается класс `TinyWorld`, который служит основой для всех сред моделирования.
3. **Инициализация среды `TinyWorld`**: Метод `__init__` инициализирует среду, принимая имя среды, список агентов, начальную дату и время, и флаг для автоматического трансляции действий без указанного адресата.
4. **Управление агентами**: Методы `add_agent`, `remove_agent`, `remove_all_agents` управляют агентами в среде.
5. **Шаг симуляции `_step`**: Метод `_step` выполняет один шаг симуляции, вызывает действия всех агентов в среде и обрабатывает полученные результаты.
6. **Запуск симуляции `run`**: Метод `run` запускает симуляцию на заданное количество шагов с указанным временным интервалом между ними. Возвращает список действий, совершенных агентами во время симуляции.
7. **Пропуск шагов `skip`**: Метод `skip` пропустит заданное количество шагов симуляции, позволяя времени пройти без выполнения действий агентами.
8. **Методы для выполнения на интервалах времени**:  `run_minutes`, `run_hours`, `run_days`, `run_weeks`, `run_months`, `run_years` , `skip_minutes`, `skip_hours`, `skip_days`, `skip_weeks`, `skip_months`, `skip_years` предлагают удобные способы запуска и пропуске симуляции на определенные временные отрезки.
9. **Обработка действий `_handle_actions`**: Метод `_handle_actions` обрабатывает действия, выполняемые агентами.  Он анализирует тип действия и соответствующий целевой объект.
10. **Обработка конкретных действий (REACH_OUT, TALK)**: Методы `_handle_reach_out`, `_handle_talk` специфически обрабатывают действия "REACH_OUT" и "TALK". Они определяют поведение агентов в этих ситуациях (например, доступность агентов друг для друга после REACH_OUT).
11. **Трансляция сообщений `broadcast`, `broadcast_thought` , `broadcast_internal_goal`, `broadcast_context_change`**: Методы `broadcast`, `broadcast_thought`, `broadcast_internal_goal`, `broadcast_context_change` позволяют агентам транслировать сообщения, мысли, внутренние цели и изменения контекста во всей среде.
12. **Кодирование и декодирование состояния среды `encode_complete_state`, `decode_complete_state`**:  Эти методы позволяют сохранять и восстанавливать полное состояние среды. Важно, что они кодируют и декодируют состояние агентов в среде.
13. **Регистрация сред `add_environment`, `set_simulation_for_free_environments`, `get_environment_by_name`, `clear_environments`**:  Эти статические методы управляют всем набором созданных сред.


Пример использования
-------------------------
.. code-block:: python

    from tinytroupe.environment import TinyWorld
    from tinytroupe.agent import TinyPerson
    import datetime
    
    # Создание агентов
    agent1 = TinyPerson("Agent1")
    agent2 = TinyPerson("Agent2")
    
    # Создание среды
    env = TinyWorld(name="MyWorld", agents=[agent1, agent2], initial_datetime=datetime.datetime(2024, 1, 1))
    
    # Запуск симуляции на 5 шагов
    env.run(steps=5)
    
    # Вывод информации о последних действиях
    env.pop_and_display_latest_communications()