"""
<DOGS>:
=================
Сложность: 2
-----------------
Игра "Собаки" - это простая игра, в которой игрок пытается угадать, сколько собак находится в определенном месте, выбирая число в диапазоне от 1 до 100. Игра предоставляет несколько попыток.
Правила игры:
1. Компьютер случайным образом выбирает число от 1 до 100, представляющее количество собак.
2. Игрок вводит число от 1 до 100.
3. Компьютер сравнивает введенное число с загаданным.
4. Если число игрока больше загаданного, компьютер выводит сообщение "Слишком много".
5. Если число игрока меньше загаданного, компьютер выводит сообщение "Слишком мало".
6. Если число игрока совпадает с загаданным, компьютер выводит сообщение "Правильно!" и игра заканчивается.
7. Игроку дается ограниченное количество попыток.
8. Если игрок не угадывает число за отведенное количество попыток, игра заканчивается, и выводится загаданное число.
-----------------
Алгоритм:
1. Установить максимальное количество попыток: attempts = 7.
2. Сгенерировать случайное число dogs, представляющее количество собак, в диапазоне от 1 до 100.
3. Начать цикл, пока количество попыток не закончится.
4.  Вывести сообщение "Сколько собак?"
5.  Запросить у пользователя ввод числа и сохранить его в переменную guess.
6.  Уменьшить количество оставшихся попыток attempts = attempts - 1.
7.  Если guess больше dogs, вывести "Слишком много".
8.  Если guess меньше dogs, вывести "Слишком мало".
9.  Если guess равно dogs, вывести "Правильно!" и завершить игру.
10. Если цикл завершен (все попытки использованы), вывести сообщение "Не угадал! Было", значение dogs.
-----------------
Блок-схема: 
```mermaid
flowchart TD
    Start(Start) --> Initialize(Инициализация переменных);
    Initialize --> GenerateNumber(Генерация случайного числа собак);
    GenerateNumber --> InputNumber(Ввод числа от игрока);
    InputNumber --> CheckGuess(Проверка числа);
    CheckGuess -- Guess > Dogs --> TooHigh(Вывод "Слишком много");
    TooHigh --> DecreaseAttempts(Уменьшение попыток);
    CheckGuess -- Guess < Dogs --> TooLow(Вывод "Слишком мало");
    TooLow --> DecreaseAttempts;
    CheckGuess -- Guess == Dogs --> Correct(Вывод "Правильно!");
    Correct --> End(End);
    DecreaseAttempts --> CheckAttempts(Проверка оставшихся попыток);
    CheckAttempts -- Attempts > 0 --> InputNumber;
     CheckAttempts -- Attempts == 0 --> GameOver(Вывод "Не угадал!");
     GameOver --> End;
```
"""
import random

def play_dogs():
    """
    Игра "Собаки". Компьютер загадывает случайное количество собак (от 1 до 100),
    и игрок пытается угадать это число за несколько попыток.
    """
    # Максимальное количество попыток
    max_attempts = 7
    # Генерация случайного числа собак (от 1 до 100)
    dogs = random.randint(1, 100)
    # Переменная для отслеживания оставшихся попыток
    attempts_left = max_attempts

    # Цикл, пока есть попытки
    while attempts_left > 0:
        try:
            # Запрашиваем у игрока предположение
            guess = int(input("Сколько собак? (от 1 до 100): "))
            # Проверяем, что предположение в допустимом диапазоне
            if 1 <= guess <= 100:
              # Уменьшаем количество попыток
              attempts_left -= 1
              # Проверяем, угадал ли игрок
              if guess > dogs:
                print("Слишком много")
              elif guess < dogs:
                  print("Слишком мало")
              else:
                print("Правильно!")
                return # Завершаем игру, если игрок угадал
            else:
               print("Пожалуйста, введите число от 1 до 100")
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите целое число.")
            
    # Если все попытки исчерпаны
    print(f"Не угадал! Было {dogs}")


# Запускаем игру
if __name__ == "__main__":
    play_dogs()
"""
Пояснения:

1. **Импорт модуля random:**
   - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа собак.

2. **Функция `play_dogs()`:**
   - `def play_dogs():`: Определяет функцию `play_dogs`, в которой реализуется вся логика игры.

3. **Инициализация переменных:**
   - `max_attempts = 7`: Устанавливает максимальное количество попыток, которые даются игроку.
   - `dogs = random.randint(1, 100)`: Генерирует случайное целое число от 1 до 100, которое представляет количество собак, которое игрок должен угадать.
   - `attempts_left = max_attempts`: Инициализирует переменную `attempts_left` количеством попыток.

4. **Основной цикл `while`:**
   - `while attempts_left > 0:`: Начинает цикл, который продолжается, пока у игрока есть попытки.
     - `try: ... except ValueError:`  Обработка исключения на случай если пользователь введет не число.
     - `guess = int(input("Сколько собак? (от 1 до 100): "))`: Запрашивает ввод числа у игрока и преобразует его в целое число.
     - `if 1 <= guess <= 100:`: Проверяет, находится ли введенное число в диапазоне от 1 до 100.
     - `attempts_left -= 1`: Уменьшает количество оставшихся попыток.
     - **Условия проверки:**
       - `if guess > dogs: print("Слишком много")`: Выводит сообщение, если предположение игрока больше загаданного числа.
       - `elif guess < dogs: print("Слишком мало")`: Выводит сообщение, если предположение игрока меньше загаданного числа.
       - `else: print("Правильно!"); return`: Если игрок угадал, выводит сообщение "Правильно!" и завершает игру.
       - `else: print("Пожалуйста, введите число от 1 до 100")`: Если число не входит в диапазон 1-100
       - `except ValueError: print("Некорректный ввод. Пожалуйста, введите целое число.")`: Обработка исключения, если пользователь вводит не число.

5. **Завершение игры (если попытки закончились):**
   - `print(f"Не угадал! Было {dogs}")`: Выводит сообщение, если все попытки исчерпаны, и сообщает загаданное число.

6. **Запуск игры:**
   - `if __name__ == "__main__": play_dogs()`: Запускает игру, только если скрипт запущен напрямую (не импортирован как модуль).
   - `play_dogs()`: Вызывает функцию, которая запускает игру.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```