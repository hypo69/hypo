Как использовать класс Playwrid
=========================================================================================

Описание
-------------------------
Этот код определяет подкласс `PlaywrightCrawler`, называемый `Playwrid`.  Он предоставляет расширенные возможности, такие как настройка пользовательских параметров браузера, профилей и опций запуска с помощью Playwright.  Класс загружает настройки из файла `playwrid.json` и опционально из файла с пользовательскими настройками.  Он настраивает опции запуска для Playwright, включая headless режим и пользовательские аргументы, а также пользовательский User-Agent.  После инициализации, метод `start` запускает Playwright Crawler и переходит на заданный URL.  В случае ошибки, генерируется критическое сообщение об ошибке.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует необходимые модули, такие как `PlaywrightCrawler`, `Path`, `SimpleNamespace`, `logger` и другие, для работы с Playwright, файлами, настройками и логированием.

2. **Определение класса `Playwrid`:**  Создается подкласс `PlaywrightCrawler` - `Playwrid`.

3. **Инициализация `Playwrid`:** Конструктор `__init__` класса `Playwrid` принимает необязательные параметры `settings_name` (имя файла настроек) и `user_agent`.  Он загружает настройки из файла `playwrid.json` и, при необходимости, из файла с пользовательскими настройками.

4. **Настройка опций запуска:** Метод `_set_launch_options` настраивает опции запуска для Playwright.  Он использует загруженные настройки, такие как `headless` режим и пользовательские аргументы.  Если в настройках задан `user_agent`, он добавляется в опции запуска.

5. **Инициализация родительского класса:**  `super().__init__` инициализирует родительский класс `PlaywrightCrawler` с настроенными опциями запуска.

6. **Загрузка настроек:** Метод `_load_settings` загружает настройки из файла `playwrid.json`, а также из файла с пользовательскими настройками, если он предоставлен.

7. **Запуск Crawler:** Метод `start` запускает Playwright Crawler и переходит по заданному URL. Он ловит и обрабатывает потенциальные исключения во время запуска.

8. **Обработка ошибок:** Внутри `try...except` блока, при возникновении ошибки во время выполнения `super().run()`, генерируется критическое сообщение об ошибке с деталями исключения.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.webdriver.playwright.playwrid import Playwrid

    if __name__ == "__main__":
        browser = Playwrid()
        browser.start("https://www.example.com")