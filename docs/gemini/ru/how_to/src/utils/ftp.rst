Как использовать функции для работы с FTP-сервером
==========================================================================================

Описание
-------------------------
Этот модуль предоставляет интерфейс для взаимодействия с FTP-серверами. Он включает функции для отправки, получения и удаления файлов с FTP-сервера.  Модуль позволяет отправлять медиафайлы (изображения, видео), электронные таблицы и другие файлы на FTP-сервер и с него.

Шаги выполнения
-------------------------
1. **Подключение к FTP-серверу:** Функции `write`, `read` и `delete` требуют подключения к FTP-серверу.  В коде используется предопределенная конфигурация подключения (`_connection`).  В случае ошибки подключения (например, неверный логин/пароль или проблема с соединением), генерируется ошибка, логгируется и функция возвращает `False`.

2. **Выбор директории:**  Перед отправкой, получением или удалением файла, функция переходит в указанную директорию на FTP-сервере.

3. **Отправка файла (write):**
   - Функция `write` принимает путь к локальному файлу, целевую директорию и имя файла на FTP-сервере.
   - Открывает локальный файл в бинарном режиме чтения (`'rb'`).
   - Использует `session.storbinary` для отправки содержимого файла на FTP-сервер.
   - Если отправка прошла успешно, функция возвращает `True`. В случае ошибки, возвращает `False` и записывает ошибку в лог.

4. **Получение файла (read):**
   - Функция `read` принимает путь для сохранения локального файла, директорию на FTP-сервере и имя файла.
   - Создает и открывает локальный файл в бинарном режиме записи (`'wb'`).
   - Использует `session.retrbinary` для получения содержимого файла с FTP-сервера и записи его в локальный файл.
   - После успешного получения, считывает содержимое локального файла и возвращает его. В случае ошибки, возвращает `None` и записывает ошибку в лог.

5. **Удаление файла (delete):**
   - Функция `delete` принимает целевую директорию на FTP-сервере и имя файла для удаления.
   - Использует `session.delete` для удаления файла с FTP-сервера.
   - Возвращает `True` при успешном удалении, `False` в противном случае и записывает ошибку в лог.

6. **Закрытие сессии:** После завершения любой из операций функция `quit()` закрывает FTP-соединение.  Закрытие происходит в блоке `finally` для гарантированного выполнения, даже если возникла ошибка.


Пример использования
-------------------------
.. code-block:: python

    import os

    #  Предполагается, что _connection уже определен
    # ...

    # Пути к файлам
    local_file_path = os.path.join(os.getcwd(), 'my_file.txt')
    remote_dir = '/remote/directory'
    remote_file_name = 'my_file.txt'
    
    # Отправка файла
    success = write(local_file_path, remote_dir, remote_file_name)
    if success:
        print("Файл успешно отправлен")
    else:
        print("Ошибка при отправке файла")

    # Получение файла
    try:
        content = read(os.path.join(os.getcwd(), 'received_file.txt'), remote_dir, remote_file_name)
        if content:
            print("Файл успешно получен")
            # Обработка полученного содержимого
            print(content)
        else:
            print("Ошибка при получении файла")
    except FileNotFoundError:
        print("Локальный файл не найден")


    # Удаление файла
    success = delete(local_file_path, remote_dir, remote_file_name)
    if success:
        print("Файл успешно удален")
    else:
        print("Ошибка при удалении файла")