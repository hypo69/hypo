"""
SPACWRD:
=================
Сложность: 3
-----------------
Игра "SPACWRD" - это простая игра, в которой компьютер загадывает слово, а игрок пытается его угадать, вводя буквы. Компьютер сообщает, есть ли введенная буква в загаданном слове и сколько раз она встречается.
Правила игры:
1. Компьютер выбирает случайное слово из списка слов.
2. Игрок вводит букву.
3. Компьютер проверяет, есть ли введенная буква в загаданном слове.
4. Если буква есть, компьютер сообщает, сколько раз она встречается в слове и открывает эти буквы в угадываемом слове.
5. Если буквы нет, компьютер сообщает, что такой буквы нет.
6. Игра продолжается до тех пор, пока игрок не угадает слово целиком.
-----------------
Алгоритм:
1. Выбрать случайное слово из списка.
2. Инициализировать переменную попыток в 0.
3. Инициализировать переменную для хранения открытых букв (маски слова) символами подчеркивания.
4. Цикл:
    4.1. Увеличить счетчик попыток на 1.
    4.2. Вывести текущую маску слова.
    4.3. Запросить у пользователя ввод буквы.
    4.4. Если введенная буква есть в слове:
        4.4.1. Определить, сколько раз буква встречается в слове.
        4.4.2. Обновить маску слова, открывая все вхождения этой буквы.
        4.4.3. Сообщить, сколько раз буква встречается.
    4.5. Иначе:
        4.5.1. Сообщить, что такой буквы нет.
    4.6. Если маска слова совпадает со словом, то:
        4.6.1. Вывести сообщение о победе и количестве попыток.
        4.6.2. Завершить игру.
-----------------
Блок-схема:
```mermaid
graph TD
    A[Start] --> B{ChooseWord};
    B --> C{InitializeAttempts};
    C --> D{InitializeMaskedWord};
    D --> E{StartGuessingLoop};
    E --> F{IncreaseAttempts};
    F --> G{PrintMaskedWord};
    G --> H{InputLetter};
    H --> I{IsLetterInWord?};
    I -- Yes --> J{CountLetter};
    J --> K{UpdateMaskedWord};
    K --> L{PrintLetterCount};
    L --> M{IsMaskedWordEqualsWord?};
    I -- No --> N{PrintNoLetter};
    N --> M;
    M -- Yes --> O{PrintVictory};
    O --> P[End];
     M -- No --> E;

    
    classDef process fill:#ccf,stroke:#333,stroke-width:2px
    classDef input fill:#aaf,stroke:#333,stroke-width:2px
    classDef output fill:#afa,stroke:#333,stroke-width:2px
    class A,B,C,D,E,F,J,K  process
    class H input
    class G,L,N,O output
    class I,M decision
    class P end
```
"""
import random

def spacwrd():
    """
    Игра "SPACWRD". Компьютер загадывает слово, игрок пытается угадать его по буквам.
    """
    words = ["PYTHON", "PROGRAM", "COMPUTER", "ALGORITHM", "DEVELOPER"] # Список слов для игры
    secret_word = random.choice(words) # Выбираем случайное слово из списка
    masked_word = "_" * len(secret_word) # Создаем маску слова из подчеркиваний
    attempts = 0 # Инициализируем счетчик попыток
    
    while True: # Бесконечный цикл, пока слово не будет угадано
        attempts += 1 # Увеличиваем счетчик попыток
        print("Слово:", masked_word) # Выводим маску слова
        letter = input("Введите букву: ").upper() # Запрашиваем ввод буквы и переводим в верхний регистр

        if letter in secret_word: # Проверяем, есть ли введенная буква в загаданном слове
            count = secret_word.count(letter) # Считаем, сколько раз буква встречается в слове
            print(f"Буква '{letter}' встречается {count} раз.") # Выводим количество вхождений буквы
            
            # Обновляем маску слова, открывая угаданные буквы
            new_masked_word = "" 
            for i in range(len(secret_word)):
                if secret_word[i] == letter:
                  new_masked_word += letter
                else:
                  new_masked_word += masked_word[i]
            masked_word = new_masked_word

        else:
            print("Такой буквы нет в слове.") # Сообщаем, что буквы нет в слове

        if masked_word == secret_word: # Проверяем, угадано ли слово
            print("Вы угадали слово:", secret_word) # Выводим сообщение о победе
            print("Количество попыток:", attempts) # Выводим количество попыток
            break # Завершаем цикл

if __name__ == "__main__":
    spacwrd()
"""
Пояснения:
1.  Импортируем модуль `random` для выбора случайного слова из списка.
2.  Определяем функцию `spacwrd`, которая реализует основную логику игры.
3.  Создаем список `words`, содержащий слова для игры.
4.  Выбираем случайное слово из списка `words` с помощью `random.choice()` и сохраняем его в переменную `secret_word`.
5.  Создаем маску `masked_word` из символов подчеркивания, длина которой равна длине `secret_word`.
6.  Инициализируем счетчик попыток `attempts` значением 0.
7.  Запускаем бесконечный цикл `while True`, который будет продолжаться, пока слово не будет угадано.
8.  Увеличиваем счетчик попыток `attempts` на 1 в начале каждой итерации цикла.
9.  Выводим текущую маску слова `masked_word` на экран.
10. Запрашиваем у пользователя ввод буквы с помощью функции `input()` и преобразуем введенную букву в верхний регистр.
11. Проверяем, есть ли введенная буква `letter` в загаданном слове `secret_word` с помощью оператора `in`.
12. Если буква есть в слове, подсчитываем количество ее вхождений с помощью метода `count()` и выводим это количество на экран.
13. Обновляем `masked_word`, открывая все вхождения угаданной буквы.
14. Если введенной буквы нет в слове, выводим сообщение об этом.
15. Проверяем, совпадает ли маска слова `masked_word` с загаданным словом `secret_word`.
16. Если слово угадано, выводим сообщение о победе и количестве попыток и завершаем цикл с помощью оператора `break`.
17. В основной части программы `if __name__ == "__main__":` вызываем функцию `spacwrd()` для запуска игры.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```