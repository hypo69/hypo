Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот модуль `executor.py` предоставляет функции для взаимодействия с веб-элементами с помощью Selenium. Он парсит конфигурации (локейторы), которые представляют собой словари, и выполняет различные действия, такие как клики, ввод текста, получение атрибутов и скриншотов.  Модуль обрабатывает как одиночные, так и множественные локейторы, позволяя взаимодействовать с несколькими элементами одновременно.  Важной особенностью является поддержка продолжения выполнения при ошибках, что делает его устойчивым к непредсказуемым поведением веб-страниц.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**:  Модуль использует библиотеки `asyncio`, `re`, `time`, `selenium`, `ActionChains`, `By` и др. для выполнения своих функций.

2. **Создание экземпляра `ExecuteLocator`**: Создается объект `ExecuteLocator`, который содержит драйвер Selenium и инструменты для работы с веб-элементами.

3. **Подготовка локейтора**: Локейтор (dict или SimpleNamespace) определяет целевой веб-элемент и действия над ним.  Если локейтор — словарь, он преобразуется в `SimpleNamespace` для удобной работы.

4. **Выполнение локейтора**: Функция `execute_locator` принимает локейтор и выполняет указанные действия:
    - Ищет веб-элемент, заданный локейтором, с помощью `get_webelement_by_locator`.
    - Выполняет события, заданные в `locator.event`. (клик, ввод текста, пауза и др.).  Для ввода текста учитывается `typing_speed`.
    - Получает значение атрибута элемента, заданного в `locator.attribute`. Использует `get_attribute_by_locator`.
    - Обрабатывает возможные исключения (такие как `ElementClickInterceptedException`, `NoSuchElementException` и т.д.) с использованием `try...except` блоков и логгированием ошибок.

5. **Обработка списков элементов**: Если локейтор указывает на список элементов (`locator.if_list`), функции определяют, как выбрать элемент из списка (первый, последний, все элементы и др.).

6. **Получение скриншотов**: Функция `get_webelement_as_screenshot` позволяет получить скриншот найденного элемента.

7. **Возвращение результата**: Функция возвращает результат выполнения локейтора: значение атрибута, веб-элемент, результат события или `bool` (успех/неудача выполнения).


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.webdriver.executor import ExecuteLocator
    from selenium import webdriver
    import asyncio

    async def main():
        driver = webdriver.Chrome()  # Подставьте свой драйвер
        executor = ExecuteLocator(driver=driver)

        # Пример локейтора для клика по элементу с id="myButton"
        locator_data = {"by": "id", "selector": "myButton", "event": "click()"}

        try:
            result = await executor.execute_locator(locator_data)
            if result:
                print("Клик выполнен успешно")
            else:
                print("Произошла ошибка при клике")
        except Exception as e:
            print(f"Возникла ошибка: {e}")
        finally:
            driver.quit()

    if __name__ == "__main__":
        asyncio.run(main())