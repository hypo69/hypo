Как использовать этот блок кода
========================================================================================

Описание
-------------------------
Этот код определяет функцию `set_project_root()`, которая находит корневую директорию проекта.  Функция ищет корень, начиная с текущей директории и двигаясь вверх по иерархии директорий, пока не найдёт директорию, содержащую один из указанных файлов-маркеров (например, `pyproject.toml`, `requirements.txt`, `.git`). Если корневая директория не найдена, возвращается текущая директория.  Также, функция добавляет корневую директорию в системный путь `sys.path`, что позволяет импортировать модули из подпапок проекта.  После этого код загружает настройки из файла `settings.json` и документ README из `README.MD`, если они существуют. В случае ошибок (например, файл не найден или ошибка парсинга JSON), эти значения устанавливаются в `None` или пустые строки.  Наконец, код устанавливает переменные, содержащие имя проекта, версию, документацию, информацию об авторе, авторских правах и ссылку на поддержку.

Шаги выполнения
-------------------------
1. Функция `set_project_root()` получает на вход кортеж `marker_files` с именами файлов или директорий, которые указывают на корень проекта.
2. `set_project_root()` ищет родительские директории текущего файла, начиная с текущей директории.
3. Для каждой родительской директории проверяется, существует ли в ней хотя бы один из файлов или директорий, перечисленных в `marker_files`.
4. Если такой файл или директория найдены, функция сохраняет родительскую директорию в переменную `__root__` и завершает поиск.
5. Если корень не найден, `__root__` устанавливается в значение текущей директории.
6. Если корень проекта не присутствует в пути `sys.path`, он добавляется в начало `sys.path` для возможности импорта модулей из корневого каталога проекта.
7. Функция возвращает путь к корневой директории проекта.
8. Полученная корневая директория сохраняется в переменной `__root__`.
9. С помощью `import gs` импортируется модуль `gs`.
10.  Файл `settings.json` в подкаталоге `src` читается и загружается в словарь `settings` через `json.load`. В случае ошибки (отсутствие файла или неверный JSON) переменная `settings` остаётся `None`.
11.  Аналогично, файл `README.MD` в подкаталоге `src` читается и сохраняется в переменную `doc_str`. В случае ошибки, `doc_str` будет `None`.
12.  Значения из `settings` (если они доступны) или, в противном случае, значения по умолчанию, сохраняются в переменные `__project_name__`, `__version__`, `__doc__`, `__author__`, `__copyright__`, `__cofee__`.


Пример использования
-------------------------
.. code-block:: python

    # Предполагается, что этот код находится в файле в директории проекта.
    # ... (код из примера выше) ...
    
    print(__project_name__)
    print(__version__)
    print(__doc__)