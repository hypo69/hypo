
<HMRABI>:
=================
Сложность: 4
-----------------
Игра "Хамурапи" - это текстовая экономическая игра, в которой игрок управляет древним городом, пытаясь выжить и процветать в условиях ограниченных ресурсов. Игрок принимает решения о покупке и продаже земли, распределении урожая, посеве, и следит за уровнем голода и численностью населения.  Игра заканчивается, если население города умирает от голода, или по истечении 10 игровых лет.

Правила игры:
1. Игрок начинает игру с 100 жителями, 2800 бушелей зерна и 1000 акров земли.
2. Каждый год игрок принимает решения о покупке или продаже земли, количестве зерна, используемого на посев, и кормлении населения.
3. Площадь земли измеряется в акрах, зерно в бушелях. 
4. Случайные события, такие как нашествие крыс, могут влиять на запасы зерна.
5.  Город выживает, если есть достаточно зерна для прокорма населения, иначе население умирает от голода.
6.  Игра заканчивается либо через 10 лет, либо когда город полностью разорен (погибло все население).
7. Урожайность земли меняется каждый год (случайное число от 1 до 8)
8. Цена земли меняется каждый год от 15 до 25 бушелей за акр.

-----------------
Алгоритм:
1. Инициализировать переменные: год = 0, население = 100, зерно = 2800, земля = 1000.
2. Начать игровой цикл на 10 лет или пока население не станет равным 0.
3.   Вывести текущий год, количество населения, количество зерна и количество земли.
4.   Вычислить и вывести цену земли за акр (случайное число от 15 до 25).
5.   Запросить у игрока количество акров земли для покупки или продажи (положительное число для покупки, отрицательное для продажи).
6.   Проверить, достаточно ли у игрока зерна для покупки земли, и достаточно ли земли для продажи.
7.  Обновить количество земли и зерна.
8.  Запросить у игрока количество бушелей зерна для посева.
9.  Проверить, достаточно ли зерна для посева.
10. Вычислить урожайность (случайное число от 1 до 8 бушелей на акр).
11. Рассчитать и добавить новый урожай зерна в общий запас.
12. Вычислить количество зерна, съеденное крысами (случайное число от 0 до 10%).
13. Уменьшить количество зерна на количество, съеденное крысами.
14. Запросить у игрока количество зерна для кормления населения.
15. Если не хватает зерна для кормления, то население умирает от голода пропорционально нехватке (половина населения умирает если не хватает 50% запасов).
16. Если все население умерло, вывести сообщение о поражении и завершить игру.
17. Если зерна достаточно для прокорма, увеличить население на 10% или до 1000, в зависимости от того что меньше.
18. Увеличить год на 1.
19. Если прошло 10 лет, вывести сообщение о конце игры.
20. Конец игры.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    year = 0<br>
    population = 100<br>
    grain = 2800<br>
    land = 1000
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока <code><b>year < 10</b></code> и <code><b>population > 0</b></code>"}
    LoopStart -- Да --> DisplayStatus["<p align='left'>Вывод текущего статуса:
    <code><b>year</b>, <b>population</b>, <b>grain</b>, <b>land</b></code></p>"]
    DisplayStatus --> CalculateLandPrice["Вычисление цены земли: <code><b>landPrice = random(15, 25)</b></code>"]
    CalculateLandPrice --> DisplayLandPrice["Вывод цены земли: <code><b>landPrice</b></code>"]
    DisplayLandPrice --> InputLandTrade["Ввод: <code><b>landToBuyOrSell</b></code> (положительное - купить, отрицательное - продать)"]
    InputLandTrade --> CheckLandTrade["Проверка: хватает ли зерна для покупки или земли для продажи?"]
    CheckLandTrade -- Да --> UpdateLandAndGrain["<p align='left'>Обновление запасов:
    <code><b>land += landToBuyOrSell</b><br>
    <b>grain -= landToBuyOrSell * landPrice</b></code></p>"]
    UpdateLandAndGrain --> InputGrainToPlant["Ввод: <code><b>grainToPlant</b></code> (количество зерна для посева)"]
    InputGrainToPlant --> CheckGrainToPlant["Проверка: хватает ли зерна для посева?"]
    CheckGrainToPlant -- Да --> CalculateHarvest["Вычисление урожая: <code><b>yield = random(1, 8)</b></code><br><code><b>harvest = grainToPlant * yield</b></code>"]
    CalculateHarvest --> UpdateGrainWithHarvest["<code><b>grain += harvest</b></code>"]
    UpdateGrainWithHarvest --> CalculateRatsDamage["<p align='left'>Вычисление урона от крыс:
    <code><b>ratsDamage = random(0, 0.1) * grain</b></code></p>"]
    CalculateRatsDamage --> UpdateGrainWithRats["<code><b>grain -= ratsDamage</b></code>"]
    UpdateGrainWithRats --> InputGrainToFeed["Ввод: <code><b>grainToFeed</b></code> (количество зерна для пропитания)"]
    InputGrainToFeed --> CheckGrainToFeed["Проверка: хватает ли зерна для пропитания?"]
    CheckGrainToFeed -- Да --> UpdatePopulation["<code><b>population = min(1000, population * 1.1)</b></code>"]
    UpdatePopulation --> IncreaseYear["<code><b>year += 1</b></code>"]
    IncreaseYear --> LoopStart
    CheckGrainToFeed -- Нет --> CalculateStarvation["<p align='left'>Вычисление голода:
    <code><b>starved = population * (1 - grainToFeed/requiredGrain)</b></code></p>"]
    CalculateStarvation --> UpdatePopulationWithStarvation["<code><b>population -= starved</b></code>"]
    UpdatePopulationWithStarvation --> CheckPopulation["Проверка: <code><b>population <= 0</b></code>?"]
        CheckPopulation -- Да --> OutputGameOver["Вывод сообщения: <b>GAME OVER! You starved your population!</b>"]
        OutputGameOver --> End["Конец"]
    CheckPopulation -- Нет --> IncreaseYear
    CheckLandTrade -- Нет --> OutputErrorLand["Вывод сообщения: <b>Not enough resource for trade!</b>"]
    OutputErrorLand --> InputLandTrade
    CheckGrainToPlant -- Нет --> OutputErrorPlant["Вывод сообщения: <b>Not enough grain for planting!</b>"]
    OutputErrorPlant --> InputGrainToPlant
    LoopStart -- Нет --> OutputGameEnd["Вывод сообщения: <b>Game finished after 10 years</b>"]
    OutputGameEnd --> End
```

Legenda:
    Start - Начало игры.
    InitializeVariables - Инициализация начальных значений переменных: год (year) устанавливается в 0, население (population) в 100, запасы зерна (grain) в 2800, площадь земли (land) в 1000 акров.
    LoopStart - Начало игрового цикла, который продолжается, пока не пройдет 10 лет или пока население не станет равным 0.
    DisplayStatus - Вывод текущего статуса игры: год, количество населения, запасы зерна и площадь земли.
    CalculateLandPrice - Вычисление случайной цены за акр земли в диапазоне от 15 до 25 бушелей.
    DisplayLandPrice - Вывод цены за акр земли.
    InputLandTrade - Запрос у пользователя количества земли для покупки (положительное значение) или продажи (отрицательное значение).
    CheckLandTrade - Проверка, хватает ли ресурсов для совершения сделки по купле/продаже земли.
    UpdateLandAndGrain - Обновление запасов земли и зерна в зависимости от совершенной сделки.
    InputGrainToPlant - Запрос у пользователя количества зерна, которое нужно использовать для посева.
    CheckGrainToPlant - Проверка, хватает ли зерна для посева.
    CalculateHarvest - Вычисление урожая на основе количества посеянного зерна и случайного урожая за акр (от 1 до 8 бушелей).
    UpdateGrainWithHarvest - Обновление запасов зерна с учетом собранного урожая.
    CalculateRatsDamage - Вычисление ущерба от крыс (случайное значение от 0 до 10% от запасов зерна).
    UpdateGrainWithRats - Уменьшение запасов зерна на величину ущерба от крыс.
    InputGrainToFeed - Запрос у пользователя количества зерна, которое нужно использовать для кормления населения.
    CheckGrainToFeed - Проверка, хватает ли зерна для пропитания всего населения.
    UpdatePopulation - Увеличение населения на 10% (но не более 1000 человек), если зерна достаточно.
    IncreaseYear - Увеличение текущего года на 1.
    CalculateStarvation - Вычисление количества населения, погибшего от голода, если зерна недостаточно.
    UpdatePopulationWithStarvation - Обновление населения с учетом погибших от голода.
    CheckPopulation - Проверка, не умерло ли все население от голода.
    OutputGameOver - Вывод сообщения о поражении, если все население умерло от голода.
    OutputErrorLand - Вывод сообщения об ошибке, если не хватает ресурсов для торговли землей.
    OutputErrorPlant - Вывод сообщения об ошибке, если не хватает зерна для посева.
    OutputGameEnd - Вывод сообщения об окончании игры после 10 лет.
    End - Конец игры.
```
```python
import random

# Инициализация переменных
year = 0          # текущий год
population = 100  # начальное население
grain = 2800      # начальное количество зерна
land = 1000       # начальная площадь земли

print("Добро пожаловать в игру Хаммурапи!")

# Основной игровой цикл, который выполняется пока не пройдет 10 лет или пока все население не вымрет.
while year < 10 and population > 0:
    print(f"\nГод {year + 1}")
    print(f"Население: {population}")
    print(f"Зерно: {grain} бушелей")
    print(f"Земля: {land} акров")

    # Вычисляем случайную цену земли от 15 до 25 бушелей за акр
    land_price = random.randint(15, 25)
    print(f"Цена земли: {land_price} бушелей за акр")

    # Спрашиваем у игрока сколько земли купить или продать.
    while True:
        try:
            land_trade = int(input("Сколько земли купить (+) или продать (-)? "))
            break
        except ValueError:
            print("Пожалуйста, введите целое число.")
    
    # Проверяем, достаточно ли зерна для покупки или земли для продажи. Если нет, просим ввести данные еще раз.
    while True:
        if land_trade > 0 and grain < land_trade * land_price:
            print("Недостаточно зерна для покупки земли.")
            try:
                land_trade = int(input("Сколько земли купить (+) или продать (-)? "))
            except ValueError:
                print("Пожалуйста, введите целое число.")
                continue
            
        elif land_trade < 0 and land < abs(land_trade):
            print("Недостаточно земли для продажи.")
            try:
                land_trade = int(input("Сколько земли купить (+) или продать (-)? "))
            except ValueError:
                print("Пожалуйста, введите целое число.")
                continue
        else:
            break

    # Обновляем количество земли и зерна
    land += land_trade
    grain -= land_trade * land_price
    
    # Спрашиваем сколько зерна посеять
    while True:
        try:
            grain_to_plant = int(input("Сколько зерна использовать для посева? "))
            break
        except ValueError:
            print("Пожалуйста, введите целое число.")
    
    # Проверяем, достаточно ли зерна для посева. Если нет, просим ввести данные еще раз.
    while True:
        if grain < grain_to_plant:
            print("Недостаточно зерна для посева.")
            try:
                grain_to_plant = int(input("Сколько зерна использовать для посева? "))
            except ValueError:
                print("Пожалуйста, введите целое число.")
                continue
        else:
            break
    
    # Вычисляем случайный урожай от 1 до 8 бушелей на акр
    yield_per_acre = random.randint(1, 8)
    harvest = grain_to_plant * yield_per_acre
    grain += harvest
    
    # Вычисляем количество зерна съеденное крысами, от 0 до 10% от всего зерна.
    rats_damage = int(random.random() * 0.1 * grain)
    grain -= rats_damage
    print(f"Крысы съели {rats_damage} бушелей зерна.")

    # Спрашиваем, сколько зерна отдать на пропитание.
    while True:
        try:
            grain_to_feed = int(input("Сколько зерна отдать на пропитание? "))
            break
        except ValueError:
           print("Пожалуйста, введите целое число.")

    # Проверяем, хватит ли зерна на пропитание.
    if grain_to_feed >= population:
        population = min(1000, int(population * 1.1))  # Увеличиваем популяцию на 10%, но не более 1000.
        grain -= grain_to_feed
        print("Все сыты, население растёт!")
    else:
        starved = int(population * (1 - grain_to_feed / population )) # Рассчитываем число умерших от голода, пропорционально недостатку зерна.
        population -= starved
        grain -= grain_to_feed
        print(f"{starved} человек умерло от голода.")
        if population <= 0:
            print("Вы проиграли, все население вымерло от голода!")

    year += 1 # увеличиваем год на 1

if year == 10:
    print("Игра окончена. Прошло 10 лет.")

"""
Объяснение кода:
1. **Импорт модуля `random`**:
    - `import random`: Импортирует модуль для генерации случайных чисел.

2. **Инициализация переменных**:
    - `year = 0`: Инициализирует переменную `year` для отслеживания текущего года (начинается с 0).
    - `population = 100`: Инициализирует переменную `population` для отслеживания количества населения (начинается со 100).
    - `grain = 2800`: Инициализирует переменную `grain` для отслеживания количества зерна (начинается с 2800).
    - `land = 1000`: Инициализирует переменную `land` для отслеживания количества земли (начинается с 1000).
    - `print("Добро пожаловать в игру Хаммурапи!")`: Выводит приветственное сообщение для игрока.

3. **Основной игровой цикл `while year < 10 and population > 0:`**:
    - Цикл продолжается, пока не пройдет 10 лет или население не станет меньше или равно 0.
    - `print(f"\nГод {year + 1}")`: Выводит текущий год.
    - `print(f"Население: {population}")`: Выводит текущее количество населения.
    - `print(f"Зерно: {grain} бушелей")`: Выводит текущее количество зерна.
    - `print(f"Земля: {land} акров")`: Выводит текущее количество земли.

4. **Определение цены земли**:
    - `land_price = random.randint(15, 25)`: Генерирует случайную цену за акр земли в диапазоне от 15 до 25 бушелей.
    - `print(f"Цена земли: {land_price} бушелей за акр")`: Выводит текущую цену земли.

5. **Ввод количества земли для торговли**:
   - `while True: try...except ValueError`: Цикл для ввода количества земли, обрабатывает ошибку ввода нецелого числа.
   - `land_trade = int(input("Сколько земли купить (+) или продать (-)? "))`: Запрашивает у пользователя количество земли для покупки (положительное значение) или продажи (отрицательное значение).

6. **Проверка достаточности ресурсов для торговли**:
   - `while True: if land_trade > 0 and grain < land_trade * land_price:`: Цикл для проверки хватает ли зерна для покупки земли
   - `elif land_trade < 0 and land < abs(land_trade):`: Цикл для проверки хватает ли земли для продажи
   - Если не хватает ресурсов, выводится соответствующее сообщение и запрашивается новый ввод.

7. **Обновление количества земли и зерна**:
   - `land += land_trade`: Обновляет количество земли.
   - `grain -= land_trade * land_price`: Обновляет количество зерна.

8. **Ввод количества зерна для посева**:
   - `while True: try...except ValueError`: Цикл для ввода количества зерна для посева с обработкой ошибки ввода нецелого числа
   - `grain_to_plant = int(input("Сколько зерна использовать для посева? "))`: Запрашивает у пользователя количество зерна для посева.

9. **Проверка достаточности зерна для посева**:
    -  `while True: if grain < grain_to_plant:`: Цикл для проверки хватает ли зерна для посева.
    - Если зерна не хватает, выводится сообщение и запрашивается новый ввод.

10. **Вычисление урожая**:
    - `yield_per_acre = random.randint(1, 8)`: Генерирует случайное количество урожая от 1 до 8 бушелей на акр.
    - `harvest = grain_to_plant * yield_per_acre`: Вычисляет общий урожай.
    - `grain += harvest`: Добавляет урожай к общему запасу зерна.

11. **Расчет ущерба от крыс**:
    - `rats_damage = int(random.random() * 0.1 * grain)`: Вычисляет случайный ущерб от крыс (от 0 до 10% запасов зерна).
    - `grain -= rats_damage`: Уменьшает количество зерна на величину ущерба от крыс.
    - `print(f"Крысы съели {rats_damage} бушелей зерна.")`: Выводит сообщение о количестве зерна, съеденном крысами.

12. **Ввод количества зерна для пропитания**:
     - `while True: try...except ValueError`: Цикл для ввода количества зерна на пропитание, обрабатывает ошибку ввода нецелого числа.
    - `grain_to_feed = int(input("Сколько зерна отдать на пропитание? "))`: Запрашивает у пользователя количество зерна для пропитания населения.

13. **Проверка достаточности зерна для пропитания**:
     - `if grain_to_feed >= population:`: Проверяет достаточно ли зерна для пропитания всего населения
     - `population = min(1000, int(population * 1.1))`: Если зерна достаточно, увеличивает население на 10%, но не более 1000.
     - `grain -= grain_to_feed`: Уменьшает запасы зерна на количество, отданное для пропитания.
     - `else:`: Если зерна не хватает.
     - `starved = int(population * (1 - grain_to_feed / population ))`: Вычисляет количество умерших от голода.
     - `population -= starved`: Уменьшает население на количество умерших.
     - `print(f"{starved} человек умерло от голода.")`: Выводит сообщение о количестве умерших от голода.
     - `if population <= 0:`: Если население умерло, выводится сообщение о проигрыше.
     
14. **Увеличение года**:
    - `year += 1`: Увеличивает текущий год на 1.

15. **Завершение игры**:
    - `if year == 10:`: Если прошло 10 лет, выводится сообщение об окончании игры.
```
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел в игре.

2. **Инициализация переменных**:
   - `year = 0`: Инициализирует переменную `year` для отслеживания текущего года, начиная с 0.
   - `population = 100`: Устанавливает начальное количество населения в 100 человек.
   - `grain = 2800`: Устанавливает начальное количество зерна в 2800 бушелей.
   - `land = 1000`: Устанавливает начальное количество земли в 1000 акров.
   - `print("Добро пожаловать в игру Хаммурапи!")`: Выводит приветственное сообщение для игрока.

3. **Основной игровой цикл `while year < 10 and population > 0:`**:
   - Цикл `while` обеспечивает выполнение игры до тех пор, пока не пройдет 10 лет (`year < 10`) или пока население не станет равным или меньше 0 (`population > 0`).
   - `print(f"\nГод {year + 1}")`: Выводит текущий год игры.
   - `print(f"Население: {population}")`: Выводит текущее количество населения.
   - `print(f"Зерно: {grain} бушелей")`: Выводит текущее количество зерна.
   - `print(f"Земля: {land} акров")`: Выводит текущее количество земли.

4. **Расчет цены земли**:
   - `land_price = random.randint(15, 25)`: Генерирует случайное целое число в диапазоне от 15 до 25 для цены земли.
   - `print(f"Цена земли: {land_price} бушелей за акр")`: Выводит цену земли.

5. **Ввод для покупки/продажи земли**:
   - Блок `while True:` используется для того, чтобы запрашивать ввод пользователя до тех пор, пока он не введет корректные данные.
   - `try...except ValueError`: Этот блок обрабатывает ошибку, если пользователь введет не целое число.
   - `land_trade = int(input("Сколько земли купить (+) или продать (-)? "))`: Запрашивает у пользователя количество земли для покупки (положительное значение) или продажи (отрицательное значение).

6. **Проверка ввода для покупки/продажи земли**:
   - Блок `while True:` используется для того, чтобы запрашивать ввод пользователя до тех пор, пока не будут выполнены условия корректности введенных данных.
   - `if land_trade > 0 and grain < land_trade * land_price:`: Проверяет, достаточно ли зерна для покупки земли.
   - `elif land_trade < 0 and land < abs(land_trade):`: Проверяет, достаточно ли земли для продажи.

7. **Обновление запасов земли и зерна**:
   - `land += land_trade`: Обновляет количество земли. Если значение `land_trade` положительное, то земля покупается, и количество земли увеличивается. Если `land_trade` отрицательное, то земля продается, и количество земли уменьшается.
   - `grain -= land_trade * land_price`: Обновляет количество зерна в зависимости от покупки или продажи земли.

8. **Ввод для посева зерна**:
    - Блок `while True:` используется для того, чтобы запрашивать ввод пользователя до тех пор, пока он не введет корректные данные.
    - `try...except ValueError`: Этот блок обрабатывает ошибку, если пользователь введет не целое число.
   - `grain_to_plant = int(input("Сколько зерна использовать для посева? "))`: Запрашивает у пользователя количество зерна для посева.

9. **Проверка достаточности зерна для посева**:
   -  Блок `while True:` используется для того, чтобы запрашивать ввод пользователя до тех пор, пока не будут выполнены условия корректности введенных данных.
   - `if grain < grain_to_plant:`: Проверяет, достаточно ли зерна для посева. Если нет, выводит сообщение и запрашивает новый ввод.

10. **Расчет урожая**:
    - `yield_per_acre = random.randint(1, 8)`: Генерирует случайный урожай (от 1 до 8 бушелей на акр).
    - `harvest = grain_to_plant * yield_per_acre`: Вычисляет общий урожай зерна.
    - `grain += harvest`: Увеличивает количество зерна на величину урожая.

11. **Расчет ущерба от крыс**:
    - `rats_damage = int(random.random() * 0.1 * grain)`: Вычисляет случайный ущерб от крыс (от 0 до 10% текущего количества зерна).
    - `grain -= rats_damage`: Уменьшает количество зерна на величину ущерба от крыс.
    - `print(f"Крысы съели {rats_damage} бушелей зерна.")`: Выводит сообщение о количестве зерна, съеденном крысами.

12. **Ввод для кормления населения**:
    - Блок `while True:` используется для того, чтобы запрашивать ввод пользователя до тех пор, пока он не введет корректные данные.
    - `try...except ValueError`: Этот блок обрабатывает ошибку, если пользователь введет не целое число.
    -`grain_to_feed = int(input("Сколько зерна отдать на пропитание? "))`: Запрашивает у пользователя количество зерна для пропитания населения.

13. **Проверка достаточности зерна для пропитания**:
    - `if grain_to_feed >= population:`: Проверяет, хватает ли зерна для пропитания всего населения.
    - `population = min(1000, int(population * 1.1))`: Если зерна достаточно, увеличивает население на 10%, но не более 1000.
    - `grain -= grain_to_feed`: Уменьшает количество зерна на количество, отданное для пропитания населения.
    - `else:`: Выполняется, если зерна недостаточно.
    - `starved = int(population * (1 - grain_to_feed / population ))`: Вычисляет количество умерших от голода пропорционально нехватке зерна.
    - `population -= starved`: Уменьшает количество населения на число умерших от голода.
    - `print(f"{starved} человек умерло от голода.")`: Выводит сообщение о количестве умерших от голода.
    - `if population <= 0:`: Проверяет, не умерло ли все население.
    - `print("Вы проиграли, все население вымерло от голода!")`: Выводит сообщение о поражении в случае смерти всего населения.

14. **Увеличение года**:
    - `year += 1`: Увеличивает значение года на 1.

15. **Завершение игры**:
    - `if year == 10:`: Проверяет, прошло ли 10 лет.
    - `print("Игра окончена. Прошло 10 лет.")`: Выводит сообщение об окончании игры, если прошло 10 лет.
```