Как использовать примеры работы с драйвером
==========================================================================================

Описание
-------------------------
Этот документ предоставляет пошаговые инструкции по использованию примеров кода для работы с драйвером, классами `Driver` и `Chrome`, и различными методами. Примеры включают навигацию по URL, извлечение домена, сохранение куки, обновление страницы, прокрутку, получение языка страницы, настройку пользовательского агента, поиск элементов, получение текущего URL и фокусирование окна.

Шаги выполнения
-------------------------
1. **Импортируйте необходимые библиотеки:**
   Импортируйте классы `Driver` и `Chrome` из модуля `src.webdriver`, а также `By` из `selenium.webdriver.common.by`.

2. **Создайте экземпляр драйвера:**
   Создайте объект `Driver`, передавая в конструктор класс `Chrome` для инициализации Chrome драйвера.

3. **Выполните действия с драйвером:**
   Вызовите нужные методы класса `Driver`.  Примеры включают:
   - `get_url(url)`: Навигирует по указанному URL. Возвращает `True`, если навигация успешна, и `False`, если нет.
   - `extract_domain(url)`: Извлекает домен из URL.
   - `_save_cookies_localy()`: Сохраняет куки в локальный файл. Возвращает `True`, если сохранение прошло успешно, и `False`, иначе.
   - `page_refresh()`: Обновляет текущую страницу. Возвращает `True`, если обновление прошло успешно, и `False`, иначе.
   - `scroll(scrolls, direction, frame_size, delay)`: Прокручивает страницу.
   - `locale`: Получает язык текущей страницы.
   - `find_element(By, selector)`: Находит элемент по селектору.
   - `current_url`: Получает текущий URL.
   - `window_focus()`: Фокусирует окно браузера.


4. **Обработайте результаты:**
   Проверяйте возвращаемые значения методов (например, `True`/`False`) для успешного выполнения операций.  Используйте результат, чтобы определять успех или неудачу выполнения запроса.

5. **Обратите внимание на валидацию и обработку ошибок:**
   Все методы должны проверяться на наличие ошибок и содержать соответствующую обработку.  Обязательно проверяйте результат выполнения каждого действия, чтобы избежать неожиданных результатов.

6. **Настройка пользовательского агента (опционально):**
   Если требуется, создайте объект `Driver` с параметром `user_agent`, передавая словарь с пользовательским агентом.

Пример использования
-------------------------
.. code-block:: python

    from src.webdriver import Driver, Chrome
    from selenium.webdriver.common.by import By

    def main():
        chrome_driver = Driver(Chrome)
        if chrome_driver.get_url("https://www.example.com"):
            print("Успешная навигация на страницу")

        domain = chrome_driver.extract_domain("https://www.example.com/path/to/page")
        print(f"Домен: {domain}")

        if chrome_driver._save_cookies_localy():
            print("Куки сохранены успешно")

        if chrome_driver.page_refresh():
            print("Страница обновлена успешно")

        # ... другие примеры
        # ...

        element = chrome_driver.find_element(By.CSS_SELECTOR, 'h1')
        if element:
            print(f"Текст найденного элемента: {element.text}")

        current_url = chrome_driver.current_url
        print(f"Текущий URL: {current_url}")

        chrome_driver.window_focus()
        print("Окно браузера сфокусировано")

if __name__ == "__main__":
    main()