"""
LIT QZ:
=================
Сложность: 4
-----------------
Игра "LIT QZ" - это викторина, в которой пользователю предлагается ответить на серию вопросов о названиях городов. Компьютер задаёт вопросы и проверяет правильность ответов, начисляя очки за каждый верный ответ. Игра завершается после 5 вопросов.
Правила игры:
1. Компьютер задаёт 5 вопросов о названиях городов.
2. Игрок вводит свои ответы на каждый вопрос.
3. За каждый правильный ответ игрок получает 1 очко.
4. В конце игры выводится общее количество набранных очков.

-----------------
Алгоритм:
1. Инициализировать счетчик очков в 0.
2. Создать список вопросов о названиях городов.
3. Начать цикл из 5 итераций (для 5 вопросов):
    3.1 Вывести вопрос из списка.
    3.2 Получить ответ пользователя.
    3.3 Если ответ пользователя совпадает с правильным ответом, то увеличить счетчик очков на 1 и вывести сообщение о правильном ответе.
    3.4 Иначе вывести сообщение о неправильном ответе и правильном ответе.
4. Вывести общее количество набранных очков.
5. Завершить игру.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeScore["Инициализация: <code><b>score = 0</b></code>"]
    InitializeScore --> DefineQuestions["Определение вопросов: <code><b>questions[] = [...]</b></code>"]
    DefineQuestions --> LoopStart{"Начало цикла: <code><b>for i = 1 to 5</b></code>"}
    LoopStart --> DisplayQuestion["Вывод вопроса: <code><b>questions[i]</b></code>"]
    DisplayQuestion --> GetUserAnswer["Получить ответ пользователя: <code><b>userAnswer</b></code>"]
    GetUserAnswer --> CheckAnswer{"Проверка: <code><b>userAnswer == correctAnswer?</b></code>"}
    CheckAnswer -- Да --> IncreaseScore["Увеличение счета: <code><b>score = score + 1</b></code>"]
    IncreaseScore --> OutputCorrect["Вывод сообщения: <b>CORRECT</b>"]
    OutputCorrect --> LoopEnd["Конец цикла"]
    CheckAnswer -- Нет --> OutputIncorrect["Вывод сообщения: <b>INCORRECT</b> и правильный ответ"]
    OutputIncorrect --> LoopEnd
    LoopEnd -- цикл не закончен --> LoopStart
    LoopEnd -- цикл закончен --> DisplayFinalScore["Вывод общего счета: <code><b>score</b></code>"]
    DisplayFinalScore --> End["Конец"]
```
**Legenda**:
    Start - Начало программы.
    InitializeScore - Инициализация переменной `score` (счет) значением 0.
    DefineQuestions - Определение массива `questions`, содержащего вопросы викторины и соответствующие ответы.
    LoopStart - Начало цикла для перебора вопросов от 1 до 5.
    DisplayQuestion - Вывод текущего вопроса из массива `questions`.
    GetUserAnswer - Получение ответа пользователя и сохранение его в переменную `userAnswer`.
    CheckAnswer - Проверка правильности ответа пользователя: если `userAnswer` совпадает с правильным ответом.
    IncreaseScore - Увеличение переменной `score` на 1, если ответ правильный.
    OutputCorrect - Вывод сообщения "CORRECT", если ответ правильный.
    OutputIncorrect - Вывод сообщения "INCORRECT" и правильного ответа, если ответ не правильный.
    LoopEnd - Конец текущей итерации цикла.
    DisplayFinalScore - Вывод итогового счета `score` после завершения всех вопросов.
    End - Конец программы.

"""
__author__ = 'hypo69 (hypo69@davidka.net)'

import sys


def play_lit_qz():
    """
    Игра "LIT QZ" - викторина с вопросами о городах.
    """
    # Инициализируем счетчик правильных ответов
    score = 0

    # Список вопросов и правильных ответов
    questions = [
        {"question": "Столица Франции?", "answer": "париж"},
        {"question": "Столица Германии?", "answer": "берлин"},
        {"question": "Столица Японии?", "answer": "токио"},
        {"question": "Столица Италии?", "answer": "рим"},
        {"question": "Столица Испании?", "answer": "мадрид"},
    ]
    # Цикл из 5 вопросов
    for i in range(len(questions)):
        # Выводим вопрос
        print(f"Вопрос {i + 1}: {questions[i]['question']}")
        # Получаем ответ пользователя
        user_answer = input("Ваш ответ: ").lower()

        # Проверяем ответ и обновляем счет
        if user_answer == questions[i]["answer"]:
            print("Правильно!")
            score += 1
        else:
            print(
                f"Неправильно! Правильный ответ: {questions[i]['answer'].capitalize()}"
            )
        print("-------------------")

    # Выводим итоговый счет
    print(f"Итоговый счет: {score} из {len(questions)}")


# Запуск игры
if __name__ == "__main__":
    play_lit_qz()
"""
Пояснения:
1.  **Импорт `sys`**:
    - `import sys`: импортирует модуль sys, но в данном коде он не используется.
2. **Функция `play_lit_qz()`**:
   - Определяет функцию `play_lit_qz`, которая содержит логику игры.
   - `score = 0`: Инициализирует переменную `score` для подсчета правильных ответов.
   - `questions = [...]`: Создает список словарей, где каждый словарь содержит вопрос и правильный ответ.
3. **Игровой цикл**:
   - `for i in range(len(questions))`: Запускает цикл, который проходит по всем вопросам в списке.
   - `print(f"Вопрос {i + 1}: {questions[i]['question']}")`: Выводит текущий вопрос на экран.
   - `user_answer = input("Ваш ответ: ").lower()`: Получает ответ пользователя, преобразует его в нижний регистр для регистронезависимого сравнения.
4.  **Проверка ответа**:
    -   `if user_answer == questions[i]["answer"]:`: Сравнивает ответ пользователя с правильным ответом.
    -   `print("Правильно!")`: Выводит сообщение о правильном ответе.
    -  `score += 1`: Увеличивает счетчик правильных ответов на 1.
    -   `else:`: Выполняется, если ответ пользователя неверный.
    -   `print(f"Неправильно! Правильный ответ: {questions[i]['answer'].capitalize()}")`: Выводит сообщение о неправильном ответе и показывает правильный ответ.
    -   `print("-------------------")`: Выводит разделительную линию между вопросами.
5. **Вывод итогового результата**:
   - `print(f"Итоговый счет: {score} из {len(questions)}")`: Выводит общее количество набранных очков и максимальное возможное количество очков.
6. **Запуск игры**:
   - `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_lit_qz()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
   - `play_lit_qz()`: Вызывает функцию для запуска игры.
"""
```