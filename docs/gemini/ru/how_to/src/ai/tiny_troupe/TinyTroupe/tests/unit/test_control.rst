Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит тесты для модуля `control` из библиотеки `tinytroupe`.  Он демонстрирует как начинать, сохранять промежуточные результаты (чекапоинты), и завершать симуляцию, используя различные компоненты TinyTroupe, такие как агенты, мир и фабрику агентов. Тесты проверяют корректность сохранения и загрузки состояния симуляции в файле.

Шаги выполнения
-------------------------
1. **Импортирование необходимых модулей:** Код импортирует модули `pytest`, `os`, `sys`, `logging`, и различные классы из библиотеки `tinytroupe` для работы с агентами, миром, инструментами и контроллером симуляции.

2. **Настройка среды выполнения:**  Устанавливает пути для импорта нужных модулей.

3. **Определение функции `test_begin_checkpoint_end_with_agent_only`:** Эта функция организует тест для запуска и остановки симуляции, используя только агентов.
    - **Инициализация:** Функция `reset()` сбрасывает текущие данные симуляции, а `remove_file_if_exists()` удаляет файл кеша, если он уже существует.
    - **Начало симуляции:** `control.begin()` запускает симуляцию, сохраняя её состояние в файле `"control_test.cache.json"`.
    - **Проверка статуса:** Проверяет, что статус симуляции установлен как `STATUS_STARTED`.
    - **Создание агентов:** Создает агентов `oscar_the_architect` и `lisa_the_data_scientist`, добавляя им инструменты и задавая параметры.
    - **Проверка кеширования:** Проверяет, что у симуляции есть отслеживание состояния и выполнения.
    - **Сохранение состояния (checkpoint):** `control.checkpoint()` сохраняет текущее состояние симуляции в файле.
    - **Действия агентов:** Агенты выполняют действия, отправляя запросы.
    - **Проверка создания файла:** Проверяет, что файл `control_test.cache.json` был создан.
    - **Завершение симуляции:** `control.end()` останавливает симуляцию и записывает завершающее состояние.
    - **Проверка статуса:** Проверяет, что статус симуляции установлен как `STATUS_STOPPED`.

4. **Определение функции `test_begin_checkpoint_end_with_world`:** Функция организует тест для запуска и остановки симуляции, используя мир.  Повторяет шаги подобные предыдущей функции, но использует класс `TinyWorld`.

5. **Определение функции `test_begin_checkpoint_end_with_factory`:**  Функция организует тест для работы с фабрикой агентов.
    - **Вложенная функция `aux_simulation_to_repeat`:** Повторяет симуляцию с фабрикой агентов несколько раз и сохраняет параметры агентов.
    - **Многократное использование:** Пример демонстрирует как использовать фабрику агентов повторно.
    - **Проверка результатов:** Проверка одинаковых результатов во всех итерациях.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    import os
    # ... (импорты, как в примере)

    # Пример запуска теста (извне):
    # pytest hypotez/src/ai/tiny_troupe/TinyTroupe/tests/unit/test_control.py