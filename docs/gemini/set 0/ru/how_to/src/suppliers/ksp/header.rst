Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет функцию `set_project_root`, которая находит корневую директорию проекта, начиная с директории текущего файла. Он ищет директории вверх по дереву директорий, пока не найдет директорию, содержащую указанные файлы-маркеры (например, `pyproject.toml`, `requirements.txt`, `.git`).  Если корневая директория найдена, она добавляется в `sys.path` для корректного импорта модулей.  Далее, код загружает настройки из файла `settings.json` и, при успешном чтении, использует эти настройки, такие как `project_name`, `version`, `author`, и др.  В случае ошибок (например, файла `settings.json` не существует или в нём неправильный формат JSON) он обрабатывает их, а данные по умолчанию. Код также пытается загрузить документацию из файла `README.MD` и сохраняет ее в переменной `__doc__`.


Шаги выполнения
-------------------------
1. **Импортирует необходимые библиотеки:**  `sys`, `json`, `packaging.version`, `pathlib`.
2. **Определяет функцию `set_project_root`:**
    - Принимает аргумент `marker_files` (кортеж с именами файлов/папок, указывающих на корневую директорию).
    - Устанавливает текущую директорию (`current_path`) как корневую директорию (`__root__`).
    - Перебирает родительские директории (`current_path` и её родительские директории):
        - Если в текущей родительской директории найден хотя бы один из файлов или папок из `marker_files`, `__root__` обновляется до текущей родительской директории и цикл прерывается.
    - Если корневая директория не была найдена, код выбрасывает исключение.
    - Добавляет корневую директорию в `sys.path`, если она там еще не присутствует.
    - Возвращает корневую директорию (`__root__`).
3. **Находит корневую директорию проекта:** Вызывает `set_project_root()` для определения корня проекта.
4. **Загружает настройки из файла `settings.json`:**
    - Использует `gs.path.root` для доступа к корневой директории проекта.
    - Открывает файл `settings.json` в режиме чтения.
    - Использует `json.load()` для загрузки настроек в переменную `settings`.
    - Обрабатывает исключения `FileNotFoundError` и `json.JSONDecodeError` в случае ошибок при чтении файла.
5. **Загружает документацию из файла `README.MD`:**
    - Открывает файл `README.MD` в режиме чтения.
    - Считывает содержимое файла в переменную `doc_str`.
    - Обрабатывает исключения `FileNotFoundError` и `json.JSONDecodeError` в случае ошибок при чтении файла.
6. **Получает значения из настроек:**
    - Использует `settings.get()` для извлечения значений `project_name`, `version`, `author`, `copyright`, `cofee`,  из `settings`.
    - Инициализирует `__project_name__`, `__version__`, `__doc__`, `__details__`, `__author__`, `__copyright__`, `__cofee__` в соответствии с полученными значениями из настроек или значениями по умолчанию, если настройки не загрузились или не содержат нужных ключей.
7. **Возвращает полученные значения.**


Пример использования
-------------------------
.. code-block:: python

    # Предположим, что модуль gs уже импортирован и путь к корню проекта установлен
    import sys
    import json
    from pathlib import Path
    from hypotez.src.suppliers.ksp.header import set_project_root

    # Пример вызова функции
    project_root = set_project_root()

    # Проверка корневой директории
    print(f"Корневая директория проекта: {project_root}")

    # Получение значений из настроек (Пример)
    print(f"Название проекта: {__project_name__}")
    print(f"Версия: {__version__}")