"""
BOAT:
=================
Сложность: 4
-----------------
Игра "Морской бой" - это текстовая игра, в которой игрок пытается потопить корабль, спрятанный компьютером. Игровое поле представляет собой сетку 10x10. Игрок вводит координаты выстрела, а компьютер сообщает, попал ли выстрел по кораблю или нет.

Правила игры:
1.  Компьютер размещает корабль длиной 3 клетки на игровом поле 10x10 в случайной позиции (по горизонтали или вертикали).
2.  Игрок вводит координаты выстрела (числа от 1 до 10 для каждой координаты).
3.  Компьютер проверяет, попал ли выстрел в корабль.
4.  Если выстрел попал, компьютер выводит сообщение "HIT", в противном случае выводит "MISS".
5.  Игра продолжается до тех пор, пока корабль не будет полностью потоплен (то есть, пока не будет 3 попадания).
6.  Игра завершается, когда корабль потоплен, и компьютер выводит сообщение "YOU SUNK MY BATTLESHIP".
-----------------
Алгоритм:
1. Инициализация:
    1.1. Установить счетчик попаданий `hits` в 0.
    1.2. Сгенерировать случайное направление корабля (`direction`: 1 - горизонтально, 2 - вертикально).
    1.3. Сгенерировать случайную начальную координату корабля `start_x` (1-10) и `start_y` (1-10)
    1.4. Убедиться, что корабль помещается на поле (в зависимости от направления).
    1.5. Определить координаты корабля `ship_coordinates`: в виде списка из трех пар координат.
2.  Начать основной игровой цикл:
    2.1. Запросить у игрока координаты выстрела (`shot_x`, `shot_y`).
    2.2. Проверить, попал ли выстрел в корабль.
    2.3. Если выстрел попал:
        2.3.1. Вывести сообщение "HIT".
        2.3.2. Увеличить счетчик попаданий на 1.
        2.3.3. Удалить координаты из списка `ship_coordinates`.
    2.4. Если выстрел не попал, вывести сообщение "MISS".
    2.5. Если счетчик попаданий равен 3, перейти к шагу 3.
3. Вывести сообщение "YOU SUNK MY BATTLESHIP".
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    hits = 0 <br>
    direction = random(1, 2)<br>
    start_x = random(1, 10)<br>
    start_y = random(1, 10)<br>
    ship_coordinates = [...]
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока hits < 3"}
    LoopStart -- Да --> InputShot["Ввод координат выстрела: <code><b>shot_x, shot_y</b></code>"]
    InputShot --> CheckHit{"Проверка: <code><b>(shot_x, shot_y) in ship_coordinates?</b></code>"}
    CheckHit -- Да --> OutputHit["Вывод сообщения: <b>HIT</b>"]
    OutputHit --> IncreaseHits["<code><b>hits = hits + 1</b></code>"]
    IncreaseHits --> RemoveCoord["<code><b>ship_coordinates.remove((shot_x,shot_y))</b></code>"]
    RemoveCoord --> CheckWin{"Проверка: <code><b>hits == 3?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU SUNK MY BATTLESHIP</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    CheckHit -- Нет --> OutputMiss["Вывод сообщения: <b>MISS</b>"]
    OutputMiss --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: `hits` (количество попаданий) устанавливается в 0, `direction` (направление корабля) случайным образом 1 или 2,  `start_x` `start_y` - случайная позиция начала корабля, `ship_coordinates` - вычисляется список координат корабля.
    LoopStart - Начало цикла, который продолжается, пока не будет 3 попадания.
    InputShot - Запрос у пользователя ввода координат выстрела `shot_x` и `shot_y`.
    CheckHit - Проверка, есть ли координаты выстрела `(shot_x, shot_y)` в списке координат корабля `ship_coordinates`.
    OutputHit - Вывод сообщения "HIT", если координаты выстрела совпадают с координатами корабля.
    IncreaseHits - Увеличение счетчика количества попаданий `hits` на 1.
    RemoveCoord - Удаление координаты из `ship_coordinates`.
    CheckWin - Проверка, равно ли количество попаданий `hits` трем.
    OutputWin - Вывод сообщения "YOU SUNK MY BATTLESHIP", если `hits` равно 3.
    End - Конец программы.
    OutputMiss - Вывод сообщения "MISS", если выстрел не попал в корабль.
"""
import random

# Инициализация счетчика попаданий
hits = 0

# Генерация случайного направления корабля (1 - горизонтально, 2 - вертикально)
direction = random.randint(1, 2)

# Генерация случайной начальной координаты корабля
start_x = random.randint(1, 10)
start_y = random.randint(1, 10)

# Определение координат корабля в зависимости от направления
if direction == 1:  # Горизонтально
    ship_coordinates = [(start_x, start_y), (start_x + 1, start_y), (start_x + 2, start_y)]
    # проверка выхода за пределы поля
    while start_x > 8 :
        start_x = random.randint(1, 10)
        ship_coordinates = [(start_x, start_y), (start_x + 1, start_y), (start_x + 2, start_y)]
elif direction == 2:  # Вертикально
    ship_coordinates = [(start_x, start_y), (start_x, start_y + 1), (start_x, start_y + 2)]
    # проверка выхода за пределы поля
    while start_y > 8:
        start_y = random.randint(1, 10)
        ship_coordinates = [(start_x, start_y), (start_x, start_y + 1), (start_x, start_y + 2)]


# Основной игровой цикл
while hits < 3:
    # Запрашиваем координаты выстрела у игрока
    try:
        shot_x = int(input("Введите координату x (1-10): "))
        shot_y = int(input("Введите координату y (1-10): "))
    except ValueError:
        print("Пожалуйста, введите целые числа от 1 до 10.")
        continue
    # Проверка корректности ввода
    if not (1 <= shot_x <= 10 and 1 <= shot_y <= 10):
         print("Координаты должны быть в диапазоне от 1 до 10.")
         continue
    # Проверяем, попал ли выстрел в корабль
    if (shot_x, shot_y) in ship_coordinates:
        print("HIT")
        hits += 1
        ship_coordinates.remove((shot_x, shot_y)) # удаляем из списка координат корабля
    else:
        print("MISS")

# Корабль потоплен
print("YOU SUNK MY BATTLESHIP")

"""
Объяснение кода:
1. **Импорт модуля `random`:**
   - `import random`: Импортирует модуль `random` для генерации случайных чисел.

2. **Инициализация переменных:**
   - `hits = 0`: Инициализирует счетчик попаданий в 0.
   - `direction = random.randint(1, 2)`: Генерирует случайное направление корабля (1 - горизонтально, 2 - вертикально).
   - `start_x = random.randint(1, 10)`: Генерирует случайную начальную координату x для корабля.
   - `start_y = random.randint(1, 10)`: Генерирует случайную начальную координату y для корабля.

3. **Определение координат корабля:**
   - `if direction == 1:`: Если направление горизонтальное, то координаты корабля рассчитываются как:
     - `ship_coordinates = [(start_x, start_y), (start_x + 1, start_y), (start_x + 2, start_y)]`: Список из трех пар координат, представляющих горизонтально расположенный корабль.
     - `while start_x > 8`: проверка выхода корабля за пределы поля.
   - `elif direction == 2:`: Если направление вертикальное, то координаты корабля рассчитываются как:
     - `ship_coordinates = [(start_x, start_y), (start_x, start_y + 1), (start_x, start_y + 2)]`: Список из трех пар координат, представляющих вертикально расположенный корабль.
     - `while start_y > 8`: проверка выхода корабля за пределы поля.

4. **Основной игровой цикл (`while hits < 3:`):**
   - Цикл продолжается, пока количество попаданий (`hits`) не достигнет 3.
   - **Запрос координат выстрела:**
     - `shot_x = int(input("Введите координату x (1-10): "))`: Запрашивает у игрока координату x и преобразует ввод в целое число.
     - `shot_y = int(input("Введите координату y (1-10): "))`: Запрашивает у игрока координату y и преобразует ввод в целое число.
    - `try...except ValueError`: обрабатывает некорректный ввод пользователя.
    -  **Проверка корректности ввода:**
        - `if not (1 <= shot_x <= 10 and 1 <= shot_y <= 10):`: Проверяет, что введенные координаты находятся в диапазоне от 1 до 10. Если нет, выводит сообщение об ошибке.
   - **Проверка попадания:**
     - `if (shot_x, shot_y) in ship_coordinates:`: Проверяет, есть ли введенные координаты в списке координат корабля.
     - Если попал:
       - `print("HIT")`: Выводит сообщение о попадании.
       - `hits += 1`: Увеличивает счетчик попаданий на 1.
       - `ship_coordinates.remove((shot_x, shot_y))`: Удаляет координаты попадания из списка.
     - Если не попал:
       - `print("MISS")`: Выводит сообщение о промахе.

5. **Конец игры:**
   - `print("YOU SUNK MY BATTLESHIP")`: Выводит сообщение о том, что корабль потоплен.
"""
