"""
NIM:
=================
Сложность: 3
-----------------
Игра NIM — это математическая игра, в которой два игрока по очереди убирают предметы из нескольких куч. Цель игры - заставить противника забрать последний предмет. В этой версии игры используется одна куча, из которой игроки берут от 1 до 3 предметов. 
-----------------
Правила игры:
1. В начале игры есть заданное количество спичек в куче.
2. Игроки ходят по очереди.
3. В свой ход игрок может взять от 1 до 3 спичек из кучи.
4. Игрок, взявший последнюю спичку, проигрывает.
-----------------
Алгоритм:
1. Инициализация: задается начальное количество спичек в куче.
2. Игровой цикл:
    - Вывод текущего количества спичек в куче.
    - Запрос хода у игрока: сколько спичек взять (от 1 до 3).
    - Проверка корректности ввода: если ввод не число или число не от 1 до 3 или больше текущего количества спичек, запросить ввод снова.
    - Обновление количества спичек в куче, вычитая количество взятых.
    - Проверка окончания игры: если количество спичек равно 0, то игра закончена.
    - Переход к следующему игроку.
3. Определение победителя: если количество спичек равно 0, то текущий игрок проиграл. Выводится сообщение о проигрыше текущего игрока.
4. Запрос на повтор игры.
"""
```
```mermaid
graph TD
    Start(Начало) --> Initialize(Инициализация);
    Initialize --> GameLoopStart(Начало игрового цикла);
    GameLoopStart --> ShowMatches(Показать количество спичек);
    ShowMatches --> GetPlayerMove(Получить ход игрока);
    GetPlayerMove --> ValidateMove(Проверка корректности хода);
    ValidateMove -- Некорректный ход --> GetPlayerMove;
    ValidateMove -- Корректный ход --> UpdateMatches(Обновить количество спичек);
    UpdateMatches --> CheckGameOver(Проверка конца игры);
    CheckGameOver -- Игра не окончена --> GameLoopStart;
    CheckGameOver -- Игра окончена --> OutputWinner(Вывести победителя);
    OutputWinner --> AskPlayAgain(Спросить о повторной игре);
    AskPlayAgain -- Да --> Initialize;
    AskPlayAgain -- Нет --> End(Конец);
```
```python
import random

def play_nim():
    """
    Функция для запуска игры NIM.
    """
    
    while True: # Главный игровой цикл. Позволяет играть несколько раз подряд.
        matches_count = random.randint(10, 30) # Инициализируем количество спичек в начале игры случайным числом от 10 до 30.
        current_player = 1 # Устанавливаем первого игрока как текущего.

        while matches_count > 0:  # Основной игровой цикл продолжается, пока в куче есть спички.
            print(f"В куче осталось {matches_count} спичек.") # Выводим текущее количество спичек.

            while True: # Цикл для получения корректного ввода хода игрока.
                try:
                    matches_to_take = int(input(f"Игрок {current_player}, сколько спичек вы хотите взять (1-3)? ")) # Запрашиваем ход у текущего игрока.
                    if 1 <= matches_to_take <= 3 and matches_to_take <= matches_count: # Проверяем, является ли ввод целым числом в диапазоне от 1 до 3 и не больше текущего количества спичек.
                        break # Если ввод корректный, выходим из цикла.
                    else:
                        print("Некорректный ввод. Введите число от 1 до 3 и не больше оставшихся спичек.") # Сообщение об ошибке ввода.
                except ValueError:
                    print("Некорректный ввод. Введите целое число.") # Сообщение об ошибке, если ввод не является числом.

            matches_count -= matches_to_take # Обновляем количество спичек, вычитая взятые.

            if matches_count == 0: # Проверяем, не закончилась ли игра.
                print(f"Игрок {current_player} проиграл!") # Выводим сообщение о проигрыше текущего игрока.
                break # Завершаем игровой цикл.
            
            current_player = 3 - current_player # Переключаем игрока (если игрок 1, то станет 2, и наоборот).

        play_again = input("Хотите сыграть еще раз? (да/нет): ") # Предлагаем сыграть еще раз.
        if play_again.lower() != "да": # Если игрок не хочет играть еще, выходим из главного игрового цикла.
            break

# Запускаем игру
if __name__ == "__main__":
    play_nim()

```
```
Пояснения:
1. **`play_nim()`**:
   - Эта функция содержит основной игровой цикл, позволяющий играть несколько раз подряд.
   - Инициализирует количество спичек случайным образом в диапазоне от 10 до 30.
   - `current_player` (текущий игрок): переменная, отслеживающая, чей сейчас ход (1 или 2).
2.  **Внутренний игровой цикл `while matches_count > 0:`**:
    - Этот цикл продолжается, пока количество спичек в куче не станет равным нулю.
    - Выводит текущее количество спичек в куче.
3. **Цикл проверки корректности ввода `while True:`**:
   - Этот цикл обеспечивает ввод корректного числа спичек, которое игрок хочет взять.
   - Использует блок `try-except`, чтобы отловить ошибки ввода не целого числа.
   - Проверяет, что ввод является целым числом от 1 до 3 и не больше количества оставшихся спичек.
   - Если ввод корректный, цикл прерывается с помощью `break`.
   - Выводит сообщения об ошибках при некорректном вводе.
4.  **Обновление количества спичек `matches_count -= matches_to_take`**:
   - Уменьшает общее количество спичек на количество, взятое игроком.
5.  **Проверка конца игры `if matches_count == 0:`**:
   - Проверяет, не закончилась ли игра (если количество спичек равно 0).
   - Выводит сообщение о том, что текущий игрок проиграл.
   - Прерывает игровой цикл с помощью `break`.
6.  **Переключение игрока `current_player = 3 - current_player`**:
    - Меняет текущего игрока с 1 на 2 и наоборот.
7. **Запрос на повторную игру**:
   - Предлагает игроку сыграть еще раз.
   - Если ввод не равен "да", прерывает главный игровой цикл.
8.  **Запуск игры**:
    - `if __name__ == "__main__":` гарантирует, что функция `play_nim()` вызывается только при прямом запуске скрипта.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'