Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber` для сбора данных о товарах с сайта visualdg.co.il. Класс наследуется от класса `Grbr` и содержит методы для извлечения различных полей товара (например, названия, описания, цены).  Класс позволяет задавать предварительные действия, вызываемые перед извлечением данных, через декоратор `@close_pop_up`. В этом примере декоратор не используется, но его можно реализовать и настроить индивидуально. Код использует асинхронные операции (asyncio) для повышения производительности.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Импортируются модули для работы с асинхронными операциями, файлами, типами данных, обработкой данных, веб-драйвером, логированием и др.
2. **Определение глобальной переменной `MODE`:** Устанавливается режим работы ('dev').
3. **Определение класса `Graber`:**  Наследуется от класса `Grbr`.
4. **Инициализация класса `Graber`:** Принимает экземпляр `Driver` для взаимодействия с веб-драйвером. Инициализирует `supplier_prefix`.
5. **Определение асинхронной функции `grab_page`:**
    * Принимает экземпляр `Driver`.
    * Инициализирует переменную `d`.
    * Вызывает функцию `fetch_all_data`, которая, в свою очередь, вызывает несколько функций для извлечения конкретных данных (например, `id_product`, `name`, `description_short`).
6. **Определение асинхронной вспомогательной функции `fetch_all_data`:**
   * Эта функция вызывает методы класса `Graber` для извлечения данных по конкретным полям.  Важно, что она получает значения полей из `kwards`.
7. **Возврат данных:** Функция `grab_page` возвращает заполненный объект `ProductFields` с полученными данными.

Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.webdriver import Driver
    from hypotez.src.suppliers.visualdg.graber import Graber
    from src.product import ProductFields

    async def main():
        # Инициализация веб-драйвера (предполагается, что у вас есть уже настроенный драйвер)
        driver = await Driver.create()

        # Создание экземпляра класса Graber
        graber = Graber(driver)

        # Пример вызова функции grab_page для получения данных о товаре
        try:
            # Предполагается, что у вас есть id_product товара.
            id_product = "12345"  
            fields: ProductFields = await graber.grab_page(driver, id_product=id_product)

            # Обработка полученных данных (например, вывод в консоль или сохранение в базу данных)
            print(fields)

        except Exception as e:
            print(f"Ошибка: {e}")
        finally:
            await driver.close()

    if __name__ == "__main__":
        asyncio.run(main())