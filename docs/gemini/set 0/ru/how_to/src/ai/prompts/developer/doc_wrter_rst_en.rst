Как документировать код в стиле RST
========================================================================================

Описание
-------------------------
Данный документ содержит инструкции по написанию документации к коду в формате reStructuredText (RST).  Он охватывает документацию модулей, классов, функций, методов и исключений.  Важное требование - использование кодовых блоков `.. code-block:: python` для примеров использования.

Шаги выполнения
-------------------------
1. **Модули**:
    - Напишите описание модуля в заголовке, указав его назначение.
    - Приведите примеры использования модуля (если возможно) внутри `.. code-block:: python`.
    - Укажите платформы и краткое описание модуля.
    - Используйте заголовки для атрибутов и методов модуля, если это необходимо.

2. **Классы**:
    - Опишите каждый класс в соответствии с его назначением. Включите описание класса, его атрибуты и методы.
    - В разделе "Методы" перечислите все методы, их назначение и примеры использования.
    - Для каждого метода опишите параметры и возвращаемые значения, а также примеры.

3. **Функции и методы**:
    - Документируйте каждую функцию или метод, указав параметры и возвращаемые значения.
    - Для каждой функции предоставьте описание назначения и примеры использования в формате `.. code-block:: python`.

4. **Комментарии к коду**:
    - Все комментарии в коде должны быть написаны в формате RST и должны объяснять, что делает конкретная часть кода.
    - Комментарии должны быть в блоках, а не в строках. Используйте комментарии, чтобы описать логику и объяснить решения или временные решения в коде.
    - Пример:

    .. code-block:: python

        # Здесь обрабатывается исключение для продолжения выполнения, если файл не найден
        try:
            process_file(file)
        except FileNotFoundError as ex:
            handle_exception(ex)

5. **Исключения**:
    - Документируйте исключения для классов, методов и функций.
    - Укажите, какие исключения могут быть подняты и при каких обстоятельствах.

Пример использования
-------------------------
.. code-block:: python

    # Пример документации к функции
    def my_function(arg1, arg2):
        """
        Описание функции.  Возвращает сумму двух аргументов.

        :param arg1: Первый аргумент.
        :type arg1: int
        :param arg2: Второй аргумент.
        :type arg2: int
        :raises TypeError: Если arg1 или arg2 не являются числами.
        :returns: Сумма arg1 и arg2.
        :rtype: int

        Пример использования:
        .. code-block:: python
            result = my_function(5, 3)
            print(result)  # Выведет 8
        """
        if not isinstance(arg1, (int, float)) or not isinstance(arg2, (int, float)):
            raise TypeError("Аргументы должны быть числами")
        return arg1 + arg2