"""
SPLAT:
=================
Сложность: 3
-----------------
Игра "SPLAT" представляет собой простую игру, в которой игрок должен угадать случайное число, сгенерированное компьютером. Компьютер загадывает число от 1 до 100, а игрок делает попытки угадать его. После каждой попытки компьютер сообщает, было ли число больше или меньше загаданного. Игра продолжается до тех пор, пока игрок не угадает число.
Правила игры:
1. Компьютер загадывает случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свое предположение.
3. Если предположение игрока совпадает с загаданным числом, игра заканчивается, и игрок выигрывает.
4. Если предположение игрока меньше загаданного числа, компьютер сообщает, что загаданное число больше.
5. Если предположение игрока больше загаданного числа, компьютер сообщает, что загаданное число меньше.
6. Игра продолжается, пока игрок не угадает число.
-----------------
Алгоритм:
1. Сгенерировать случайное целое число в диапазоне от 1 до 100 и сохранить его в переменной target_number.
2. Запросить у игрока предположение (guess).
3. Сравнить предположение игрока (guess) с загаданным числом (target_number):
    a. Если guess равно target_number, вывести сообщение "Вы угадали!" и завершить игру.
    b. Если guess меньше target_number, вывести сообщение "Слишком мало, попробуйте еще.".
    c. Если guess больше target_number, вывести сообщение "Слишком много, попробуйте еще.".
4. Повторять шаги 2 и 3, пока игрок не угадает число.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Start] --> GenerateNumber[Генерация случайного числа target_number (1-100)];
    GenerateNumber --> InputGuess[Запрос ввода числа (guess) у игрока];
    InputGuess --> Compare[Сравнение guess и target_number];
    Compare -- guess == target_number --> OutputWin[Вывод сообщения "Вы угадали!"] ;
    OutputWin --> End[End];
    Compare -- guess < target_number --> OutputTooLow[Вывод сообщения "Слишком мало, попробуйте еще."];
    OutputTooLow --> InputGuess;
    Compare -- guess > target_number --> OutputTooHigh[Вывод сообщения "Слишком много, попробуйте еще."];
    OutputTooHigh --> InputGuess;
```
"""
import random

#  Генерируем случайное число от 1 до 100
target_number = random.randint(1, 100)

#  Инициализируем переменную guess начальным значением, чтобы зайти в цикл
guess = 0

#  Начинаем игровой цикл
while guess != target_number:
    # Запрашиваем у игрока ввод числа
    try:
      guess = int(input("Введите ваше предположение: "))
    except ValueError:
      print("Ошибка! Введите целое число.")
      continue
    #  Сравниваем guess с загаданным числом
    if guess < target_number:
        # Если guess меньше загаданного числа, выводим сообщение об этом
        print("Слишком мало, попробуйте еще.")
    elif guess > target_number:
        # Если guess больше загаданного числа, выводим сообщение об этом
        print("Слишком много, попробуйте еще.")
    else:
        #  Если guess равен загаданному числу, выводим сообщение о победе
        print("Вы угадали!")


"""
Пояснения:
1. `import random`: Импортирует модуль random, необходимый для генерации случайных чисел.
2. `target_number = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 (включительно) и сохраняет его в переменной `target_number`. Это число, которое игрок должен угадать.
3. `guess = 0`:  Инициализирует переменную `guess` начальным значением 0. Это необходимо для того, чтобы цикл while запустился хотя бы раз.
4. `while guess != target_number:`: Запускает цикл while, который будет выполняться до тех пор, пока `guess` не станет равным `target_number`.
5. `try...except ValueError`: Используется для обработки исключения, если пользователь введет не число.
6. `guess = int(input("Введите ваше предположение: "))`: Запрашивает у пользователя ввод числа и преобразует его в целое число. Введенное пользователем число сохраняется в переменной `guess`.
7.  `if guess < target_number`:  Проверяет, является ли введенное число `guess` меньше, чем загаданное число `target_number`. Если да, то выводится сообщение "Слишком мало, попробуйте еще."
8. `elif guess > target_number`: Проверяет, является ли введенное число `guess` больше, чем загаданное число `target_number`. Если да, то выводится сообщение "Слишком много, попробуйте еще."
9. `else: print("Вы угадали!")`: Если ни одно из условий `if` и `elif` не выполняется, это означает, что `guess` равно `target_number`, поэтому программа выводит сообщение "Вы угадали!" и завершает цикл `while`, заканчивая игру.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```