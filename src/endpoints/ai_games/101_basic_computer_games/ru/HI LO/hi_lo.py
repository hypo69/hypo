
<HI LO>:
=================
Сложность: 2
-----------------
Игра "Больше-Меньше" - это простая игра, в которой компьютер загадывает число от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, было ли введенное число больше или меньше загаданного.
Игра продолжается, пока игрок не угадает число.

Правила игры:
1. Компьютер выбирает случайное целое число от 1 до 100.
2. Игрок вводит свои предположения о загаданном числе.
3. После каждой попытки компьютер сообщает, было ли введенное число слишком низким или слишком высоким.
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число.
-----------------
Алгоритм:
1.  Установить число попыток в 0.
2.  Сгенерировать случайное число в диапазоне от 1 до 100.
3.  Начать цикл "пока число не угадано":
    3.1 Увеличить число попыток на 1.
    3.2 Запросить у игрока ввод числа.
    3.3 Если введенное число равно загаданному числу, перейти к шагу 4.
    3.4 Если введенное число меньше загаданного числа, вывести сообщение "TOO LOW".
    3.5 Если введенное число больше загаданного числа, вывести сообщение "TOO HIGH".
4. Вывести сообщение "YOU GOT IT IN {число попыток} GUESSES!"
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetNumber = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End

```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, а targetNumber (загаданное число) генерируется случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
```
```python
import random

# Инициализируем счетчик попыток
numberOfGuesses = 0
# Загадываем случайное число от 1 до 100
targetNumber = random.randint(1, 100)

# Начинаем основной игровой цикл
while True:
    # Увеличиваем количество попыток на 1
    numberOfGuesses += 1
    # Запрашиваем у пользователя ввод числа
    try:
       userGuess = int(input("Введите ваше предположение: "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue
    # Проверяем, угадал ли пользователь число
    if userGuess == targetNumber:
        print(f"Вы угадали число за {numberOfGuesses} попыток!")
        break  # Завершаем цикл, если число угадано
    elif userGuess < targetNumber:
        print("Слишком низко")  # Сообщаем, что загаданное число больше
    else:
        print("Слишком высоко")  # Сообщаем, что загаданное число меньше
```
Объяснение кода:
1.  **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2. **Инициализация переменных:**
   -  `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses` для подсчета попыток игрока и устанавливает ее начальное значение в 0.
    - `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 (включительно) и сохраняет его в переменной `targetNumber`, которая будет загаданным числом.
3. **Основной игровой цикл `while True:`**:
    -  Бесконечный цикл, который продолжается до тех пор, пока игрок не угадает число (не выполнится `break`).
    - `numberOfGuesses += 1`: При каждой итерации цикла увеличивает счетчик попыток на 1.
    - **Обработка ввода пользователя**:
        - `try...except ValueError`: Блок `try-except` обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, программа не упадет, а выведет сообщение об ошибке.
        - `userGuess = int(input("Введите ваше предположение: "))`: Выводит приглашение для пользователя ввести число и пытается преобразовать введенный текст в целое число. Результат сохраняется в `userGuess`.
    - **Проверка угадывания числа**:
        - `if userGuess == targetNumber:`: Проверяет, равно ли введенное пользователем число (`userGuess`) загаданному числу (`targetNumber`).
           - `print(f"Вы угадали число за {numberOfGuesses} попыток!")`: Если числа равны, выводит поздравление и количество попыток.
           -  `break`: Выходит из цикла `while True`, завершая игру.
        - `elif userGuess < targetNumber:`: Если введенное число меньше загаданного, выводит сообщение "Слишком низко".
        - `else:`: Если введенное число не равно и не меньше загаданного числа, значит оно больше, поэтому выводится сообщение "Слишком высоко".
4.  **Завершение игры**:
  -  Цикл `while True` продолжается, пока пользователь не угадает число. Когда пользователь угадывает число, выполняется `break`, и программа завершает выполнение цикла, а, следовательно, и игры.
```