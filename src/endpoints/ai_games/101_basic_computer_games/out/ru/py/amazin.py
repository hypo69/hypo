"""
AMAZIN:
=================
Сложность: 4
-----------------
Игра "AMAZIN" - это игра, в которой игрок пытается угадать загаданное число в диапазоне от 1 до 100. После каждой попытки компьютер сообщает, было ли введенное число слишком низким или слишком высоким. Цель игры - угадать число за минимальное количество попыток.

Правила игры:
1. Компьютер генерирует случайное число в диапазоне от 1 до 100.
2. Игрок вводит свое предположение о загаданном числе.
3. Если введенное число меньше загаданного, компьютер выводит "TOO LOW".
4. Если введенное число больше загаданного, компьютер выводит "TOO HIGH".
5. Если введенное число равно загаданному, игра заканчивается и выводится сообщение о победе и количестве попыток.
6. Игра продолжается до тех пор, пока игрок не угадает число.
-----------------
Алгоритм:
1.  Инициализировать счетчик попыток (numberOfGuesses) нулем.
2.  Сгенерировать случайное целое число (targetNumber) в диапазоне от 1 до 100.
3.  Начать цикл "пока число не угадано":
    3.1 Увеличить счетчик попыток (numberOfGuesses) на 1.
    3.2 Запросить у игрока ввод числа (userGuess).
    3.3 Если введенное число (userGuess) равно загаданному числу (targetNumber), вывести сообщение "YOU GOT IT IN {numberOfGuesses} GUESSES!" и завершить игру.
    3.4 Если введенное число (userGuess) меньше загаданного числа (targetNumber), вывести сообщение "TOO LOW".
    3.5 Если введенное число (userGuess) больше загаданного числа (targetNumber), вывести сообщение "TOO HIGH".
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetNumber = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, а targetNumber (загаданное число) генерируется случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
"""

__author__ = 'hypo69 (hypo69@davidka.net)'
import random

# Инициализация количества попыток
numberOfGuesses = 0
# Генерация случайного числа от 1 до 100
targetNumber = random.randint(1, 100)

# Основной игровой цикл
while True:
    # Увеличиваем количество попыток на 1
    numberOfGuesses += 1
    # Запрашиваем у пользователя ввод числа
    try:
        userGuess = int(input("Введите ваше предположение: "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверка, угадано ли число
    if userGuess == targetNumber:
        print(f"YOU GOT IT IN {numberOfGuesses} GUESSES!")
        break  # Завершаем цикл, если число угадано
    # Проверка, если введенное число меньше загаданного
    elif userGuess < targetNumber:
        print("TOO LOW")
    # Если введенное число больше загаданного
    else:
        print("TOO HIGH")
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Инициализация переменных**:
    -   `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses` для подсчета количества попыток пользователя.
    -   `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в переменной `targetNumber`.
3.  **Основной игровой цикл `while True:`**:
    -   Это бесконечный цикл, который будет выполняться до тех пор, пока игрок не угадает число.
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1 при каждом проходе цикла.
4.  **Ввод данных пользователем**:
    -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `userGuess = int(input("Введите ваше предположение: "))`: Запрашивает у пользователя ввод числа и преобразует его в целое число, сохраняя результат в переменной `userGuess`.
5.  **Проверка условия победы**:
    -   `if userGuess == targetNumber:`: Проверяет, равно ли введенное число загаданному числу.
    -   `print(f"YOU GOT IT IN {numberOfGuesses} GUESSES!")`: Выводит сообщение о победе и количестве попыток.
    -   `break`: Завершает цикл (игру), если число угадано.
6. **Подсказки**:
    - `elif userGuess < targetNumber:`: Проверяет, если введенное число меньше загаданного.
    - `print("TOO LOW")`: Выводит подсказку, что нужно ввести число больше.
    - `else:`: Если число не угадано и не меньше загаданного, то оно больше.
    - `print("TOO HIGH")`: Выводит подсказку, что нужно ввести число меньше.

licence:MIT(../licence)
"""
```