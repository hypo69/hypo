Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код тестирует сценарий мозгового штурма в среде TinyTroupe. Он отправляет сообщение в виртуальный фокус-группу, запрашивая идеи для новых функций в Microsoft Word, основанных на ИИ. Затем код запрашивает у агента (в данном случае, Лизы) подведение итогов обсуждения, включая описание преимуществ и недостатков каждой идеи.  Используется класс ResultsExtractor для извлечения результатов и проверки утверждения, используя функцию `proposition_holds`.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**: Код импортирует необходимые модули, включая `pytest`, `logging`, `tinytroupe`, `TinyPerson`, `TinyWorld`, `ResultsExtractor`, и другие.  Также добавляет пути к нужным директориям в `sys.path`.
2. **Инициализация среды**:  Создаётся виртуальная среда `focus_group_world` (предполагается, что эта переменная доступна из `setup`).
3. **Отправка сообщения**:  В среду отправляется сообщение о необходимости мозгового штурма по идеям для новых функций в Microsoft Word.
4. **Запуск моделирования**: Моделирование среды проводится методом `world.run(1)`, это запускает все действия в среде.
5. **Получение агента**: Получает агента по имени "Lisa" из созданной среды.
6. **Запрос подведения итогов**:  Агент получает запрос подведения итогов обсуждения, включая детализацию плюсов и минусов каждой идеи.
7. **Извлечение результатов**: Используется `ResultsExtractor` для извлечения результатов из действий агента. Параметры `extraction_objective` и `situation` предоставляют контекст для извлечения.
8. **Вывод и проверка результатов**: Результаты мозгового штурма выводятся на экран. Важно, что функция `assert proposition_holds(...)` проверяет, соответствует ли полученный вывод утверждению, проверяя, содержит ли вывод указанные идеи. Если утверждение не соответствует, тест завершается с ошибкой.

Пример использования
-------------------------
.. code-block:: python

    import pytest
    # ... (импорты из исходного кода)

    # Предположим, что setup и focus_group_world определены где-то.
    # ... (определение setup и focus_group_world)

    def test_brainstorming_scenario(setup, focus_group_world):
        # ... (код из примера)