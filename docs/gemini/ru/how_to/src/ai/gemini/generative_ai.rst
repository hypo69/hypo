Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код предоставляет класс `GoogleGenerativeAI` для взаимодействия с API Google Generative AI.  Класс позволяет отправлять текстовые запросы, получать ответы, управлять диалогом и сохранять историю в файлах.  Он обрабатывает различные возможные ошибки, включая сетевые проблемы, проблемы с авторизацией и исчерпание ресурсов.  Кроме того, класс имеет методы для работы с изображениями.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Код импортирует `google.generativeai` для работы с API, `requests` для сетевых запросов, `pathlib` для работы с путями, `datetime` для работы со временем, и другие вспомогательные библиотеки.

2. **Определение констант**: Устанавливает `MODE` для режима работы.

3. **Определение класса `GoogleGenerativeAI`**:
    - **Атрибуты**: Определяет список доступных моделей (`MODELS`), ключ API (`api_key`), название модели (`model_name`), конфигурацию генерации (`generation_config`), режим (`mode`), пути к файлам для сохранения диалогов (`dialogue_log_path`, `dialogue_txt_path`) и истории (`history_dir`, `history_txt_file`, `history_json_file`), объект модели (`model`) и инструкцию системы (`system_instruction`).
    - **Метод `__init__`**: Инициализирует класс `GoogleGenerativeAI`.  Принимает API ключ, название модели (по умолчанию "gemini-1.5-flash-8b"), конфигурацию генерации (по умолчанию {"response_mime_type": "text/plain"}) и инструкцию системы.  Создаёт пути для хранения диалогов и истории. Инициализирует объект модели `genai.GenerativeModel`.
    - **Метод `__post_init__`**:  Выполняет дополнительную инициализацию модели, если ключ API задан, но модель не была инициализирована в конструкторе.
    - **Метод `config`**:  Получает конфигурацию из файла `generative_ai.json`.
    - **Метод `start_chat`**: Инициализирует чат с моделью.
    - **Метод `_save_dialogue`**: Сохраняет диалог в текстовый и JSON файлы. Управляет размером файлов.
    - **Метод `ask`**: Отправляет текстовый запрос модели и возвращает ответ.  Обрабатывает различные исключения (сетевые ошибки, временные проблемы с сервисом, исчерпание ресурсов, ошибки аутентификации, ошибки ввода/вывода) с помощью `try-except` блоков и выполняет экспоненциальный бэк-офф для повторных попыток.  Сохраняет диалог в файлы.
    - **Метод `describe_image`**:  Отправляет изображение в модель для анализа и получает текстовое описание.  Преобразует изображение в base64 для отправки.


4. **Пример использования**:
```python
import uuid
from pathlib import Path

# Замените 'your_api_key' на ваш ключ API.
ai = GoogleGenerativeAI(api_key="your_api_key", system_instruction="instruction")
response = ai.ask("Как дела?")

if response:
  print(response)
else:
  print("Ошибка получения ответа.")


image_path = Path("./image.jpg") # путь к изображению
description = ai.describe_image(image_path)
if description:
    print(description)
else:
    print("Ошибка описания изображения.")
```

4. **Обработка ошибок**:  Код содержит исчерпывающие `try-except` блоки, чтобы обработать различные исключения во время работы с API, обеспечивая надёжность и устойчивость программы.


5. **Сохранение истории**: Диалоги сохраняются в истории, что позволяет просмотреть прошлые взаимодействия и использовать их в дальнейшем.

**Примечание:** Замените `your_api_key` на ваш действительный ключ API Google Generative AI.  Файл `generative_ai.json` должен быть доступен и содержать необходимую конфигурацию.  Для корректной работы с изображениями, убедитесь, что `image.jpg` существует в указанном каталоге.