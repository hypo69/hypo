Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Simulation` для управления симуляцией.  Он позволяет начать, остановить, сохранять и загружать состояние симуляции, а также управлять агентами, окружениями и фабриками, участвующими в симуляции.  Код реализует механизмы кэширования, позволяющие сохранять и восстанавливать состояние симуляции во время выполнения.  Он также предоставляет декоратор `transactional`, который делает функции транзакционными, обеспечивая автоматическое кэширование и восстановление результатов выполнения.

Шаги выполнения
-------------------------
1. **Импортирование необходимых модулей:** Код импортирует модули `json`, `os`, `tempfile`, `logging`, и собственные модули `tinytroupe` и `tinytroupe.utils`.

2. **Определение класса `Simulation`:** Создается класс `Simulation` для управления состоянием симуляции.  Он хранит ID симуляции, список агентов, окружений, фабрик, статус симуляции (запущена или остановлена), путь к файлу кэша, флаги автоматического сохранения и наличия несохранённых изменений.  Также хранится история состояний симуляции (`cached_trace`) и текущая история выполнения (`execution_trace`).

3. **Метод `begin`:**  Инициализирует симуляцию.  Принимает опциональный путь к файлу кэша и флаг автоматического сохранения.  Если симуляция уже запущена, выбрасывает исключение.  Устанавливает состояние симуляции в `STARTED`, очищает список агентов, окружений и фабрик для нового цикла симуляции. Устанавливает счетчик новых ID. Загружает данные из кэша, если файл кэша существует.

4. **Метод `end`:**  Останавливает симуляцию, устанавливая её статус в `STOPPED`. Выполняет сохранение состояния симуляции в файл кэша.

5. **Метод `checkpoint`:** Сохраняет текущее состояние симуляции в файл кэша.

6. **Методы `add_agent`, `add_environment`, `add_factory`:** Добавляют агентов, окружения и фабрики в симуляцию. Проверяют уникальность имён.

7. **Внутренние методы (`_...`)** для работы с кэшем и выполнением транзакций:  Эти методы обрабатывают чтение, запись и сравнение данных в файле кэша, обеспечивают транзакционность и управление состоянием.  `_encode_simulation_state`, `_decode_simulation_state`, `_encode_function_output`, `_decode_function_output`, `_add_to_cache_trace`, `_add_to_execution_trace`, `_load_cache_file`, `_save_cache_file` и др.

8. **Декоратор `transactional`:**  Преобразует функцию в транзакционную.  Управляет выполнением функции внутри транзакции. Если симуляция запущена и событие уже кэшировано, пропускает выполнение функции. Иначе выполняет функцию, сохраняет результат в кэш и возвращает результат.

9. **Классы `SkipTransaction`, `CacheOutOfSync`, `ExecutionCached`:** Определяют типы исключений для обработки проблем с кэшированием и транзакциями.

10. **Функции `reset`, `_simulation`, `begin`, `end`, `checkpoint`, `current_simulation`:** Функции для инициализации, начала и остановки симуляции, а также управления текущей симуляцией.


Пример использования
-------------------------
.. code-block:: python

    import tinytroupe

    # Инициализация симуляции
    tinytroupe.begin()

    # Создание агента
    agent = tinytroupe.TinyPerson("agent1")

    # Выполнение действия через декоратор
    @tinytroupe.transactional
    def my_function(agent):
        agent.do_something()
        return agent

    result = my_function(agent)
    print(result)

    # Остановка симуляции
    tinytroupe.end()