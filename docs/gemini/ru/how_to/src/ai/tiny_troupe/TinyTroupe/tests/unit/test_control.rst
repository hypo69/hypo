Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит тесты для модуля `control` из пакета `tinytroupe`.  Тесты проверяют цикл `begin`, `checkpoint`, `end` симуляции, с различными типами агентов и объектов (например, `TinyWorld`, `TinyPersonFactory`).  Код очищает файл кэша перед началом каждого теста, чтобы избежать проблем с предыдущими результатами. Он также проверяет, что статус симуляции соответствует ожидаемому состоянию (started/stopped) на каждом этапе.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:**  Код импортирует все необходимые модули, включая `pytest`, `os`, `sys`, `logging`, и специфические модули из пакета `tinytroupe`.
2. **Определение тестовых функций:** Функции `test_begin_checkpoint_end_with_agent_only`, `test_begin_checkpoint_end_with_world`, и `test_begin_checkpoint_end_with_factory` определяют отдельные тесты.
3. **Инициализация и очистка:** В каждой тестовой функции `control.reset()` обнуляет текущую симуляцию, а `remove_file_if_exists` удаляет файл кэша, если он существует, гарантируя чистую среду для каждого теста.
4. **Начало симуляции (`control.begin`):**  Запускает симуляцию с указанным файлом кэша. Проверяет, что статус симуляции `STATUS_STARTED`.
5. **Создание агентов/объектов:**  Создает экземпляры агентов (`create_oscar_the_architect`, `create_lisa_the_data_scientist`) или `TinyWorld`, и, при необходимости, инструменты (`TinyWordProcessor`, `TinyEnricher`) и устанавливает их свойства.
6. **Проверка состояния кэша:** Проверяет, что `cached_trace` и `execution_trace` не равны `None` - гарантирует, что в симуляции есть следы выполнения.
7. **Сохранение контрольной точки (`control.checkpoint`):**  Сохраняет контрольную точку выполнения симуляции в указанный файл.  Проверяет, что файл контрольной точки был создан.
8. **Выполнение действий агентов/объектов:**  Вызывает действия агентов (`listen_and_act`) или методы `TinyWorld`, например,  `world.run(2)`.
9. **Окончание симуляции (`control.end`):**  Завершает симуляцию.  Проверяет, что статус симуляции `STATUS_STOPPED`.
10. **Дополнительные проверки (для сложных случаев):**  Тесты могут содержать дополнительные проверки, например, сравнение свойств агентов после выполнения симуляции (`assert age_1 == age_2`) или проверки существования созданных файлов.

Пример использования
-------------------------
.. code-block:: python

    import pytest
    # ... (импорты) ...
    
    # Пример использования test_begin_checkpoint_end_with_agent_only
    def test_my_simulation(setup):
        # ... (Создание агентов и параметров как в тесте) ...
        control.begin("my_simulation.cache.json")
        # ... (Выполнение действий) ...
        control.checkpoint()
        control.end()