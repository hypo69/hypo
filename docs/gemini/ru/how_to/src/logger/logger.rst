Как использовать модуль logger
========================================================================================

Описание
-------------------------
Модуль `logger` предоставляет утилиту для ведения логов в Python. Он использует паттерн Singleton для обеспечения единственного экземпляра логгера во всем приложении. Модуль поддерживает различные уровни логов (INFO, DEBUG, WARNING, ERROR, CRITICAL), консольный вывод, логирование в файлы (разные файлы для разных уровней) и JSON-формат.  Логи могут быть окрашены в консоли в зависимости от уровня критичности.

Шаги выполнения
-------------------------
1. **Импортировать модуль:**
   Импортируйте модуль `logger`:

   .. code-block:: python

       from hypotez.src.logger import Logger

2. **Создать экземпляр логгера:**
   Создайте экземпляр класса `Logger`.  Обратите внимание, что это Singleton, поэтому один экземпляр будет использоваться во всем приложении.

   .. code-block:: python

       logger = Logger()

3. **Инициализировать логгеры:**
   Вызовите метод `initialize_loggers` для конфигурации логгеров.  Метод принимает пути к файлам для логов разного уровня и JSON-лога. Пути к файлам можно указать, а можно и оставить по умолчанию (пустая строка).

   .. code-block:: python

       logger.initialize_loggers(info_log_path='info.log', debug_log_path='debug.log', errors_log_path='errors.log', json_log_path='log.json')

4. **Логировать сообщения:**
   Используйте методы `info`, `success`, `warning`, `debug`, `error`, `critical` для записи сообщений разного уровня критичности. Методы принимают сообщение, необязательно исключение (`ex`) и флаг `exc_info`, позволяющий включить вывод полной информации об исключении, в том числе с указанием файла, функции и строки, где вызван метод лога. Дополнительно есть параметр `colors`, позволяющий указывать цвета для вывода в консоли.

   .. code-block:: python

       logger.info('Это информационное сообщение')
       logger.debug('Это отладочное сообщение', exc_info=True)
       logger.error('Ошибка', ex=Exception('Подробности ошибки'))
       logger.success('Успешное действие')
       logger.warning('Предупреждение')
       logger.critical('Критическая ошибка')

Пример использования
-------------------------
.. code-block:: python

    import hypotez.src.logger

    logger = hypotez.src.logger.Logger()
    logger.initialize_loggers(info_log_path='info.log', debug_log_path='debug.log')

    try:
        # Некий код, который может вызвать исключение
        result = 10 / 0
    except Exception as e:
        logger.error("Деление на ноль", ex=e, exc_info=True)

    logger.info('Программа завершила работу')