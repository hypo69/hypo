Как использовать класс `Simulation`
========================================================================================

Описание
-------------------------
Класс `Simulation` отвечает за управление симуляцией. Он позволяет начинать, останавливать и сохранять состояние симуляции, а также добавлять агентов, среды и фабрики.  Внутри реализован механизм кэширования состояния симуляции для оптимизации повторных запусков, а также механизм транзакций, позволяющий отслеживать и кэшировать действия.

Шаги выполнения
-------------------------
1. **Инициализация:** Создайте экземпляр класса `Simulation` с необязательным параметром `id` для идентификации симуляции и `cached_trace` для загрузки сохраненного состояния.

2. **Начало симуляции:** Вызовите метод `begin(cache_path=None, auto_checkpoint=False)` для запуска симуляции.  Параметр `cache_path` позволяет указать путь к файлу кэша, а `auto_checkpoint` определяет, будет ли автоматически сохраняться состояние после каждой транзакции.

3. **Добавление объектов:**  Добавьте агентов, среды и фабрики, используя методы `add_agent(agent)`, `add_environment(environment)`, `add_factory(factory)`.  Обратите внимание, что имена объектов должны быть уникальными.

4. **Выполнение действий:** Выполняйте действия с объектами внутри транзакций. Для этого необходимо использовать декоратор `transactional` и метод `Transaction.execute`.

5. **Сохранение состояния:** Вызовите метод `checkpoint()` для сохранения текущего состояния симуляции в файл.

6. **Остановка симуляции:** Вызовите метод `end()` для остановки симуляции и сохранения финального состояния.


Пример использования
-------------------------
.. code-block:: python

    import tinytroupe

    # Инициализация симуляции
    sim = tinytroupe.Simulation(id="my_simulation")

    # Добавление агента
    agent = tinytroupe.TinyPerson(name="agent1")
    sim.add_agent(agent)

    # Добавление среды
    env = tinytroupe.TinyWorld(name="world1")
    sim.add_environment(env)

    # Начало симуляции
    sim.begin()


    @tinytroupe.transactional
    def do_something(agent):
        # Выполнение действия с агентом
        # ...
        return agent

    # Выполнение действия с помощью Transaction.execute (или декоратора @transactional)
    agent_result = do_something(agent)

    # Остановка симуляции
    sim.end()