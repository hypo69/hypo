"""
<POKER>:
=================
Сложность: 5
-----------------
Игра "Покер" - это упрощенная версия карточного покера для одного игрока. Игрок получает пять карт, которые представлены числами от 1 до 13 (где 1 - туз, 11 - валет, 12 - дама, 13 - король). Игрок может оставить или поменять любое количество карт один раз. После этого выводится комбинация карт и выигрыш, если таковой имеется.

Правила игры:
1.  Игрок начинает с пятью случайными картами от 1 до 13.
2.  Игрок может выбрать, какие карты оставить, а какие заменить, введя номера карт через пробел (например "1 3 5"), либо 0 чтобы оставить все как есть.
3.  Замененные карты заменяются на новые случайные.
4.  После замены карт определяется комбинация:
    -   Пара (два одинаковых значения)
    -   Две пары (дважды по два одинаковых значения)
    -   Тройка (три одинаковых значения)
    -   Фулл хаус (три одинаковых + пара)
    -   Каре (четыре одинаковых значения)
    -   Стрит (пять последовательных значений)
    -   Флеш (пять карт одной масти, в данной реализации масть не учитывается, только числовой ряд)
5.   Игроку выводится сообщение с комбинацией и выигрышем (если есть).
-----------------
Алгоритм:
1. Инициализация: Создать список из 5 случайных чисел от 1 до 13, представляющих карты.
2. Вывод карт на экран.
3. Запрос у игрока, какие карты он хочет заменить:
    3.1. Принять ввод игрока и сохранить список номеров карт для замены.
    3.2 Если игрок ввел 0, то перейти к шагу 5.
4. Замена карт:
    4.1. Для каждой карты в списке на замену - заменить её на случайное число от 1 до 13.
    4.2. Вывести на экран обновленные карты.
5. Анализ комбинации:
    5.1. Подсчитать количество повторений для каждого значения карты.
    5.2. Проверить комбинации в следующем порядке:
        -   Флеш (пять последовательных значений).
        -   Каре (четыре одинаковых).
        -   Фулл хаус (три одинаковых и пара).
        -   Тройка (три одинаковых).
        -   Две пары (дважды по два одинаковых).
        -   Пара (два одинаковых).
    5.3. Если комбинация найдена, вывести ее название и выигрыш.
6. Вывести сообщение об отсутствии выигрыша, если комбинация не найдена.
7. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeCards["Инициализация 5 случайных карт (1-13)"]
    InitializeCards --> DisplayCards["Вывод карт"]
    DisplayCards --> InputReplaceCards["Запрос карт на замену"]
    InputReplaceCards --> CheckNoReplace{"Игрок ввел 0?"}
    CheckNoReplace -- Да --> AnalyzeHand["Анализ комбинации"]
    CheckNoReplace -- Нет --> ReplaceCards["Замена карт"]
    ReplaceCards --> DisplayNewCards["Вывод новых карт"]
    DisplayNewCards --> AnalyzeHand
    AnalyzeHand --> CheckFlush{"Флеш?"}
     CheckFlush -- Да --> OutputFlush["Вывод: Флеш и выигрыш"]
      OutputFlush --> End["Конец"]
     CheckFlush -- Нет --> CheckFourOfAKind{"Каре?"}
     CheckFourOfAKind -- Да --> OutputFourOfAKind["Вывод: Каре и выигрыш"]
     OutputFourOfAKind --> End
     CheckFourOfAKind -- Нет --> CheckFullHouse{"Фулл Хаус?"}
     CheckFullHouse -- Да --> OutputFullHouse["Вывод: Фулл Хаус и выигрыш"]
     OutputFullHouse --> End
     CheckFullHouse -- Нет --> CheckThreeOfAKind{"Тройка?"}
     CheckThreeOfAKind -- Да --> OutputThreeOfAKind["Вывод: Тройка и выигрыш"]
     OutputThreeOfAKind --> End
    CheckThreeOfAKind -- Нет --> CheckTwoPairs{"Две пары?"}
    CheckTwoPairs -- Да --> OutputTwoPairs["Вывод: Две пары и выигрыш"]
    OutputTwoPairs --> End
    CheckTwoPairs -- Нет --> CheckPair{"Пара?"}
    CheckPair -- Да --> OutputPair["Вывод: Пара и выигрыш"]
    OutputPair --> End
    CheckPair -- Нет --> OutputNoWin["Вывод: Нет выигрыша"]
    OutputNoWin --> End
```

Legenda:
    Start - Начало программы.
    InitializeCards - Инициализация 5 случайных карт (числа от 1 до 13).
    DisplayCards - Вывод карт игроку на экран.
    InputReplaceCards - Запрос у игрока, какие карты он хочет заменить (ввод номеров карт через пробел).
    CheckNoReplace - Проверка, ввел ли игрок 0, что означает отсутствие замены карт.
    ReplaceCards - Замена выбранных игроком карт на новые случайные карты.
    DisplayNewCards - Вывод новых карт после замены.
    AnalyzeHand - Анализ текущей комбинации карт.
    CheckFlush - Проверка наличия комбинации "Флеш".
    OutputFlush - Вывод сообщения о выигрыше с комбинацией "Флеш".
    CheckFourOfAKind - Проверка наличия комбинации "Каре".
    OutputFourOfAKind - Вывод сообщения о выигрыше с комбинацией "Каре".
    CheckFullHouse - Проверка наличия комбинации "Фулл Хаус".
    OutputFullHouse - Вывод сообщения о выигрыше с комбинацией "Фулл Хаус".
    CheckThreeOfAKind - Проверка наличия комбинации "Тройка".
    OutputThreeOfAKind - Вывод сообщения о выигрыше с комбинацией "Тройка".
     CheckTwoPairs - Проверка наличия комбинации "Две пары".
    OutputTwoPairs - Вывод сообщения о выигрыше с комбинацией "Две пары".
    CheckPair - Проверка наличия комбинации "Пара".
    OutputPair - Вывод сообщения о выигрыше с комбинацией "Пара".
    OutputNoWin - Вывод сообщения об отсутствии выигрышной комбинации.
    End - Конец программы.
"""
import random

def create_hand():
    """Создает руку из 5 случайных карт (числа от 1 до 13)."""
    hand = [random.randint(1, 13) for _ in range(5)]
    return hand

def display_hand(hand):
    """Выводит карты на экран, нумеруя их для удобства игрока."""
    print("Ваши карты:")
    for i, card in enumerate(hand):
        print(f"{i+1}: {card}", end="  ")
    print()

def get_cards_to_replace():
    """Запрашивает у игрока номера карт, которые нужно заменить."""
    while True:
        try:
            replace_str = input("Введите номера карт для замены через пробел (или 0, чтобы оставить все): ")
            replace_cards = list(map(int, replace_str.split()))

            if len(replace_cards) == 1 and replace_cards[0] == 0:
                return []

            if all(1 <= card <= 5 for card in replace_cards) and len(replace_cards) <=5:
                    return [card - 1 for card in replace_cards]
            else:
                print("Неверный ввод. Введите номера карт от 1 до 5 или 0.")

        except ValueError:
            print("Неверный ввод. Пожалуйста, введите номера через пробел.")


def replace_cards(hand, replace_indices):
    """Заменяет выбранные карты на новые случайные карты."""
    for index in replace_indices:
        hand[index] = random.randint(1, 13)
    return hand

def analyze_hand(hand):
    """Анализирует руку и определяет выигрышную комбинацию."""
    counts = {}  # Словарь для подсчета повторений карт
    for card in hand:
        counts[card] = counts.get(card, 0) + 1

    values = list(counts.values())  # Список количества повторений

    # Проверка на Флеш
    sorted_hand = sorted(hand)
    if len(set(sorted_hand)) == 5 and all(sorted_hand[i+1] - sorted_hand[i] == 1 for i in range(4)):
        print("Флеш! Выигрыш 20 очков")
        return

    # Проверка на Каре
    if 4 in values:
        print("Каре! Выигрыш 25 очков")
        return

    # Проверка на Фулл Хаус
    if 3 in values and 2 in values:
      print("Фулл Хаус! Выигрыш 15 очков")
      return

    # Проверка на Тройку
    if 3 in values:
        print("Тройка! Выигрыш 10 очков")
        return

    # Проверка на Две пары
    if values.count(2) == 2:
        print("Две пары! Выигрыш 5 очков")
        return

    # Проверка на Пару
    if 2 in values:
        print("Пара! Выигрыш 2 очка")
        return

    print("Нет выигрыша.")


# Основная логика игры
def play_poker():
    """Запускает игру в покер."""
    hand = create_hand() # Создаем руку из 5 карт
    display_hand(hand)  # Выводим карты на экран

    replace_indices = get_cards_to_replace() # Запрашиваем карты для замены
    if replace_indices:
        hand = replace_cards(hand, replace_indices) # Заменяем карты
        display_hand(hand) # Выводим обновленные карты

    analyze_hand(hand) # Анализируем руку на наличие комбинации и выводим результат


if __name__ == "__main__":
    play_poker()

"""
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль random, который используется для генерации случайных чисел.
2. **Функция `create_hand()`**:
    - `def create_hand():`: Определяет функцию, которая создает руку из 5 карт.
    - `hand = [random.randint(1, 13) for _ in range(5)]`: Генерирует список из 5 случайных целых чисел в диапазоне от 1 до 13 (представляющих карты) и сохраняет в переменной `hand`.
    - `return hand`: Возвращает созданную руку.
3. **Функция `display_hand(hand)`**:
   - `def display_hand(hand):`: Определяет функцию для вывода карт на экран.
   - `print("Ваши карты:")`: Выводит заголовок "Ваши карты:".
   - `for i, card in enumerate(hand):`:  Цикл перебирает карты, нумеруя их.
   - `print(f"{i+1}: {card}", end="  ")`: Выводит номер карты и ее значение с пробелами для удобства.
   - `print()`: Выводит пустую строку для переноса строки.
4.  **Функция `get_cards_to_replace()`**:
    -   `def get_cards_to_replace():`:  Определяет функцию для получения ввода пользователя о картах для замены.
    -   `while True:`: Бесконечный цикл, пока не будет получен корректный ввод.
    -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не числа, то будет выведено сообщение об ошибке.
    -   `replace_str = input("Введите номера карт для замены через пробел (или 0, чтобы оставить все): ")`: Запрашивает у пользователя строку с номерами карт для замены.
    -   `replace_cards = list(map(int, replace_str.split()))`: Преобразует введенную строку в список целых чисел.
    -   `if len(replace_cards) == 1 and replace_cards[0] == 0:`: Проверяет, если пользователь ввел 0, то возвращает пустой список (оставить все карты).
     -   `if all(1 <= card <= 5 for card in replace_cards) and len(replace_cards) <=5:`: Проверяет, что все введенные номера карт в диапазоне от 1 до 5.
    -  `return [card - 1 for card in replace_cards]`: Возвращает список индексов карт для замены (индексы начинаются с 0).
   -  `else:`: Если ввод неверен, то выводится сообщение об ошибке.
5. **Функция `replace_cards(hand, replace_indices)`**:
   -  `def replace_cards(hand, replace_indices):`: Определяет функцию для замены выбранных карт.
   -  `for index in replace_indices:`: Цикл перебирает индексы карт для замены.
   -   `hand[index] = random.randint(1, 13)`: Заменяет карту в руке на случайное число.
   -  `return hand`: Возвращает обновленную руку.
6. **Функция `analyze_hand(hand)`**:
    -  `def analyze_hand(hand):`: Определяет функцию для анализа комбинаций карт.
    - `counts = {}`: Словарь для подсчета повторений карт.
    -  `for card in hand: counts[card] = counts.get(card, 0) + 1`: Подсчет количества каждой карты в руке
    - `values = list(counts.values())`: Список с количеством повторений карт
    -   **Проверка на Флеш**:
        -   `sorted_hand = sorted(hand)`: Сортирует руку.
        -   `if len(set(sorted_hand)) == 5 and all(sorted_hand[i+1] - sorted_hand[i] == 1 for i in range(4))`: Проверка, что все карты в руке уникальные и идут по порядку.
        -   `print("Флеш! Выигрыш 20 очков")`: Вывод сообщения о флеше.
        -   `return`: Завершает выполнение функции.
    -   **Проверка на Каре**:
        -   `if 4 in values:`: Проверяет, есть ли 4 одинаковых карты.
        -   `print("Каре! Выигрыш 25 очков")`: Вывод сообщения о каре.
        -   `return`: Завершает выполнение функции.
    -   **Проверка на Фулл Хаус**:
        -   `if 3 in values and 2 in values:`: Проверяет, есть ли три одинаковых карты и пара.
        -   `print("Фулл Хаус! Выигрыш 15 очков")`: Вывод сообщения о фулл хаусе.
        -   `return`: Завершает выполнение функции.
    -   **Проверка на Тройку**:
        -  `if 3 in values:`: Проверяет, есть ли три одинаковых карты.
        -  `print("Тройка! Выигрыш 10 очков")`: Вывод сообщения о тройке.
        -   `return`: Завершает выполнение функции.
    -   **Проверка на Две пары**:
         - `if values.count(2) == 2:`: Проверяет, есть ли две пары.
         - `print("Две пары! Выигрыш 5 очков")`: Вывод сообщения о двух парах.
         - `return`: Завершает выполнение функции.
    -   **Проверка на Пару**:
        -   `if 2 in values:`: Проверяет, есть ли пара.
        -   `print("Пара! Выигрыш 2 очка")`: Вывод сообщения о паре.
        -   `return`: Завершает выполнение функции.
    -   `print("Нет выигрыша.")`: Вывод сообщения об отсутствии выигрыша.
7.  **Функция `play_poker()`**:
    - `def play_poker():`: Определяет функцию для запуска игры.
    -   `hand = create_hand()`: Создает руку.
    -   `display_hand(hand)`: Выводит карты на экран.
    -   `replace_indices = get_cards_to_replace()`: Получает номера карт для замены.
    -  `if replace_indices:`: Проверяет, что список с картами для замены не пустой
    -   `hand = replace_cards(hand, replace_indices)`: Заменяет карты.
    -   `display_hand(hand)`: Выводит обновленные карты.
    -   `analyze_hand(hand)`: Анализирует руку и выводит результат.
8. **Запуск игры**:
   -   `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_poker()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
   -   `play_poker()`: Вызывает функцию для начала игры.
"""
