Как использовать класс TinyEnricher
========================================================================================

Описание
-------------------------
Класс `TinyEnricher` отвечает за обогащение контента с помощью модели LLM. Он принимает требования, контент, тип контента, контекстную информацию и кеш контекста, генерирует сообщения для LLM, отправляет их, обрабатывает ответ LLM и возвращает результат в виде кода.  Класс использует шаблоны `enricher.system.mustache` и `enricher.user.mustache` для построения запросов к LLM.

Шаги выполнения
-------------------------
1. **Инициализация:** Создается экземпляр класса `TinyEnricher`. При инициализации можно указать, использовать ли предыдущие результаты в контексте. Этот параметр задает `self.use_past_results_in_context`.
2. **Подготовка данных:** Подготавливаются данные для обогащения: `requirements`, `content`, `content_type`, `context_info`, `context_cache`, и `verbose`.
3. **Формирование сообщений:** Используя функцию `utils.compose_initial_LLM_messages_with_templates`, генерируются сообщения для LLM на основе шаблонов и подготовленных данных.
4. **Отправка сообщений:** Генерированные сообщения отправляются в LLM с помощью `openai_utils.client().send_message`, задается `temperature=0.4` для управления случайностью в ответе LLM.
5. **Обработка ответа:** Полученный ответ LLM обрабатывается функцией `utils.extract_code_block`, которая извлекает из текста ответа код.
6. **Логирование и вывод:** Записывается сообщение об обогащении в лог с помощью `logger.debug()`. Если `verbose=True`, сообщение также выводится на консоль.
7. **Возврат результата:** Если ответ LLM успешно обработан, возвращается извлечённый код. В противном случае, возвращается `None`.

Пример использования
-------------------------
.. code-block:: python

    import os
    import json
    # ... (Импорты из исходного кода)

    # Пример использования
    enricher = TinyEnricher(use_past_results_in_context=True)
    requirements = "Создать код для вычисления среднего значения"
    content = "У вас есть список чисел"
    result = enricher.enrich_content(requirements, content, verbose=True)

    if result:
        print("Результат от LLM:")
        print(result)
    else:
        print("Ответ от LLM пустой или не содержит код.")