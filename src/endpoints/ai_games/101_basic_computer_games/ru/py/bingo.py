"""
<BINGO>:
=================
Сложность: 3
-----------------
Игра в бинго представляет собой упрощенную версию классической игры, где игрок пытается заполнить карточку бинго случайными числами, а затем проверяет, есть ли у него выигрышная комбинация. 
Карточка бинго представлена в виде матрицы 5x5, заполненной уникальными числами от 1 до 75. Игрок вводит числа, которые он хочет поместить в карточку, а затем компьютер выводит заполненную карточку. 
В конце игра показывает, есть ли у игрока бинго, то есть заполнена ли у него строка, колонка или диагональ.
Правила игры:
1.  Игрок должен заполнить карточку бинго размером 5x5 числами от 1 до 75. 
2.  Числа должны быть уникальными, то есть не повторяться. 
3.  Игрок вводит числа последовательно, заполняя сначала первую строку, затем вторую и так далее.
4.  После заполнения карточки компьютер показывает ее и проверяет, есть ли на ней бинго. 
5.  Бинго считается, если есть заполненная строка, колонка или одна из двух диагоналей.
-----------------
Алгоритм:
1. Инициализировать пустую матрицу бинго 5x5.
2. Начать цикл для каждой строки от 1 до 5.
    2.1 Начать цикл для каждого столбца от 1 до 5.
        2.1.1 Запросить у игрока ввод числа от 1 до 75.
        2.1.2 Проверить, не было ли введено это число ранее в матрицу.
        2.1.3 Если число уникально, поместить его в текущую ячейку матрицы.
        2.1.4 Если число не уникально, вывести сообщение об ошибке и запросить повторный ввод.
3. Вывести заполненную матрицу бинго.
4. Проверить каждую строку на наличие бинго (все числа в строке не равны нулю).
5. Проверить каждый столбец на наличие бинго (все числа в столбце не равны нулю).
6. Проверить главную диагональ на наличие бинго (все числа на диагонали не равны нулю).
7. Проверить вторую диагональ на наличие бинго (все числа на диагонали не равны нулю).
8. Если есть бинго, вывести сообщение "BINGO!".
9. Если нет бинго, вывести сообщение "Sorry, no bingo.".
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBingoCard["Инициализация пустой карточки бинго (5x5)"]
    InitializeBingoCard --> StartRowLoop{"Начало цикла по строкам: for row in 1 to 5"}
    StartRowLoop -- Да --> StartColLoop{"Начало цикла по столбцам: for col in 1 to 5"}
    StartColLoop -- Да --> InputNumber["Запрос ввода числа от 1 до 75"]
    InputNumber --> CheckUnique["Проверка уникальности введенного числа"]
    CheckUnique -- Да --> PlaceNumber["Поместить число в ячейку (row, col)"]
    PlaceNumber --> EndColLoop["Конец цикла по столбцам"]
    EndColLoop -- Да --> StartColLoop
    EndColLoop -- Нет --> EndRowLoop["Конец цикла по строкам"]
    EndRowLoop -- Да --> StartRowLoop
    EndRowLoop -- Нет --> PrintBingoCard["Вывод карточки бинго"]
    PrintBingoCard --> CheckRows{"Проверка строк на бинго"}
    CheckRows --> CheckCols{"Проверка столбцов на бинго"}
    CheckCols --> CheckDiag1{"Проверка главной диагонали на бинго"}
    CheckDiag1 --> CheckDiag2{"Проверка второй диагонали на бинго"}
    CheckDiag2 --> CheckBingo{"Проверка наличия бинго"}
    CheckBingo -- Да --> OutputBingo["Вывод сообщения 'BINGO!'"]
    CheckBingo -- Нет --> OutputNoBingo["Вывод сообщения 'Sorry, no bingo.'"]
    OutputBingo --> End["Конец"]
    OutputNoBingo --> End
     CheckUnique -- Нет --> ErrorMessage["Вывод сообщения об ошибке, число уже есть"]
     ErrorMessage --> InputNumber
```

Legenda:
    Start - Начало программы.
    InitializeBingoCard - Инициализирует пустую карточку бинго размером 5x5.
    StartRowLoop - Начало цикла по строкам.
    StartColLoop - Начало цикла по столбцам.
    InputNumber - Запрос ввода числа от 1 до 75.
    CheckUnique - Проверка уникальности введенного числа в карточке.
    PlaceNumber - Помещает число в текущую ячейку карточки.
    EndColLoop - Конец цикла по столбцам, переходит к следующему столбцу или к следующей строке, если это последний столбец текущей строки.
    EndRowLoop - Конец цикла по строкам, переходит к следующей строке или завершает ввод, если это последняя строка.
    PrintBingoCard - Вывод заполненной карточки бинго.
    CheckRows - Проверка наличия бинго в строках.
    CheckCols - Проверка наличия бинго в столбцах.
    CheckDiag1 - Проверка наличия бинго на главной диагонали.
    CheckDiag2 - Проверка наличия бинго на второй диагонали.
    CheckBingo - Проверка, был ли найден бинго.
    OutputBingo - Вывод сообщения о наличии бинго.
    OutputNoBingo - Вывод сообщения об отсутствии бинго.
     ErrorMessage - Сообщение об ошибке ввода и повторный запрос ввода.
     End - Конец программы.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
def play_bingo():
    """
    Функция реализует упрощенную игру в бинго.
    """
    # Инициализируем пустую карточку бинго 5x5
    bingo_card = [[0 for _ in range(5)] for _ in range(5)]

    # Создаем множество для отслеживания уникальности введенных чисел
    used_numbers = set()

    # Заполняем карточку бинго
    for row in range(5):
        for col in range(5):
            while True:
                try:
                   user_input = input(f"Введите число от 1 до 75 для позиции ({row + 1}, {col + 1}): ")
                   number = int(user_input)
                   
                   if not (1 <= number <= 75):
                      print("Пожалуйста, введите число от 1 до 75")
                      continue

                   if number in used_numbers:
                      print("Это число уже было использовано. Введите другое.")
                      continue
                   else:
                      break

                except ValueError:
                    print("Некорректный ввод. Пожалуйста, введите целое число.")
            # Добавляем число в множество и карточку
            used_numbers.add(number)
            bingo_card[row][col] = number

    # Выводим заполненную карточку бинго
    print("\nВаша карточка Бинго:")
    for row in bingo_card:
        print(" ".join(map(str, row)))


    # Проверяем наличие бинго
    if check_bingo(bingo_card):
        print("\nБИНГО!")
    else:
        print("\nК сожалению, нет бинго.")

def check_bingo(card):
    """
    Проверяет, есть ли бинго на карточке.

    Args:
        card (list of lists): Карточка бинго.

    Returns:
        bool: True, если бинго есть, иначе False.
    """

    # Проверка строк
    for row in card:
        if all(row):
          return True

    # Проверка столбцов
    for col in range(5):
        if all(card[row][col] for row in range(5)):
            return True
        
    # Проверка главной диагонали
    if all(card[i][i] for i in range(5)):
      return True
    # Проверка второй диагонали
    if all(card[i][4 - i] for i in range(5)):
        return True

    return False


if __name__ == "__main__":
    play_bingo()
"""
Объяснение кода:

1. **Функция `play_bingo()`:**
   - Инициализирует пустую карточку бинго `bingo_card` как список списков (матрица 5x5).
   - Создаёт множество `used_numbers` для отслеживания уникальности введённых чисел.
   - Использует вложенные циклы для перебора строк и столбцов карточки.
   - Внутри циклов запрашивает у пользователя ввод числа, проверяя его на корректность и уникальность.
   - Добавляет введённые числа в карточку и множество использованных чисел.
   - Выводит заполненную карточку бинго.
   - Вызывает функцию `check_bingo` для проверки наличия бинго и выводит соответствующее сообщение.

2. **Функция `check_bingo(card)`:**
   - Принимает карточку бинго в виде списка списков `card`.
   - Проверяет наличие бинго в строках, столбцах и диагоналях.
   - Возвращает `True`, если бинго найдено, и `False` в противном случае.

3. **Проверка строк:**
    -   Перебирает каждую строку в карточке.
    -   Если все значения в текущей строке не равны нулю, то возвращает `True`, так как есть бинго.

4. **Проверка столбцов:**
    -   Перебирает каждый столбец карточки.
    -   Если все значения в текущем столбце не равны нулю, то возвращает `True`, так как есть бинго.

5. **Проверка главной диагонали:**
    -   Проверяет, что все элементы главной диагонали (сверху слева до низу справа) не равны нулю.
    -   Если все элементы не равны нулю, то возвращает `True`, так как есть бинго.

6. **Проверка второй диагонали:**
    -   Проверяет, что все элементы второй диагонали (сверху справа до низу слева) не равны нулю.
    -   Если все элементы не равны нулю, то возвращает `True`, так как есть бинго.

7. **Запуск игры:**
   - `if __name__ == "__main__":` используется для запуска кода только при непосредственном запуске файла.
   - `play_bingo()` вызывает основную функцию для начала игры.
   
licence:[MIT](../../licence)
"""
