"""
<GOLF>:
=================
Сложность: 6
-----------------
Игра "Гольф" - это текстовая симуляция игры в гольф, в которой игрок пытается довести мяч до лунки за минимальное количество ударов. 
Игрок вводит угол и силу удара, и компьютер рассчитывает дальность полета мяча. 
Цель игры - попасть в лунку, расстояние до которой также определяется случайным образом.

Правила игры:
1.  Компьютер случайным образом определяет расстояние до лунки (от 100 до 250).
2.  Игрок вводит угол (от 10 до 80) и силу удара (от 10 до 80).
3.  Компьютер рассчитывает дальность полета мяча, учитывая угол и силу удара.
4.  После каждого удара компьютер выводит расстояние до лунки.
5.  Игра продолжается до тех пор, пока игрок не попадет в лунку (расстояние до лунки равно 0), 
    или количество ударов не превысит 10.
6.  Если игрок не попал в лунку за 10 попыток, то игра заканчивается поражением.

-----------------
Алгоритм:
1.  Установить начальное расстояние до лунки в случайное число от 100 до 250.
2.  Установить число ударов в 0.
3.  Начать цикл "пока расстояние до лунки больше 0 и количество ударов меньше 11":
    3.1 Увеличить число ударов на 1.
    3.2 Запросить у игрока ввод угла удара (от 10 до 80).
    3.3 Запросить у игрока ввод силы удара (от 10 до 80).
    3.4 Вычислить дальность удара по формуле: (сила_удара * cos(угол в радианах) * 1.15).
    3.5 Обновить расстояние до лунки, вычитая дальность удара из текущего расстояния.
    3.6 Если расстояние до лунки больше 0, вывести сообщение: "Расстояние до лунки: {расстояние_до_лунки}".
    3.7 Если расстояние до лунки равно или меньше 0, вывести сообщение: "ПОЗДРАВЛЯЮ! Вы попали в лунку за {количество ударов} ударов".
4. Если цикл завершился из-за превышения количества ударов, вывести сообщение "Вы не попали в лунку за 10 попыток. Игра окончена"
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    distanceToHole = random(100, 250)
    numberOfShots = 0
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока <code><b>distanceToHole > 0</b></code> и <code><b>numberOfShots < 11</b></code>"}
    LoopStart -- Да --> IncreaseShots["<code><b>numberOfShots = numberOfShots + 1</b></code>"]
    IncreaseShots --> InputAngle["Ввод угла удара: <code><b>angle</b></code>"]
    InputAngle --> InputPower["Ввод силы удара: <code><b>power</b></code>"]
    InputPower --> CalculateDistance["<p align='left'>Расчет дальности удара:
    <code><b>
    distance = power * cos(angle * PI / 180) * 1.15
    </b></code></p>"]
    CalculateDistance --> UpdateDistance["<code><b>distanceToHole = distanceToHole - distance</b></code>"]
    UpdateDistance --> CheckHole{"Проверка: <code><b>distanceToHole <= 0</b></code>?"}
    CheckHole -- Да --> OutputWin["Вывод сообщения: <b>ПОЗДРАВЛЯЮ! Вы попали в лунку за <code>{numberOfShots}</code> ударов</b>"]
    OutputWin --> End["Конец"]
    CheckHole -- Нет --> OutputDistance["Вывод сообщения: <b>Расстояние до лунки: <code>{distanceToHole}</code></b>"]
    OutputDistance --> LoopStart
    LoopStart -- Нет --> OutputLose["Вывод сообщения: <b>Вы не попали в лунку за 10 попыток. Игра окончена</b>"]
    OutputLose --> End
```
    
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: distanceToHole (расстояние до лунки) устанавливается случайным образом от 100 до 250, numberOfShots (количество ударов) устанавливается в 0.
    LoopStart - Начало цикла, который продолжается, пока расстояние до лунки больше 0 и количество ударов меньше 11.
    IncreaseShots - Увеличение счетчика количества ударов на 1.
    InputAngle - Запрос у пользователя ввода угла удара и сохранение его в переменной angle.
    InputPower - Запрос у пользователя ввода силы удара и сохранение его в переменной power.
    CalculateDistance - Расчет дальности удара по формуле, использующей угол и силу удара.
    UpdateDistance - Обновление расстояния до лунки путем вычитания дальности удара.
    CheckHole - Проверка, равно ли или меньше нуля расстояние до лунки.
    OutputWin - Вывод сообщения о победе, если расстояние до лунки меньше или равно нулю, с указанием количества ударов.
    End - Конец программы.
    OutputDistance - Вывод текущего расстояния до лунки.
    OutputLose - Вывод сообщения о проигрыше, если не удалось попасть в лунку за 10 ударов.
"""
import random
import math

__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализация начального расстояния до лунки (от 100 до 250)
distanceToHole = random.randint(100, 250)
# Инициализация счетчика ударов
numberOfShots = 0

# Основной игровой цикл
while distanceToHole > 0 and numberOfShots < 11:
    numberOfShots += 1 # Увеличиваем количество ударов
    
    # Запрашиваем у пользователя угол удара
    while True:
        try:
            angle = float(input(f"Удар {numberOfShots}. Введите угол удара (от 10 до 80): "))
            if 10 <= angle <= 80:
              break # Выходим из цикла, если угол введен корректно
            else:
              print("Угол должен быть в диапазоне от 10 до 80 градусов.")
        except ValueError:
            print("Пожалуйста, введите число.")

    # Запрашиваем у пользователя силу удара
    while True:
      try:
        power = float(input("Введите силу удара (от 10 до 80): "))
        if 10 <= power <= 80:
            break # Выходим из цикла, если сила введена корректно
        else:
          print("Сила удара должна быть в диапазоне от 10 до 80.")
      except ValueError:
        print("Пожалуйста, введите число.")

    # Рассчитываем дальность удара
    distance = power * math.cos(math.radians(angle)) * 1.15
    # Обновляем расстояние до лунки
    distanceToHole -= distance
    
    # Выводим расстояние до лунки
    if distanceToHole > 0:
        print(f"Расстояние до лунки: {distanceToHole:.2f}")
    else:
        print(f"ПОЗДРАВЛЯЮ! Вы попали в лунку за {numberOfShots} ударов")

# Проверяем, не закончились ли попытки
if distanceToHole > 0:
    print("Вы не попали в лунку за 10 попыток. Игра окончена")
"""
Пояснения:
1.  **Импорт модулей `random` и `math`**:
    - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа для расстояния до лунки.
    - `import math`: Импортирует модуль `math`, который используется для вычисления косинуса при расчете дальности удара.
2.  **Инициализация переменных**:
    -  `distanceToHole = random.randint(100, 250)`: Генерирует случайное целое число в диапазоне от 100 до 250 и сохраняет его в `distanceToHole`, которое представляет начальное расстояние до лунки.
    -   `numberOfShots = 0`: Инициализирует переменную `numberOfShots` для подсчета количества ударов игрока.
3.  **Основной игровой цикл `while distanceToHole > 0 and numberOfShots < 11:`**:
    -  Цикл продолжается, пока расстояние до лунки больше нуля (`distanceToHole > 0`) и количество ударов меньше 11 (`numberOfShots < 11`).
    -   `numberOfShots += 1`: Увеличивает счетчик попыток на 1 при каждом новом витке цикла.
4.  **Ввод данных (угол и сила удара)**:
    -   **Цикл ввода угла удара**:
        -   `while True:`: Бесконечный цикл, который будет продолжаться, пока пользователь не введет корректное значение угла.
        -  `try...except ValueError`: Блок `try-except` обрабатывает возможные ошибки ввода, если пользователь введет не число.
        -   `angle = float(input(f"Удар {numberOfShots}. Введите угол удара (от 10 до 80): "))`: Запрашивает у пользователя угол удара и преобразует его в число с плавающей точкой, сохраняя результат в `angle`.
        - `if 10 <= angle <= 80`: Проверяет, находится ли угол в допустимом диапазоне от 10 до 80 градусов.
          -  `break`: Если угол корректен, цикл прерывается.
        -   `else`: Если введенный угол не в диапазоне 10-80, то выводится сообщение об ошибке, и цикл продолжается.
    -   **Цикл ввода силы удара**:
        -   Аналогично циклу ввода угла, используется для ввода силы удара.
5.  **Расчет дальности удара**:
    -   `distance = power * math.cos(math.radians(angle)) * 1.15`: Рассчитывает дальность удара на основе силы удара, угла удара и косинуса угла (в радианах).
        -  `math.radians(angle)`: Преобразует угол из градусов в радианы.
        - `math.cos()`: Вычисляет косинус угла в радианах.
6.  **Обновление расстояния до лунки**:
    -   `distanceToHole -= distance`: Вычитает дальность удара из текущего расстояния до лунки.
7.  **Вывод информации об игре**:
    -  `if distanceToHole > 0`: Проверяет, если расстояние до лунки больше нуля
        - `print(f"Расстояние до лунки: {distanceToHole:.2f}")`: Выводит текущее расстояние до лунки, округленное до двух знаков после запятой.
    - `else`: Если расстояние до лунки не больше нуля, то игрок победил
        - `print(f"ПОЗДРАВЛЯЮ! Вы попали в лунку за {numberOfShots} ударов")`: Выводит сообщение о победе и количестве ударов.
8.  **Проверка на окончание игры (поражение)**:
    - `if distanceToHole > 0`: Если после завершения цикла расстояние до лунки осталось больше нуля, значит, игрок не попал в лунку за 10 попыток.
    - `print("Вы не попали в лунку за 10 попыток. Игра окончена")`: Выводит сообщение о поражении.
"""
```