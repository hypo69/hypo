"""
CHEMST:
=================
קושי: 6
-----------------
המשחק "CHEMST" הוא סימולציה של ניסוי כימי פשוט. המשתמש מתחיל עם כמות מסוימת של כימיקל A וכימיקל B, ויכול לבצע תגובה כימית כדי להפוך אותם לכימיקל C. המטרה היא להגיע לכמות מסוימת של כימיקל C, וגם להכיר את התגובות הכימיות השונות.
המשחק מאפשר לבצע מספר ניסויים, כל אחד עם כמות התחלתית שונה של כימיקלים, ומחשב את התוצאות לאחר כל ניסוי.

חוקי המשחק:
1. השחקן מתחיל עם כמויות התחלתיות של כימיקל A וכימיקל B, ומטרה של כמות כימיקל C.
2. השחקן יכול לבצע תגובה כימית הממירה כמות מכימיקלים A ו-B לכימיקל C.
3.  התגובה הכימית ממירה 2 יחידות של A ו-1 יחידה של B ל-1 יחידה של C.
4. המשחק ממשיך עד שהשחקן מגיע למטרה (כמות נדרשת של כימיקל C) או שהוא בוחר לסיים את המשחק.
5.  אם השחקן לא הגיע למטרה, המשחק מציג את כמות כימיקל C שנוצרה.
-----------------
אלגוריתם:
1. אתחל את כמות כימיקל A, כימיקל B וכימיקל C לאפס.
2. קבל מהמשתמש את הכמות ההתחלתית של כימיקל A (a).
3. קבל מהמשתמש את הכמות ההתחלתית של כימיקל B (b).
4. קבל מהמשתמש את הכמות הרצויה של כימיקל C (c).
5. כל עוד יש עוד כימיקל A (a) וגם כימיקל B (b):
    5.1 בצע תגובה: הפחת 2 יחידות מ-a, הפחת 1 יחידה מ-b, והוסף 1 יחידה ל-c.
    5.2 אם כמות C הגיעה לכמות המטרה הרצויה, עבור לשלב 7.
6. הצג את כמות כימיקל C שנוצרה.
7. שאל את השחקן האם הוא רוצה לשחק שוב.
8. אם כן, חזור לשלב 1. אם לא, סיים את המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeVariables["<p align='left'>אתחול משתנים:
    <code><b>
    chemical_a = 0
    chemical_b = 0
    chemical_c = 0
    </b></code></p>"]
    InitializeVariables --> InputA["קלט כמות התחלתית של כימיקל A"]
    InputA --> InputB["קלט כמות התחלתית של כימיקל B"]
    InputB --> InputTargetC["קלט כמות מטרה של כימיקל C"]
    InputTargetC --> ReactionLoopStart{"תחילת לולאה: כל עוד יש A ו-B"}
    ReactionLoopStart -- כן --> PerformReaction["<p align='left'>בצע תגובה:
    <code><b>
    chemical_a = chemical_a - 2
    chemical_b = chemical_b - 1
    chemical_c = chemical_c + 1
    </b></code></p>"]
    PerformReaction --> CheckTarget{"בדיקה: <code><b>chemical_c >= target_c</b></code>?"}
    CheckTarget -- כן --> OutputWin["הצג הודעה: <b>הגעת למטרה!</b>"]
    OutputWin --> PlayAgain{"האם לשחק שוב?"}
    CheckTarget -- לא --> ReactionLoopStart
    ReactionLoopStart -- לא --> OutputResult["הצג הודעה: <b>כמות כימיקל C שנוצרה: <code>{chemical_c}</code></b>"]
    OutputResult --> PlayAgain
    PlayAgain -- כן --> InitializeVariables
    PlayAgain -- לא --> End["סוף"]
```

Legenda:
    Start - התחלת התוכנית.
    InitializeVariables - אתחול משתנים: chemical_a, chemical_b, ו-chemical_c מאותחלים ל-0.
    InputA - קלט מהמשתמש את הכמות ההתחלתית של כימיקל A.
    InputB - קלט מהמשתמש את הכמות ההתחלתית של כימיקל B.
    InputTargetC - קלט מהמשתמש את כמות המטרה של כימיקל C.
    ReactionLoopStart - תחילת לולאה: כל עוד יש כמות חיובית של כימיקל A ו-B, תגובה כימית מתבצעת.
    PerformReaction - ביצוע תגובה כימית: הורדת 2 יחידות מכימיקל A, הורדת יחידה מכימיקל B, והוספת יחידה לכימיקל C.
    CheckTarget - בדיקה: האם כמות כימיקל C גדולה או שווה לכמות המטרה.
    OutputWin - הצגת הודעה שהשחקן הגיע למטרה.
    OutputResult - הצגת הודעה עם כמות כימיקל C שנוצרה.
    PlayAgain - שאלה האם השחקן רוצה לשחק שוב.
     End - סוף התוכנית.
"""
```python
# משחק כימיה פשוט: CHEMST

def play_chemst_game():
    """
    מפעיל את משחק הכימיה CHEMST.
    המשחק מדמה תגובה כימית פשוטה בין כימיקלים A ו-B ליצירת כימיקל C,
    ומאפשר למשתמש לראות כיצד משתנה כמות הכימיקלים.
    """
    while True: # לולאה ראשית של המשחק. מאפשרת לשחק שוב
        # אתחול משתנים
        chemical_a = 0 # כמות כימיקל A
        chemical_b = 0 # כמות כימיקל B
        chemical_c = 0 # כמות כימיקל C
    
        # קבלת נתוני התחלה מהמשתמש
        try:
            chemical_a = int(input("הכנס כמות התחלתית של כימיקל A: "))
            chemical_b = int(input("הכנס כמות התחלתית של כימיקל B: "))
            target_c = int(input("הכנס כמות מטרה של כימיקל C: "))
        except ValueError:
            print("אנא הכנס מספרים שלמים בלבד.")
            continue # חזרה לתחילת הלולאה אם הקלט לא תקין

        # לולאה שמבצעת את התגובה הכימית כל עוד יש מספיק כימיקלים A ו-B
        while chemical_a >= 2 and chemical_b >= 1:
             # תגובה כימית: 2A + 1B -> 1C
             chemical_a -= 2
             chemical_b -= 1
             chemical_c += 1
             # בדיקה האם הושגה כמות המטרה של כימיקל C
             if chemical_c >= target_c:
                  print("הגעת למטרה! כמות כימיקל C שנוצרה:", chemical_c)
                  break
                
        # אם לא הושגה המטרה, הצגת כמות כימיקל C שנוצרה
        if chemical_c < target_c:
            print(f"כמות כימיקל C שנוצרה: {chemical_c}")
       
        # שאלה האם המשתמש רוצה לשחק שוב
        play_again = input("האם תרצה לשחק שוב? (כן/לא): ").lower()
        if play_again != 'כן':
            print("תודה ששיחקת!")
            break # סיום הלולאה הראשית של המשחק
        
# הפעלת המשחק רק אם הקובץ מופעל ישירות
if __name__ == "__main__":
    play_chemst_game()

```
"""
הסבר הקוד:
1. **פונקציה `play_chemst_game()`**:
   - פונקציה זו מכילה את כל הלוגיקה של המשחק.
   - הלולאה `while True:` מאפשרת למשתמש לשחק שוב ושוב.

2. **אתחול משתנים**:
   - `chemical_a = 0`, `chemical_b = 0`, ו- `chemical_c = 0`: אתחול משתנים אלה ל-0 בתחילת כל משחק. הם מייצגים את כמות הכימיקלים השונים.

3. **קלט מהמשתמש**:
   - `input(...)`: קבלת כמות התחלתית של כימיקל A, כימיקל B, ואת כמות המטרה של כימיקל C מהמשתמש.
   - `try...except ValueError`: טיפול בשגיאת קלט אפשרית. אם המשתמש יזין ערך לא מספרי, תוצג הודעת שגיאה והמשחק יתחיל מחדש.

4. **לולאת תגובה כימית**:
   - `while chemical_a >= 2 and chemical_b >= 1:`: כל עוד יש לפחות 2 יחידות של כימיקל A ולפחות יחידה אחת של כימיקל B, התגובה הכימית מתרחשת.
   - `chemical_a -= 2`, `chemical_b -= 1`, `chemical_c += 1`: מדמה את התגובה הכימית, בה 2 יחידות של A ו-1 יחידה של B הופכות ל-1 יחידה של C.

5. **בדיקה אם הושגה המטרה**:
    -  `if chemical_c >= target_c:`: בדיקה אם כמות כימיקל C גדולה או שווה לכמות המטרה, ובמקרה זה מוצגת הודעת ניצחון והלולאה נשברת.

6.  **הצגת תוצאות**:
   - אם הלולאה מסתיימת בלי שהושגה המטרה (למשל, אם נגמר אחד הכימיקלים), מוצגת כמות כימיקל C שנוצרה.

7. **משחק מחדש**:
   - `input("האם תרצה לשחק שוב? (כן/לא): ").lower()`: שאלה האם המשתמש רוצה לשחק שוב.
   - אם התשובה אינה "כן", המשחק מסתיים עם הודעת סיום. אחרת הלולאה הראשית מתחילה מההתחלה.

8. **הפעלת המשחק**:
   - `if __name__ == "__main__":`: מוודא שהפונקציה `play_chemst_game()` תופעל רק כאשר הקובץ רץ ישירות, ולא כאשר הוא מיובא כמודול.
"""
