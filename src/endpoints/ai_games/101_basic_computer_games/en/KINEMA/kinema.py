
KINEMA:
=================
Сложность: 5
-----------------
Игра "Кинема" представляет собой текстовую симуляцию движения точки на плоскости. Игрок вводит команды для перемещения точки влево, вправо, вверх и вниз, а программа отображает текущие координаты точки и пройденный путь. Цель игры состоит в том, чтобы исследовать пространство и перемещать точку, используя заданные команды.

Правила игры:
1.  Изначально точка находится в координатах (0, 0).
2.  Игрок вводит команды для перемещения точки. Команды следующие:
    -   "L" или "l": перемещение влево на одну позицию (уменьшение координаты X на 1).
    -   "R" или "r": перемещение вправо на одну позицию (увеличение координаты X на 1).
    -   "U" или "u": перемещение вверх на одну позицию (увеличение координаты Y на 1).
    -   "D" или "d": перемещение вниз на одну позицию (уменьшение координаты Y на 1).
3.  После каждого хода программа отображает текущие координаты точки (X, Y).
4.  Игра продолжается до тех пор, пока игрок не введет команду "E" или "e" для выхода.
-----------------
Алгоритм:
1.  Установить начальные координаты X и Y в 0.
2.  Вывести начальные координаты точки (0, 0).
3.  Начать цикл "пока не введена команда выхода (E или e)":
    3.1 Запросить у игрока ввод команды перемещения (L, R, U, D).
    3.2 Если команда равна "L" или "l", то уменьшить координату X на 1.
    3.3 Если команда равна "R" или "r", то увеличить координату X на 1.
    3.4 Если команда равна "U" или "u", то увеличить координату Y на 1.
    3.5 Если команда равна "D" или "d", то уменьшить координату Y на 1.
    3.6 Если команда равна "E" или "e", то закончить игру.
    3.7 Вывести текущие координаты точки (X, Y).
4.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    x = 0
    y = 0
    </b></code></p>"]
    InitializeVariables --> OutputInitialCoordinates["Вывод начальных координат: (0, 0)"]
    OutputInitialCoordinates --> LoopStart{"Начало цикла: пока не введена команда 'E'"}
    LoopStart -- Да --> InputCommand["Ввод команды пользователем: <code><b>command</b></code>"]
    InputCommand --> CheckCommandE{"Проверка: <code><b>command == 'E' or command == 'e'?</b></code>"}
    CheckCommandE -- Да --> End["Конец"]
    CheckCommandE -- Нет --> CheckCommandL{"Проверка: <code><b>command == 'L' or command == 'l'?</b></code>"}
    CheckCommandL -- Да --> MoveLeft["<code><b>x = x - 1</b></code>"]
    MoveLeft --> OutputCoordinates["Вывод текущих координат: <code><b>(x, y)</b></code>"]
    OutputCoordinates --> LoopStart
    CheckCommandL -- Нет --> CheckCommandR{"Проверка: <code><b>command == 'R' or command == 'r'?</b></code>"}
    CheckCommandR -- Да --> MoveRight["<code><b>x = x + 1</b></code>"]
    MoveRight --> OutputCoordinates
    CheckCommandR -- Нет --> CheckCommandU{"Проверка: <code><b>command == 'U' or command == 'u'?</b></code>"}
    CheckCommandU -- Да --> MoveUp["<code><b>y = y + 1</b></code>"]
    MoveUp --> OutputCoordinates
    CheckCommandU -- Нет --> CheckCommandD{"Проверка: <code><b>command == 'D' or command == 'd'?</b></code>"}
     CheckCommandD -- Да --> MoveDown["<code><b>y = y - 1</b></code>"]
    MoveDown --> OutputCoordinates
    CheckCommandD -- Нет --> OutputInvalidCommand["Вывод сообщения: <b>Неверная команда</b>"]
    OutputInvalidCommand --> LoopStart
    LoopStart -- Нет --> End
```
**Legenda:**
   Start - Начало программы.
    InitializeVariables - Инициализация переменных: x (координата X) и y (координата Y) устанавливаются в 0.
    OutputInitialCoordinates - Вывод начальных координат точки (0, 0).
    LoopStart - Начало цикла, который продолжается, пока не будет введена команда "E" или "e".
    InputCommand - Запрос у пользователя ввода команды перемещения.
    CheckCommandE - Проверка, равна ли введенная команда "E" или "e" (команда выхода).
    End - Конец программы.
    CheckCommandL - Проверка, равна ли введенная команда "L" или "l" (перемещение влево).
    MoveLeft - Уменьшение координаты x на 1.
    OutputCoordinates - Вывод текущих координат точки (x, y).
    CheckCommandR - Проверка, равна ли введенная команда "R" или "r" (перемещение вправо).
    MoveRight - Увеличение координаты x на 1.
    CheckCommandU - Проверка, равна ли введенная команда "U" или "u" (перемещение вверх).
    MoveUp - Увеличение координаты y на 1.
    CheckCommandD - Проверка, равна ли введенная команда "D" или "d" (перемещение вниз).
    MoveDown - Уменьшение координаты y на 1.
    OutputInvalidCommand - Вывод сообщения "Неверная команда", если введенная команда не распознана.
```


import time
# Инициализация координат
x = 0 # Координата X
y = 0 # Координата Y

# Вывод начальных координат
print("Начальные координаты: (0, 0)")
time.sleep(0.5) # небольшая задержка

# Основной цикл игры
while True:
    # Запрос ввода команды у пользователя
    command = input("Введите команду (L/R/U/D или E для выхода): ").upper() # переводим в верхний регистр для упрощения сравнения

    # Проверка команды на выход из игры
    if command == "E":
        print("Игра окончена.")
        break # Выход из цикла, завершение игры

    # Перемещение точки в зависимости от команды
    if command == "L":
        x -= 1 # Уменьшение координаты X на 1
    elif command == "R":
        x += 1 # Увеличение координаты X на 1
    elif command == "U":
        y += 1 # Увеличение координаты Y на 1
    elif command == "D":
        y -= 1 # Уменьшение координаты Y на 1
    else:
        print("Неверная команда. Пожалуйста, используйте L, R, U, D или E.")
        continue # если команда неверна, идем на начало цикла.

    # Вывод текущих координат
    print(f"Текущие координаты: ({x}, {y})")
    time.sleep(0.5) # небольшая задержка
"""
Объяснение кода:
1. **Инициализация координат**:
   - `x = 0`: Переменная `x` представляет координату по горизонтали (X) и инициализируется нулем.
   - `y = 0`: Переменная `y` представляет координату по вертикали (Y) и инициализируется нулем.
2. **Вывод начальных координат**:
   - `print("Начальные координаты: (0, 0)")`: Выводит сообщение с начальными координатами точки.
   - `time.sleep(0.5)`: Приостанавливает выполнение программы на 0.5 секунды, для удобства пользователя.
3. **Основной цикл игры**:
   - `while True:`: Бесконечный цикл, который выполняется, пока пользователь не введет команду для выхода.
4. **Ввод команды**:
    - `command = input("Введите команду (L/R/U/D или E для выхода): ").upper()`: Запрашивает у пользователя ввод команды, используя `input()`. `.upper()` переводит введенную строку в верхний регистр, чтобы сделать сравнение команд нечувствительным к регистру.
5. **Проверка команды выхода**:
   - `if command == "E":`: Проверяет, ввел ли пользователь команду выхода ("E").
   - `print("Игра окончена.")`: Выводит сообщение о завершении игры.
   - `break`: Выходит из цикла `while`, завершая программу.
6. **Обработка команд перемещения**:
   - `if command == "L":`: Проверяет, введена ли команда "L" (влево).
     - `x -= 1`: Уменьшает координату `x` на 1.
   - `elif command == "R":`: Проверяет, введена ли команда "R" (вправо).
     - `x += 1`: Увеличивает координату `x` на 1.
   - `elif command == "U":`: Проверяет, введена ли команда "U" (вверх).
     - `y += 1`: Увеличивает координату `y` на 1.
   - `elif command == "D":`: Проверяет, введена ли команда "D" (вниз).
     - `y -= 1`: Уменьшает координату `y` на 1.
   - `else:`: Если введена команда, не совпадающая ни с одной из допустимых команд, выводит сообщение об ошибке и переходит к следующей итерации цикла.
7. **Вывод текущих координат**:
   - `print(f"Текущие координаты: ({x}, {y})")`: Выводит текущие координаты точки.
   - `time.sleep(0.5)`:  Приостанавливает выполнение программы на 0.5 секунды, для удобства пользователя.
"""
```