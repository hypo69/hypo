Как использовать класс TinyTool
========================================================================================

Описание
-------------------------
Класс `TinyTool` является базовым классом для инструментов, которые могут быть использованы агентами.  Он предоставляет общие методы для работы с действиями инструментов, а также для проверки владельца инструмента и наличия побочных эффектов в реальном мире.  Подклассы `TinyTool` должны реализовать методы `_process_action`, `actions_definitions_prompt` и `actions_constraints_prompt`, чтобы определить специфику своего функционала.

Шаги выполнения
-------------------------
1. **Инициализация:** Создайте экземпляр класса `TinyTool` (или его подкласса), передав необходимые параметры в конструктор `__init__`.  Параметры включают имя инструмента, описание, владельца (если применимо), наличие реальных побочных эффектов, а также экспортер и усилитель (если требуются).
2. **Обработка действия:** Вызовите метод `process_action` с агентом и словарем действия (`action`).  Этот метод проверяет владельца инструмента и наличие реальных побочных эффектов.  Далее, вызывается `_process_action`,  который должен быть реализован в подклассе и содержать логику выполнения действия инструмента.
3. **Реализация специфики инструмента (в подклассе):**  Реализуйте методы `_process_action`, `actions_definitions_prompt` и `actions_constraints_prompt` в подклассах `TinyTool`.  `_process_action` обрабатывает само действие, `actions_definitions_prompt` описывает, какие действия может выполнить инструмент, а `actions_constraints_prompt` указывает ограничения на эти действия.
4. **Защита от побочных эффектов в реальном мире:** Метод `_protect_real_world` выводится при наличии реальных побочных эффектов.  Он выводит предупреждение, напоминающее о потенциальном влиянии на мир вне симуляции.
5. **Проверка владельца:**  Метод `_enforce_ownership` проверяет, является ли агент владельцем инструмента.  Если нет, генерируется исключение `ValueError`.
6. **Определение действий инструмента:** Метод `process_action` использует информацию из словаря `action` для реализации действия.

Пример использования
-------------------------
.. code-block:: python

    import logging
    logging.basicConfig(level=logging.DEBUG)

    from tinytroupe.tools import TinyWordProcessor, TinyTool
    from tinytroupe.utils import JsonSerializableRegistry # ... other imports ...


    # Пример создания инструмента для обработки текста
    word_processor = TinyWordProcessor(owner="AgentA", exporter=None, enricher=None)

    # Пример словаря действия
    action_data = {
        "type": "WRITE_DOCUMENT",
        "content": '{"title": "Мой документ", "content": "# Заголовок документа\nТекст документа", "author": "AgentA"}'
    }


    # Обработка действия
    success = word_processor.process_action(agent="AgentA", action=action_data)

    if success:
        print("Документ успешно создан.")
    else:
        print("Ошибка при создании документа.")