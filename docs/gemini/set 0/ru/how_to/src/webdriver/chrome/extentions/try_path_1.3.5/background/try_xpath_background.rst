Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код отвечает за обработку сообщений, полученных от разных частей расширения браузера, связанных с расширением tryxpath. Он реализует различные функции, такие как хранение состояния всплывающего окна, загрузку CSS-стилей, обновление и удаление стилей в открытых вкладках, а также передачу информации между разными частями расширения.  Код также использует локальное хранилище для сохранения и получения настроек (например, CSS, атрибутов).

Шаги выполнения
-------------------------
1. **Обработка сообщений:** Код определяет `genericListener`, который служит обработчиком для сообщений, приходящих в расширение.  Он проверяет тип события (message.event) и вызывает соответствующий обработчик.

2. **Обработка конкретных событий:**
   - Для разных событий (например, `storePopupState`, `requestRestorePopupState`, `requestInsertStyleToPopup`) выполняются разные действия.
   - `showAllResults`: Собирает результаты поиска, записывает ID вкладки и фрейма, создает новую вкладку с результатами.
   - `loadResults`: Возвращает результаты поиска в ответ на запрос.
   - `updateCss`: Удаляет устаревшие CSS-стили и вставляет новые CSS-стили в открытые вкладки. Обрабатываются возможные ошибки.
   - `loadOptions`: Возвращает настройки (атрибуты, CSS, CSS всплывающего окна) в ответ на запрос.
   - `requestSetContentInfo`: Отправляет информацию о контенте в открытые вкладки.
   - `storePopupState`: Сохраняет состояние всплывающего окна.

3. **Обновление настроек из хранилища:** Код следит за изменениями в хранилище настроек (`browser.storage.onChanged`).  При изменении атрибутов, CSS или CSS всплывающего окна, эти значения обновляются в коде.

4. **Инициализация и загрузка CSS:** Код извлекает значения атрибутов, CSS и CSS всплывающего окна из браузерного хранилища (`browser.storage.sync.get`). Если CSS не загружен, загрузка CSS файла `/css/try_xpath_insert.css` происходит с использованием `XMLHttpRequest` и Promise. Загруженный CSS сохраняется в переменной `css`.

5. **Обработка ошибок:**  В коде используются `catch(fu.onError)` для обработки потенциальных ошибок при работе с браузерными методами.

Пример использования
-------------------------
.. code-block:: javascript
    
    // Пример вызова функции для обновления CSS в вкладке
    browser.runtime.sendMessage({
        "event": "updateCss",
        "expiredCssSet": [ /* массив устаревших CSS */ ],
        "newCss": /* новый CSS */
    }, { frameId: 1 });


    // Пример вызова функции для получения настроек
    browser.runtime.sendMessage({
        "event": "loadOptions"
    }, (response) => {
        console.log(response); // Вывод полученных настроек
    });