Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет класс `CodeAssistant`, предназначенный для работы с ассистентом программиста, использующим модели ИИ (например, Gemini).  Класс читает файлы кода, отправляет их в модель ИИ, получает ответ и сохраняет результат в директории `docs/gemini`.  Он поддерживает различные роли (например, `code_checker`, `doc_writer_rst`) и языки.  Код обрабатывает файлы, заданные в аргументах или из файла конфигурации, и позволяет задать, с какого файла начать обработку.  Он также содержит обработку ошибок, логирование и обработку сигналов прерывания (Ctrl+C).

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**: Код импортирует нужные модули, такие как `asyncio`, `argparse`, `pathlib`, `typing`, `signal`, `time`, `re`, `fnmatch`, `gs`, `jjson`, `GoogleGenerativeAI`, `OpenAIModel`, и другие.  Это необходимо для выполнения основных функций кода.

2. **Определение класса `CodeAssistant`**: Определяется класс `CodeAssistant` с атрибутами для роли, языка, директорий для обработки, базового пути, конфигурации и моделей ИИ.

3. **Инициализация моделей**: Метод `_initialize_models` инициализирует модели ИИ (Gemini и OpenAI, если указаны в конфигурации или параметрах).

4. **Разбор аргументов командной строки**: Метод `parse_args` разбирает аргументы командной строки, позволяя пользователю указать роль, язык, модели, директории для обработки и номер файла для начала обработки.

5. **Чтение инструкций**: Свойства `system_instruction` и `code_instruction` загружают инструкции из файлов, соответствующие роли и языку.  Это позволяет адаптировать поведение ассистента.

6. **Загрузка переводов**: Свойство `translations` загружает переводы для ролей и языков из файла `translations.json`.

7. **Обработка файлов**: Метод `process_files` итеративно обрабатывает файлы в указанных директориях:
    - **Перебор файлов**:  Метод `_yield_files_content` перебирает файлы в заданных директориях, исключая файлы и директории, указанные в конфигурации.
    - **Проверка условия**: Проверяется, что файл существует и его содержимое загружено.
    - **Пропуск файлов**: Пропускаются файлы, номер которых меньше `start_file_number`.
    - **Создание запроса**: Метод `_create_request` формирует запрос к модели ИИ, используя информацию о роли, языке, пути к файлу и содержимом файла.  Запрос структурирован для лучшей обработки моделью ИИ.
    - **Обращение к модели**: Если модель Gemini доступна, отправляется запрос к ней.
    - **Обработка ответа**: Если ответ модели успешно получен, он очищается от внешних кавычек (метод `_remove_outer_quotes`), сохраняется в файл (метод `_save_response`) и выводится сообщение о завершении обработки.  В случае ошибки обработки ответа, логгируется ошибка и прекращается обработка файла.
    - **Обработка прерывания**: Задействуется обработчик сигналов прерывания (Ctrl+C), который выводит сообщение об остановке и завершает работу.
    - **Пауза**: Включена пауза `asyncio.sleep(20)` для отладки (может быть изменено).

8. **Сохранение ответа**: Метод `_save_response` сохраняет ответ модели в файл с правильным расширением в директории `docs/gemini`. Путь к файлу формируется динамически с учетом роли и языка.

9. **Удаление внешних кавычек**: Метод `_remove_outer_quotes` очищает ответ модели от внешних кавычек, если они есть.

10. **Запуск процесса**: Функция `run` запускает процесс обработки файлов.  Функция `main` инициирует бесконечный цикл, обрабатывая файлы для разных языков и ролей, загружая и используя данные из конфигурации `code_assistant.json`.

Пример использования
-------------------------
.. code-block:: python

    assistant = CodeAssistant(role='code_checker', lang='ru', model=['gemini'])
    assistant.process_files()