Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует асинхронную публикацию сообщения в Facebook с помощью Selenium. Он позволяет задать заголовок и описание сообщения, загрузить медиа-файлы (изображения или видео) и заполнить подписи к ним.  Код обрабатывает возможные ошибки при работе с драйвером и загрузке файлов.  Используются локализованные подписи для разных языков.

Шаги выполнения
-------------------------
1. **Инициализация драйвера:** Создается экземпляр класса `Driver`, обеспечивающего взаимодействие с веб-сайтом Facebook.

2. **Заполнение заголовка и описания:** Функция `post_title` заполняет поле сообщения с заголовком и описанием кампании.  Она прокручивает страницу назад, открывает форму добавления поста, формирует сообщение из предоставленного объекта `category` и добавляет его в поле ввода.

3. **Загрузка медиа-файлов:** Функция `upload_media` загружает изображения/видео из списка объектов `products`. Она открывает форму добавления медиа, обрабатывает список `products` (в случае, если это не список, преобразует в список), перебирает каждый медиа-файл и загружает его.

4. **Добавление подписей к медиа:** Функция `update_images_captions` добавляет подписи к загруженным медиа-файлам. Она асинхронно выполняет эту задачу для каждого продукта, извлекая соответствующие данные из объекта `products`. Используется функция `handle_product`, которая обрабатывает каждое изображение, формирует текст подписи в зависимости от направления языка, и добавляет его в соответствующее текстовое поле.

5. **Опубликование поста:** Функция `promote_post` объединяет все шаги (заполнение заголовка, загрузку медиа, добавление подписей) и публикует пост. Она вызывает `post_title`, `upload_media` и проверяет, что все этапы выполнены успешно, используя методы `execute_locator` для взаимодействия с элементами страницы Facebook.

6. **Обработка ошибок:**  Код содержит обработку исключений (`try...except`) для каждой операции, чтобы при ошибке не останавливать выполнение, а выводить сообщение в лог с описанием ошибки.

Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src import gs
    from src.webdriver import Driver
    from pathlib import Path
    from types import SimpleNamespace

    # ... (Импорты и инициализация, например, gs.path)

    async def main():
        driver = Driver()
        category = SimpleNamespace(title="Campaign Title", description="Campaign Description")
        products = [
            SimpleNamespace(
                local_saved_image=str(Path(gs.path.media_dir / 'image1.jpg')),
                product_title="Product A",
                original_price="10.00",
                language='en',
            ),
            SimpleNamespace(
                local_saved_image=str(Path(gs.path.media_dir / 'image2.jpg')),
                product_title="Product B",
                sale_price="8.00",
                language='en',
            ),
        ]

        try:
            await promote_post(driver, category, products)
            print("Post published successfully!")
        except Exception as e:
            print(f"Error publishing post: {e}")
        finally:
            await driver.close()


    if __name__ == "__main__":
        asyncio.run(main())