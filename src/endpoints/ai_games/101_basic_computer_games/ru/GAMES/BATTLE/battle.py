
BATTLE:
=================
Сложность: 5
-----------------
Игра "BATTLE" - это симуляция морского боя между двумя игроками - компьютером и человеком. Игроки по очереди "стреляют" в клетки на игровом поле, пытаясь потопить корабли противника. Игра продолжается до тех пор, пока все корабли одного из игроков не будут потоплены.

Правила игры:
1.  Игровое поле - это квадратная сетка 10x10.
2.  У каждого игрока есть по 5 кораблей. Размеры и количество кораблей не указаны в оригинальном коде.
3.  Игроки по очереди называют координаты "выстрела". Координаты вводятся в виде двух чисел: ряда и столбца.
4.  Если "выстрел" попадает в корабль противника, то корабль считается подбитым.
5.  Если "выстрел" попадает в пустую клетку, то игрок просто промахивается.
6.  Игра продолжается до тех пор, пока не будут потоплены все корабли одного из игроков.
7.  В оригинальном коде нет определения победителя, игра заканчивается после 30 ходов.
-----------------
Алгоритм:
1.  Инициализация:
    1.1. Установить размер игрового поля в 10x10.
    1.2. Создать два игровых поля (для компьютера и игрока), представленных двумерными массивами (матрицами).
    1.3. Заполнить игровые поля значениями "0" (пустое поле), "1" (корабль), "2" (попадание), "3" (промах).
    1.4. Разместить 5 кораблей на поле компьютера случайным образом. Размещение кораблей игрока не предусмотрено в оригинальной версии игры.
    1.5. Установить счетчик ходов в 0.
    1.6. Вывести на экран пустое поле игрока.
2.  Начать цикл "пока счетчик ходов меньше 30":
    2.1. Увеличить счетчик ходов на 1.
    2.2. Запросить у игрока координаты выстрела (строка и столбец).
    2.3. Проверить, если выстрел игрока попал в корабль компьютера:
        2.3.1. Заменить значение в массиве компьютера на "2" (попадание).
        2.3.2. Вывести на экран сообщение "HIT!".
    2.4. Если выстрел игрока не попал в корабль:
        2.4.1. Заменить значение в массиве компьютера на "3" (промах).
        2.4.2. Вывести на экран сообщение "MISS".
    2.5. Вывести на экран поле игрока с отметками о выстрелах.
    2.6. Выполнить "выстрел" компьютера случайным образом.
    2.7. Проверить, если выстрел компьютера попал в корабль игрока:
         2.7.1 Заменить значение в массиве игрока на "2" (попадание).
         2.7.2 Вывести сообщение: "COMPUTER HITS!"
    2.8 Если выстрел компьютера не попал в корабль
        2.8.1 Заменить значение в массиве игрока на "3" (промах).
        2.8.2 Вывести сообщение: "COMPUTER MISSES"
    2.9. Вывести на экран поле игрока с отметками о выстрелах.

3.  Конец игры. Вывести сообщение "END OF GAME".
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGame["<p align='left'>Инициализация:
    <code><b>
    boardSize = 10
    playerBoard = matrix(boardSize x boardSize, 0)
    computerBoard = matrix(boardSize x boardSize, 0)
    placeComputerShips()
    turnCount = 0
    </b></code></p>"]
    InitializeGame --> GameLoopStart{"Начало цикла: <code><b>turnCount < 30</b></code>"}
    GameLoopStart -- Да --> IncreaseTurnCount["<code><b>turnCount = turnCount + 1</b></code>"]
    IncreaseTurnCount --> PlayerInput["Ввод координат выстрела игроком: <code><b>playerRow, playerCol</b></code>"]
    PlayerInput --> CheckPlayerHit{"Проверка: <code><b>computerBoard[playerRow][playerCol] == 1</b></code>?"}
    CheckPlayerHit -- Да --> PlayerHit["<code><b>computerBoard[playerRow][playerCol] = 2</b></code><br>Output: <b>HIT!</b>"]
    PlayerHit --> PrintPlayerBoard["Вывод поля игрока"]
     PrintPlayerBoard --> ComputerTurn["Ход компьютера: <code><b>computerRow = random(0, boardSize-1); computerCol = random(0, boardSize-1)</b></code>"]
    CheckPlayerHit -- Нет --> PlayerMiss["<code><b>computerBoard[playerRow][playerCol] = 3</b></code><br>Output: <b>MISS</b>"]
     PlayerMiss --> PrintPlayerBoard
    ComputerTurn --> CheckComputerHit{"Проверка: <code><b>playerBoard[computerRow][computerCol] == 1</b></code>?"}
    CheckComputerHit -- Да --> ComputerHit["<code><b>playerBoard[computerRow][computerCol] = 2</b></code><br>Output: <b>COMPUTER HITS!</b>"]
    ComputerHit --> PrintPlayerBoard2["Вывод поля игрока"]
    CheckComputerHit -- Нет --> ComputerMiss["<code><b>playerBoard[computerRow][computerCol] = 3</b></code><br>Output: <b>COMPUTER MISSES</b>"]
     ComputerMiss --> PrintPlayerBoard2
     PrintPlayerBoard2 --> GameLoopStart
    GameLoopStart -- Нет --> End["Конец: <b>END OF GAME</b>"]

```
Legenda:
   Start - Начало игры.
    InitializeGame - Инициализация игровых переменных и полей: задается размер поля, создаются пустые игровые поля для игрока и компьютера, случайно размещаются корабли компьютера, счетчик ходов устанавливается в 0.
    GameLoopStart - Начало цикла игры, который повторяется, пока счетчик ходов меньше 30.
    IncreaseTurnCount - Увеличение счетчика ходов на 1.
    PlayerInput - Получение координат выстрела от игрока (playerRow, playerCol).
    CheckPlayerHit - Проверка, попал ли выстрел игрока в корабль компьютера (значение 1 на поле компьютера).
    PlayerHit - Если попал, то: меняется значение в поле компьютера на 2 (попадание) и выводится сообщение "HIT!".
    PlayerMiss - Если не попал, то: меняется значение в поле компьютера на 3 (промах) и выводится сообщение "MISS".
    PrintPlayerBoard - Вывод текущего состояния поля игрока на экран.
    ComputerTurn - Компьютер выбирает случайные координаты для выстрела.
    CheckComputerHit - Проверка, попал ли выстрел компьютера в корабль игрока.
    ComputerHit - Если попал, то: меняется значение в поле игрока на 2 (попадание) и выводится сообщение "COMPUTER HITS!".
    ComputerMiss - Если не попал, то: меняется значение в поле игрока на 3 (промах) и выводится сообщение "COMPUTER MISSES".
    PrintPlayerBoard2 - Вывод текущего состояния поля игрока на экран.
    End - Конец игры. Выводится сообщение "END OF GAME".
```
```python
import random

# Константа, задающая размер игрового поля
BOARD_SIZE = 10

# Функция для создания игрового поля (матрицы) заданного размера, заполненного нулями
def create_board(size):
    return [[0 for _ in range(size)] for _ in range(size)]

# Функция для случайного размещения кораблей на игровом поле компьютера
def place_computer_ships(board):
    # Для простоты, размещаем 5 кораблей размера 1 (одна клетка)
    ships_placed = 0
    while ships_placed < 5:
        row = random.randint(0, BOARD_SIZE - 1)
        col = random.randint(0, BOARD_SIZE - 1)
        if board[row][col] == 0:
            board[row][col] = 1 # 1 обозначает наличие корабля
            ships_placed += 1

# Функция для отображения игрового поля, скрывая корабли компьютера
def display_board(board, is_computer=False):
    print("   " + " ".join(str(i) for i in range(BOARD_SIZE)))
    for i, row in enumerate(board):
        row_str = " ".join(
            "*" if is_computer and cell == 1 else  # Скрываем корабли компьютера
            "O" if cell == 0 else  # Пустое поле
            "X" if cell == 2 else  # Попадание
            "-" if cell == 3 else # Промах
            str(cell)
            for cell in row
        )
        print(f"{i:2} {row_str}")
    print()



# Основная функция игры
def play_battle():
    # Создаем игровое поле для игрока и компьютера
    player_board = create_board(BOARD_SIZE)
    computer_board = create_board(BOARD_SIZE)
    
    # Размещаем корабли компьютера
    place_computer_ships(computer_board)

    # Инициализируем счетчик ходов
    turn_count = 0

    # Основной игровой цикл (до 30 ходов)
    while turn_count < 30:
        turn_count += 1
        print(f"Ход {turn_count}")
        
        # Ход игрока
        while True:
            try:
                player_row = int(input(f"Введите строку для выстрела (0-{BOARD_SIZE - 1}): "))
                player_col = int(input(f"Введите столбец для выстрела (0-{BOARD_SIZE - 1}): "))
                if 0 <= player_row < BOARD_SIZE and 0 <= player_col < BOARD_SIZE:
                    break
                else:
                     print("Некорректные координаты, попробуйте еще раз.")
            except ValueError:
                print("Некорректный ввод, введите число.")
        
        # Обрабатываем выстрел игрока
        if computer_board[player_row][player_col] == 1:
            computer_board[player_row][player_col] = 2  # 2 = Попадание
            print("HIT!")
        else:
            computer_board[player_row][player_col] = 3 # 3 = промах
            print("MISS!")
        
        # Выводим игровое поле игрока после выстрела, показывая результаты выстрела
        print("Ваше поле:")
        display_board(player_board)
        
        # Ход компьютера
        print("Ход компьютера...")
        computer_row = random.randint(0, BOARD_SIZE - 1)
        computer_col = random.randint(0, BOARD_SIZE - 1)
        
         # Обрабатываем выстрел компьютера
        if player_board[computer_row][computer_col] == 1:
            player_board[computer_row][computer_col] = 2  # 2 = Попадание
            print("COMPUTER HITS!")
        else:
            player_board[computer_row][computer_col] = 3 # 3 = промах
            print("COMPUTER MISSES")
        
        # Выводим игровое поле игрока после выстрела компьютера
        print("Ваше поле:")
        display_board(player_board)

    # Сообщение об окончании игры
    print("END OF GAME")


# Запускаем игру, если скрипт запущен напрямую
if __name__ == "__main__":
    play_battle()
```
```
Объяснение кода:

1.  **Импорт модуля `random`:**
    -   `import random`: Импортирует модуль random, который используется для генерации случайных чисел.
2.  **Константа `BOARD_SIZE`:**
    -   `BOARD_SIZE = 10`: Определяет размер игрового поля как 10x10.
3.  **Функция `create_board(size)`:**
    -   Создает и возвращает двумерный список (матрицу) заданного размера, заполненную нулями (пустые клетки).
4.  **Функция `place_computer_ships(board)`:**
    -   Размещает 5 кораблей размера 1 (одна клетка) на игровом поле компьютера случайным образом.
    -   Проверяет, что клетка не занята, прежде чем разместить корабль.
    -   Корабль обозначается значением 1 на игровом поле.
5.  **Функция `display_board(board, is_computer=False)`:**
    -   Отображает игровое поле в консоли.
    -   Если is_computer=True, то корабли компьютера (значение 1) отображаются как "*",  в противном случае корабли компьютера скрыты.
    -   Отображает пустые клетки как "O", попадания как "X", а промахи как "-".
6.  **Функция `play_battle()`:**
    -   Создает игровое поле для игрока и компьютера.
    -   Размещает корабли компьютера на поле.
    -   Инициализирует счетчик ходов turn_count = 0.
    -   **Основной игровой цикл (`while turn_count < 30`):**
        -   Увеличивает счетчик ходов на 1.
        -   Выводит текущий ход.
        -   **Ход игрока:**
           -   Запрашивает у пользователя координаты для выстрела (строка и столбец).
            -   Использует цикл `while True`,  чтобы гарантировать, что пользователь введет корректные координаты в числовом формате.
            -   Проверяет, если координаты находятся в пределах допустимого диапазона.
            -   Обрабатывает исключение `ValueError`, если пользователь ввел некорректные данные (не число).
            -   Если выстрел попал в корабль (значение 1), заменяет значение на 2 (попадание) и выводит "HIT!".
            -   Если выстрел не попал, заменяет значение на 3 (промах) и выводит "MISS!".
           -   Выводит игровое поле игрока с отметками выстрелов.
        -   **Ход компьютера:**
             -   Генерирует случайные координаты для выстрела.
             -   Обрабатывает выстрел компьютера аналогично ходу игрока.
            -   Выводит сообщение: "COMPUTER HITS!" или "COMPUTER MISSES".
            -   Выводит игровое поле игрока с отметками о выстрелах.
        -   Цикл завершается после 30 ходов.
    -   Выводит сообщение "END OF GAME".
7.  **Запуск игры:**
    -   `if __name__ == "__main__":`: Гарантирует, что функция `play_battle()` будет запущена только в том случае, если скрипт запущен напрямую, а не импортирован как модуль.
    -   `play_battle()`: Вызывает функцию для запуска игры.

```