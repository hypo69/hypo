Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет класс `Driver`, предназначенный для работы с веб-драйверами Selenium.  Он предоставляет унифицированный интерфейс для управления веб-драйверами, включая инициализацию, навигацию по страницам, работу с куки, обработку исключений и прокрутку.  Класс позволяет работать с разными типами драйверов (Chrome, Firefox, Edge) через единый API.  Он также содержит функции для извлечения HTML-контента из файлов и веб-страниц.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует нужные библиотеки, включая `selenium`, `time`, `re`, `pathlib`, `copy`, `pickle`, и другие, необходимые для работы с веб-драйверами и обработкой данных.

2. **Определение класса `Driver`:** Создается класс `Driver`, который содержит методы для управления веб-драйвером.

3. **Инициализация драйвера (`__init__`)**: Метод `__init__` принимает класс веб-драйвера (`webdriver_cls`) и параметры для его инициализации (`*args`, `**kwargs`). Он проверяет, что `webdriver_cls` - это действительный класс WebDriver. Если нет, генерируется исключение `TypeError`. В противном случае создается экземпляр `webdriver_cls` и сохраняется в атрибуте `self.driver`.

4. **Дополнительная инициализация подклассов (`__init_subclass__`)**: Этот метод автоматически вызывается при создании подкласса `Driver`. Он требует параметр `browser_name` для идентификации браузера, если он не задан, генерируется исключение `ValueError`.

5. **Прокси-доступ к атрибутам драйвера (`__getattr__`)**: Метод `__getattr__` реализует прокси-доступ к атрибутам `self.driver`, позволяя использовать методы драйвера через экземпляр `Driver`.

6. **Прокрутка страницы (`scroll`)**: Метод `scroll` позволяет прокрутить страницу вниз, вверх или в обоих направлениях. Он принимает параметры для количества прокруток, размера прокрутки и направления. Метод обрабатывает возможные исключения при прокрутке и возвращает `True` при успешной прокрутке, `False` - в противном случае.

7. **Получение языка страницы (`locale`)**: Метод `locale` определяет язык страницы, извлекая значение атрибута `content` из тега `<meta>` с атрибутом `http-equiv='Content-Language'`. Если такой тег не найден, он пытается определить язык через JavaScript. Возвращает код языка или `None`.

8. **Переход по URL (`get_url`)**: Метод `get_url` переходит по указанному URL. Он сохраняет текущий URL, предыдущий URL и куки.  Важная часть: метод обрабатывает различные исключения, такие как `WebDriverException`, `InvalidArgumentException` и общие ошибки, что обеспечивает устойчивость кода.  Возвращает `True`, если переход успешен, `False` - в противном случае.

9. **Открытие новой вкладки (`window_open`)**: Метод `window_open` открывает новую вкладку в браузере и переключает фокус на нее. Принимает необязательный параметр `url` для загрузки новой вкладки.

10. **Ожидание (`wait`)**: Метод `wait` предоставляет возможность ожидания заданного времени в секундах, используется для обеспечения времени на загрузку страницы.

11. **Сохранение куки (`_save_cookies_localy`)**: Метод `_save_cookies_localy` сохраняет текущие куки веб-драйвера в локальный файл. Этот метод важен для сохранения состояния сессии.

12. **Извлечение HTML-контента (`fetch_html`)**: Метод `fetch_html` извлекает HTML-контент из файла или веб-страницы, обрабатывая разные типы URL. Он возвращает `True`, если извлечение успешно, и `False` в противном случае.


Пример использования
-------------------------
.. code-block:: python

    from selenium.webdriver import Chrome
    from hypotez.src.webdriver.driver import Driver

    driver = Driver(Chrome, executable_path='/path/to/chromedriver')
    success = driver.get_url('https://www.example.com')
    if success:
        print("Успешный переход по URL")
        driver.scroll(scrolls=2, direction='down')
        lang = driver.locale
        print(f"Язык страницы: {lang}")
        driver.wait(5) # ждем 5 секунд
        driver.window_open('https://www.google.com')

        html_success = driver.fetch_html('file:///path/to/my/file.html')
        if html_success:
            print("HTML успешно извлечен")
    else:
        print("Ошибка при переходе по URL")