Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код служит обработчиком сообщений расширения Chrome. Он ожидает сообщения с действием `'collectData'` и URL страницы. При получении такого сообщения, код собирает сохранённые данные и отправляет их на сервер.

Шаги выполнения
-------------------------
1. **Прослушивание событий:** Код устанавливает обработчик `chrome.action.onClicked.addListener`, который реагирует на клик по иконке расширения. При клике отправляется сообщение `collectData` текущей вкладке с её URL.
2. **Приём сообщения:** Функция `chrome.runtime.onMessage.addListener` прослушивает сообщения, отправленные из других частей расширения.
3. **Проверка действия:** Если полученное сообщение имеет поле `action` со значением `'collectData'`, функция `sendDataToServer` получает URL из сообщения.
4. **Получение данных:** Функция `sendDataToServer` с помощью `chrome.storage.local.get('collectedData', (result) => { ... })` получает сохранённые данные (предположительно собранные другими частями расширения).
5. **Проверка наличия данных:** Проверяется, существуют ли сохранённые данные. Если нет, выводится сообщение об ошибке.
6. **Отправка данных на сервер:** Если данные найдены, то с помощью `fetch` отправляется POST-запрос на сервер `http://127.0.0.1/hypotez/catch_request.php` с данными в формате JSON.
7. **Обработка ответа сервера:** Обрабатывается ответ сервера: если ответ успешный, выводится сообщение об успешной отправке данных. Если произошла ошибка, выводится сообщение об ошибке.

Пример использования
-------------------------
.. code-block:: javascript

    // В коде скрипта контента (content script):
    chrome.runtime.sendMessage({ action: 'collectData', url: window.location.href });

    // Предполагаемый код для сохранения данных перед отправкой:
    // (Пример, необходимо адаптировать под свой сценарий)
    chrome.storage.local.set({ collectedData: { dataFromPage: 'some data' } });