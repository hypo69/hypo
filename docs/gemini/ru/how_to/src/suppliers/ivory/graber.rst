Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет собой класс `Graber` из модуля `src.suppliers.ivory`, предназначенный для сбора данных о товарах со страницы `ivory.co.il`.  Класс наследуется от базового класса `Grbr`, предоставляя функции для обработки различных полей товара.  Код реализует асинхронный способ сбора данных (`async def`).  Он содержит методы для извлечения данных различных типов полей, таких как название, описание, цены и т.д.  Ключевая особенность - возможность переопределять поведение обработки конкретных полей в дочерних классах (в данном случае, `Graber`).  Также используется декоратор `@close_pop_up` для закрытия всплывающих окон перед извлечением данных.  Глобальные настройки, такие как `Context`,  можно передать в декоратор, чтобы он их использовал.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**  Код импортирует необходимые модули, включая `asyncio`, `pydantic`, `src`, `webdriver` и др., для работы с асинхронными операциями,  данными, веб-драйвером и т.д.

2. **Определение класса `Graber`:** Создается класс `Graber`, наследующийся от базового класса `Grbr`.  Этот класс инициализируется экземпляром веб-драйвера (`driver`).  Внутри конструктора устанавливаются переменные для предопределения префикса поставщика данных.

3. **Асинхронный метод `grab_page`:**  Этот метод является точкой входа для сбора данных о товаре.  Он получает экземпляр веб-драйвера (`driver`) и возвращает объект `ProductFields` с собранными данными.

4. **Внутренняя функция `fetch_all_data`:**  Внутри `grab_page` вызывается асинхронная функция `fetch_all_data`.  Эта функция содержит вызовы отдельных методов, отвечающих за сбор данных по конкретным полям товара (например, `id_product`, `name`, `price`).

5. **Вызов методов обработки полей:** Методы, подобные `id_product`, `name` и другим, являются асинхронными, извлекают данные по соответствующим полям товара с помощью веб-драйвера.

6. **Возврат данных:**  Метод `grab_page` возвращает собранные поля продукта в виде объекта `ProductFields`.

7. **Передача данных из других функций:** Функции сбора данных (`fetch_specific_data`, `id_product`, `description_short`, и т.д.) извлекают данные из HTML-страницы с помощью веб-драйвера и сохраняют их в свойствах класса `Graber`.

Пример использования
-------------------------
.. code-block:: python

    from src import Driver
    from hypotez.src.suppliers.ivory.graber import Graber
    import asyncio
    
    async def main():
        driver = Driver() # Создаем экземпляр драйвера (подготовка к работе с веб-драйвером)
        try:
            graber = Graber(driver=driver)
            fields = await graber.grab_page(driver)
            print(fields) # Обработка и вывод собранных полей
        finally:
            await driver.quit()

    asyncio.run(main())