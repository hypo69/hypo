Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код реализует обработку сообщений от всплывающего окна расширения браузера (вероятно, для работы с XPath).  Он обрабатывает запросы на выполнение XPath-выражений, фокусировку элементов, обновление стилей и работу с фреймами.  Код управляет атрибутами элементов, сохраняет их исходные значения, фокусирует элементы, и обеспечивает взаимодействие с фреймами, в том числе с пустыми фреймами.

Шаги выполнения
-------------------------
1. **Обработка сообщений:** Код регистрирует обработчик событий `onMessage` для получения сообщений от браузера.
2. **Инициализация:** Устанавливается флаг `tx.isContentLoaded`, чтобы предотвратить повторную инициализацию.  Инициализируются переменные, такие как `attributes`, хранящие данные об атрибутах, счётчик `executionCount`, а также значения по умолчанию для элементов.
3. **Функция `setAttr`:** Сохраняет исходные значения атрибутов элемента и устанавливает новые значения.
4. **Функция `setIndex`:** Сохраняет исходные значения атрибутов для множества элементов и обновляет их.
5. **Функция `isFocusable`:** Проверяет, является ли элемент фокусируемым (в зависимости от типа).
6. **Функция `focusItem`:** Фокусирует указанный элемент, убирая фокус с предыдущего, записывает атрибут `focused` для элемента и его предков.
7. **Функция `setMainAttrs`:** Устанавливает атрибуты `context` и `element` для основных элементов.
8. **Функция `restoreAttrs`:** Восстанавливает исходные значения атрибутов элементов.
9. **Функция `resetPrev`:** Сбрасывает переменные состояния для новой операции.
10. **Обработка фреймов:** Функция `traceBlankWindows` ищет фреймы по указанию и проверяет, являются ли они пустые.
11. **Функция `updateCss`:** Обновляет стили для отображения результатов.
12. **Функция `findFrameByMessage`:** Находит фрейм по индексу.
13. **Функция `setFocusFrameListener`:** Регистрирует обработчик сообщений для фокусировки фреймов.
14. **Функция `initBlankWindow`:** Инициализирует обработку сообщений для пустых фреймов.
15. **Функции `updateStyleElement`, `updateAllStyleElements`, `removeStyleElement`, `removeAllStyleElements`:** Управление стилями, удаление и добавление стилей в DOM для отображения результатов.
16. **Функция `genericListener`:** Основной обработчик сообщений.
17. **Слушатели событий (genericListener.listeners):** Обработчики для различных типов событий: `execute`, `focusItem`, `focusContextItem`, `focusFrame`, `requestShowResultsInPopup`, `requestShowAllResults`, `resetStyle`, `setStyle`, `finishInsertCss`, `finishRemoveCss`  обрабатывают запросы на выполнение XPath, фокусировку и изменение стилей.
18. **Обработка сообщений:**  Прослушивание сообщений из фреймов.
19. **Функции `parseFrameDesignation`, `getFrames`, `handleCssChange`:** Обрабатывают специфические запросы и состояния.

Пример использования
-------------------------
.. code-block:: javascript
    // Это пример того, как можно вызвать функцию, например, из кода всплывающего окна расширения
    browser.runtime.sendMessage({
        "event": "execute",
        "main": {
            "method": "evaluate",
            "expression": "//div[@id='myDiv']", // Запрос XPath
            "resultType": "ANY_TYPE",
            "resolver": null
        },
        "context": { //Если требуется контекст
            "method": "evaluate",
            "expression": "//div[@class='parent']", //Запрос XPath
            "resultType": "ANY_TYPE",
            "resolver": null
        },
        "frameDesignation": "1"  // Индекс фрейма, если требуется
    });

Этот фрагмент отправляет сообщение в расширение для выполнения XPath-запроса на указанный элемент `//div[@id='myDiv']`, возможно, в заданном контексте, и с возможностью работы с фреймами.