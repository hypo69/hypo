<TRAIN>:
=================
קושי: 3
-----------------
המשחק "רכבת" הוא סימולציה טקסטואלית פשוטה של רכבת הנוסעת במסלול מעגלי. השחקן מזין את המרחק שהרכבת עברה בכל צעד, והמשחק מחשב את מיקום הרכבת על המסלול. המסלול מוגדר באורך קבוע, והמשחק ממשיך עד שהשחקן מזין מרחק שלילי.

חוקי המשחק:
1.  אורך המסלול מוגדר כ-100 יחידות.
2.  מיקום הרכבת ההתחלתי הוא 0.
3.  בכל סיבוב, השחקן מזין את המרחק שהרכבת עברה (יכול להיות חיובי או שלילי).
4.  המיקום החדש של הרכבת מחושב על ידי הוספת המרחק שהוזן למיקום הקודם, תוך התחשבות באורך המסלול (שימוש במודולו).
5.  המשחק ממשיך עד שהשחקן מזין מרחק שלילי.
6.  בכל סיבוב, המשחק מציג את מיקום הרכבת הנוכחי על המסלול.
-----------------
אלגוריתם:
1.  הגדר את אורך המסלול (trackLength) ל-100.
2.  הגדר את מיקום הרכבת ההתחלתי (trainLocation) ל-0.
3.  התחל לולאה "כל עוד המרחק שהוזן אינו שלילי":
    3.1 בקש מהשחקן להזין את המרחק שהרכבת עברה.
    3.2 אם המרחק שהוזן שלילי, צא מהלולאה.
    3.3 חשב את המיקום החדש של הרכבת על ידי הוספת המרחק שהוזן למיקום הקודם וחישוב מודולו עם אורך המסלול (trackLength).
    3.4 הצג את מיקום הרכבת הנוכחי.
4.  סוף המשחק.
-----------------
תרשים זרימה:
```mermaid
flowchart TD
    Start["התחלה"] --> InitializeVariables["<p align='left'>אתחול משתנים:
    <code><b>
    trackLength = 100
    trainLocation = 0
    </b></code></p>"]
    InitializeVariables --> LoopStart{"תחילת לולאה: כל עוד מרחק לא שלילי"}
    LoopStart -- כן --> InputDistance["קלט מרחק מהמשתמש: <code><b>distance</b></code>"]
    InputDistance --> CheckNegative{"בדיקה: <code><b>distance < 0?</b></code>"}
    CheckNegative -- כן --> End["סוף"]
    CheckNegative -- לא --> CalculateLocation["<code><b>trainLocation = (trainLocation + distance) % trackLength</b></code>"]
    CalculateLocation --> OutputLocation["הצג מיקום רכבת: <code><b>trainLocation</b></code>"]
    OutputLocation --> LoopStart
    LoopStart -- לא --> End
```

Legenda:
    Start - התחלת התוכנית.
    InitializeVariables - אתחול משתנים: trackLength (אורך המסלול) מאותחל ל-100 ו-trainLocation (מיקום הרכבת) מאותחל ל-0.
    LoopStart - תחילת הלולאה, הממשיכה כל עוד המרחק שהוזן אינו שלילי.
    InputDistance - קלט מרחק מהמשתמש ושמירתו במשתנה distance.
    CheckNegative - בדיקה האם המרחק שהוזן שלילי.
    End - סוף התוכנית.
    CalculateLocation - חישוב מיקום הרכבת החדש על ידי הוספת המרחק שהוזן למיקום הקודם וחישוב מודולו עם אורך המסלול.
    OutputLocation - הצגת מיקום הרכבת הנוכחי.
"""
```python
# הגדרת אורך המסלול
trackLength = 100
# הגדרת מיקום הרכבת ההתחלתי
trainLocation = 0

# לולאה ראשית של המשחק
while True:
    # קבלת קלט מהמשתמש עבור המרחק שעברה הרכבת
    try:
        distance = int(input("הזן את המרחק שעברה הרכבת (מרחק שלילי לסיום): "))
    except ValueError:
        print("אנא הזן מספר שלם.")
        continue
    
    # בדיקה האם המרחק שלילי, אם כן - סיום המשחק
    if distance < 0:
        break
    
    # חישוב מיקום הרכבת החדש
    # שימוש במודולו כדי לשמור על מיקום הרכבת במסלול המעגלי
    trainLocation = (trainLocation + distance) % trackLength
    
    # הצגת מיקום הרכבת הנוכחי
    print("מיקום הרכבת:", trainLocation)

print("המשחק הסתיים.")
```
"""
הסבר הקוד:
1.  **הגדרת משתנים**:
    - `trackLength = 100`: הגדרת אורך המסלול ל-100.
    - `trainLocation = 0`: אתחול מיקום הרכבת ההתחלתי ל-0.
2.  **לולאת המשחק `while True:`**:
    - לולאה אינסופית, שתמשיך עד שהמשתמש יזין מרחק שלילי.
    - **קלט נתונים**:
        - `try...except ValueError`: בלוק try-except מטפל בשגיאות קלט אפשריות. אם המשתמש יזין משהו שאינו מספר שלם, תוצג הודעת שגיאה.
        - `distance = int(input("הזן את המרחק שעברה הרכבת (מרחק שלילי לסיום): "))`: בקשת מרחק מהמשתמש והמרתו למספר שלם, ושמירתו במשתנה `distance`.
    - **בדיקת סיום המשחק**:
        - `if distance < 0:`: בדיקה האם המרחק שהוזן שלילי.
        - `break`: סיום הלולאה (והמשחק) אם המרחק שלילי.
    - **חישוב מיקום הרכבת**:
        - `trainLocation = (trainLocation + distance) % trackLength`: חישוב מיקום הרכבת החדש. המיקום החדש מחושב על ידי הוספת המרחק שהוזן למיקום הקודם וחישוב מודולו עם אורך המסלול, כדי לדמות תנועה מעגלית.
    - **הצגת מיקום הרכבת**:
        - `print("מיקום הרכבת:", trainLocation)`: הצגת מיקום הרכבת הנוכחי.
3. **סיום המשחק**:
    - `print("המשחק הסתיים.")`: הודעה על סיום המשחק.
"""
