Как использовать модуль для преобразования HTML в PDF
==============================================================================================

Описание
-------------------------
Этот модуль `hypotez/src/utils/pdf.py` предоставляет инструменты для преобразования HTML-контента или файлов в PDF-документы. Он использует библиотеку `pdfkit` для конвертации и включает альтернативный метод с `FPDF` для работы с текстом. Модуль включает поиск корневой директории проекта и настройку пути к `wkhtmltopdf`.

Шаги выполнения
-------------------------
1. **Установка необходимых библиотек:** Убедитесь, что у вас установлены библиотеки `pdfkit`, `reportlab`, `fpdf` и `logger` (если она используется).  Если нет, используйте менеджер пакетов (например, `pip`) для их установки:
   ```bash
   pip install pdfkit reportlab fpdf
   ```
   
2. **Нахождение корневой директории проекта:**  Модуль автоматически ищет корневую директорию проекта, начиная с директории текущего файла.  Он ищет файлы `pyproject.toml`, `requirements.txt` и `.git` для определения корня.  Если эти файлы не найдены в родительских директориях,  корнем проекта будет директория, где находится файл `pdf.py`. Это важно для корректной работы `wkhtmltopdf`.

3. **Проверка существования `wkhtmltopdf`:**  Модуль проверяет, что `wkhtmltopdf.exe` (или соответствующий бинарник для вашей операционной системы) существует в заданном пути.  Если его нет, возникает ошибка, и программа останавливается.

4. **Инициализация настроек:** Модуль создаёт объект конфигурации `pdfkit.configuration`, передавая путь к `wkhtmltopdf`.  Также настраиваются дополнительные опции (например, `enable-local-file-access`).

5. **Вызов метода `save_pdf` для преобразования HTML в PDF:**  Метод `save_pdf` принимает два аргумента:
    - `data`: HTML-контент (строка) или путь к HTML-файлу (объект `Path` или строка).
    - `pdf_file`: Путь к выводимому PDF-файлу (объект `Path` или строка).

    Метод пытается сохранить HTML в PDF, используя `pdfkit`. Если преобразование успешно, возвращает `True`.  Если происходит ошибка (например, ошибка `pdfkit` или проблема с доступом к файлам), возвращается `False`, и выводятся соответствующие сообщения об ошибке.

6. **Вызов метода `save_pdf_v2` для преобразования текста в PDF:**  Метод `save_pdf_v2` принимает два аргумента:
    - `data`: Текст, который нужно добавить в PDF.
    - `pdf_file`: Путь к выводимому PDF-файлу.

    Метод использует библиотеку `FPDF` для создания PDF-файла с текстом.  Он добавляет текст в страницу, используя шрифт DejaVu, и сохраняет получившийся PDF в указанном файле.

7. **Обработка ошибок:** Модуль обрабатывает возможные ошибки (`pdfkit.PDFKitError`, `OSError`) во время преобразования, логируя ошибки и возвращая `False` при неудаче.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.utils.pdf import PDFUtils
    from pathlib import Path

    html_content = """
    <h1>Мой HTML-контент</h1>
    <p>Какой-то текст.</p>
    """

    html_file_path = Path("my_html_file.html")  # Путь к HTML-файлу
    html_file_path.write_text(html_content)

    pdf_file_path = Path("output.pdf")

    success = PDFUtils.save_pdf(html_content, pdf_file_path)
    if success:
        print("PDF успешно сохранен!")
    else:
        print("Ошибка при сохранении PDF.")

    success2 = PDFUtils.save_pdf_v2("Пример текста для PDF", "output_text.pdf")
    if success2:
        print("PDF отчет успешно сохранен.")