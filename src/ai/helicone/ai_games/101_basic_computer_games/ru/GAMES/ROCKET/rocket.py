"""
ROCKET:
=================
Сложность: 6
-----------------
Игра "Ракета" - это текстовая игра, в которой игрок пытается запустить ракету, вводя начальную скорость и угол наклона. 
Компьютер рассчитывает траекторию полета и сообщает, достигла ли ракета цели или нет. Игрок должен подобрать параметры запуска, чтобы достичь цели.

Правила игры:
1. Игроку предлагается ввести начальную скорость (VELOCITY) и угол наклона (ANGLE) для запуска ракеты.
2. Компьютер вычисляет дальность полета ракеты, используя заданные параметры и формулу.
3. Если дальность полета равна или превышает 1000, игра сообщает, что ракета достигла цели и сообщает дальность.
4. Если дальность полета меньше 1000, игра сообщает, что ракета не достигла цели, и также сообщает дальность.
5. Игра продолжается, пока игрок не захочет завершить игру, вводя отрицательную скорость.
-----------------
Алгоритм:
1. Начать игровой цикл.
2. Запросить у игрока начальную скорость (VELOCITY).
3. Если скорость отрицательная, завершить игру.
4. Запросить у игрока угол наклона (ANGLE).
5. Перевести угол наклона из градусов в радианы.
6. Вычислить дальность полета ракеты (DISTANCE) по формуле:
   `DISTANCE = (VELOCITY^2 * SIN(2 * угол в радианах)) / 32.2`
7. Вывести дальность полета ракеты.
8. Если дальность полета больше или равна 1000, вывести сообщение "GOOD SHOT"
9. Если дальность полета меньше 1000, вывести сообщение "SHORT SHOT"
10. Повторить шаги 2-9.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> LoopStart{"Начало игрового цикла"}
    LoopStart --> InputVelocity["Ввод начальной скорости: <code><b>velocity</b></code>"]
    InputVelocity --> CheckVelocity{"Проверка: <code><b>velocity < 0?</b></code>"}
    CheckVelocity -- Да --> End["Конец"]
    CheckVelocity -- Нет --> InputAngle["Ввод угла наклона: <code><b>angle</b></code>"]
    InputAngle --> ConvertAngle["Конвертация угла в радианы: <code><b>angleRadians = angle * PI / 180</b></code>"]
    ConvertAngle --> CalculateDistance["Вычисление дальности: <code><b>distance = (velocity^2 * sin(2 * angleRadians)) / 32.2</b></code>"]
    CalculateDistance --> OutputDistance["Вывод дальности полета: <code><b>distance</b></code>"]
    OutputDistance --> CheckDistance{"Проверка: <code><b>distance >= 1000?</b></code>"}
    CheckDistance -- Да --> OutputSuccess["Вывод сообщения: <b>GOOD SHOT</b>"]
    OutputSuccess --> LoopStart
    CheckDistance -- Нет --> OutputFailure["Вывод сообщения: <b>SHORT SHOT</b>"]
    OutputFailure --> LoopStart

```
Legenda:
    Start - Начало программы.
    LoopStart - Начало игрового цикла.
    InputVelocity - Запрос у пользователя ввода начальной скорости ракеты и сохранение в переменной velocity.
    CheckVelocity - Проверка, является ли введенная скорость отрицательной.
    End - Конец программы, если скорость отрицательная.
    InputAngle - Запрос у пользователя ввода угла наклона ракеты и сохранение в переменной angle.
    ConvertAngle - Конвертация угла наклона из градусов в радианы.
    CalculateDistance - Вычисление дальности полета ракеты по формуле.
    OutputDistance - Вывод на экран вычисленной дальности полета ракеты.
    CheckDistance - Проверка, достигла ли ракета цели (дальность полета >= 1000).
    OutputSuccess - Вывод сообщения "GOOD SHOT", если ракета достигла цели.
    OutputFailure - Вывод сообщения "SHORT SHOT", если ракета не достигла цели.
"""
import math

__author__ = 'hypo69 (hypo69@davidka.net)'
# Константа для ускорения свободного падения (в футах в секунду в квадрате)
GRAVITY = 32.2

# Начало игрового цикла
while True:
    try:
        # Запрос у пользователя начальной скорости
        velocity = float(input("Введите начальную скорость ракеты (футы/сек) (отрицательное значение для выхода): "))

        # Проверка, не хочет ли пользователь выйти из игры
        if velocity < 0:
            print("Игра завершена.")
            break # Если скорость отрицательная, то выходим из цикла

        # Запрос у пользователя угла наклона
        angle = float(input("Введите угол наклона (в градусах): "))

        # Преобразование угла из градусов в радианы
        angle_radians = math.radians(angle)

        # Вычисление дальности полета ракеты по формуле
        distance = (velocity**2 * math.sin(2 * angle_radians)) / GRAVITY

        # Вывод рассчитанной дальности
        print(f"Дальность полета ракеты: {distance:.2f} футов")

        # Проверка, достигла ли ракета цели
        if distance >= 1000:
            print("GOOD SHOT")
        else:
            print("SHORT SHOT")
    except ValueError:
        print("Ошибка ввода. Пожалуйста, введите числовое значение.")

"""
Объяснение кода:
1.  **Импорт модуля `math`**:
    -   `import math`: Импортирует модуль `math`, который предоставляет математические функции, такие как `sin`, `radians`.
2. **Константа `GRAVITY`**:
    -  `GRAVITY = 32.2`: Задает константу для ускорения свободного падения в футах в секунду в квадрате.
3. **Начало игрового цикла `while True:`**:
    - Бесконечный цикл, который позволяет игроку продолжать запускать ракеты до тех пор, пока он не введет отрицательную скорость.
4. **Блок `try...except`**:
   -  `try...except ValueError`: Этот блок используется для обработки возможных ошибок ввода пользователя. Если пользователь вводит не числовое значение (например, буквы), то программа не завершится с ошибкой, а выведет сообщение об ошибке.
5. **Ввод данных**:
   - `velocity = float(input("Введите начальную скорость ракеты (футы/сек) (отрицательное значение для выхода): "))`: Запрашивает у пользователя начальную скорость ракеты, преобразует ввод в число с плавающей точкой и сохраняет в переменную `velocity`.
   - `if velocity < 0`: Проверяет, не ввел ли пользователь отрицательную скорость, что сигнализирует о желании выйти из игры.
   - `print("Игра завершена.")`: Выводит сообщение о завершении игры.
   - `break`: Завершает цикл, если скорость отрицательная.
   - `angle = float(input("Введите угол наклона (в градусах): "))`: Запрашивает у пользователя угол наклона, преобразует ввод в число с плавающей точкой и сохраняет в переменную `angle`.
6. **Преобразование угла**:
    - `angle_radians = math.radians(angle)`: Преобразует угол из градусов в радианы, так как тригонометрические функции модуля `math` работают с радианами.
7. **Вычисление дальности полета**:
    - `distance = (velocity**2 * math.sin(2 * angle_radians)) / GRAVITY`: Вычисляет дальность полета ракеты, используя формулу, взятую из оригинальной программы на BASIC.
8. **Вывод результатов**:
    -  `print(f"Дальность полета ракеты: {distance:.2f} футов")`: Выводит рассчитанную дальность полета с двумя знаками после запятой.
9. **Проверка достижения цели**:
   - `if distance >= 1000`: Проверяет, достигла ли ракета цели (дальность 1000 футов и более).
   -  `print("GOOD SHOT")`: Выводит сообщение о том, что ракета достигла цели.
   - `else`: Если дальность полета меньше 1000 футов.
   -  `print("SHORT SHOT")`: Выводит сообщение о том, что ракета не достигла цели.
"""
