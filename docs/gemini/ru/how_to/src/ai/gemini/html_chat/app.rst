Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует веб-приложение чат-бота, использующего модель Kazarinov. Он позволяет пользователю задавать вопросы, а бот отвечает на них. Код обрабатывает запросы, получает ответы от модели, отображает их в веб-интерфейсе и открывает браузер для доступа к чату.

Шаги выполнения
-------------------------
1. **Инициализация:**
    - Импортируются необходимые библиотеки, включая `FastAPI`, `Jinja2Templates`, `StaticFiles`, `BaseModel`, модель `Kazarinov`, `random`, и другие.
    - Инициализируется приложение `FastAPI` и переменная `MODE`.
    - Настраиваются шаблоны Jinja2 и статические файлы (CSS).
    - Инициализируется модель `Kazarinov`.
    - Загружаются вопросы для чата из файла.
    - Определяется модель `Question` для данных из формы.

2. **Обработка запросов:**
    - `@app.get("/")` обрабатывает GET-запрос на главную страницу, рендеринг HTML-шаблона `chat.html` с пустым ответом.
    - `@app.post("/ask")` обрабатывает POST-запрос для отправки вопроса.
        - Считывает вопрос пользователя из `question: Question`.
        - Если вопрос "--next", то случайным образом выбирает вопрос из списка.
        - Отправляет вопрос модели `Kazarinov` с использованием метода `k.ask()`.
        - Возвращает рендер HTML-шаблона `chat.html` с полученным ответом.


3. **Открытие браузера:**
    - Функция `open_browser()` открывает браузер по адресу `http://127.0.0.1:8000`.
    - `threading.Timer` запускает функцию открытия браузера с задержкой в 1.5 секунды.

4. **Запуск приложения:**
    - Импортируется `uvicorn`.
    - Запускается приложение `uvicorn.run(app, host="127.0.0.1", port=8000)`  для запуска сервера.



Пример использования
-------------------------
.. code-block:: python

    # Пример использования в другом файле (например, для отправки вопроса)
    import requests
    from pydantic import BaseModel
    
    class Question(BaseModel):
        question: str
    
    async def ask_question(question_text):
        question_data = Question(question=question_text)
        async with requests.post("http://127.0.0.1:8000/ask", json=question_data.dict()) as response:
            if response.status_code == 200:
                response_data = await response.json()
                return response_data['response']
            else:
                return f"Ошибка: {response.status_code}"

    #Пример использования:
    async def main():
        answer = await ask_question("Какой сегодня день?")
        print(answer)

    if __name__ == "__main__":
        import asyncio
        asyncio.run(main())