"""
STOCK:
=================
Сложность: 5
-----------------
Игра "STOCK" - это симулятор биржевой торговли, в котором игрок пытается заработать деньги, покупая и продавая акции. 
Игра моделирует изменение цен на акции в течение нескольких "дней", и игрок должен принимать решения о покупке или продаже, чтобы получить прибыль. 
Цель игры - заработать как можно больше денег к концу моделируемого периода.

Правила игры:
1. В начале игры игрок получает 1000 долларов.
2.  Игра длится 20 "дней".
3.  В начале каждого дня цена акций меняется случайным образом (может как подняться, так и упасть на случайную величину).
4.  Игрок может купить любое количество акций в любой день, если у него достаточно денег.
5.  Игрок может продать любое количество акций в любой день.
6.  Игра заканчивается после 20 дней, и игрок узнает свой итоговый капитал.
-----------------
Алгоритм:
1.  Установить начальный капитал в 1000 долларов.
2.  Установить начальную цену акции в 10 долларов.
3.  Установить количество дней в 20.
4.  Начать цикл "для каждого дня":
    4.1 Сгенерировать случайное изменение цены акции (-1, 0 или +1).
    4.2 Применить изменение к цене акции.
    4.3 Вывести текущий день, цену акции и количество денег игрока.
    4.4 Запросить у игрока действие (покупка, продажа или ничего не делать).
    4.5 Если игрок покупает акции, запросить количество и вычесть стоимость из капитала.
    4.6 Если игрок продает акции, запросить количество и добавить стоимость к капиталу.
5.  Вывести итоговый капитал игрока.
6.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    cash = 1000
    stockPrice = 10
    days = 20
    stockOwned = 0
    currentDay = 1
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: для каждого дня<br><code><b>currentDay <= days</b></code>"}
     LoopStart -- Да -->  CalculatePriceChange["<p align='left'>Случайное изменение цены акции:
    <code><b>
     priceChange = random(-1, 1)
    </b></code></p>"]
    CalculatePriceChange --> UpdateStockPrice["<code><b>stockPrice = stockPrice + priceChange</b></code>"]
    UpdateStockPrice --> DisplayStatus["<p align='left'>Вывод статуса:
    <code><b>
    День, цена акции, наличные деньги
    </b></code></p>"]
    DisplayStatus --> GetAction["Запрос действия пользователя:<br><code><b>(Buy/Sell/None)</b></code>"]
    GetAction --> CheckAction{"Проверка действия:<br><code><b>Действие == 'Buy'?</b></code>"}
     CheckAction -- Да --> GetBuyAmount["Запросить количество акций для покупки"]
     GetBuyAmount --> CheckCashBuy{"<p align='left'>Проверка наличия денег:<br>
     <code><b>cash >= stockPrice * amount</b></code></p>"}
     CheckCashBuy -- Да --> PerformBuy["<code><b>
      stockOwned += amount
      cash -= stockPrice * amount
     </b></code>"]
     PerformBuy --> NextDay["<code><b>currentDay++</b></code>"]
     CheckCashBuy -- Нет --> DisplayNoCash["Вывод: <b>Недостаточно денег</b>"]
     DisplayNoCash --> NextDay
     CheckAction -- Нет -->  CheckSell{"Проверка действия:<br><code><b>Действие == 'Sell'?</b></code>"}
     CheckSell -- Да --> GetSellAmount["Запросить количество акций для продажи"]
     GetSellAmount --> CheckStockSell{"<p align='left'>Проверка наличия акций:<br>
     <code><b>stockOwned >= amount</b></code></p>"}
     CheckStockSell -- Да --> PerformSell["<code><b>
      stockOwned -= amount
      cash += stockPrice * amount
     </b></code>"]
     PerformSell --> NextDay
     CheckStockSell -- Нет --> DisplayNoStock["Вывод: <b>Нет акций для продажи</b>"]
     DisplayNoStock --> NextDay
    CheckSell -- Нет --> NextDay
    NextDay --> LoopStart
    LoopStart -- Нет --> DisplayFinalCash["Вывод: <b>Итоговый капитал</b>"]
    DisplayFinalCash --> End["Конец"]
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: cash (количество денег), stockPrice (цена акции), days (количество дней), stockOwned (количество акций), currentDay (текущий день).
    LoopStart - Начало цикла, который выполняется для каждого дня (пока currentDay <= days).
    CalculatePriceChange - Генерирует случайное изменение цены акции (-1, 0 или +1).
    UpdateStockPrice - Обновляет цену акции, применяя изменение цены.
    DisplayStatus - Выводит текущий день, цену акции и количество денег игрока.
    GetAction - Запрашивает у пользователя действие (купить, продать или ничего не делать).
    CheckAction - Проверяет, выбрал ли пользователь действие "Купить".
    GetBuyAmount - Запрашивает у пользователя количество акций для покупки.
    CheckCashBuy - Проверяет, достаточно ли у пользователя денег для покупки.
    PerformBuy - Выполняет покупку, обновляя количество акций и денег пользователя.
    DisplayNoCash - Выводит сообщение, что у пользователя недостаточно денег для покупки.
    CheckSell - Проверяет, выбрал ли пользователь действие "Продать".
     GetSellAmount - Запрашивает у пользователя количество акций для продажи.
    CheckStockSell - Проверяет, достаточно ли у пользователя акций для продажи.
    PerformSell - Выполняет продажу, обновляя количество акций и денег пользователя.
    DisplayNoStock - Выводит сообщение, что у пользователя недостаточно акций для продажи.
     NextDay - Увеличивает значение текущего дня currentDay.
    DisplayFinalCash - Выводит итоговый капитал игрока.
    End - Конец программы.
"""
import random

# Инициализация начальных переменных
cash = 1000  # Начальный капитал игрока
stockPrice = 10  # Начальная цена акции
days = 20  # Количество дней торговли
stockOwned = 0 # Количество акций в собственности
currentDay = 1  # Начальный день

# Игровой цикл, продолжается пока не пройдёт заданное количество дней
while currentDay <= days:
    # Генерируем случайное изменение цены (-1, 0, или 1)
    priceChange = random.randint(-1, 1)
    # Обновляем цену акции
    stockPrice += priceChange
    # Выводим статус текущего дня
    print(f"День {currentDay}, Цена акции: {stockPrice}, Наличные: {cash}")

    # Запрашиваем действие пользователя
    action = input("Купить (B), Продать (S), Ничего (N)? ").upper()

    # Обрабатываем действие пользователя
    if action == "B": #если пользователь ввел B - покупаем акции
        try: # Обрабатываем возможную ошибку ввода, если пользователь введет не число
            amount = int(input("Сколько акций купить? ")) # Запрашиваем количество акций для покупки
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue # Если ввод некорректен, начинаем новый цикл
        if cash >= stockPrice * amount:  # Проверяем, достаточно ли денег у пользователя
            stockOwned += amount # Увеличиваем количество акций у пользователя
            cash -= stockPrice * amount  # Вычитаем стоимость купленных акций из капитала
        else:
            print("Недостаточно денег.")
    elif action == "S": # если пользователь ввел S - продаем акции
        try: # Обрабатываем возможную ошибку ввода, если пользователь введет не число
            amount = int(input("Сколько акций продать? "))# Запрашиваем количество акций для продажи
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue # Если ввод некорректен, начинаем новый цикл
        if stockOwned >= amount:  # Проверяем, есть ли у пользователя достаточное количество акций
            stockOwned -= amount  # Уменьшаем количество акций у пользователя
            cash += stockPrice * amount  # Добавляем стоимость проданных акций к капиталу
        else:
            print("Нет достаточного количества акций для продажи.")

    currentDay += 1  # Переходим к следующему дню

# Выводим итоговый капитал
print(f"Игра окончена. Ваш итоговый капитал: {cash}")
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -   `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Инициализация переменных**:
   -   `cash = 1000`: Устанавливает начальную сумму денег игрока в 1000 долларов.
   -   `stockPrice = 10`: Устанавливает начальную цену акции в 10 долларов.
   -   `days = 20`: Устанавливает количество дней торговли в 20.
   -   `stockOwned = 0`: Устанавливает начальное количество акций, принадлежащих игроку, в 0.
   -   `currentDay = 1`: Устанавливает текущий день на 1.
3.  **Основной игровой цикл (`while currentDay <= days`):**
   -   Цикл выполняется, пока текущий день меньше или равен общему количеству дней торговли.
   -   **Генерация случайного изменения цены**:
      -   `priceChange = random.randint(-1, 1)`: Генерирует случайное изменение цены акции (может быть -1, 0 или 1).
   -   **Обновление цены акции**:
      -   `stockPrice += priceChange`: Обновляет цену акции, добавляя сгенерированное изменение.
   -   **Вывод статуса**:
      -   `print(f"День {currentDay}, Цена акции: {stockPrice}, Наличные: {cash}")`: Выводит текущий день, цену акции и количество денег игрока.
   -   **Запрос действия пользователя**:
      -   `action = input("Купить (B), Продать (S), Ничего (N)? ").upper()`: Запрашивает у пользователя, какое действие он хочет выполнить (купить, продать или ничего не делать), и приводит ввод к верхнему регистру.
   -   **Обработка действия пользователя**:
      -   `if action == "B":`: Если пользователь выбрал покупку акций.
         -   `try...except ValueError`: Блок обработки ошибок, если пользователь введет не число
         -   `amount = int(input("Сколько акций купить? "))`: Запрашивает количество акций для покупки.
         -   `if cash >= stockPrice * amount`: Проверяет, достаточно ли у игрока денег для покупки.
            -   `stockOwned += amount`: Увеличивает количество акций игрока.
            -   `cash -= stockPrice * amount`: Снимает стоимость купленных акций с баланса игрока.
         -   `else`: Если денег недостаточно, выводит сообщение об этом.
      -  `elif action == "S":`: Если пользователь выбрал продажу акций.
          -   `try...except ValueError`: Блок обработки ошибок, если пользователь введет не число
          -   `amount = int(input("Сколько акций продать? "))`: Запрашивает количество акций для продажи.
          -   `if stockOwned >= amount`: Проверяет, есть ли у игрока достаточно акций для продажи.
             -  `stockOwned -= amount`: Уменьшает количество акций игрока.
             -  `cash += stockPrice * amount`: Добавляет стоимость проданных акций к балансу игрока.
          -   `else`: Если у игрока нет достаточного количества акций, выводит сообщение об этом.
   -   **Увеличение дня**:
       -   `currentDay += 1`: Увеличивает текущий день на 1 для перехода к следующему дню торговли.
4.  **Вывод итогового капитала**:
   -   `print(f"Игра окончена. Ваш итоговый капитал: {cash}")`: Выводит итоговую сумму денег игрока после завершения всех дней торговли.
"""
```