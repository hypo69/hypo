"""
HMRABI:
=================
Сложность: 5
-----------------
Игра "Хамурапи" - это экономическая текстовая игра, в которой игрок выступает в роли правителя древнего города. Игроку нужно управлять ресурсами, такими как население, количество акров земли и запасы зерна.
Игрок принимает решения о покупке и продаже земли, а также распределяет зерно для посева и пропитания населения.
Цель игры - продержаться 10 лет, сохраняя баланс между ресурсами и избегая голода или перенаселения.
Игра моделирует экономические условия и последствия решений игрока.

Правила игры:
1. Игрок начинает с 100 жителями, 1000 акров земли и 2800 бушелей зерна.
2. Игроку нужно принимать решения о следующем:
   - Сколько акров земли купить или продать.
   - Сколько зерна использовать для посева.
   - Сколько зерна отдать на пропитание жителей.
3.  Если у игрока недостаточно зерна для пропитания, часть населения умирает от голода.
4.  Урожайность земли зависит от случайного фактора.
5.  Игра продолжается в течение 10 лет.
6.  В конце каждого года игра выводит статистику о состоянии города.
7.  Игра заканчивается, если население умирает от голода, либо по истечении 10 лет.
-----------------
Алгоритм:
1. Инициализировать переменные:
    - Год = 1
    - Население = 100
    - Акров земли = 1000
    - Запас зерна = 2800
    - Урожайность с акра = случайное число от 1 до 5
2. Начать цикл "пока год меньше или равен 10":
    2.1 Вывести на экран текущий год и ресурсы города.
    2.2 Запросить у игрока сколько акров земли купить или продать.
    2.3 Обновить количество акров земли и запасы зерна, в зависимости от действий игрока.
    2.4 Запросить у игрока, сколько зерна посеять.
    2.5 Запросить у игрока, сколько зерна отдать на пропитание населения.
    2.6 Вычислить новый урожай: урожай = посеянное зерно * случайная урожайность с акра.
    2.7 Вычислить сколько людей умерло от голода: умерло = (количество жителей * 20) - количество еды.
    2.8 Обновить количество населения.
    2.9 Обновить запас зерна:  зерно = зерно - посеяно + урожай - съедено
    2.10 Если население стало меньше 0, то вывести сообщение "вы проиграли от голода", завершить программу
    2.11 Если год = 10, то вывести сообщение "вы выиграли", завершить программу.
    2.12 Обновить год.
    2.13 Если наступил год 10, и население > 0, то вывести сообщение "вы выиграли", завершить программу
3. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["Инициализация:<br><code>year = 1<br>population = 100<br>acres = 1000<br>grain = 2800<br>yield = random(1, 5)</code>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока <code>year <= 10</code>"}
    LoopStart -- Да --> DisplayStatus["Вывод статуса города"]
    DisplayStatus --> InputLand["Ввод: <code>landToBuySell</code>"]
    InputLand --> UpdateLandGrain["Обновление: <code>acres, grain</code>"]
    UpdateLandGrain --> InputSeed["Ввод: <code>grainToSeed</code>"]
    InputSeed --> InputFeed["Ввод: <code>grainToFeed</code>"]
    InputFeed --> CalculateHarvest["Расчёт:<br><code>harvest = grainToSeed * yield<br>starved = population * 20 - grainToFeed</code>"]
     CalculateHarvest --> UpdatePopulationGrain["Обновление:<br><code>population, grain</code>"]
    UpdatePopulationGrain --> CheckPopulation{"Проверка: <code>population <= 0</code>"}
   CheckPopulation -- Да --> OutputLose["Вывод: <b>'Вы проиграли от голода'</b>"]
    OutputLose --> End["Конец"]
    CheckPopulation -- Нет --> CheckYear{"Проверка: <code>year == 10</code>"}
    CheckYear -- Да --> CheckPopulationWin{"Проверка: <code>population > 0</code>"}
    CheckPopulationWin -- Да --> OutputWin["Вывод: <b>'Вы выиграли!'</b>"]
    OutputWin --> End
    CheckPopulationWin -- Нет --> UpdateYear["Обновление: <code>year = year + 1</code>"]
        UpdateYear --> LoopStart
    CheckYear -- Нет --> UpdateYear
     LoopStart -- Нет --> End
```
Legenda:
    Start - Начало игры.
    InitializeVariables - Инициализация начальных значений переменных: год (year), население (population), количество акров земли (acres) и запасы зерна (grain).
    LoopStart - Начало цикла, который выполняется, пока год меньше или равен 10.
    DisplayStatus - Вывод текущего состояния города: год, население, количество акров земли и запасы зерна.
    InputLand - Запрос у пользователя количества акров земли, которые нужно купить или продать (landToBuySell).
    UpdateLandGrain - Обновление количества акров земли и запасов зерна в соответствии с действиями игрока.
    InputSeed - Запрос у пользователя количества зерна, которое нужно посеять (grainToSeed).
    InputFeed - Запрос у пользователя количества зерна, которое нужно отдать на пропитание населения (grainToFeed).
    CalculateHarvest - Расчет нового урожая (harvest) и количества умерших от голода (starved).
    UpdatePopulationGrain - Обновление количества населения и запасов зерна.
    CheckPopulation - Проверка, не умерло ли все население от голода.
    OutputLose - Вывод сообщения о проигрыше, если население умерло от голода.
    End - Конец игры.
    CheckYear - Проверка, не наступил ли 10 год.
    CheckPopulationWin - Проверка, осталось ли население > 0, если наступил 10 год.
    OutputWin - Вывод сообщения о выигрыше, если наступил 10 год и население > 0
    UpdateYear - Увеличение значения года на 1.
"""
import random

# Инициализация начальных значений
year = 1 # текущий год
population = 100 # начальное население
acres = 1000 # количество акров земли
grain = 2800 # запас зерна

# Основной игровой цикл
while year <= 10:
    print(f"\n--- Год {year} ---")
    print(f"Население: {population}")
    print(f"Акров земли: {acres}")
    print(f"Запасы зерна: {grain}")

    # Ввод данных по покупке/продаже земли
    while True:
        try:
            landToBuySell = int(input("Сколько акров земли купить или продать? (+/-): "))
            break
        except ValueError:
            print("Пожалуйста, введите целое число.")
    # Обновление запасов и акров
    if landToBuySell > 0:
        if grain >= landToBuySell * 20:
            acres += landToBuySell
            grain -= landToBuySell * 20
        else:
            print("Недостаточно зерна для покупки земли.")
    elif landToBuySell < 0:
        if acres >= abs(landToBuySell):
            acres += landToBuySell
            grain += abs(landToBuySell) * 10
        else:
            print("Недостаточно земли для продажи.")
    
    # Ввод данных о количестве зерна для посева
    while True:
        try:
             grainToSeed = int(input("Сколько зерна посеять?: "))
             break
        except ValueError:
            print("Пожалуйста, введите целое число.")

    # Ввод данных о количестве зерна для пропитания
    while True:
        try:
           grainToFeed = int(input("Сколько зерна отдать на пропитание?: "))
           break
        except ValueError:
            print("Пожалуйста, введите целое число.")


    # Расчет урожая и голода
    yieldPerAcre = random.randint(1, 5) # Случайная урожайность с акра
    harvest = grainToSeed * yieldPerAcre # урожай
    starved = population * 20 - grainToFeed # сколько зерна нужно на пропитание

    # Обновление населения и запасов зерна
    if starved > 0:
        population -= starved // 20
    grain = grain - grainToSeed + harvest - grainToFeed
    if population <= 0:
        print("Вы проиграли от голода. Все население вымерло.")
        break
    
    if year == 10 and population > 0:
        print("Вы выиграли, правили городом 10 лет.")
        break

    year += 1
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль для генерации случайных чисел.
2.  **Инициализация переменных**:
    -   `year = 1`: Инициализирует текущий год.
    -   `population = 100`: Инициализирует начальное количество населения.
    -   `acres = 1000`: Инициализирует начальное количество акров земли.
    -   `grain = 2800`: Инициализирует начальное количество зерна.
3.  **Основной игровой цикл `while year <= 10:`**:
    -   Цикл выполняется, пока год не превысит 10.
    -   **Вывод текущего состояния**:
        -   Выводит текущий год, население, количество акров земли и запасы зерна.
    -  **Ввод данных по покупке/продаже земли**:
       -  Запрашивает у пользователя, сколько акров земли он хочет купить или продать (положительное значение для покупки, отрицательное для продажи).
       -  Обрабатывает ошибку ввода, если пользователь вводит не целое число.
    -  **Обновление акров и зерна**:
       - Если игрок покупает землю, проверяется достаточно ли у него зерна для покупки
       - если игрок продает землю, то проверяется достаточно ли у него земли
    -  **Ввод данных по зерну для посева**:
       - Запрашивает у пользователя, сколько зерна он хочет посеять.
       -  Обрабатывает ошибку ввода, если пользователь вводит не целое число.
    -  **Ввод данных по зерну для пропитания**:
        -  Запрашивает у пользователя, сколько зерна он хочет отдать на пропитание населения.
        -  Обрабатывает ошибку ввода, если пользователь вводит не целое число.
    -   **Расчет урожая и голода**:
        -   `yieldPerAcre = random.randint(1, 5)`: Генерирует случайное значение урожайности с акра.
        -   `harvest = grainToSeed * yieldPerAcre`: Вычисляет урожай в зависимости от посеянного зерна.
        -   `starved = population * 20 - grainToFeed`: Вычисляет, сколько людей умрет от голода (в зависимости от соотношения населения к количеству еды).
    -   **Обновление населения и запасов зерна**:
        -  Если есть умершие, то из популяции вычитается количество умерших.
        -   `grain = grain - grainToSeed + harvest - grainToFeed`: Обновляет запасы зерна (вычитая посеянное, прибавляя урожай и вычитая кормление).
    -   **Проверка на проигрыш**:
        -   Если население <= 0, выводится сообщение о проигрыше, и игра заканчивается.
    -  **Проверка на выигрыш**:
        -  Если год равен 10 и население больше 0, то выводиться сообщение о победе и игра заканчивается
    -  **Увеличение года**:
        -  Увеличивает год на 1
"""
```