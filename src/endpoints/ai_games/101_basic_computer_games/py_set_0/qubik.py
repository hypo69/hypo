"""
<QUBIK>:
=================
Сложность: 3
-----------------
Qubik - это игра, в которой игрок пытается угадать секретное число, сгенерированное компьютером. 
Число состоит из трех цифр, каждая из которых должна быть уникальной. 
После каждой попытки игрок получает подсказку в виде количества правильно угаданных цифр на своих местах (BULLS) и количества правильно угаданных цифр не на своих местах (COWS).
Игра продолжается до тех пор, пока игрок не угадает число.
Правила игры:
-----------------
1. Компьютер генерирует случайное трехзначное число, где каждая цифра уникальна.
2. Игрок вводит трехзначное число в качестве попытки угадать.
3. Компьютер сравнивает введенное число с секретным числом.
4. Компьютер сообщает количество "BULLS" (цифр на правильных местах) и "COWS" (цифр, присутствующих в числе, но не на правильных местах).
5. Игрок повторяет шаги 2-4 до тех пор, пока не угадает число.
Алгоритм:
-----------------
1. Начало игры (Start).
2. Генерация случайного трехзначного числа, где каждая цифра уникальна (GenerateSecretNumber).
3. Вывод приветственного сообщения и запроса на ввод числа (Output).
4. Игрок вводит трехзначное число (Input).
5. Проверка корректности ввода (CheckInput). Если ввод некорректен, вернуться к шагу 3.
6. Сравнение введенного числа с загаданным числом, подсчет "BULLS" и "COWS" (CompareNumbers).
7. Вывод количества "BULLS" и "COWS" (Output).
8. Проверка, угадано ли число (CheckWin). Если угадано, перейти к шагу 9, иначе вернуться к шагу 3.
9. Вывод сообщения о победе (Output).
10. Конец игры (End).
-----------------
Блок-схема: 
```mermaid
graph TD
    Start(Start) --> GenerateSecretNumber(Generate Secret Number);
    GenerateSecretNumber --> OutputGreeting(Output Greeting and Prompt);
    OutputGreeting --> InputGuess(Input Guess);
    InputGuess --> CheckInput(Check Input);
    CheckInput -- Invalid Input --> OutputGreeting;
    CheckInput -- Valid Input --> CompareNumbers(Compare Numbers);
    CompareNumbers --> OutputBullsAndCows(Output Bulls and Cows);
    OutputBullsAndCows --> CheckWin(Check Win);
    CheckWin -- Not Win --> OutputGreeting;
    CheckWin -- Win --> OutputWin(Output Win Message);
    OutputWin --> End(End);
```
"""
import random

def generate_secret_number():
    """Генерирует случайное трехзначное число с уникальными цифрами."""
    digits = list(range(10)) # Список цифр от 0 до 9
    random.shuffle(digits)  # Перемешивание цифр
    secret_number = digits[0] * 100 + digits[1] * 10 + digits[2]  # Формирование числа
    return secret_number


def check_input(guess):
    """Проверяет, является ли введенное число трехзначным и имеет ли оно уникальные цифры."""
    if not isinstance(guess, int):
        return False
    if guess < 100 or guess > 999:
        return False
    digits = [int(d) for d in str(guess)]
    if len(set(digits)) != 3:
         return False
    return True



def compare_numbers(secret, guess):
    """Сравнивает введенное число с секретным числом и возвращает количество 'BULLS' и 'COWS'."""
    secret_str = str(secret) # Преобразуем число в строку для удобства сравнения
    guess_str = str(guess)
    bulls = 0  # Инициализируем количество "быков"
    cows = 0  # Инициализируем количество "коров"

    for i in range(3): # Перебираем каждый разряд
        if secret_str[i] == guess_str[i]: # Если цифра совпадает и на том же месте то "бык"
            bulls += 1
        elif guess_str[i] in secret_str: # Если цифра совпадает, но не на своем месте то "корова"
            cows += 1
    return bulls, cows


def play_qubik():
    """Основная функция игры Qubik."""
    print("Добро пожаловать в игру Qubik!")
    secret_number = generate_secret_number() # Генерируем секретное число
    while True:
        try:
            guess = int(input("Введите трехзначное число с уникальными цифрами: ")) # Запрос на ввод числа от игрока
            if not check_input(guess):
                print("Некорректный ввод. Пожалуйста, введите трехзначное число с уникальными цифрами.")
                continue

            bulls, cows = compare_numbers(secret_number, guess) # Вызываем функцию сравнения, получаем "быков" и "коров"
            print(f"BULLS: {bulls}, COWS: {cows}") # Вывод результата
            if bulls == 3: # Если три "быка" то победа
                print("Поздравляю! Вы угадали число!")
                break
        except ValueError: # Если ввели не число
            print("Некорректный ввод. Пожалуйста, введите число.")

if __name__ == "__main__":
    play_qubik() # Запускаем игру

"""
Пояснения:
================
1. **`generate_secret_number()`**:
    - Создает список цифр от 0 до 9.
    - Перемешивает цифры случайным образом.
    - Формирует трехзначное число из первых трех цифр списка.
    - Возвращает секретное число.

2.  **`check_input(guess)`**:
    - Принимает на вход `guess` - число, введенное пользователем.
    - Проверяет, является ли `guess` целым числом и находится ли в диапазоне от 100 до 999.
    - Преобразует число в строку и далее в список цифр, где каждая цифра - отдельный элемент списка.
    - Проверяет, что в списке нет повторяющихся цифр, сравнивая длину списка с длиной множества (set) из этих цифр.
    - Возвращает `True`, если ввод корректный, и `False` в противном случае.

3.  **`compare_numbers(secret, guess)`**:
    - Принимает на вход секретное число `secret` и введенное число `guess`.
    - Преобразует оба числа в строки для посимвольного сравнения.
    - Инициализирует счетчики `bulls` и `cows` нулями.
    - Проходит по каждому разряду числа (от 0 до 2).
    - Если цифра на i-м месте в `secret` и `guess` совпадают, то увеличивает `bulls`.
    - Если цифра на i-м месте в `guess` есть в `secret`, но не на своем месте, то увеличивает `cows`.
    - Возвращает количество `bulls` и `cows`.

4.  **`play_qubik()`**:
    - Выводит приветствие.
    - Генерирует секретное число с помощью `generate_secret_number()`.
    - В бесконечном цикле:
        - Запрашивает у пользователя ввод трехзначного числа.
        - Если ввод корректен вызывает функцию сравнения чисел.
        - Выводит количество `bulls` и `cows`.
        - Если `bulls` равно 3, то выводит сообщение о победе и заканчивает игру.
        - Если ввод не корректен, то выводит сообщение об ошибке.
        - Если введено не число, то выводит сообщение об ошибке.
    
5.  **`if __name__ == "__main__":`**:
    - Проверяет, что скрипт запущен как основная программа, а не как модуль.
    - Вызывает функцию `play_qubik()`, чтобы начать игру.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```