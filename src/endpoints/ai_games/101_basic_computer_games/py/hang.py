"""
HANG:
=================
Сложность: 7
-----------------
Игра "Виселица" - это словесная игра, в которой один игрок (компьютер в данном случае) выбирает секретное слово, а второй игрок (пользователь) пытается угадать это слово, называя буквы. За каждую неправильную попытку игрок приближается к "виселице" (в данном случае количество ошибок ограничено). Цель игры - угадать слово до того, как будет сделано максимальное количество ошибок.

Правила игры:
1.  Компьютер выбирает случайное слово из заданного списка.
2.  Игроку показывается слово, в котором буквы заменены на дефисы (-).
3.  Игрок пытается угадать слово, вводя по одной букве.
4.  Если буква присутствует в слове, она открывается в соответствующей позиции.
5.  Если буквы в слове нет, то количество ошибок увеличивается.
6.  Игра продолжается до тех пор, пока игрок не угадает слово или не исчерпает количество попыток.
-----------------
Алгоритм:
1. Установить количество попыток на 0.
2. Выбрать случайное слово из списка слов.
3. Создать строку-маску, состоящую из дефисов, длина которой равна длине загаданного слова.
4. Начать игровой цикл "пока слово не угадано и количество попыток меньше 6":
    4.1 Вывести на экран маску слова и количество оставшихся попыток.
    4.2 Запросить у игрока ввод буквы.
    4.3 Если введенная буква есть в загаданном слове:
        4.3.1 Обновить маску слова, заменив дефисы на угаданную букву в соответствующих позициях.
        4.3.2 Если маска слова совпадает с загаданным словом, перейти к шагу 5.
    4.4 Если введенной буквы нет в загаданном слове:
         4.4.1 Увеличить количество ошибок на 1.
5. Если слово угадано:
    5.1 Вывести сообщение о победе и загаданное слово.
6. Если попытки закончились:
    6.1 Вывести сообщение о проигрыше и загаданное слово.
7. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    incorrectGuesses = 0
    maxIncorrectGuesses = 6
    wordList = ['python', 'java', 'ruby'...]
    targetWord = random_word(wordList)
    maskedWord = '-' * length(targetWord)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано и попытки есть"}
    LoopStart -- Да --> OutputWordAndGuesses["Вывод: <code><b>maskedWord, guesses_left</b></code>"]
    OutputWordAndGuesses --> InputLetter["Ввод буквы пользователем: <code><b>userLetter</b></code>"]
    InputLetter --> CheckLetter{"Проверка: <code><b>userLetter in targetWord?</b></code>"}
    CheckLetter -- Да --> UpdateMaskedWord["Обновить маску: <code><b>maskedWord</b></code>"]
    UpdateMaskedWord --> CheckWin{"Проверка: <code><b>maskedWord == targetWord?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод: <b>YOU GOT IT!</b>, <code><b>targetWord</b></code>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    CheckLetter -- Нет --> IncreaseIncorrectGuesses["<code><b>incorrectGuesses = incorrectGuesses + 1</b></code>"]
    IncreaseIncorrectGuesses --> CheckGuessesLeft{"Проверка: <code><b>incorrectGuesses < maxIncorrectGuesses?</b></code>"}
    CheckGuessesLeft -- Да --> LoopStart
    CheckGuessesLeft -- Нет --> OutputLose["Вывод: <b>YOU LOST!</b>, <code><b>targetWord</b></code>"]
    OutputLose --> End
    LoopStart -- Нет --> OutputLose
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: incorrectGuesses (количество неверных попыток) устанавливается в 0, maxIncorrectGuesses (максимальное количество неверных попыток) в 6, выбирается случайное слово из wordList, создается maskedWord (маска слова) из дефисов.
    LoopStart - Начало цикла, который продолжается, пока слово не угадано и есть попытки.
    OutputWordAndGuesses - Вывод на экран текущей маски слова и количества оставшихся попыток.
    InputLetter - Запрос у пользователя ввода буквы.
    CheckLetter - Проверка, есть ли введенная буква в загаданном слове.
    UpdateMaskedWord - Обновление маски слова, заменяя дефисы на угаданные буквы.
    CheckWin - Проверка, угадано ли слово полностью (маска совпадает с загаданным словом).
    OutputWin - Вывод сообщения о победе и загаданного слова.
    End - Конец программы.
    IncreaseIncorrectGuesses - Увеличение количества неверных попыток на 1.
    CheckGuessesLeft - Проверка, остались ли еще попытки (не превышено ли максимальное количество неверных попыток).
    OutputLose - Вывод сообщения о проигрыше и загаданного слова.
"""
import random

# Список слов для игры
wordList = ["питон", "программа", "игра", "компьютер", "алгоритм", "цикл", "функция"]

# Выбираем случайное слово из списка
targetWord = random.choice(wordList)
# Создаем маску слова, состоящую из дефисов
maskedWord = ["-" for _ in targetWord]
# Количество ошибок
incorrectGuesses = 0
# Максимальное количество ошибок
maxIncorrectGuesses = 6

# Основной игровой цикл
while incorrectGuesses < maxIncorrectGuesses and "-" in maskedWord:
    # Выводим текущее состояние маски слова и количество оставшихся попыток
    print(" ".join(maskedWord))
    print(f"Осталось попыток: {maxIncorrectGuesses - incorrectGuesses}")
    # Запрашиваем у пользователя ввод буквы
    userLetter = input("Введите букву: ").lower()

    # Проверяем, есть ли введенная буква в загаданном слове
    if userLetter in targetWord:
        # Обновляем маску слова, если буква есть в слове
        for i in range(len(targetWord)):
            if targetWord[i] == userLetter:
                maskedWord[i] = userLetter
    else:
        # Увеличиваем количество ошибок, если буквы нет в слове
        incorrectGuesses += 1
        print("Неверная буква!")

# Проверяем, выиграл или проиграл игрок
if "-" not in maskedWord:
    print("ПОЗДРАВЛЯЮ! Вы угадали слово:", targetWord)
else:
    print("ВЫ ПРОИГРАЛИ! Загаданное слово было:", targetWord)

"""
Пояснения:
1.  **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, который используется для выбора случайного слова.
2.  **Список слов `wordList`**:
    - `wordList = ["питон", "программа", "игра", "компьютер", "алгоритм", "цикл", "функция"]`: Список слов, из которых компьютер выбирает случайное слово для игры.
3.  **Инициализация переменных**:
    - `targetWord = random.choice(wordList)`: Случайным образом выбирает слово из списка `wordList` и сохраняет его в переменной `targetWord`.
    - `maskedWord = ["-" for _ in targetWord]`: Создает список `maskedWord`, представляющий собой маску слова, в котором все буквы заменены на "-". Длина списка равна длине `targetWord`.
    - `incorrectGuesses = 0`: Инициализирует переменную `incorrectGuesses` для подсчета количества неправильных попыток.
    - `maxIncorrectGuesses = 6`: Устанавливает максимальное количество неправильных попыток.
4.  **Основной цикл `while`**:
    - `while incorrectGuesses < maxIncorrectGuesses and "-" in maskedWord:`: Цикл выполняется до тех пор, пока не будут исчерпаны все попытки (incorrectGuesses < maxIncorrectGuesses) И пока в maskedWord есть символы "-", то есть слово не угадано.
    -   **Вывод состояния игры**:
        - `print(" ".join(maskedWord))`: Выводит текущую маску слова (например, "п - т - н").
        - `print(f"Осталось попыток: {maxIncorrectGuesses - incorrectGuesses}")`: Выводит количество оставшихся попыток.
    -   **Ввод буквы**:
        - `userLetter = input("Введите букву: ").lower()`: Запрашивает у пользователя ввод буквы и преобразует ее в нижний регистр.
    -   **Проверка буквы**:
        - `if userLetter in targetWord:`: Проверяет, есть ли введенная буква в загаданном слове.
            -   **Обновление маски**:
            -   `for i in range(len(targetWord)): if targetWord[i] == userLetter: maskedWord[i] = userLetter`: Проходит по всем буквам загаданного слова и, если находит совпадение с введенной буквой, обновляет маску слова.
        - `else`: Если введенной буквы нет в слове:
           - `incorrectGuesses += 1`: Увеличивает счетчик неправильных попыток.
           - `print("Неверная буква!")`: Выводит сообщение о неверной букве.
5.  **Проверка результата**:
    - `if "-" not in maskedWord:`: Если в маске слова больше нет "-", значит, слово угадано.
    -   `print("ПОЗДРАВЛЯЮ! Вы угадали слово:", targetWord)`: Выводит сообщение о победе и загаданное слово.
    - `else:`: Если цикл закончился, но маска не заполнена, значит, игрок проиграл.
    - `print("ВЫ ПРОИГРАЛИ! Загаданное слово было:", targetWord)`: Выводит сообщение о проигрыше и загаданное слово.
"""
```