"""
<BULL>:
=================
Сложность: 4
-----------------
Игра "BULL" - это числовая логическая игра, в которой компьютер генерирует случайное четырехзначное число, где все цифры разные, а игрок пытается угадать это число. После каждой попытки компьютер сообщает количество "быков" (цифра угадана и находится на правильном месте) и "коров" (цифра угадана, но находится на неправильном месте).

Правила игры:
1. Компьютер генерирует случайное четырехзначное число, все цифры которого различны.
2. Игрок делает попытки угадать число, вводя свои четырехзначные числа.
3. После каждой попытки компьютер выводит количество "быков" и "коров".
   - "Бык" - это цифра, которая угадана и находится на правильной позиции.
   - "Корова" - это цифра, которая угадана, но находится на неправильной позиции.
4. Игра продолжается до тех пор, пока игрок не угадает число (т.е. получит 4 "быка").
-----------------
Алгоритм:
1. Сгенерировать случайное четырехзначное число с различными цифрами.
2. Начать цикл "пока количество быков не равно 4":
   2.1 Запросить у игрока ввод четырехзначного числа.
   2.2 Проверить введенное число на корректность (4 цифры).
   2.3 Инициализировать счетчики быков и коров в 0.
   2.4 Для каждой цифры введенного числа:
        2.4.1 Если цифра совпадает с цифрой в загаданном числе на той же позиции, увеличить счетчик быков.
        2.4.2 Иначе, если цифра присутствует в загаданном числе на другой позиции, увеличить счетчик коров.
   2.5 Вывести количество быков и коров.
3. Вывести сообщение о победе.
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateTargetNumber["<p align='left'>Сгенерировать случайное 4-значное число с разными цифрами:
    <code><b>targetNumber</b></code></p>"]
    GenerateTargetNumber --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> ValidateGuess["Проверка: <code><b>len(userGuess) == 4?</b></code>"]
     ValidateGuess -- Нет --> OutputInvalid["Вывод сообщения: <b>INVALID NUMBER</b>"]
     OutputInvalid --> LoopStart
    ValidateGuess -- Да --> InitializeCounts["<p align='left'>Инициализация счетчиков:
    <code><b>
    bulls = 0
    cows = 0
    </b></code></p>"]
    InitializeCounts --> CheckDigits{"Цикл по цифрам <code><b>userGuess</b></code>"}
    CheckDigits --> CheckBull{"Проверка: цифра <code><b>userGuess[i]</b></code> == <code><b>targetNumber[i]</b></code>"}
    CheckBull -- Да --> IncreaseBulls["<code><b>bulls = bulls + 1</b></code>"]
        IncreaseBulls --> CheckNextDigit["Следующая цифра?"]
    CheckBull -- Нет --> CheckCow{"Проверка: <code><b>userGuess[i]</b></code> в <code><b>targetNumber</b></code>?"}
    CheckCow -- Да --> IncreaseCows["<code><b>cows = cows + 1</b></code>"]
        IncreaseCows --> CheckNextDigit
    CheckCow -- Нет --> CheckNextDigit
    CheckNextDigit -- Да --> CheckDigits
    CheckNextDigit -- Нет --> OutputResult["Вывод: <code><b>{bulls} Bulls, {cows} Cows</b></code>"]
    OutputResult --> CheckWin{"Проверка: <code><b>bulls == 4?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    GenerateTargetNumber - Генерация случайного 4-значного числа с разными цифрами, сохранение в переменной targetNumber.
    LoopStart - Начало цикла, который выполняется, пока количество "быков" не станет равным 4.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    ValidateGuess - Проверка, что введенное пользователем число состоит из 4 цифр.
    OutputInvalid - Вывод сообщения об ошибке, если введенное число не состоит из 4 цифр.
    InitializeCounts - Инициализация счетчиков bulls (быки) и cows (коровы) нулями.
    CheckDigits - Начало цикла для перебора цифр введенного числа.
    CheckBull - Проверка, совпадает ли цифра из userGuess с цифрой из targetNumber на той же позиции.
    IncreaseBulls - Увеличение счетчика быков на 1.
    CheckCow - Проверка, присутствует ли цифра из userGuess в targetNumber, но не на той же позиции.
    IncreaseCows - Увеличение счетчика коров на 1.
     CheckNextDigit - Проверка, есть ли следующая цифра для проверки, если есть то переходит к началу цикла, иначе двигается дальше по блок схеме.
    OutputResult - Вывод количества "быков" и "коров" после каждой попытки.
    CheckWin - Проверка, равно ли количество "быков" 4.
    OutputWin - Вывод сообщения о победе, если число угадано.
    End - Конец программы.
"""
import random

def generate_target_number():
    """Генерирует случайное четырехзначное число с уникальными цифрами."""
    digits = list(range(10))
    random.shuffle(digits)
    # Отбрасываем числа с лидирующим нулем
    while digits[0] == 0:
        random.shuffle(digits)

    return "".join(map(str, digits[:4]))

def get_bulls_and_cows(user_guess, target_number):
    """Считает количество "быков" и "коров"."""
    bulls = 0
    cows = 0
    for i, digit in enumerate(user_guess):
        if digit == target_number[i]:
            bulls += 1
        elif digit in target_number:
            cows += 1
    return bulls, cows

# Генерируем загаданное число
target_number = generate_target_number()

# Основной игровой цикл
while True:
    user_guess = input("Введите четырехзначное число: ")

    # Проверка корректности ввода
    if not user_guess.isdigit() or len(user_guess) != 4:
        print("Пожалуйста, введите корректное четырехзначное число.")
        continue

    # Подсчет быков и коров
    bulls, cows = get_bulls_and_cows(user_guess, target_number)
    print(f"{bulls} быков, {cows} коров")

    # Проверка на победу
    if bulls == 4:
        print("Поздравляю, вы угадали число!")
        break

"""
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.

2. **Функция `generate_target_number()`**:
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
    -   Цикл `while digits[0] == 0:`:
        -   Проверяет, является ли первая цифра 0. Если да, то перемешивает цифры снова.
        -   Гарантирует, что загаданное число не будет начинаться с 0.
    -   `return "".join(map(str, digits[:4]))`: Возвращает строку, составленную из первых 4 перемешанных цифр (загаданное число).

3.  **Функция `get_bulls_and_cows(user_guess, target_number)`**:
    -   `bulls = 0` и `cows = 0`: Инициализирует счетчики "быков" и "коров" нулями.
    -   Цикл `for i, digit in enumerate(user_guess)`:
        -   Перебирает цифры во введенном пользователем числе с их индексами.
        -   `if digit == target_number[i]`: Проверяет, совпадает ли цифра на той же позиции в загаданном числе. Если да, увеличивает счетчик быков на 1.
        -   `elif digit in target_number`: Если цифра не совпадает по позиции, но присутствует в загаданном числе, увеличивает счетчик коров на 1.
    -   `return bulls, cows`: Возвращает количество "быков" и "коров".

4.  **Основная часть программы**:
    -   `target_number = generate_target_number()`: Генерирует загаданное четырехзначное число с различными цифрами.
    -   `while True`: Бесконечный цикл, который продолжается до тех пор, пока игрок не угадает число.
    -   `user_guess = input("Введите четырехзначное число: ")`: Запрашивает у пользователя ввод четырехзначного числа.
    -   `if not user_guess.isdigit() or len(user_guess) != 4:`: Проверяет, является ли ввод корректным (состоит из 4 цифр).
        -   Если ввод некорректный, выводит сообщение об ошибке и начинает новый виток цикла.
    -   `bulls, cows = get_bulls_and_cows(user_guess, target_number)`: Подсчитывает количество быков и коров.
    -   `print(f"{bulls} быков, {cows} коров")`: Выводит количество "быков" и "коров".
    -   `if bulls == 4`: Проверяет, равно ли количество быков 4.
        -   Если да, выводит сообщение о победе и завершает цикл `break`.
"""
