# Инструкции по генерации документации к коду на Python

## Обзор

Данный документ описывает формат документации к коду на Python, которая должна быть сгенерирована для каждого входного файла. Документация должна быть в формате Markdown и включать в себя описание модуля, классов, функций, а также таблицу содержания (TOC).

## Формат документации

### Заголовки

Используйте заголовки разных уровней (```#```, ```##```, ```###```, ```####```) для структурирования документации.

### Описание модуля

Каждый файл должен начинаться с заголовка и краткого описания его содержимого.

### Документирование функций и классов

Для функций и классов используйте следующий формат комментариев:

```python
def функция(параметр: тип, параметр1: тип = значение_по_умолчанию) -> тип_возвращаемого_значения:
    """
    Args:
        параметр (тип): Описание параметра.
        параметр1 (тип, необязательно): Описание параметра. Значение по умолчанию - значение_по_умолчанию.

    Returns:
        тип_возвращаемого_значения: Описание возвращаемого значения.

    Raises:
        Исключение: Описание ситуации, при которой возникает исключение.
    """
    # Тело функции
```

Вместо `e` используйте `ex` в блоках обработки исключений.

### Таблица содержания (TOC)

В начале каждого файла документации должна быть таблица содержания, содержащая ссылки на все основные разделы.

### Пример:

```markdown
# Модуль обработки данных

## Обзор

Модуль предоставляет инструменты для обработки данных.

## Классы

### Класс ОбработчикДанных

**Описание**: Класс для обработки данных.

**Методы**:
- `метод_обработки`: Метод обработки данных.

## Функции

### Функция чтение_данных

**Описание**: Функция для чтения данных из файла.

**Параметры**:
- `путь_к_файлу` (str): Путь к файлу.
- `формат` (str, необязательно): Формат файла. Значение по умолчанию - "csv".

**Возвращает**:
- `данные` (list): Список обработанных данных.

**Исключения**:
- `ОшибкаФайла`: Описание ситуации, при которой возникает исключение.

```

## Рекомендации

- Избегайте расплывчатых терминов ("получить", "сделать"). Используйте конкретные глаголы ("проверить", "валидировать", "обработать").
- Следуйте предложенному формату комментариев для функций и классов.
- Используйте Markdown для форматирования текста, списков и ссылок.


```