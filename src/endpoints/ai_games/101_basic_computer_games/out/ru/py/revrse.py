
"""
REVRSE:
=================
Сложность: 5
-----------------
Игра "REVRSE" - это игра-головоломка, в которой компьютер случайным образом генерирует строку из 8 символов, состоящую из нулей и единиц. Игрок должен перевернуть биты в этой строке, вводя номера позиций (от 1 до 8) для инверсии.  При инверсии  бит в указанной позиции, также инвертируются биты слева и справа от него. Цель игры состоит в том, чтобы превратить все биты в нули.
В начале игры отображается случайно сгенерированная строка из 8 нулей и единиц. Игрок вводит номер позиции, бит в которой и соседние с ней биты должны быть инвертированы. Игрок продолжает инвертировать биты до тех пор, пока все биты не станут нулями, после чего игра заканчивается и выводится число ходов.

Правила игры:
1. Компьютер генерирует случайную строку из 8 символов (0 или 1).
2. Игрок вводит номер позиции (от 1 до 8), бит в которой и соседние с ней биты должны быть инвертированы.
3. Инверсия: бит в указанной позиции меняется на противоположный (0 на 1, и 1 на 0). Также инвертируются биты слева и справа от выбранной позиции, если они существуют.
4. Игра заканчивается, когда все биты в строке станут нулями.
5. Выводится количество ходов, сделанных игроком.
-----------------
Алгоритм:
1. Инициализация:
  - Установить количество ходов в 0.
  - Создать случайную строку из 8 битов (0 или 1).
2. Игровой цикл:
   -  Вывести текущую строку.
   -  Запросить ввод позиции у игрока (от 1 до 8).
   -  Увеличить количество ходов на 1.
   -  Инвертировать бит в указанной позиции: 
       -  Изменить значение бита в выбранной позиции на противоположное (0 на 1, 1 на 0).
   -  Инвертировать соседние биты (слева и справа, если они существуют).
   -  Проверить, все ли биты равны 0.
     -  Если все биты равны 0, то завершить игру и перейти к шагу 3.
     -  Если нет, то перейти к началу игрового цикла.
3. Вывести сообщение о выигрыше и количестве ходов.
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    moves = 0
    board = [random(0,1), random(0,1), ..., random(0,1)] (8 элементов)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не все биты = 0"}
    LoopStart -- Да --> OutputBoard["Вывод текущего состояния доски: <code><b>board</b></code>"]
    OutputBoard --> InputPosition["Ввод позиции пользователем: <code><b>position</b></code>"]
    InputPosition --> IncreaseMoves["<code><b>moves = moves + 1</b></code>"]
    IncreaseMoves --> InvertBit["Инвертировать бит в позиции <code><b>position</b></code>"]
     InvertBit --> InvertLeftBit{"Инвертировать бит слева от позиции <code><b>position</b></code> (если существует)"}
     InvertLeftBit --> InvertRightBit{"Инвертировать бит справа от позиции <code><b>position</b></code> (если существует)"}
    InvertRightBit --> CheckWin{"Проверка: все биты в <code><b>board</b></code> равны 0?"}
    CheckWin -- Да --> OutputWin["Вывод сообщения о победе: <b>YOU WON IN <code>{moves}</code> MOVES!</b>"]
    OutputWin --> End["Конец"]
     CheckWin -- Нет --> LoopStart
     LoopStart -- Нет --> End
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: moves (количество ходов) устанавливается в 0, board (игровая доска) генерируется как список из 8 случайных 0 или 1.
    LoopStart - Начало цикла, который продолжается, пока не все биты на доске равны 0.
    OutputBoard - Вывод текущего состояния игровой доски (список board) на экран.
    InputPosition - Запрос у пользователя ввода позиции для инверсии бита.
    IncreaseMoves - Увеличение счетчика количества ходов на 1.
    InvertBit - Инверсия бита в выбранной пользователем позиции.
     InvertLeftBit - Инверсия бита слева от выбранной позиции (если существует).
     InvertRightBit - Инверсия бита справа от выбранной позиции (если существует).
    CheckWin - Проверка, все ли биты на доске равны 0.
    OutputWin - Вывод сообщения о победе и количестве ходов, если все биты равны 0.
    End - Конец программы.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'


# Инициализация переменных
moves = 0  # Счетчик ходов
board = [random.randint(0, 1) for _ in range(8)]  # Игровая доска (список из 8 случайных 0 или 1)

# Основной игровой цикл
while True:
    # Выводим текущее состояние доски
    print(" ".join(map(str, board))) # выводим строку, разделенную пробелами
    
    # Запрашиваем ввод позиции у пользователя
    while True:
        try:
            position = int(input("Введите позицию для инверсии (1-8): ")) - 1  #  Уменьшаем на 1, чтобы использовать как индекс в списке
            if 0 <= position < 8:
                break # Выходим из цикла, если ввод корректен
            else:
                 print("Неверный ввод, введите число от 1 до 8") # Сообщение об ошибке
        except ValueError:
             print("Неверный ввод, введите целое число") # Сообщение об ошибке
    
    moves += 1 # Увеличиваем счетчик ходов
    
    # Инвертируем бит в выбранной позиции
    board[position] = 1 - board[position] # Инвертируем бит

    # Инвертируем соседние биты, если они существуют
    if position > 0: # Если бит не крайний слева
      board[position - 1] = 1 - board[position - 1] # Инвертируем бит слева
    if position < 7: # Если бит не крайний справа
      board[position + 1] = 1 - board[position + 1] # Инвертируем бит справа
    
    # Проверяем, все ли биты равны 0
    if all(bit == 0 for bit in board): #Если все биты равны 0, игра выиграна
        print(f"ПОБЕДА! Вы выиграли за {moves} ходов.")
        break # Завершаем цикл, игра выиграна

"""
Пояснения:
1.  **Импорт модуля `random`**:
    -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Инициализация переменных**:
    -   `moves = 0`: Инициализирует переменную `moves` для подсчета количества ходов.
    -   `board = [random.randint(0, 1) for _ in range(8)]`: Создает список `board` из 8 случайных чисел (0 или 1), представляющий игровую доску.
3.  **Основной цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока игрок не выиграет игру (не все биты не будут нулями).
    -  **Вывод текущего состояния доски**:
       -  `print(" ".join(map(str, board)))`: Выводит текущее состояние игровой доски, преобразуя список `board` в строку.
    -  **Ввод позиции**:
       -   Вложенный цикл `while True`: Запрашивает ввод позиции, пока не будет введен корректный номер позиции.
           -   `try...except ValueError`: Обрабатывает ошибки ввода, если пользователь введет не целое число.
           -   `position = int(input("Введите позицию для инверсии (1-8): ")) - 1`: Запрашивает номер позиции и уменьшает его на 1, так как индексы в списке начинаются с 0.
           -  `if 0 <= position < 8`: Проверка, находится ли позиция в допустимом диапазоне.
           -  `break`: Выход из цикла ввода позиции при корректном вводе.
    -   `moves += 1`: Увеличивает счетчик ходов на 1.
    -   **Инвертирование битов**:
        -   `board[position] = 1 - board[position]`: Инвертирует бит в выбранной позиции (0 становится 1, и 1 становится 0).
        -   `if position > 0:`: Проверяет, существует ли соседний бит слева, и если да, то инвертирует его.
        -   `if position < 7:`: Проверяет, существует ли соседний бит справа, и если да, то инвертирует его.
    -   **Проверка на выигрыш**:
        -   `if all(bit == 0 for bit in board)`: Проверяет, все ли биты на доске равны 0.
        -   `print(f"ПОБЕДА! Вы выиграли за {moves} ходов.")`: Выводит сообщение о победе и количестве ходов.
        -   `break`: Завершает игровой цикл.
"""
```