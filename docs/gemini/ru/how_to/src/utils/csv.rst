Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит функции для работы с CSV-файлами в Python.  Он позволяет сохранять данные в формате CSV, читать данные из CSV, конвертировать CSV в JSON и читать CSV как словарь. Функции обрабатывают возможные ошибки (например, отсутствие файла, неправильный формат данных) и записывают сообщения об ошибках в лог.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**:  Код импортирует модули `csv`, `json`, `pathlib`, `typing`, `pandas` и `logger`. Эти модули предоставляют функции для работы с CSV-файлами, JSON, путями к файлам, типом данных и для логирования.

2. **Функция `save_csv_file`**:
    - Принимает на вход список словарей (`data`), путь к CSV-файлу (`file_path`), режим записи (`mode`, по умолчанию 'a' - добавление) и флаг `exc_info` для включения отладочной информации в лог.
    - Проверяет корректность входных данных (`data` должно быть списком словарей, не пустым).
    - Создает директории, если они не существуют.
    - Открывает CSV-файл в указанном режиме.
    - Создает объект `csv.DictWriter` для записи данных.
    - Если файл открывается в режиме 'w' или файл не существует, то записывает заголовок в CSV.
    - Записывает данные в CSV используя `writerows`.
    - Возвращает `True` если сохранение успешно, иначе `False`. Обрабатывает исключения и записывает информацию об ошибке в лог.


3. **Функция `read_csv_file`**:
    - Принимает на вход путь к CSV-файлу (`file_path`) и флаг `exc_info`.
    - Открывает CSV-файл для чтения.
    - Создает объект `csv.DictReader` для чтения данных.
    - Возвращает список словарей, полученных из CSV, или `None` при ошибке. Обрабатывает исключения `FileNotFoundError` и общие исключения и записывает сообщения в лог.

4. **Функция `read_csv_as_json`**:
    - Преобразует CSV-файл в JSON и сохраняет его.
    - Читает данные из CSV с помощью `read_csv_file`.
    - Если чтение не удалось, возвращает `False`.
    - Сохраняет данные в JSON-файл с отступом 4.
    - Возвращает `True` при успешном преобразовании, `False` - при ошибке. Обрабатывает исключения и записывает сообщения в лог.


5. **Функция `read_csv_as_dict`**:
    - Преобразует CSV-данные в словарь.
    - Читает данные из CSV-файла.
    - Возвращает словарь с данными или `None` в случае ошибки. Обрабатывает исключения и записывает сообщения в лог.

6. **Функция `read_csv_as_ns`**:
    - Загружает данные CSV в список словарей с использованием Pandas.
    - Возвращает список словарей, представляющих содержимое CSV. Обрабатывает `FileNotFoundError` и общие исключения и записывает сообщения в лог.


Пример использования
-------------------------
.. code-block:: python

    import os
    from pathlib import Path
    from hypotez.src.utils.csv import save_csv_file, read_csv_file, read_csv_as_json, read_csv_as_ns

    # Создаем пример данных
    data = [
        {'name': 'John Doe', 'age': 30},
        {'name': 'Jane Doe', 'age': 25},
    ]

    # Путь к CSV-файлу
    csv_file_path = Path("data.csv")

    # Сохраняем данные в CSV
    if save_csv_file(data, csv_file_path, mode='w'):
        print("CSV файл успешно сохранен!")

    # Читаем данные из CSV
    data_from_csv = read_csv_file(csv_file_path)
    if data_from_csv:
        print(data_from_csv)

    # Преобразуем в JSON
    json_file_path = Path("data.json")
    if read_csv_as_json(csv_file_path, json_file_path):
        print(f"CSV преобразован в JSON и сохранен в {json_file_path}")

    # Читаем CSV в список словарей через Pandas
    data_from_csv_ns = read_csv_as_ns(csv_file_path)
    print(data_from_csv_ns)

    os.remove(csv_file_path) # Удаляем файл для чистоты примера