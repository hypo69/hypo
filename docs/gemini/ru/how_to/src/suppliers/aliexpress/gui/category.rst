Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `CategoryEditor`, предназначенный для создания графического интерфейса (GUI) для подготовки рекламных кампаний на AliExpress.  Класс позволяет пользователю загружать JSON-файл с данными кампании, отображать информацию о кампании и категориях, а также асинхронно подготавливать все или отдельные категории кампании.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует необходимые модули Python, такие как `QtWidgets`, `QtGui`, `QtCore` из PyQt6 для создания GUI, `asyncio` для асинхронных операций, `Path` из `pathlib` для работы с путями к файлам, `SimpleNamespace` для работы с данными из JSON, и другие вспомогательные модули.

2. **Определение класса `CategoryEditor`:** Класс наследуется от `QtWidgets.QWidget`, что делает его виджетом для Qt-приложения.

3. **Инициализация класса:** Метод `__init__` инициализирует виджет, устанавливает заголовок окна ("Category Editor"), размер окна (1800x800), создаёт кнопки для открытия файла, подготовки всех категорий и подготовки одной категории.

4. **Настройка интерфейса (`setup_ui`):**  Создаёт виджеты (кнопки, метки) и организует их в макет (`QVBoxLayout`).

5. **Обработка событий (`open_file`, `load_file`, `create_widgets`):** При нажатии на кнопку "Открыть JSON файл", открывается диалоговое окно выбора файла.  `load_file` загружает JSON-данные из файла, создаёт объекты для обработки кампании, и создаёт соответствующие метки с информацией из JSON-файла.  `create_widgets` обновляет интерфейс с новыми данными, удаляя старые элементы и добавляя новые.

6. **Асинхронная подготовка категорий (`prepare_all_categories_async`, `prepare_category_async`):** Эти методы запускают асинхронные операции по обработке категорий кампании.  `prepare_all_categories_async` обрабатывает все категории, а `prepare_category_async` - выбранную категорию.  Результат обработки (успех или ошибка) отображается в виде диалоговых окон.

7. **Обработка ошибок:**  Код содержит обработку исключений (`try...except`), чтобы сообщать пользователю об ошибках при загрузке файлов или выполнении асинхронных операций.


Пример использования
-------------------------
.. code-block:: python

    import sys
    from PyQt6.QtWidgets import QApplication
    from hypotez.src.suppliers.aliexpress.gui.category import CategoryEditor

    if __name__ == "__main__":
        app = QApplication(sys.argv)
        editor = CategoryEditor(main_app=None) # передайте экземпляр MainApp, если есть
        editor.show()
        sys.exit(app.exec())