"""
REVRSE:
=================
Сложность: 5
-----------------
Игра "REVRSE" предлагает игроку угадать последовательность из 4-х чисел, цифры которых расположены в определенном порядке, при этом числа могут повторяться. 
После каждого хода игрока, компьютер выводит количество правильно угаданных цифр и количество цифр, которые присутствуют в загаданной последовательности, но не находятся на своих позициях.
Игра продолжается, пока игрок не угадает последовательность цифр, или пока не закончится число попыток.

Правила игры:
1. Компьютер генерирует случайную последовательность из 4-х цифр от 1 до 6, цифры могут повторяться.
2. Игрок вводит свою последовательность из 4-х цифр, также от 1 до 6, разделяя цифры пробелами.
3. После каждой попытки компьютер выводит:
   - Количество правильно угаданных цифр на своих местах (прямое попадание).
   - Количество правильно угаданных цифр, которые есть в загаданной последовательности, но находятся не на своих местах (косвенное попадание).
4. Игра заканчивается, когда игрок угадывает последовательность или после 10 попыток.
-----------------
Алгоритм:
1.  Установить число попыток в 0.
2.  Сгенерировать случайную последовательность из 4-х цифр от 1 до 6 (targetSequence).
3.  Начать цикл "пока число попыток меньше 10":
    3.1 Увеличить число попыток на 1.
    3.2 Запросить у игрока ввод последовательности из 4-х цифр (userSequence).
    3.3 Сравнить userSequence с targetSequence:
        - Подсчитать количество прямых попаданий (цифры на своих местах).
        - Подсчитать количество косвенных попаданий (цифры присутствуют, но не на своих местах).
    3.4 Вывести количество прямых и косвенных попаданий.
    3.5 Если количество прямых попаданий равно 4, то вывести сообщение о победе и завершить игру.
4.  Если цикл закончился (после 10 попыток), вывести сообщение о проигрыше и показать правильную последовательность.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetSequence = random sequence of 4 numbers (1 to 6)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока numberOfGuesses < 10"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputSequence["Ввод последовательности пользователем: <code><b>userSequence</b></code>"]
    InputSequence --> CompareSequences["<p align='left'>Сравнение последовательностей:<br><code><b>
    directHits = count of numbers in correct position<br>
    indirectHits = count of numbers present but in wrong position
    </b></code></p>"]
    CompareSequences --> OutputHits["Вывод: <b>directHits, indirectHits</b>"]
    OutputHits --> CheckWin{"Проверка: <code><b>directHits == 4?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения о победе"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> OutputLose["Вывод сообщения о проигрыше"]
    OutputLose --> ShowTarget["Вывод: <b>targetSequence</b>"]
    ShowTarget --> End
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, а targetSequence (загаданная последовательность) генерируется случайным образом из 4 чисел от 1 до 6.
    LoopStart - Начало цикла, который продолжается, пока количество попыток numberOfGuesses меньше 10.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputSequence - Запрос у пользователя ввода последовательности из 4 чисел.
    CompareSequences - Сравнение введенной последовательности с загаданной и подсчет прямых и косвенных попаданий.
    OutputHits - Вывод количества прямых и косвенных попаданий.
    CheckWin - Проверка, равно ли количество прямых попаданий 4.
    OutputWin - Вывод сообщения о победе.
    End - Конец программы.
    OutputLose - Вывод сообщения о проигрыше.
    ShowTarget - Вывод загаданной последовательности.
"""
import random

# Функция для генерации случайной последовательности из 4 цифр от 1 до 6
def generate_target_sequence():
    return [random.randint(1, 6) for _ in range(4)]

# Функция для сравнения последовательностей и подсчета попаданий
def compare_sequences(target, user):
    direct_hits = 0 # Прямые попадания (цифра на своем месте)
    indirect_hits = 0 # Косвенные попадания (цифра присутствует, но не на своем месте)
    target_copy = list(target) # Создаем копию загаданной последовательности, чтобы не менять исходную

    # Считаем прямые попадания и удаляем их из копии
    for i in range(4):
        if user[i] == target_copy[i]:
            direct_hits += 1
            target_copy[i] = None # Помечаем, чтобы не считать повторно
            user[i] = None # Помечаем, чтобы не считать повторно

    # Считаем косвенные попадания
    for i in range(4):
      if user[i] is not None:
        for j in range(4):
            if user[i] == target_copy[j]:
                indirect_hits += 1
                target_copy[j] = None
                break
    return direct_hits, indirect_hits

# Основная логика игры
def play_reverse_game():
    numberOfGuesses = 0  # Счетчик попыток
    targetSequence = generate_target_sequence()  # Загаданная последовательность

    print("Добро пожаловать в игру REVRSE!")
    print("Я загадал последовательность из 4 цифр (от 1 до 6).")
    print("Попробуй ее отгадать. У тебя есть 10 попыток.")

    while numberOfGuesses < 10:
        numberOfGuesses += 1
        try:
            user_input = input(f"Попытка {numberOfGuesses}. Введи 4 цифры через пробел (например, 1 2 3 4): ")
            userSequence = [int(x) for x in user_input.split()]
            if len(userSequence) != 4 or not all(1 <= x <= 6 for x in userSequence):
                print("Пожалуйста, введи ровно 4 цифры от 1 до 6, разделенные пробелами.")
                continue
        except ValueError:
            print("Пожалуйста, введи целые числа.")
            continue
            
        directHits, indirectHits = compare_sequences(targetSequence, userSequence)
        print(f"Прямые попадания: {directHits}, Косвенные попадания: {indirectHits}")
        if directHits == 4:
            print("Поздравляю! Ты угадал последовательность!")
            return

    print("Увы, попытки закончились. Ты не угадал последовательность.")
    print(f"Правильная последовательность: {targetSequence}")
# Запуск игры
if __name__ == "__main__":
    play_reverse_game()
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
    -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Функция `generate_target_sequence()`**:
    -   `def generate_target_sequence():`: Определяет функцию для генерации случайной последовательности из 4 цифр от 1 до 6.
    -   `return [random.randint(1, 6) for _ in range(4)]`: Использует генератор списков для создания списка из 4 случайных целых чисел, каждое из которых находится в диапазоне от 1 до 6.
3.  **Функция `compare_sequences(target, user)`**:
    -   `def compare_sequences(target, user):`: Определяет функцию для сравнения двух последовательностей и подсчета прямых и косвенных попаданий.
    -   `direct_hits = 0`: Инициализирует переменную для подсчета прямых попаданий.
    -   `indirect_hits = 0`: Инициализирует переменную для подсчета косвенных попаданий.
    -  `target_copy = list(target)`: Создает копию загаданной последовательности, чтобы не изменять исходный список.
    -   **Подсчет прямых попаданий**:
        -  `for i in range(4):`: Цикл для прохода по каждой позиции в последовательности.
        -  `if user[i] == target_copy[i]:`: Проверяет, совпадает ли цифра на текущей позиции в обеих последовательностях.
        -  `direct_hits += 1`: Увеличивает количество прямых попаданий на 1.
        -  `target_copy[i] = None` и `user[i] = None`: Помечает цифру как использованную, чтобы не учитывать ее повторно при подсчете косвенных попаданий.
    -   **Подсчет косвенных попаданий**:
        -   `for i in range(4):`: Цикл для прохода по каждой позиции в пользовательской последовательности.
        -  `if user[i] is not None:`: Проверяет, что цифра не была использована в прямых попаданиях
        - `for j in range(4):`: Цикл для прохода по каждой позиции в копии загаданной последовательности.
        -`if user[i] == target_copy[j]:`: Проверяет, есть ли цифра из пользовательской последовательности в копии загаданной последовательности
        -`indirect_hits += 1`: увеличивает количество косвенных попаданий на 1
        - `target_copy[j] = None`: помечает цифру как использованную, чтобы не считать повторно.
        -  `break`: Переходит к следующей цифре в пользовательской последовательности.
    -   `return direct_hits, indirect_hits`: Возвращает количество прямых и косвенных попаданий.
4.  **Функция `play_reverse_game()`**:
    -   `def play_reverse_game():`: Определяет основную функцию игры.
    -   `numberOfGuesses = 0`: Инициализирует количество попыток.
    -   `targetSequence = generate_target_sequence()`: Генерирует загаданную последовательность.
    -  Вывод приветственного сообщения и инструкций.
    -   **Основной цикл `while numberOfGuesses < 10:`**:
        -  `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1.
        -   **Ввод данных**:
             -   `try ... except ValueError`: Блок для обработки возможных ошибок ввода.
             - `user_input = input(f"Попытка {numberOfGuesses}. Введи 4 цифры через пробел (например, 1 2 3 4): ")`: Запрашивает у пользователя ввод последовательности из 4 чисел через пробел.
             - `userSequence = [int(x) for x in user_input.split()]`: Преобразует введенную строку в список целых чисел.
             - `if len(userSequence) != 4 or not all(1 <= x <= 6 for x in userSequence):`: Проверяет, правильно ли введены данные.
             -  `continue`: Пропускает итерацию цикла и запрашивает данные снова.
        -  `directHits, indirectHits = compare_sequences(targetSequence, userSequence)`: Вызывает функцию для сравнения последовательностей.
        - `print(f"Прямые попадания: {directHits}, Косвенные попадания: {indirectHits}")`: Выводит результаты сравнения.
        -`if directHits == 4`: Проверяет, угадана ли последовательность.
        -   `print("Поздравляю! Ты угадал последовательность!")`: Выводит сообщение о победе.
        - `return`: Завершает игру.
    -   **Если попытки закончились**:
        -   `print("Увы, попытки закончились. Ты не угадал последовательность.")`: Выводит сообщение о проигрыше.
        -   `print(f"Правильная последовательность: {targetSequence}")`: Выводит загаданную последовательность.
5.  **Запуск игры**:
    -   `if __name__ == "__main__":`: Проверяет, запущен ли файл как основная программа.
    -   `play_reverse_game()`: Вызывает функцию для начала игры.
"""
