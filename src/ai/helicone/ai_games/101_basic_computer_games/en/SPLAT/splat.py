"""
SPLAT:
=================
Сложность: 3
-----------------
Игра "SPLAT" моделирует ситуацию, где игрок должен угадать место падения "капли" на числовой оси от 0 до 100. Игрок вводит свои предположения, и игра сообщает, насколько близко предположение к цели, используя термины "Far Out", "Close", или "SPLAT!!!" при точном попадании.

Правила игры:
1. Компьютер генерирует случайное целое число от 0 до 100, которое является целью.
2. Игрок вводит свое предположение о местоположении капли на числовой оси.
3. Если предположение находится на расстоянии 10 или более единиц от цели, выводится сообщение "Far Out".
4. Если предположение находится на расстоянии менее 10 единиц от цели, выводится сообщение "Close".
5. Если предположение точно совпадает с целью, выводится сообщение "SPLAT!!!" и игра заканчивается.
6. Игра продолжается до тех пор, пока игрок не угадает точное положение капли.
-----------------
Алгоритм:
1. Сгенерировать случайное целое число в диапазоне от 0 до 100 и присвоить его переменной targetNumber.
2. Начать цикл "пока не угадано":
    2.1 Запросить у игрока ввод числа (userGuess).
    2.2 Вычислить абсолютное значение разности между userGuess и targetNumber и присвоить его переменной distance.
    2.3 Если distance равно 0, вывести сообщение "SPLAT!!!" и завершить игру.
    2.4 Если distance больше или равно 10, вывести сообщение "Far Out".
    2.5 Если distance меньше 10, вывести сообщение "Close".
3. Вернуться к шагу 2.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeTarget["<p align='left'>Инициализация: 
    <code><b>
    targetNumber = random(0, 100)
    </b></code></p>"]
    InitializeTarget --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CalculateDistance["<code><b>distance = abs(userGuess - targetNumber)</b></code>"]
    CalculateDistance --> CheckSplat{"Проверка: <code><b>distance == 0?</b></code>"}
    CheckSplat -- Да --> OutputSplat["Вывод сообщения: <b>SPLAT!!!</b>"]
    OutputSplat --> End["Конец"]
    CheckSplat -- Нет --> CheckFarOut{"Проверка: <code><b>distance &gt;= 10?</b></code>"}
    CheckFarOut -- Да --> OutputFarOut["Вывод сообщения: <b>Far Out</b>"]
    OutputFarOut --> LoopStart
    CheckFarOut -- Нет --> OutputClose["Вывод сообщения: <b>Close</b>"]
    OutputClose --> LoopStart
    
```
Legenda:
    Start - Начало программы.
    InitializeTarget - Инициализация: генерируется случайное число от 0 до 100 и присваивается переменной targetNumber.
    LoopStart - Начало цикла, который продолжается, пока игрок не угадает число (distance не станет 0).
    InputGuess - Запрос у пользователя ввода числа (предполагаемого места падения) и сохранение его в переменной userGuess.
    CalculateDistance - Вычисление абсолютного значения разности между введенным числом userGuess и загаданным числом targetNumber, результат сохраняется в переменной distance.
    CheckSplat - Проверка, равно ли distance 0.
    OutputSplat - Вывод сообщения "SPLAT!!!" в случае, если distance равен 0.
    End - Конец программы.
    CheckFarOut - Проверка, больше или равно distance 10.
    OutputFarOut - Вывод сообщения "Far Out", если distance больше или равно 10.
    OutputClose - Вывод сообщения "Close", если distance меньше 10 и не равно 0.
"""
import random

# Генерируем случайное число от 0 до 100
targetNumber = random.randint(0, 100)

# Бесконечный цикл, пока игрок не угадает число
while True:
    # Запрашиваем ввод числа у пользователя
    try:
        userGuess = int(input("Введите ваше предположение (от 0 до 100): "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue
    
    # Вычисляем расстояние между введенным числом и загаданным числом
    distance = abs(userGuess - targetNumber)

    # Проверяем, угадано ли число
    if distance == 0:
        print("SPLAT!!!")
        break  # Завершаем цикл, если число угадано
    elif distance >= 10:
        print("Far Out")  # Сообщаем, что число далеко от цели
    else:
        print("Close")  # Сообщаем, что число близко к цели

"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Генерация случайного числа**:
   -   `targetNumber = random.randint(0, 100)`: Генерирует случайное целое число в диапазоне от 0 до 100 (включительно) и сохраняет его в переменной `targetNumber`. Это число будет "местом падения капли".
3.  **Основной игровой цикл `while True:`**:
   -   Этот цикл будет выполняться до тех пор, пока игрок не угадает число.
4.  **Ввод данных**:
    -   `try...except ValueError`: Блок `try-except` обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `userGuess = int(input("Введите ваше предположение (от 0 до 100): "))`: Запрашивает у пользователя число и преобразует его в целое число, сохраняя результат в `userGuess`. Это предположение игрока о месте падения капли.
5.  **Вычисление расстояния**:
    -   `distance = abs(userGuess - targetNumber)`: Вычисляет абсолютное значение разности между введенным числом `userGuess` и загаданным числом `targetNumber`. Это расстояние между предположением игрока и фактическим местом падения капли.
6.  **Проверка на попадание**:
   -   `if distance == 0:`: Проверяет, равно ли расстояние нулю. Если это так, значит, игрок угадал точное место падения.
    - `print("SPLAT!!!")`: Выводит сообщение "SPLAT!!!", когда игрок угадал.
    - `break`: Завершает цикл, когда игрок угадал.
7. **Проверка расстояния**
    - `elif distance >= 10:`: Проверяет, если расстояние больше или равно 10.
    - `print("Far Out")`: Выводит сообщение "Far Out", когда игрок далеко от цели.
    - `else:`: Если расстояние меньше 10, то:
    - `print("Close")`: Выводит сообщение "Close", когда игрок близко к цели.
"""
