"""
GUESS:
=================
Сложность: 2
-----------------
Это игра, в которой компьютер загадывает случайное число от 1 до 100, а игрок пытается его угадать. 
После каждой попытки компьютер сообщает, было ли загаданное число больше или меньше, чем введенное игроком.
Игра продолжается до тех пор, пока игрок не угадает число.
Правила игры: Компьютер выбирает случайное число от 1 до 100. Игрок вводит свои предположения. Компьютер указывает, является ли предположение больше или меньше загаданного числа. Игра продолжается, пока игрок не угадает число.
-----------------
Алгоритм:
1. Установить генератор случайных чисел.
2. Загадать случайное число в диапазоне от 1 до 100.
3. Начать цикл игры:
   4. Запросить у игрока число.
   5. Проверить, является ли введенное число загаданным.
   6. Если число угадано, вывести сообщение об успехе и закончить игру.
   7. Если число больше загаданного, вывести сообщение, что число больше.
   8. Если число меньше загаданного, вывести сообщение, что число меньше.
   9. Перейти к началу цикла (шаг 4).
-----------------
Блок-схема: 
```mermaid
graph TD
    Start(Начало) --> Initialize(Инициализация генератора случайных чисел);
    Initialize --> GenerateSecretNumber(Загадать случайное число);
    GenerateSecretNumber --> InputGuess(Запросить ввод числа от игрока);
    InputGuess --> CheckGuess(Проверить ввод);
    CheckGuess -- Угадано --> OutputWin(Вывести сообщение об успехе);
    OutputWin --> End(Конец);
    CheckGuess -- Больше --> OutputTooHigh(Сообщение "Слишком много");
    OutputTooHigh --> InputGuess;
    CheckGuess -- Меньше --> OutputTooLow(Сообщение "Слишком мало");
    OutputTooLow --> InputGuess;

```
"""
import random

# Инициализация генератора случайных чисел для генерации загаданного числа
random.seed()
# Загадываем случайное целое число в диапазоне от 1 до 100
secret_number = random.randint(1, 100)

# Игровой цикл, продолжающийся пока игрок не угадает число
while True:
    # Запрашиваем ввод числа от игрока
    try:
        guess = int(input("Попробуйте угадать число (от 1 до 100): "))
    except ValueError:
         # Если введен неверный формат данных, сообщаем об ошибке и просим ввести снова
        print("Некорректный ввод. Пожалуйста, введите целое число.")
        continue


    # Проверяем, угадал ли игрок число
    if guess == secret_number:
        # Выводим сообщение о победе
        print(f"Поздравляю! Вы угадали число {secret_number}!")
        # Завершаем игру
        break
    elif guess > secret_number:
         # Если число больше загаданного, выводим соответствующее сообщение
        print("Слишком много, попробуйте еще раз.")
    else:
        # Если число меньше загаданного, выводим соответствующее сообщение
        print("Слишком мало, попробуйте еще раз.")
"""
Пояснения:
1. `random.seed()`: Инициализирует генератор случайных чисел.
2. `secret_number = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 включительно и присваивает его переменной `secret_number`.
3. `while True:`: Бесконечный цикл, который будет продолжаться, пока игрок не угадает число.
4. `try...except ValueError`: Обработка исключения на случай, если пользователь введет не число.
5. `guess = int(input(...))`: Запрашивает у игрока ввод числа и преобразует его в целое число.
6. `if guess == secret_number`: Проверяет, угадал ли игрок число.
7. `print(f"Поздравляю! Вы угадали число {secret_number}!")`: Выводит сообщение о победе с угаданным числом.
8. `break`: Завершает цикл (и игру) после угадывания числа.
9. `elif guess > secret_number`: Проверяет, если введенное число больше загаданного.
10. `print("Слишком много, попробуйте еще раз.")`: Выводит сообщение, если введенное число больше загаданного.
11. `else`: Если введенное число не равно и не больше загаданного, то оно меньше.
12. `print("Слишком мало, попробуйте еще раз.")`: Выводит сообщение, если введенное число меньше загаданного.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```