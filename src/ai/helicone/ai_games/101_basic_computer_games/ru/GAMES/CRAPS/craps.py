"""
CRAPS:
=================
Сложность: 7
-----------------
Игра "Крэпс" - это азартная игра в кости, в которой игрок делает ставку на результат броска двух игральных костей. В первом раунде игрок выигрывает, если сумма очков на костях равна 7 или 11, и проигрывает, если сумма равна 2, 3 или 12. Если сумма очков равна 4, 5, 6, 8, 9 или 10, то это становится "целевым числом" игрока, и он продолжает бросать кости, пока не выпадет это число снова (в этом случае игрок выигрывает) или не выпадет 7 (в этом случае игрок проигрывает).

Правила игры:
1. В начале игры игрок бросает две кости.
2. Если сумма очков на костях равна 7 или 11, игрок выигрывает.
3. Если сумма очков равна 2, 3 или 12, игрок проигрывает.
4. Если сумма очков равна 4, 5, 6, 8, 9 или 10, то это число становится "целевым числом" (point).
5. После установления "целевого числа", игрок продолжает бросать кости, пока:
   -  не выпадет "целевое число", тогда игрок выигрывает.
   -  не выпадет 7, тогда игрок проигрывает.
-----------------
Алгоритм:
1. Сгенерировать случайные значения для двух костей (от 1 до 6).
2. Вычислить сумму выпавших значений.
3. Если сумма равна 7 или 11, вывести сообщение о выигрыше и перейти к шагу 7.
4. Если сумма равна 2, 3 или 12, вывести сообщение о проигрыше и перейти к шагу 7.
5. Сохранить сумму как "целевое число" (point).
6.  Начать цикл:
    6.1 Сгенерировать случайные значения для двух костей.
    6.2 Вычислить сумму выпавших значений.
    6.3 Если сумма равна "целевому числу", вывести сообщение о выигрыше и перейти к шагу 7.
    6.4 Если сумма равна 7, вывести сообщение о проигрыше и перейти к шагу 7.
    6.5 Иначе, повторить цикл с шага 6.
7. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> RollDice1["Сгенерировать значения для двух костей: <code><b>dice1, dice2</b></code>"]
    RollDice1 --> CalculateSum1["<code><b>sumOfDice = dice1 + dice2</b></code>"]
    CalculateSum1 --> CheckWin1{"Проверка: <code><b>sumOfDice == 7 или sumOfDice == 11?</b></code>"}
    CheckWin1 -- Да --> OutputWin1["Вывод сообщения: <b>YOU WIN!</b>"]
    OutputWin1 --> End["Конец"]
    CheckWin1 -- Нет --> CheckLose1{"Проверка: <code><b>sumOfDice == 2 или sumOfDice == 3 или sumOfDice == 12?</b></code>"}
    CheckLose1 -- Да --> OutputLose1["Вывод сообщения: <b>YOU LOSE!</b>"]
    OutputLose1 --> End
    CheckLose1 -- Нет --> SetPoint["<code><b>point = sumOfDice</b></code>"]
    SetPoint --> LoopStart{"Начало цикла: пока не выиграл или не проиграл"}
    LoopStart --> RollDice2["Сгенерировать значения для двух костей: <code><b>dice1, dice2</b></code>"]
    RollDice2 --> CalculateSum2["<code><b>sumOfDice = dice1 + dice2</b></code>"]
     CalculateSum2 --> CheckWin2{"Проверка: <code><b>sumOfDice == point?</b></code>"}
    CheckWin2 -- Да --> OutputWin2["Вывод сообщения: <b>YOU WIN!</b>"]
    OutputWin2 --> End
    CheckWin2 -- Нет --> CheckLose2{"Проверка: <code><b>sumOfDice == 7?</b></code>"}
    CheckLose2 -- Да --> OutputLose2["Вывод сообщения: <b>YOU LOSE!</b>"]
     OutputLose2 --> End
    CheckLose2 -- Нет --> LoopStart
```

Legenda:
    Start - Начало игры.
    RollDice1 - Генерация случайных значений для двух игральных костей (dice1, dice2) в первом броске.
    CalculateSum1 - Вычисление суммы значений костей dice1 и dice2 и сохранение результата в переменной sumOfDice.
    CheckWin1 - Проверка, равна ли сумма sumOfDice 7 или 11. Если да, то игрок выиграл.
    OutputWin1 - Вывод сообщения "YOU WIN!" и завершение игры.
    CheckLose1 - Проверка, равна ли сумма sumOfDice 2, 3 или 12. Если да, то игрок проиграл.
    OutputLose1 - Вывод сообщения "YOU LOSE!" и завершение игры.
    SetPoint - Если не выиграл и не проиграл в первом броске, то сумма sumOfDice сохраняется в переменной point, которая становится "целевым числом".
    LoopStart - Начало цикла, который продолжается пока игрок не выиграет или не проиграет.
    RollDice2 - Генерация случайных значений для двух игральных костей (dice1, dice2) в последующих бросках.
    CalculateSum2 - Вычисление суммы значений костей dice1 и dice2 и сохранение результата в переменной sumOfDice.
    CheckWin2 - Проверка, равна ли сумма sumOfDice "целевому числу" point. Если да, то игрок выиграл.
    OutputWin2 - Вывод сообщения "YOU WIN!" и завершение игры.
    CheckLose2 - Проверка, равна ли сумма sumOfDice 7. Если да, то игрок проиграл.
    OutputLose2 - Вывод сообщения "YOU LOSE!" и завершение игры.
    End - Конец игры.
"""
import random

def roll_dice():
    """Бросает две игральные кости и возвращает их значения."""
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    return dice1, dice2

def calculate_sum(dice1, dice2):
  """Вычисляет сумму значений двух костей."""
  return dice1 + dice2

def play_craps():
    """Запускает игру Крэпс."""
    # Первый бросок костей
    dice1, dice2 = roll_dice()
    sum_of_dice = calculate_sum(dice1,dice2)
    print(f"Выпало: {dice1} + {dice2} = {sum_of_dice}")

    # Проверка выигрыша или проигрыша после первого броска
    if sum_of_dice == 7 or sum_of_dice == 11:
        print("YOU WIN!")
        return
    elif sum_of_dice == 2 or sum_of_dice == 3 or sum_of_dice == 12:
        print("YOU LOSE!")
        return

    # Установка целевого числа
    point = sum_of_dice
    print(f"Ваше целевое число: {point}")

    # Продолжаем бросать кости пока не выиграем или проиграем
    while True:
      dice1, dice2 = roll_dice()
      sum_of_dice = calculate_sum(dice1,dice2)
      print(f"Выпало: {dice1} + {dice2} = {sum_of_dice}")
      if sum_of_dice == point:
          print("YOU WIN!")
          return
      elif sum_of_dice == 7:
          print("YOU LOSE!")
          return

if __name__ == "__main__":
    play_craps()
"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел (значений для игральных костей).
2. **Функция `roll_dice()`**:
   -  `def roll_dice():`: Функция имитирует бросок двух игральных костей.
   -  `dice1 = random.randint(1, 6)`: Генерирует случайное целое число от 1 до 6 (значение первой кости).
   -  `dice2 = random.randint(1, 6)`: Генерирует случайное целое число от 1 до 6 (значение второй кости).
   - `return dice1, dice2`: Возвращает значения двух костей.
3. **Функция `calculate_sum(dice1, dice2)`**:
   -  `def calculate_sum(dice1, dice2):`: Функция вычисляет сумму значений двух костей.
   -  `return dice1 + dice2`: Возвращает сумму.
4.  **Функция `play_craps()`**:
    -   `def play_craps():`:  Функция, которая содержит всю логику игры "Крэпс".
    -   `dice1, dice2 = roll_dice()`: Вызывает функцию `roll_dice()` для первого броска костей.
    -   `sum_of_dice = calculate_sum(dice1,dice2)`: Вызывает функцию `calculate_sum()` для получения суммы значений первого броска.
    -   `print(f"Выпало: {dice1} + {dice2} = {sum_of_dice}")`: Выводит на экран значения костей и их сумму.
    -   **Первая проверка выигрыша/проигрыша**:
        -   `if sum_of_dice == 7 or sum_of_dice == 11:`: Проверяет, выиграл ли игрок при первом броске (сумма равна 7 или 11).
        -   `print("YOU WIN!")`: Выводит сообщение о выигрыше.
        -   `return`: Завершает игру.
        -   `elif sum_of_dice == 2 or sum_of_dice == 3 or sum_of_dice == 12:`: Проверяет, проиграл ли игрок при первом броске (сумма равна 2, 3 или 12).
        -   `print("YOU LOSE!")`: Выводит сообщение о проигрыше.
        -   `return`: Завершает игру.
    -  **Установка целевого числа (point)**:
        -   `point = sum_of_dice`: Если ни выигрыш, ни проигрыш не наступили, текущая сумма становится целевым числом (point).
        -   `print(f"Ваше целевое число: {point}")`: Выводит сообщение о целевом числе.
    -  **Основной цикл игры**:
       -  `while True:`:  Бесконечный цикл, который продолжается, пока игрок не выиграет или не проиграет.
       - `dice1, dice2 = roll_dice()`:  Вызывает функцию `roll_dice()` для нового броска костей.
       - `sum_of_dice = calculate_sum(dice1,dice2)`: Вызывает функцию `calculate_sum()` для получения суммы значений нового броска.
       - `print(f"Выпало: {dice1} + {dice2} = {sum_of_dice}")`: Выводит на экран значения костей и их сумму.
       - **Второй цикл проверки выигрыша/проигрыша**:
          - `if sum_of_dice == point:`: Проверяет, выиграл ли игрок (сумма равна целевому числу).
          -   `print("YOU WIN!")`: Выводит сообщение о выигрыше.
          -   `return`: Завершает игру.
          -   `elif sum_of_dice == 7:`: Проверяет, проиграл ли игрок (сумма равна 7).
          -   `print("YOU LOSE!")`: Выводит сообщение о проигрыше.
          -   `return`: Завершает игру.
5.  **Запуск игры**:
    -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_craps()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    -  `play_craps()`: Вызывает функцию для начала игры.
"""
