```
<BLKJAK>:
=================
Сложность: 7
-----------------
Игра "Блэкджек" - это карточная игра, в которой игрок соревнуется с дилером. Цель игры - набрать сумму очков карт как можно ближе к 21, но не превышая ее. Игрок начинает с двумя картами, после чего может брать дополнительные карты (hit) или оставаться с текущей суммой (stand). После того как игрок заканчивает брать карты, дилер также берет карты, пока не наберет 17 или более очков. Выигрывает тот, у кого сумма очков ближе к 21 и не превышает ее. Если сумма очков игрока или дилера превышает 21, он проигрывает.

Правила игры:
1.  Игроку и дилеру сдается по две карты.
2.  Игрок видит только одну карту дилера, а две свои.
3.  Игрок может брать карты до тех пор, пока не решит остановиться (stand) или не наберет больше 21 (bust).
4.  После того, как игрок остановился, дилер начинает брать карты, пока не наберет 17 или более очков.
5.  Если сумма очков игрока больше 21, он проигрывает.
6.  Если сумма очков дилера больше 21, игрок выигрывает.
7.  Если сумма очков игрока и дилера не превышает 21, выигрывает тот, у кого больше очков.
8.  Если у игрока и дилера одинаковое количество очков, то ничья (push).
9.  Карты имеют следующие значения:
    -   Туз (A) считается за 11 очков, если общая сумма не превышает 21, в противном случае за 1.
    -   Карты с числовым номиналом (2-10) имеют соответствующее количество очков.
    -   Валет (J), Дама (Q), Король (K) имеют по 10 очков.
-----------------
Алгоритм:
1.  Инициализация:
    -   Создать колоду карт (используется упрощенное представление, достаточно чисел от 1 до 10, представляющих номиналы карт)
    -   Перемешать колоду.
    -   Раздать две карты игроку и две карты дилеру.
2.  Ход игрока:
    -   Вывести на экран карту дилера (одну из двух) и карты игрока.
    -   Спросить игрока, хочет ли он еще карту (hit) или нет (stand).
    -   Если игрок выбрал "hit", дать ему еще одну карту.
    -   Повторять действия, пока игрок не выберет "stand" или пока сумма его карт не станет больше 21.
3.  Ход дилера:
    -   Пока сумма очков дилера меньше 17, брать еще карту.
4.  Определение победителя:
    -   Вывести на экран все карты дилера и игрока.
    -   Сравнить суммы очков.
        -   Если у игрока больше 21, игрок проиграл.
        -   Если у дилера больше 21, игрок выиграл.
        -   Если у игрока и дилера меньше или равно 21, то определить победителя, у кого сумма больше.
        -   Если суммы равны - ничья.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGame["<p align='left'>Инициализация игры:
    <code><b>
    deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10] * 4
    shuffle(deck)
    playerHand = []
    dealerHand = []
    </b></code></p>"]
     InitializeGame --> DealInitialCards["<p align='left'>Раздача карт:
    <code><b>
    playerHand.append(deck.pop())
    playerHand.append(deck.pop())
    dealerHand.append(deck.pop())
    dealerHand.append(deck.pop())
    </b></code></p>"]
    DealInitialCards --> PlayerTurnStart{"Начало хода игрока"}
    PlayerTurnStart --> DisplayHands["<p align='left'>Вывод карт:
    <code><b>
    показать карты игрока
    показать одну карту дилера
    </b></code></p>"]
    DisplayHands --> PlayerInput{"Ввод игрока: 'hit' или 'stand'"}
    PlayerInput -- "hit" --> PlayerHit["<p align='left'>Игрок берет карту:
    <code><b>
        playerHand.append(deck.pop())
    </b></code></p>"]
    PlayerHit --> CalculatePlayerHandValue["<code><b>playerHandValue</b></code>"]
    CalculatePlayerHandValue --> CheckPlayerBust{"Проверка: <code><b>playerHandValue > 21</b></code>?"}
    CheckPlayerBust -- Да --> OutputPlayerBust["Вывод сообщения: <b>Игрок проиграл (перебор)</b>"]
    OutputPlayerBust --> End["Конец"]
    CheckPlayerBust -- Нет --> PlayerTurnStart
    PlayerInput -- "stand" --> DealerTurnStart{"Начало хода дилера"}
    DealerTurnStart --> CalculateDealerHandValue["<code><b>dealerHandValue</b></code>"]
    CalculateDealerHandValue --> CheckDealerHit{"Проверка: <code><b>dealerHandValue < 17</b></code>?"}
    CheckDealerHit -- Да --> DealerHit["<p align='left'>Дилер берет карту:
    <code><b>
        dealerHand.append(deck.pop())
    </b></code></p>"]
    DealerHit --> CalculateDealerHandValue
    CheckDealerHit -- Нет --> DetermineWinner["<p align='left'>Определение победителя:
    <code><b>
        сравнить playerHandValue и dealerHandValue
    </b></code></p>"]
    DetermineWinner --> OutputResult["<p align='left'>Вывод результата: 
    <code><b>
        сообщение о победе, проигрыше или ничьей
    </b></code></p>"]
    OutputResult --> End
```
Legenda:
    Start - Начало программы.
    InitializeGame - Инициализация игры: создание колоды, перемешивание, создание пустых списков карт игрока и дилера.
    DealInitialCards - Раздача первых двух карт игроку и дилеру.
    PlayerTurnStart - Начало хода игрока.
    DisplayHands - Отображение карт игрока и одной открытой карты дилера.
    PlayerInput - Запрос у игрока действия: взять карту ('hit') или остановиться ('stand').
    PlayerHit - Игрок берет еще одну карту из колоды.
    CalculatePlayerHandValue - Вычисление текущей суммы очков карт игрока.
    CheckPlayerBust - Проверка, не превысила ли сумма очков игрока 21 (перебор).
    OutputPlayerBust - Вывод сообщения о проигрыше игрока из-за перебора.
    DealerTurnStart - Начало хода дилера.
    CalculateDealerHandValue - Вычисление текущей суммы очков карт дилера.
    CheckDealerHit - Проверка, нужно ли дилеру брать еще карту (если сумма меньше 17).
    DealerHit - Дилер берет еще одну карту из колоды.
    DetermineWinner - Определение победителя на основе сумм очков игрока и дилера.
    OutputResult - Вывод сообщения о результате игры (победа, поражение или ничья).
    End - Конец игры.
```
```python
import random

def calculate_hand_value(hand):
    """
    Вычисляет общую сумму очков карт в руке, учитывая, что туз (1) может быть равен 1 или 11.
    
    Аргументы:
    hand (list): Список карт в руке.

    Возвращает:
    int: Общая сумма очков карт в руке.
    """
    ace_count = hand.count(1)  # Считаем количество тузов в руке
    total = sum(hand)    # Считаем сумму очков всех карт

    # Тузы считаются за 11, если сумма не превышает 21. Иначе тузы считаются за 1
    while total > 21 and ace_count > 0:
        total -= 10    # Если сумма > 21 и туз есть, то меняем 11 на 1
        ace_count -= 1  # Уменьшаем количество тузов
    return total

def display_hands(player_hand, dealer_hand, hide_dealer=True):
    """
    Выводит на экран карты игрока и дилера.

    Аргументы:
        player_hand (list): Список карт в руке игрока.
        dealer_hand (list): Список карт в руке дилера.
        hide_dealer (bool, optional): Если True, то показывает только одну карту дилера. По умолчанию True.
    """
    print("Карты игрока:", player_hand, "Сумма:", calculate_hand_value(player_hand))

    if hide_dealer:
        print("Карты дилера: [?,", dealer_hand[1], "]") # Показываем одну карту дилера и одну скрываем
    else:
        print("Карты дилера:", dealer_hand, "Сумма:", calculate_hand_value(dealer_hand))

def play_blackjack():
    """
    Основная функция игры в блэкджек.
    """
    # Создаем колоду (используем упрощенное представление: номиналы 1-10, 10 = J, Q, K)
    deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10] * 4
    random.shuffle(deck) # Перемешиваем колоду

    player_hand = []  # Рука игрока
    dealer_hand = []  # Рука дилера

    # Раздаем по две карты игроку и дилеру
    player_hand.append(deck.pop())
    player_hand.append(deck.pop())
    dealer_hand.append(deck.pop())
    dealer_hand.append(deck.pop())

    # Показываем карты
    display_hands(player_hand, dealer_hand)

    # Ход игрока
    while True:
        player_value = calculate_hand_value(player_hand) # Вычисляем сумму очков игрока

        if player_value > 21:
            print("У вас перебор! Вы проиграли.") # Если сумма больше 21, то игрок проиграл
            break  # Завершаем ход игрока
        
        action = input("Хотите еще карту? (hit/stand): ").lower() # Спрашиваем игрока, хочет ли он еще карту

        if action == "hit":  # Если игрок хочет еще карту
            player_hand.append(deck.pop())   # добавляем карту игроку
            display_hands(player_hand, dealer_hand)  # Показываем карты
        elif action == "stand":   # Если игрок остановился
            break # Завершаем ход игрока
        else:
           print("Некорректный ввод, введите 'hit' или 'stand'") # Сообщение об ошибке ввода

    # Ход дилера
    if calculate_hand_value(player_hand) <= 21:   # Если игрок не проиграл из за перебора
        print("\nХод дилера:")  # Переходим к ходу дилера
        while calculate_hand_value(dealer_hand) < 17:   # Дилер берет карты, пока сумма меньше 17
            dealer_hand.append(deck.pop())
            display_hands(player_hand, dealer_hand, False)  # Показываем карты дилера

    # Выводим карты дилера
    display_hands(player_hand, dealer_hand, False) # Показываем карты дилера

    # Определяем победителя
    player_value = calculate_hand_value(player_hand) # Вычисляем сумму очков игрока
    dealer_value = calculate_hand_value(dealer_hand) # Вычисляем сумму очков дилера

    if player_value > 21:  # Если у игрока перебор, то дилер победил (уже обработано выше, но оставим для логики)
       pass
    elif dealer_value > 21: # Если у дилера перебор, то игрок победил
        print("Дилер перебрал! Вы выиграли!")
    elif player_value > dealer_value:   # Если у игрока сумма больше чем у дилера
        print("Вы выиграли!")
    elif player_value < dealer_value:    # Если у игрока сумма меньше чем у дилера
        print("Вы проиграли.")
    else:
        print("Ничья!") # Если суммы равны, то ничья

if __name__ == "__main__":
    play_blackjack()
```
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для перемешивания колоды карт.

2. **Функция `calculate_hand_value(hand)`**:
   - Принимает список `hand` (карты игрока или дилера) в качестве аргумента.
   - `ace_count = hand.count(1)`: Подсчитывает количество тузов (карта со значением 1) в руке.
   - `total = sum(hand)`: Считает общую сумму очков карт в руке, изначально считая туз за 1.
   - `while total > 21 and ace_count > 0`: Цикл, который обрабатывает ситуацию, когда сумма очков больше 21 и есть тузы. Если есть туз, то его значение меняется с 11 на 1, чтобы уменьшить сумму.
   - Возвращает общую сумму очков карт в руке.

3. **Функция `display_hands(player_hand, dealer_hand, hide_dealer=True)`**:
   - Принимает список карт игрока (`player_hand`), список карт дилера (`dealer_hand`) и необязательный параметр `hide_dealer` (по умолчанию `True`).
   - Выводит карты игрока с общей суммой очков.
   - Если `hide_dealer` равно `True`, то выводит только одну карту дилера и одну скрытую карту, иначе выводит все карты дилера с общей суммой очков.

4. **Функция `play_blackjack()`**:
   -  `deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10] * 4`: Создает колоду карт, где каждая карта повторяется 4 раза. (упрощенное представление)
   - `random.shuffle(deck)`: Перемешивает колоду карт.
   - Инициализирует пустые списки `player_hand` и `dealer_hand` для хранения карт игрока и дилера.
   - Раздает по две карты игроку и дилеру, используя метод `pop()` для извлечения карт из колоды.
   - Вызывает функцию `display_hands()` для отображения карт игрока и дилера.
   - **Ход игрока**:
     - Запускает цикл `while True` для хода игрока.
     - Вычисляет сумму очков игрока, используя функцию `calculate_hand_value()`.
     - Если сумма очков игрока больше 21, выводит сообщение о проигрыше и завершает ход игрока с помощью `break`.
     - Запрашивает у игрока действие ('hit' или 'stand').
     - Если игрок выбирает 'hit', добавляет ему карту и отображает новые карты.
     - Если игрок выбирает 'stand', завершает цикл.
     - Если ввод некорректный, выводит сообщение об ошибке.
  - **Ход дилера**:
    - Если игрок не проиграл из-за перебора, то начинается ход дилера.
    - Выводит сообщение о начале хода дилера.
    - Использует цикл `while` для добавления карт дилеру, пока сумма очков меньше 17.
    - Выводит карты дилера после каждого добавления.
  - Выводит все карты дилера, используя `display_hands()`.
  - **Определение победителя**:
    - Вычисляет сумму очков игрока и дилера.
    - Сравнивает суммы и выводит сообщение о победе, проигрыше или ничьей.
5. **Запуск игры**:
   -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_blackjack()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
   -  `play_blackjack()`: Вызывает функцию для начала игры.
