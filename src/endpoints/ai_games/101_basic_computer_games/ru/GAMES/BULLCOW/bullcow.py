"""
BULLCOW:
=================
Сложность: 5
-----------------
Игра "Быки и коровы" - это игра для двух игроков, в которой один игрок загадывает четырехзначное число, а другой пытается его угадать. После каждой попытки отгадывающий получает подсказки в виде количества "быков" (цифры угаданы и находятся на правильных местах) и "коров" (цифры угаданы, но находятся на неправильных местах).

Правила игры:
1. Компьютер загадывает четырехзначное число, в котором все цифры разные.
2. Игрок пытается угадать это число, вводя свои предположения.
3. После каждой попытки компьютер сообщает количество "быков" и "коров".
    - "Бык" - это цифра угадана и находится в правильной позиции.
    - "Корова" - это цифра угадана, но находится в неправильной позиции.
4. Игра продолжается, пока игрок не угадает загаданное число (то есть, не получит 4 "быка").
-----------------
Алгоритм:
1. Сгенерировать случайное 4-значное число с разными цифрами.
2. Установить количество попыток в 0.
3. Начать цикл "пока не угадано":
    3.1 Увеличить количество попыток на 1.
    3.2 Запросить у игрока ввод 4-значного числа.
    3.3 Инициализировать счетчики быков (B) и коров (C) в 0.
    3.4 Пройтись по каждой цифре загаданного числа и ввода игрока:
        3.4.1 Если цифры на данной позиции совпадают, увеличить счетчик быков (B).
        3.4.2 Иначе, если цифра ввода есть в загаданном числе (но не на этой же позиции) увеличить счетчик коров (C).
    3.5 Вывести количество быков и коров: "B быков, C коров".
    3.6 Если количество быков равно 4, вывести сообщение "YOU GOT IT IN {число попыток} GUESSES!" и завершить игру.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateTargetNumber["<p align='left'>Сгенерировать случайное 4-значное число <br>с разными цифрами: <code><b>targetNumber</b></code></p>"]
    GenerateTargetNumber --> InitializeGuesses["<code><b>numberOfGuesses = 0</b></code>"]
    InitializeGuesses --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод 4-значного числа: <code><b>userGuess</b></code>"]
    InputGuess --> InitializeBullsCows["<code><b>bulls = 0, cows = 0</b></code>"]
    InitializeBullsCows --> CheckBullsCows{"<p align='left'>Проверка <code><b>targetNumber</b></code> и <code><b>userGuess</b></code>:<br> подсчет <code><b>bulls</b></code> и <code><b>cows</b></code></p>"}
    CheckBullsCows --> OutputBullsCows["Вывод: <code><b>{bulls}</b></code> быков, <code><b>{cows}</b></code> коров"]
    OutputBullsCows --> CheckWin{"<code><b>bulls == 4</b></code>?"}
    CheckWin -- Да --> OutputWin["Вывод сообщения:<br> <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> End
```
**Legenda**:
   - Start - Начало программы.
   - GenerateTargetNumber - Генерация случайного 4-значного числа с уникальными цифрами.
   - InitializeGuesses - Инициализация счетчика попыток `numberOfGuesses` в 0.
   - LoopStart - Начало цикла, который продолжается, пока число не угадано.
   - IncreaseGuesses - Увеличение счетчика количества попыток на 1.
   - InputGuess - Запрос у пользователя ввода 4-значного числа `userGuess`.
   - InitializeBullsCows - Инициализация счетчиков `bulls` (быки) и `cows` (коровы) в 0.
   - CheckBullsCows - Проверка соответствия цифр в `userGuess` и `targetNumber` для подсчета `bulls` и `cows`.
   - OutputBullsCows - Вывод количества быков и коров на экран.
   - CheckWin - Проверка, равно ли количество быков 4.
   - OutputWin - Вывод сообщения о победе и количестве попыток.
   - End - Конец программы.
"""
import random

def generate_target_number():
    """Генерирует случайное 4-значное число с неповторяющимися цифрами."""
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits)    # Перемешиваем цифры случайным образом
    target = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + digits[3] # Собираем 4-х значное число из случайных цифр
    # Проверка, что первая цифра не 0
    if digits[0] == 0:
        return generate_target_number()
    return target

# Генерируем загаданное число
targetNumber = generate_target_number()
# Инициализируем счетчик попыток
numberOfGuesses = 0

# Основной игровой цикл
while True:
    # Увеличиваем количество попыток
    numberOfGuesses += 1
    # Запрашиваем ввод числа у пользователя
    try:
        userGuess = int(input("Введите 4-значное число: "))
    except ValueError:
        print("Пожалуйста, введите целое 4-значное число.")
        continue

    # Проверка что число 4-х значное
    if not (1000 <= userGuess <= 9999):
        print("Пожалуйста, введите 4-значное число.")
        continue

    # Инициализация счетчиков быков и коров
    bulls = 0
    cows = 0
    
    # Преобразуем загаданное число и ввод пользователя в строки, чтобы было проще сравнивать цифры
    target_str = str(targetNumber)
    guess_str = str(userGuess)

    # Проходим по каждой цифре
    for i in range(4):
        if guess_str[i] == target_str[i]:
            # Если цифры на одной и той же позиции совпадают, это "бык"
            bulls += 1
        elif guess_str[i] in target_str:
            # Если цифра есть в загаданном числе, но не на той же позиции, это "корова"
            cows += 1
            
    # Вывод количества быков и коров
    print(f"{bulls} быков, {cows} коров")

    # Проверка на победу
    if bulls == 4:
        print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")
        break  # Завершение игры при выигрыше

"""
Объяснение кода:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел и перемешивания элементов списка.
2.  **Функция `generate_target_number()`**:
    -  Генерирует случайное 4-значное число с неповторяющимися цифрами:
        - `digits = list(range(10))`: Создает список цифр от 0 до 9.
        - `random.shuffle(digits)`: Перемешивает список цифр случайным образом.
        - `target = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + digits[3]`: Собирает 4-значное число из первых четырех случайных цифр.
        - `if digits[0] == 0:`: Проверка, что первая цифра не ноль, если это так, то рекурсивно вызывается функция для генерации нового числа.
        - `return target`: Возвращает сгенерированное число.
3.  **Инициализация переменных**:
    -   `targetNumber = generate_target_number()`: Генерирует загаданное 4-значное число и сохраняет его в `targetNumber`.
    -   `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses` для подсчета количества попыток игрока.
4.  **Основной цикл `while True:`**:
    -   Бесконечный цикл, который продолжается, пока игрок не угадает число (не сработает команда `break`).
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1.
    -   **Ввод данных**:
        -   `try...except ValueError`: Блок try-except обрабатывает ошибки, когда пользователь вводит не число.
        -   `userGuess = int(input("Введите 4-значное число: "))`: Запрашивает у пользователя 4-значное число и сохраняет его в `userGuess`.
        - `if not (1000 <= userGuess <= 9999):`: Проверяет, что число 4-х значное.
    -   **Инициализация счетчиков "быков" и "коров"**:
        -   `bulls = 0`: Инициализирует счетчик "быков" в 0.
        -   `cows = 0`: Инициализирует счетчик "коров" в 0.
    -   **Преобразование чисел в строки**:
         - `target_str = str(targetNumber)`: Преобразуем загаданное число в строку.
         - `guess_str = str(userGuess)`: Преобразуем ввод пользователя в строку.
    -   **Проверка на "быков" и "коров"**:
        -   `for i in range(4):`:  Цикл для проверки каждой цифры введенного числа:
            -   `if guess_str[i] == target_str[i]:`:  Если цифры на одинаковых позициях совпадают, увеличиваем `bulls` на 1.
            -  `elif guess_str[i] in target_str:`: Если цифра из введенного числа есть в загаданном числе, но не на той же позиции, увеличиваем `cows` на 1.
    -   **Вывод количества "быков" и "коров"**:
        -   `print(f"{bulls} быков, {cows} коров")`: Выводит на экран количество "быков" и "коров".
    -   **Условие победы**:
        -   `if bulls == 4:`: Проверяет, равно ли количество "быков" 4 (все цифры угаданы).
        -   `print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")`: Выводит сообщение о победе и количестве попыток.
        -   `break`: Завершает цикл, если число угадано.
"""
