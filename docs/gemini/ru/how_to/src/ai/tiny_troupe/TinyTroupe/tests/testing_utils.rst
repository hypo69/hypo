Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит набор функций, полезных для тестирования модуля `tinytroupe`.  Функции предназначены для проверки различных аспектов данных, таких как наличие определенных типов действий или стимулов в списках, проверку типа последнего действия, проверку истинности утверждений с использованием LLM.  Также код включает вспомогательные функции для работы с файлами (удаление, получение путей), создание тестовых миров и агентов, а также очистку тестовых данных.

Шаги выполнения
-------------------------
1. **Импорт необходимых модулей**: Код импортирует модули `os`, `sys`, `time`, `tinytroupe.openai_utils`, `tinytroupe.agent`, `tinytroupe.environment`, `pytest` и `importlib`. Он добавляет пути к каталогам `tinytroupe/` и `../` в `sys.path`, что позволяет импортировать модули из этих каталогов. Также добавляет путь к текущей директории.


2. **Кэширование API**:  Функция `force_api_cache` устанавливает кэширование API (OpenAI) для ускорения тестов.


3. **Функции проверки действий и стимулов**:
    - Функции `contains_action_type`, `contains_action_content`, `contains_stimulus_type`, `contains_stimulus_content` проверяют наличие действий или стимулов с заданными типами или содержанием в списках. Они используют методы `lower()` для сравнения строк без учета регистра.
    - Функция `terminates_with_action_type` проверяет, заканчивается ли список действий заданным типом действия.


4. **Проверка утверждений с помощью LLM**: Функция `proposition_holds` формирует запросы к LLM (через `openai_utils`) для проверки истинности заданного утверждения. Она очищает ответ LLM от небуквенно-цифровых символов и проверяет начало ответа на "true" или "false".


5. **Вспомогательные функции**:
    - `only_alphanumeric` возвращает строку, содержащую только буквенно-цифровые символы.
    - `create_test_system_user_message` создает список сообщений для LLM, состоящий из одного системного и (при необходимости) одного пользовательского сообщения.


6. **Функции для работы с агентами и мирами**:
    - `agents_configs_are_equal` сравнивает конфигурации двух агентов, игнорируя заданный ключ (по умолчанию - имя).
    - `remove_file_if_exists` удаляет файл, если он существует.
    - `get_relative_to_test_path` возвращает путь к файлу теста с заданным суффиксом.

7. **Фикстуры**:
    - `focus_group_world` создаёт тестовый мир со списком агентов.
    - `setup` очищает данные для тестирования.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    from testing_utils import focus_group_world, contains_action_type

    def test_focus_group_world(focus_group_world):
        # Проверка наличия действия определенного типа
        assert contains_action_type(focus_group_world.actions, "ask_question")


    # Пример использования функции для проверки утверждения
    def test_proposition():
        result = proposition_holds("The sky is blue.")
        assert result is True