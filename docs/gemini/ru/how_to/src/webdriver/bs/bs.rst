Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код предоставляет класс `BS` для парсинга HTML-страниц, загруженных из файла или URL, используя библиотеки `BeautifulSoup` и `lxml`.  Класс умеет получать HTML-контент из файлов и URL-адресов, а также выполнять поиск элементов на странице по различным селекторам (ID, CSS, текст).

Шаги выполнения
-------------------------
1. **Инициализация класса `BS`:**  Создается экземпляр класса `BS`. Если необходимо, можно передать URL-адрес или путь к файлу в конструктор `__init__`.
2. **Получение HTML-контента (метод `get_url`):**
    - Проверяется, является ли `url` путем к файлу (`file://`). Если да, то:
        - Извлекается путь к файлу из `url`, обрабатывая префиксы и специальные символы.
        - Проверяется существование файла.
        - Файл открывается в режиме чтения (`r`) с кодировкой `utf-8`.
        - Чтение содержимого файла и сохранение в `html_content`.
        - Возвращается `True` при успешном чтении.
        - В случае ошибок (например, файл не найден), записываются сообщения об ошибках в лог (`logger.error`).
    - Проверяется, является ли `url` URL-адресом (`https://`). Если да:
        - Используется `requests.get()` для загрузки страницы.
        - Проверяется статус ответа (`response.raise_for_status()`).
        - Содержимое страницы сохраняется в `html_content`.
        - Возвращается `True` при успешной загрузке.
        - В случае ошибок (например, ошибка сети) записываются сообщения об ошибках в лог (`logger.error`).
    - В остальных случаях пишет сообщение об ошибке в лог и возвращает `False`.
3. **Выполнение поиска элементов (метод `execute_locator`):**
    -  Передается `locator`, содержащий информацию о поиске (атрибут, тип селектора, селектор).
    -  Если задан `url`, вызывается метод `get_url` для загрузки HTML-контента.
    -  Используя `BeautifulSoup`, парсится `html_content`.
    -  Преобразуется `BeautifulSoup` объект в `lxml` дерево.
    -  Выполняется поиск элементов на основе типа селектора (`by`) и атрибута (`attribute`) или селектора (`selector`). Результат сохраняется в `elements`.
    -  Возвращает найденные элементы (`elements`).
    -  В случае ошибок в парсинге или поиске выводится сообщение об ошибке в лог.


Пример использования
-------------------------
.. code-block:: python

    from src.webdriver import Driver
    from hypotez.src.webdriver.bs import BS
    import SimpleNamespace

    # Предполагается, что у вас есть объект locator, который содержит нужные параметры для поиска
    locator = SimpleNamespace(attribute='my-element-id', by='ID', selector='//div[@class="my-class"]')

    bs_instance = BS()  # Инициализация класса BS
    
    # Загрузка страницы из файла
    success = bs_instance.get_url('file:///C:/Users/Documents/example.html') 
    if success:
        elements = bs_instance.execute_locator(locator=locator)
        if elements:
            for element in elements:
                print(element.text)  # или другие методы работы с найденным элементом
        else:
            print("Элементы не найдены")
    else:
        print("Ошибка при загрузке файла")

    # Загрузка страницы из URL
    success = bs_instance.get_url('https://example.com')
    if success:
        elements = bs_instance.execute_locator(locator=locator, url='https://example.com')
        if elements:
            for element in elements:
                print(element.text)  # или другие методы работы с найденным элементом
        else:
            print("Элементы не найдены")
    else:
        print("Ошибка при загрузке страницы")