"""
SALVO I:
=================
Сложность: 4
-----------------
Игра "Морской бой" (Salvo I) - это текстовая игра, в которой игрок пытается потопить корабли, размещенные компьютером на игровом поле размером 10 на 10. Игрок вводит координаты выстрела, и компьютер сообщает о результате (попал, мимо или повтор).  Игра заканчивается, когда все корабли противника потоплены.

Правила игры:
1. Игровое поле - квадрат 10 на 10.
2. Компьютер размещает 5 кораблей.
3. Игрок вводит координаты выстрела в формате "X,Y" (например, "2,5").
4. Компьютер сообщает результат выстрела: "HIT", "MISS" или "ALREADY HIT".
5. Игра продолжается, пока игрок не потопит все корабли.
-----------------
Алгоритм:
1. Инициализировать игровое поле 10x10, заполненное нулями (пустое море).
2. Разместить 5 кораблей на игровом поле (координаты заданы жестко в коде).
3. Установить счетчик попаданий в 0.
4. Начать цикл "пока количество попаданий меньше 5":
    4.1 Запросить у игрока ввод координат выстрела в формате "X,Y".
    4.2 Проверить, не был ли этот выстрел сделан ранее (если в координате не 0, то выстрел был).
       4.2.1 Если выстрел был, сообщить об этом игроку и повторить запрос координат.
    4.3 Если выстрел попал в корабль:
       4.3.1 Увеличить счетчик попаданий на 1.
       4.3.2 Сообщить игроку о попадании ("HIT").
       4.3.3 Изменить значение в координате на 1 (попадание).
    4.4 Если выстрел промахнулся:
       4.4.1 Сообщить игроку о промахе ("MISS").
       4.4.2 Изменить значение в координате на 2 (промах).
5. Когда количество попаданий достигнет 5, вывести сообщение о победе.
6. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBoard["Инициализация игрового поля: 10x10 (заполнено нулями)"]
    InitializeBoard --> PlaceShips["Размещение 5 кораблей на поле (жестко заданные координаты)"]
    PlaceShips --> InitializeHits["Инициализация счетчика попаданий: <code>hits = 0</code>"]
    InitializeHits --> LoopStart{"Начало цикла: пока <code>hits < 5</code>"}
    LoopStart -- Да --> InputCoordinates["Ввод координат выстрела: <code>X,Y</code>"]
    InputCoordinates --> CheckPreviousHit{"Проверка: Выстрел в эти координаты уже был?"}
    CheckPreviousHit -- Да --> OutputAlreadyHit["Вывод сообщения: <b>ALREADY HIT</b>"]
    OutputAlreadyHit --> InputCoordinates
    CheckPreviousHit -- Нет --> CheckHit{"Проверка: Попал в корабль?"}
    CheckHit -- Да --> IncreaseHits["<code>hits = hits + 1</code>"]
    IncreaseHits --> OutputHit["Вывод сообщения: <b>HIT</b>"]
    OutputHit --> MarkHit["Отметить попадание на поле"]
    MarkHit --> LoopStart
    CheckHit -- Нет --> OutputMiss["Вывод сообщения: <b>MISS</b>"]
    OutputMiss --> MarkMiss["Отметить промах на поле"]
    MarkMiss --> LoopStart
    LoopStart -- Нет --> OutputWin["Вывод сообщения: <b>YOU SANK ALL MY SHIPS!</b>"]
    OutputWin --> End["Конец"]
```

Legenda:
    Start - Начало программы.
    InitializeBoard - Создание и инициализация игрового поля 10x10, заполненного нулями.
    PlaceShips - Размещение кораблей на игровом поле. Координаты кораблей задаются жестко в коде.
    InitializeHits - Инициализация счетчика попаданий, который начинается с нуля.
    LoopStart - Начало цикла, который продолжается, пока количество попаданий меньше 5.
    InputCoordinates - Запрос у пользователя координат выстрела в формате "X,Y".
    CheckPreviousHit - Проверка, был ли уже произведен выстрел в эти координаты.
    OutputAlreadyHit - Вывод сообщения "ALREADY HIT", если выстрел в эти координаты был произведен ранее.
    CheckHit - Проверка, попал ли выстрел в корабль.
    IncreaseHits - Увеличение счетчика попаданий на 1.
    OutputHit - Вывод сообщения "HIT" при попадании в корабль.
    MarkHit - Отметка попадания на игровом поле (обычно числом 1).
    OutputMiss - Вывод сообщения "MISS" при промахе.
    MarkMiss - Отметка промаха на игровом поле (обычно числом 2).
     OutputWin - Вывод сообщения о победе, когда все корабли потоплены.
    End - Конец программы.
"""
import sys



# Инициализация игрового поля 10x10 нулями
board = [[0 for _ in range(10)] for _ in range(10)]

# Координаты кораблей (жестко заданы)
ships = [(2, 2), (2, 4), (2, 6), (4, 2), (4, 8)]

# Размещение кораблей на поле, отметив их значением 3
for ship_x, ship_y in ships:
    board[ship_x][ship_y] = 3


# Счетчик попаданий
hits = 0
# Основной игровой цикл
while hits < 5:
    try:
        # Запрашиваем координаты выстрела
        coordinates_input = input("Введите координаты выстрела (x,y): ")
        x, y = map(int, coordinates_input.split(','))
        # Проверка на корректность ввода координат
        if not (0 <= x < 10 and 0 <= y < 10):
            print("Некорректные координаты. Пожалуйста, введите значения от 0 до 9.")
            continue

        # Проверяем, был ли уже произведен выстрел в эти координаты
        if board[x][y] == 1 or board[x][y] == 2:
            print("ALREADY HIT")
            continue
        # Проверяем, попали ли мы в корабль
        if board[x][y] == 3:
            hits += 1 # Увеличиваем счетчик попаданий
            print("HIT")
            board[x][y] = 1 # Отмечаем попадание на поле (значение 1)
        else:
            print("MISS")
            board[x][y] = 2  # Отмечаем промах на поле (значение 2)
    except ValueError:
        print("Неверный формат ввода. Введите координаты в формате x,y")
    except KeyboardInterrupt:
       print("\nИгра прервана пользователем.")
       sys.exit()

# Вывод сообщения о победе
print("YOU SANK ALL MY SHIPS!")
"""
Объяснение кода:
1.  **Инициализация игрового поля**:
    -   `board = [[0 for _ in range(10)] for _ in range(10)]`: Создается двумерный список (матрица) 10x10, представляющий игровое поле. Все ячейки изначально заполнены нулями, что обозначает пустое море.
2.  **Размещение кораблей**:
    -   `ships = [(2, 2), (2, 4), (2, 6), (4, 2), (4, 8)]`: Определены координаты расположения кораблей на игровом поле.
    -   Цикл `for ship_x, ship_y in ships: board[ship_x][ship_y] = 3`: Проходит по координатам кораблей и устанавливает значение 3 в соответствующих ячейках игрового поля, что обозначает размещение корабля.
3.  **Счетчик попаданий**:
    -   `hits = 0`: Инициализируется переменная hits для подсчета количества попаданий.
4.  **Основной игровой цикл `while hits < 5:`**:
    -   Цикл продолжается, пока количество попаданий не достигнет 5 (пока не будут потоплены все корабли).
    -   **Ввод координат**:
        -   `coordinates_input = input("Введите координаты выстрела (x,y): ")`: Запрашивает у игрока ввод координат выстрела в формате "x,y".
        -   `x, y = map(int, coordinates_input.split(','))`: Разделяет введенную строку на два числа (x и y) и преобразует их в целые числа.
        -   **Проверка на корректность ввода координат**:
            -    `if not (0 <= x < 10 and 0 <= y < 10):`: Проверяет, что введенные координаты находятся в пределах игрового поля (от 0 до 9). Если координаты некорректны, выводится сообщение об ошибке, и цикл продолжается со следующей итерации.
    -   **Проверка на повторный выстрел**:
        -    `if board[x][y] == 1 or board[x][y] == 2:`: Проверяет, не был ли уже произведен выстрел в эти координаты (значения 1 и 2 соответствуют попаданию и промаху соответственно). Если выстрел был, выводится сообщение "ALREADY HIT", и цикл продолжается со следующей итерации.
    -   **Проверка на попадание**:
        -  `if board[x][y] == 3:`: Проверяет, попал ли выстрел в корабль (значение 3).
            -   `hits += 1`: Увеличивает счетчик попаданий на 1.
            -   `print("HIT")`: Выводит сообщение о попадании.
            -   `board[x][y] = 1`: Отмечает попадание в ячейке поля, устанавливая значение 1.
    -   **Промах**:
        -  `else:`: Если выстрел не попал в корабль.
            -    `print("MISS")`: Выводит сообщение о промахе.
            -    `board[x][y] = 2`: Отмечает промах в ячейке поля, устанавливая значение 2.
     - **Обработка ошибок ввода**
        - `except ValueError`: обрабатывает ошибку `ValueError`, которая может возникнуть, если пользователь ввел не числовые значения координат. Выводится сообщение об ошибке.
        - `except KeyboardInterrupt`: обрабатывает прерывание игры пользователем (например, нажатием Ctrl+C). Выводится сообщение о прерывании, и игра завершается.
5. **Конец игры**:
    -   `print("YOU SANK ALL MY SHIPS!")`: Когда цикл while завершается (все 5 кораблей потоплены), выводится сообщение о победе.
"""
