Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует API-эндпоинт `/ask`, который принимает запросы POST с JSON-данными.  Этот эндпоинт использует модель Google Generative AI для ответа на предоставленный запрос.  Если запрос не получен, или при обращении к модели возникает ошибка, то возвращается соответствующий код ошибки.


Шаги выполнения
-------------------------
1. **Импортирует необходимые библиотеки:** `header`, `Flask`, `request`, `jsonify`, и `GoogleGenerativeAI`.
2. **Инициализирует Flask приложение:** создает экземпляр приложения Flask.
3. **Инициализирует объект модели:** создает экземпляр класса `GoogleGenerativeAI`.
4. **Определяет маршрут `/ask`:** метод `ask()` обрабатывает запросы POST на этот маршрут.
5. **Получает данные запроса:** извлекает JSON-данные из запроса POST.
6. **Проверяет наличие запроса:** проверяет, содержится ли в данных поле `prompt`. Если нет, возвращает ошибку 400 с сообщением "No prompt provided".
7. **Обращается к модели:** вызывает метод `ask()` объекта `ai_model` с полученным запросом `prompt`.
8. **Возвращает ответ:** возвращает JSON-ответ с ключом "reply" и полученным ответом модели.
9. **Обрабатывает ошибки:** обрабатывает любые исключения, возникающие при обращении к модели, и возвращает JSON-ответ с ошибкой 500 и сообщением об ошибке.
10. **Запускает приложение:** если это основной скрипт, запускает веб-приложение Flask в режиме отладки.


Пример использования
-------------------------
.. code-block:: python

    import requests
    import json

    # Запрос к API
    url = 'http://127.0.0.1:5000/ask'  # Замените на адрес вашего приложения
    data = {
        "prompt": "Напишите стихотворение о коте."
    }

    headers = {'Content-Type': 'application/json'}

    response = requests.post(url, headers=headers, data=json.dumps(data))

    # Обработка ответа
    if response.status_code == 200:
        try:
            response_data = response.json()
            reply = response_data.get('reply')
            if reply:
                print(reply)
            else:
                print("Нет ответа.")
        except json.JSONDecodeError as e:
            print(f"Ошибка декодирования JSON: {e}")

    else:
        try:
            error_data = response.json()
            error_message = error_data.get('error')
            print(f"Ошибка: {error_message}")
        except json.JSONDecodeError as e:
            print(f"Ошибка декодирования JSON: {e}")