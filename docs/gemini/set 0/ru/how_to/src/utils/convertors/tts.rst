Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит функции для распознавания речи (speech recognition) и преобразования текста в речь (text-to-speech). Функция `speech_recognizer` загружает аудиофайл (с URL или локального пути), преобразует его в формат WAV, распознает речь и возвращает распознанный текст. Функция `text2speech` преобразует текст в аудиофайл формата WAV, сохраняя его во временной папке и возвращает путь к сохраненному файлу.

Шаги выполнения
-------------------------
1. **Загрузка аудиофайла (функция `speech_recognizer`):**
   - Если предоставлен `audio_url`, то функция загружает аудиофайл из интернета.
   - Создает временный файл на локальном диске в формате OGG.
   - Сохраняет загруженный аудиофайл во временный файл.

2. **Преобразование в формат WAV (функция `speech_recognizer`):**
   - Преобразует загруженный аудиофайл (OGG) в формат WAV.

3. **Распознавание речи (функция `speech_recognizer`):**
   - Инициализирует распознаватель речи `speech_recognition`.
   - Читает аудиоданные из файла WAV.
   - Использует `recognize_google` для распознавания речи, используя заданный `language`.
   - Логирует распознанный текст.
   - Возвращает распознанный текст или сообщение об ошибке, если распознавание не удалось.


4. **Генерация речи (функция `text2speech`):**
   - Инициализирует генератор речи `gTTS` с заданным текстом и языком.
   - Создаёт временный аудиофайл в формате MP3.
   - Сохраняет сгенерированный аудиофайл.

5. **Преобразование в формат WAV (функция `text2speech`):**
   - Преобразует сгенерированный аудиофайл (MP3) в формат WAV.

6. **Возврат пути к файлу (функция `text2speech`):**
   - Логирует путь к сохраненному аудиофайлу WAV.
   - Возвращает путь к сохраненному аудиофайлу WAV.

Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from pathlib import Path
    from hypotez.src.utils.convertors.tts import speech_recognizer, text2speech

    async def main():
        # Распознавание речи из URL
        audio_url = 'https://example.com/audio.ogg'  # Замените на действительный URL
        recognized_text = await speech_recognizer(audio_url=audio_url)
        print(recognized_text)

        # Генерация речи
        text_to_speak = 'Это пример текста для преобразования в речь.'
        audio_path = await text2speech(text_to_speak)
        print(f"Аудиофайл сохранен в: {audio_path}")


    if __name__ == "__main__":
        asyncio.run(main())