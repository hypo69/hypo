Как документировать код в Markdown формате
========================================================================================

Описание
-------------------------
Этот документ описывает шаги по созданию подробной документации к коду, используя Markdown формат.  Включает рекомендации для модулей, классов, функций, методов и обработку исключений.

Шаги выполнения
-------------------------
1. **Модули**: Начните с описания модуля вверху файла. Укажите его предназначение. При необходимости, предоставьте примеры использования модуля в коде. Укажите поддерживаемые платформы и краткое описание. Используйте заголовки для описания атрибутов и методов модуля.

2. **Классы**: Опишите каждый класс по его назначению.  Включите описание класса, его атрибуты и методы.  Для каждого метода укажите параметры, возвращаемые значения, а также примеры использования.

3. **Функции и методы**: Документируйте каждую функцию или метод, указав параметры и возвращаемые значения.  Для каждой функции предоставьте описание ее предназначения и примеры использования в коде.

4. **Комментарии к коду**: Все комментарии в коде должны быть написаны в формате Markdown и должны объяснять, что делает конкретная часть кода.  Комментарии должны описывать логику и объяснять решения или временные решения в коде. Комментарии должны быть в блоках (в коде), а не в строках.

5. **Исключения**: Документируйте исключения для классов, методов и функций. Укажите, какие исключения могут быть возбуждены и при каких обстоятельствах.

Пример использования
-------------------------
.. code-block:: markdown

    # Модуль: Программа анализа кода
    
    Этот модуль содержит класс `АнализаторКода`, который используется для взаимодействия с различными моделями ИИ, такими как Google Gemini и OpenAI, для задач обработки кода.
    
    ## Примеры использования
    
    Пример использования класса `АнализаторКода`:
    
    ```python
    анализатор = АнализаторКода(роль='проверяющий_код', язык='ru', модели=['gemini'])
    анализатор.обработать_файлы()
    ```