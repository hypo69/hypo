Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `ProgramSettings`, который загружает настройки программы из файла `config.json` и базы данных KeePass.  Класс является синглтоном, гарантируя, что существует только один экземпляр `ProgramSettings` во всем приложении.  Он хранит различные типы данных, включая пути к файлам, настройки API, пароли и другие важные параметры.  Ключевой частью является функция `_load_credentials`, которая загружает данные из KeePass, обрабатывая каждый тип учетных данных (например, Aliexpress, OpenAI, Telegram и др.) с помощью отдельных методов. Также класс содержит настройку переменных окружения и путей.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует модули `datetime`, `getpass`, `os`, `sys`, `json`, `warnings`, `pathlib`, `dataclasses`, `typing`, `pydantic`, `pykeepass`, а также пользовательские модули для работы с логами, файлами, проверкой релизов и форматированием вывода.

2. **Определение функции `set_project_root`:** Эта функция находит корневой каталог проекта, начиная от текущего файла и идя вверх по дереву каталогов.  Она использует заданные маркерные файлы (например, `pyproject.toml`, `requirements.txt`) для определения корневого каталога. Находит корневой каталог, добавляет его в `sys.path` и возвращает `Path` объект.

3. **Определение декоратора `singleton`:** Этот декоратор обеспечивает создание только одного экземпляра класса `ProgramSettings` в течение всего выполнения программы.

4. **Определение класса `ProgramSettings`:** Этот класс представляет собой структуру данных для хранения настроек.  Он использует `BaseModel` из `pydantic` для валидации данных и `Field` для определения типов и по умолчанию.

5. **Инициализация настроек в `__init__`:** В методе `__init__` происходит загрузка данных из `config.json` в `self.config`. Далее устанавливаются пути к важным каталогам: `root`, `src`, `bin`, `log`, `tmp`, `data`, `secrets`, `google_drive`, `external_storage`.

6. **Загрузка учетных данных из KeePass в `_load_credentials`:** Функция `_load_credentials` выполняет цикл для загрузки учетных данных для разных платформ (Aliexpress, OpenAI, Telegram и др.) и использует `PyKeePass` для работы с базой данных KeePass.

7. **Вызов методов для загрузки конкретных учетных данных:**  Внутри `_load_credentials` вызываются методы для загрузки конкретных учетных данных из KeePass, таких как `_load_aliexpress_credentials`, `_load_openai_credentials` и т.д.  Эти методы извлекают информацию из KeePass по заданным путям групп и полей.

8. **Обработка ошибок:** Код содержит обработку исключений (`try...except`), чтобы предотвратить сбой программы при ошибках при работе с файлами или базой данных KeePass.

9. **Возвращение настроек:** Класс возвращает структурированные данные, содержащие пути и учетные данные.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.credentials import ProgramSettings

    settings = ProgramSettings()

    # Доступ к настройкам
    print(settings.credentials.aliexpress.api_key)
    print(settings.path.secrets)