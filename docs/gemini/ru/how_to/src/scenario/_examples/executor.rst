Как использовать модуль executor
========================================================================================

Описание
-------------------------
Этот документ содержит инструкции по использованию модуля `executor` из пакета `src.scenario.executor`.  Модуль предоставляет функции для выполнения сценариев, работы с файлами сценариев, обработкой данных продуктов и взаимодействием с API PrestaShop.  Примеры демонстрируют различные способы использования функций для управления сценариями, добавления купонов и асинхронной обработки данных.

Шаги выполнения
-------------------------
1. **Импорт необходимых модулей:**
   Импортируйте нужные классы и функции из модуля `executor`, а также вспомогательные модули, такие как `ProductFields`, `PrestaShop` и т.д.  В примерах используется импорт из `src.scenario.executor`, `src.utils`, `src.product` и `src.endpoints.PrestaShop`.

2. **Инициализация данных:**
   Создайте экземпляр класса, представляющего поставщика данных (например, `MockSupplier` в примерах), чтобы получить доступ к необходимым данным (файлы сценариев, настройки, API-ключи и т.д.).  Этот класс должен содержать атрибуты и методы для взаимодействия с необходимыми данными.

3. **Выбор функции для выполнения:**
   Выберите функцию `executor`, соответствующую вашей задаче (например, `run_scenario_files`, `run_scenario_file`, `run_scenario`, `insert_grabbed_data`, `add_coupon` и т.д.).  Обратите внимание на входные параметры каждой функции (например, экземпляр поставщика, путь к файлам сценариев, данные сценария, поля продукта, данные API и т.д.).

4. **Подготовка входных данных:**
   Подготовьте входные данные для выбранной функции: пути к файлам сценариев, данные сценария, данные продукта и данные PrestaShop API (например, учетные данные, код купона, ссылки на продукты и т.д.).  Используйте объекты, описанные в документе, для представления данных.

5. **Вызов функции:**
   Вызовите выбранную функцию, передав необходимые входные данные.

6. **Обработка результата:**
   Обработайте результат выполнения функции.  В некоторых примерах функция возвращает булево значение, указывающее на успех или неудачу.  Обрабатывайте случаи ошибок или исключений, которые могут возникнуть при выполнении функции.

7. **Проверка успешного выполнения:**
    Если функция вернула значение, проверьте его, например, используя условные операторы (`if`).  Если результат выполнения функции удовлетворителен, то выполнение следующего действия. Если результат неудовлетворителен, требуется перепроверка корректности входных данных или исправление ошибок.

Пример использования
-------------------------
.. code-block:: python

    from pathlib import Path
    from src.scenario.executor import run_scenario_files
    from src.scenario import MockSupplier  # Пример класса поставщика

    # Пути к файлам сценариев
    scenario_files = [Path('scenarios/scenario1.json'), Path('scenarios/scenario2.json')]

    # Создаём экземпляр класса поставщика
    supplier = MockSupplier()

    # Вызов функции для выполнения списка файлов сценариев
    result = run_scenario_files(supplier, scenario_files)

    if result:
        print("Все сценарии выполнены успешно.")
    else:
        print("Некоторые сценарии не выполнены.")