"""
<CALNDR>:
=================
Сложность: 3
-----------------
Игра "Календарь" предлагает пользователю ввести номер дня в году (от 1 до 366) и определяет, какой это день недели и какая дата.
-----------------
Правила игры:
1. Пользователю предлагается ввести номер дня в году (целое число от 1 до 366).
2. Игра вычисляет и выводит соответствующую дату (месяц и день) и день недели для введенного номера дня.
3. Игра корректно обрабатывает високосный год.
-----------------
Алгоритм:
1. Запросить у пользователя номер дня в году (dayOfYear).
2. Если номер дня меньше 1 или больше 366, сообщить об ошибке и вернуться к шагу 1.
3. Вычислить, является ли год високосным (если номер года делится на 4 без остатка, то год високосный).
4. Установить массивы monthsDaysNonLeap и monthsDaysLeap, содержащие количество дней в каждом месяце для обычного и високосного года, соответственно.
5. Инициализировать переменную monthNumber = 0 и переменную dayOfMonth = dayOfYear.
6. В цикле проверять, является ли dayOfMonth больше количества дней в текущем месяце. Если да, то вычесть количество дней текущего месяца из dayOfMonth и увеличить monthNumber на 1. Повторять до тех пор, пока dayOfMonth не станет меньше или равно количеству дней в текущем месяце.
7. Определить название месяца по его номеру.
8. Вычислить день недели (weekday). Если год начинается с воскресенья (по умолчанию), то используем формулу dayOfWeek = (dayOfYear + 6) mod 7, иначе dayOfWeek = dayOfYear mod 7.
9. Определить день недели по вычисленному номеру дня недели.
10. Вывести дату и день недели.
"""
```
```mermaid
flowchart TD
    Start(Начало) --> InputDayOfYear(Ввод номера дня в году);
    InputDayOfYear --> ValidateDayOfYear{Проверка: 1 <= dayOfYear <= 366?};
    ValidateDayOfYear -- Нет --> ErrorMessage(Сообщение об ошибке) --> InputDayOfYear;
    ValidateDayOfYear -- Да --> IsLeapYear{Проверка: Високосный год?};
    IsLeapYear -- Да --> SetDaysInMonthsLeap(Установить daysInMonthLeap);
    IsLeapYear -- Нет --> SetDaysInMonthsNonLeap(Установить daysInMonthNonLeap);
    SetDaysInMonthsLeap --> InitMonthDay(Инициализация: monthNumber = 0, dayOfMonth = dayOfYear);
    SetDaysInMonthsNonLeap --> InitMonthDay;
    InitMonthDay --> CalculateMonth{Цикл: dayOfMonth > daysInMonth[monthNumber]?};
    CalculateMonth -- Да --> UpdateMonthDay(dayOfMonth -= daysInMonth[monthNumber], monthNumber += 1) --> CalculateMonth;
    CalculateMonth -- Нет --> DetermineMonthName(Определение названия месяца);
    DetermineMonthName --> CalculateDayOfWeek(Вычисление дня недели);
    CalculateDayOfWeek --> DetermineDayOfWeekName(Определение названия дня недели);
    DetermineDayOfWeekName --> OutputResult(Вывод: дата и день недели);
    OutputResult --> End(Конец);
```
```python
"""
# <CALNDR>
# Календарь: определяет день недели и дату по номеру дня в году.
"""
def calendar_game():
    """
    Основная функция игры "Календарь".
    """
    year = 1984 # Год для вычисления високосного года,  может быть любым годом
    days_in_month_non_leap = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Массив с количеством дней в месяцах обычного года
    days_in_month_leap =   [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # Массив с количеством дней в месяцах високосного года
    months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"] # Массив с названиями месяцев
    weekdays = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"] # Массив с названиями дней недели

    while True:
        try:
            day_of_year = int(input("Введите номер дня в году (1-366): ")) # Запрашиваем ввод номера дня в году
            if day_of_year < 1 or day_of_year > 366:
                print("Ошибка: номер дня должен быть от 1 до 366.") # Сообщение об ошибке, если введено неверное значение
                continue # Переход к началу цикла
            break # Выход из цикла, если ввод корректный
        except ValueError:
            print("Ошибка: введите целое число.") # Сообщение об ошибке, если ввод не является числом


    is_leap_year = (year % 4 == 0)  # Проверка на високосный год
    if is_leap_year:
      days_in_month = days_in_month_leap
    else:
      days_in_month = days_in_month_non_leap # Выбор массива дней в зависимости от високосности года

    month_number = 0 # Инициализируем номер месяца
    day_of_month = day_of_year # Инициализируем день месяца

    while day_of_month > days_in_month[month_number]: # Цикл для определения месяца
      day_of_month -= days_in_month[month_number] # Вычитаем дни предыдущих месяцев
      month_number += 1 # Переходим к следующему месяцу

    month_name = months[month_number] # Получаем название месяца

    day_of_week = (day_of_year + 6) % 7 # Вычисляем день недели. Год начинается с воскресенья
    weekday_name = weekdays[day_of_week] # Получаем название дня недели

    print(f"Дата: {day_of_month} {month_name}, {weekday_name}") # Выводим результат
    
calendar_game()
```
```python
"""
Пояснения:
1.  `calendar_game()`:  Основная функция, которая содержит логику игры.
2.  `year = 1984`:  Год для определения високосного года. Этот год используется для определения количества дней в феврале (28 или 29).
3.  `days_in_month_non_leap`: Список, содержащий количество дней в каждом месяце для невисокосного года.
4.  `days_in_month_leap`: Список, содержащий количество дней в каждом месяце для високосного года.
5.  `months`: Список с названиями месяцев.
6.  `weekdays`: Список с названиями дней недели.
7.  `while True`: Бесконечный цикл для обработки ввода пользователя. Цикл будет повторяться до тех пор, пока пользователь не введет корректный номер дня.
8.  `try-except`:  Блок для обработки ошибок ввода пользователя.
9.  `input(...)`: Запрашивает у пользователя номер дня в году.
10. `int(...)`:  Преобразует ввод пользователя в целое число.
11. `if day_of_year < 1 or day_of_year > 366`: Проверяет корректность введенного дня (от 1 до 366).
12. `print("Ошибка: ...")`: Выводит сообщение об ошибке.
13. `continue`: Возвращается к началу цикла while.
14. `break`: Выход из цикла, если ввод корректный.
15.  `except ValueError`:  Обрабатывает ошибку, если пользователь ввел не число.
16. `is_leap_year = (year % 4 == 0)`: Определяет, является ли год високосным.
17. `if is_leap_year:`: Выбираем какой массив `days_in_month` использовать в зависимости от високосности года.
18. `month_number = 0`: Инициализирует номер месяца.
19. `day_of_month = day_of_year`: Инициализирует день месяца.
20. `while day_of_month > days_in_month[month_number]`: Цикл для определения месяца. Пока день больше дней в текущем месяце, мы вычитаем дни из общего количества дней и переходим к следующему месяцу.
21. `day_of_month -= days_in_month[month_number]`: Вычитает количество дней из текущего месяца.
22. `month_number += 1`: Переходит к следующему месяцу.
23. `month_name = months[month_number]`: Получает название месяца по его номеру.
24.  `day_of_week = (day_of_year + 6) % 7`: Вычисляет день недели, предполагая, что год начинается с воскресенья.
25. `weekday_name = weekdays[day_of_week]`: Получает название дня недели.
26. `print(f"Дата: {day_of_month} {month_name}, {weekday_name}")`: Выводит результаты.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```