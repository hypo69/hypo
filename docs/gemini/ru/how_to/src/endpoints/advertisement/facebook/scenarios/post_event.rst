Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит функции для публикации календарных событий в группах Facebook.  Функции `post_title`, `post_date`, `post_time`, `post_description` и `post_event` отвечают за заполнение различных полей события (заголовок, дата, время, описание) и отправку публикации.  Код использует `selenium.webdriver` для взаимодействия с веб-страницей и `SimpleNamespace` для структурирования данных события.  Он также подключает логгирование для вывода сообщений об ошибках.

Шаги выполнения
-------------------------
1. **Загрузка локейторов:**  Функция `post_event` загружает локейторы (xpath или CSS селекторы) для элементов страницы Facebook, необходимые для взаимодействия с формой публикации события, из файла `post_event.json`.  Это позволяет программе динамически изменять взаимодействие с формой, если структура сайта изменится.

2. **Заполнение полей события:** Функции `post_title`, `post_date`, `post_time` и `post_description` последовательно заполняют поля события в форме публикации. Каждая функция принимает экземпляр `Driver` и данные события в качестве аргументов.  Функции используют `d.execute_locator` для отправки данных в соответствующие поля.

3. **Проверка успешности заполнения:**  Внутри каждой функции `post_title`, `post_date`, `post_time` и `post_description` выполняется проверка на успешное заполнение поля.  Если запрос возвращает `False`, генерируется ошибка и выполнение останавливается, предотвращая дальнейшие действия.

4. **Отправка события:** Функция `post_event` собирает данные события (заголовок, дата, время, описание) и отправляет их с помощью вызовов функций  `post_title`, `post_date`, `post_time` и `post_description`.

5. **Обработка ошибок:**  Код содержит обработку ошибок (`logger.error`).  Если какая-либо из функций не выполняет работу, генерируется соответствующее сообщение об ошибке.

6. **Ожидание:** Функция `post_event` добавляет паузу (`time.sleep(30)`) для ожидания завершения обработки запроса, перед тем как вернуть `True`.  Это важно, так как Facebook может иметь ограничения на скорость отправки запросов.

Пример использования
-------------------------
.. code-block:: python

    from src.webdriver import Driver
    from pathlib import Path
    import simplejson as json # Возможно, требуется импортировать для работы с json
    from typing import List


    # ... (Код для инициализации Driver и загрузки данных для события) ...

    # Пример данных для события
    event_data = {
        "title": "Примерное событие",
        "start": "2024-10-27 10:00",
        "description": "Описание для публикации",
        "promotional_link" : "ссылка"
    }
    event = SimpleNamespace(**event_data)


    driver = Driver()
    if driver.is_valid:
        try:
            success = post_event(driver, event)
            if success:
                print("Событие опубликовано успешно.")
            else:
                print("Ошибка при публикации события.")
        except Exception as e:
            print(f"Произошла ошибка: {e}")
        finally:
            driver.quit()

    else:
        print("Ошибка при инициализации драйвера.")