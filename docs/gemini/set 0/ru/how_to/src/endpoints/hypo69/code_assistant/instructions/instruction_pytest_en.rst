Как написать тесты `pytest`
========================================================================================

Описание
-------------------------
Этот блок кода предоставляет инструкцию по написанию тестов с помощью библиотеки `pytest`. Он описывает шаги по созданию набора тестовых функций для проверки корректности Python-кода, используя `pytest`.  Включает рекомендации по покрытию основных функций, методов или классов, тестированию граничных и исключительных случаев, а также по использованию фикстур при необходимости.  В примере показан шаблон для структуры тестовых функций, включая комментарии, описывающие логику тестирования.

Шаги выполнения
-------------------------
1. **Проанализируйте код**: Определите функции, классы или методы, которые необходимо протестировать.  Обдумайте различные варианты ввода данных (включая корректные, некорректные, граничные случаи).  Определите ожидаемые результаты для каждого случая.

2. **Создайте тестовые функции**: Для каждой функции или метода, подлежащей тестированию, создайте отдельную тестовую функцию с описательным именем. Имя должно отражать суть выполняемого теста.  Например, `test_function1_valid_input` вместо `test_case_1`.

3. **Включите комментарии**: Добавьте комментарии в каждой тестовой функции, описывающие логику тестирования. Это поможет другим разработчикам понять, что проверяет данный тест.

4. **Используйте `pytest.raises`**: Для проверки исключений используйте декоратор `pytest.raises`.  Он позволяет проверить, что функция генерирует ожидаемое исключение при некорректном вводе.

5. **Определите фикстуры (если нужно)**: Если для тестирования требуются данные или ресурсы, определите фикстуры. Фикстуры -- это функции, возвращающие данные, необходимые для запуска тестов.

6. **Используйте примеры**: Включите пример того, как использовать данные тесты в файле.

7. **Покрытие граничных случаев**: Проверьте поведение кода на граничных значениях входных данных.  Например, проверьте работу с максимальными и минимальными значениями, пустым вводом или вводом с нулевыми значениями.

8. **Установите ожидаемый результат**:  В каждой тестовой функции явно укажите ожидаемый результат (return value, поднятое исключение, и т.д.).

9. **Разделение тестов**: Убедитесь, что каждый тест изолирован и не зависит от других тестов.

10. **Проверка на корректность**: Сравните полученные результаты теста с ожидаемыми результатами. Если результаты различаются, то тест не пройден.

Пример использования
-------------------------
.. code-block:: python

    import pytest

    def my_function(x):
        if x > 0:
            return x * 2
        else:
            raise ValueError("Input must be positive")


    def test_my_function_positive():
        """Проверяет, что функция возвращает удвоенное значение для положительного ввода."""
        assert my_function(5) == 10

    def test_my_function_zero():
        """Проверяет, что функция поднимает ValueError для нулевого ввода."""
        with pytest.raises(ValueError):
            my_function(0)

    def test_my_function_negative():
        """Проверяет, что функция поднимает ValueError для отрицательного ввода."""
        with pytest.raises(ValueError):
            my_function(-5)