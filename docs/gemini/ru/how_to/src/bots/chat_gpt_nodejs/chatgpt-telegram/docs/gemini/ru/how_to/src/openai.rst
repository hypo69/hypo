Как использовать класс OpenAI
========================================================================================

Описание
-------------------------
Этот код определяет класс `OpenAI`, предоставляющий методы для взаимодействия с API OpenAI. Класс содержит методы `chat` для отправки запросов к чат-боту и `transcription` для транскрибирования аудио.  Он использует библиотеку `openai` для доступа к API OpenAI и `config` для получения API ключа.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Импортируются классы `Configuration`, `OpenAIApi` из библиотеки `openai`, модуль `config` для доступа к конфигурации и `createReadStream` из `fs` для работы с файлами.

2. **Определение констант ролей:**  Определяются константы `ASSISTANT`, `USER`, `SYSTEM` для обозначения ролей в сообщениях чат-бота.

3. **Конструктор класса `OpenAI`:**
   - Принимает `apiKey` для инициализации.
   - Создает экземпляр `Configuration` с заданным `apiKey`.
   - Создает экземпляр `OpenAIApi` используя созданный `Configuration`.

4. **Метод `chat`:**
   - Принимает массив `messages` (объектов с ролью и текстом) для запроса к чат-боту.
   - Создает запрос к API OpenAI с помощью `createChatCompletion`.  Использует модель `gpt-3.5-turbo`.
   - Обрабатывает ответ, возвращая сообщение из ответа API.
   - Обрабатывает возможные ошибки и выводит сообщение об ошибке в консоль.

5. **Метод `transcription`:**
   - Принимает путь к файлу `filepath` для транскрибирования.
   - Использует `createReadStream` для чтения файла.
   - Создает запрос к API OpenAI с помощью `createTranscription` для транскрибирования аудио. Использует модель `whisper-1`.
   - Возвращает текст транскрипции из ответа API.
   - Обрабатывает возможные ошибки и выводит сообщение об ошибке в консоль.

6. **Создание экземпляра класса `OpenAI`:**
   - Использует `config.get('OPENAI_KEY')` для получения API ключа из конфигурации.
   - Создает экземпляр класса `OpenAI` с полученным API ключом.
   - Экспортирует экземпляр `openai` для использования в других модулях.

Пример использования
-------------------------
.. code-block:: javascript
    
    const { openai } = require('./openai')
    const messages = [
        { role: 'user', content: 'Привет!' },
    ]

    async function run() {
        const response = await openai.chat(messages)
        console.log(response.content)
    }
    run()
    
    // Пример транскрипции:
    const filepath = 'path/to/your/audio.wav'
    async function runTranscription() {
        const transcription = await openai.transcription(filepath)
        console.log(transcription)
    }
    runTranscription()