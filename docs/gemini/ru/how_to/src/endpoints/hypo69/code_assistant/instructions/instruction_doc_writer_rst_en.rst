```MD
# Инструкции по генерации документации к коду на Python (reStructuredText)

**Формат ответа:** `.rst`

**Цель:** Генерация документации в формате reStructuredText (RST) для файлов Python-кода, пригодной для дальнейшей компиляции с помощью Sphinx.

**Шаги выполнения:**

1. **Анализ кода:**  Внимательно изучите предоставленный Python-код. Обратите внимание на структуру, классы, функции и методы.  Убедитесь, что код имеет документированные строки `"""Docstring"""`.

2. **Создание файла документации (`.rst`):**  Для каждого Python-файла создайте соответствующий файл в формате reStructuredText.

3. **Заголовок и описание:** Каждый файл `.rst` должен начинаться с заголовка, описывающего модуль или класс, а также краткого описания его функциональности.

4. **Документация для функций и классов:**  Используйте Sphinx-директивы `automodule`, `autofunction`, `autoclass` для автоматической генерации документации из docstring-ов.
   * **Формат Docstring:** Строки документации (`"""Docstring"""`) должны быть написаны в формате, ожидаемом Sphinx, с `Args`, `Returns` и `Raises`.
   * **Пример:**

```python
def my_function(param1: int, param2: str = "default") -> str:
    """
    Описание функции.

    Args:
        param1 (int): Первое числовое значение.
        param2 (str, optional): Строковое значение. Defaults to "default".

    Returns:
        str: Возвращаемое значение.

    Raises:
        ValueError: Если значение param1 меньше 0.
    """
    if param1 < 0:
        raise ValueError("Значение param1 должно быть неотрицательным.")
    return f"Результат: {param1} {param2}"
```

5. **Использование RST-директивы `.. automodule::`:**  Добавьте директиву `.. automodule:: <имя_модуля>` в `.rst`-файл, чтобы включить автоматическую генерацию документации для всего модуля.

   * **Пример использования:**

```rst
Модуль name_модуля
=====================

.. automodule:: name_модуля
    :members:
    :undoc-members:
    :show-inheritance:
```

6. **Структура документации:** Используйте заголовки RST (строки, состоящие из символов `=` или `-`, `~` или `^`), чтобы разделить информацию на логические блоки (Модули, Классы, Функции).  Используйте `.. toctree::` в файле `index.rst` для создания структуры TOC (Table of Contents).

7. **Примеры:** Включайте примеры использования кода в документации, используя директиву `.. code-block:: python`.

   * **Пример:**

```rst
Пример использования
----------------------
.. code-block:: python

    result = my_function(5, "example")
    print(result)
```

8. **Обработка исключений:**  Используйте правильный формат `ex` вместо `e` для блоков обработки исключений в docstring-ах функций.

9. **Уровни заголовков:** Следуйте указанным уровням заголовков (1, 2, 3, 4).

**Пример файла index.rst:**

```rst
Главная страница
=================

.. toctree::
   :maxdepth: 2

   module1
   module2
```

**Важно:**

* Должен быть обеспечен полный, понятный и точный docstring для всех функций, классов и методов.
* Используйте корректную структуру файлов.
* Подготовьте соответствующие примеры.
* Используйте указанные директивы Sphinx для автоматической генерации.


Следуйте этим шагам для создания полного и эффективного набора документов для ваших Python-файлов.