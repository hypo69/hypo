"""
SLOTS:
=================
Сложность: 3
-----------------
Игра "Слоты" - это простая игра в "однорукого бандита". Игрок вводит ставку, а затем "крутит барабан", который выдает случайную комбинацию из трех символов (звездочка, пробел, доллар). В зависимости от выпавшей комбинации, игрок либо выигрывает, либо проигрывает.
Правила игры:
1. Игрок вводит ставку (количество жетонов).
2. Программа "крутит барабан", выдавая случайную комбинацию из трех символов.
3. Если все три символа совпадают (три звездочки, три пробела или три доллара), игрок выигрывает сумму, равную его ставке, умноженной на 10.
4. Если совпадают два символа, то игрок получает сумму, равную его ставке, умноженную на 2.
5. Если нет совпадений, игрок проигрывает ставку.
6. Игра продолжается, пока игрок не решит закончить.
-----------------
Алгоритм:
1. Инициализация: задать начальное количество жетонов.
2. Цикл игры:
    2.1. Запросить у игрока ставку.
    2.2. Если ставка больше, чем количество имеющихся жетонов, вывести сообщение об ошибке и повторить ввод ставки.
    2.3. Сгенерировать три случайных символа (звездочка, пробел или доллар).
    2.4. Вывести сгенерированную комбинацию на экран.
    2.5. Проверить комбинацию на выигрыш:
         2.5.1. Если все три символа совпадают, вычислить выигрыш (ставка * 10) и прибавить его к количеству жетонов.
         2.5.2. Если совпадают два символа, вычислить выигрыш (ставка * 2) и прибавить его к количеству жетонов.
         2.5.3. Если нет совпадений, вычесть ставку из количества жетонов.
    2.6. Вывести текущее количество жетонов.
    2.7. Запросить у игрока, хочет ли он продолжить игру. Если нет, закончить игру.
3. Конец игры: вывести сообщение о завершении игры.
-----------------
Блок-схема: 
```mermaid
graph TD
    Start[Start] --> InputTokens{Input initial tokens};
    InputTokens --> GameLoopStart{Game Loop Start};
    GameLoopStart --> InputBet{Input bet};
    InputBet -- Bet > Tokens? --> ErrorBet{Error Bet};
    ErrorBet --> InputBet
    InputBet -- Bet <= Tokens? --> GenerateSymbols{Generate symbols};
    GenerateSymbols --> OutputSymbols{Output symbols};
    OutputSymbols --> CheckWin{Check win};
    CheckWin -- Three equal symbols --> CalculateWinThree{Calculate win (bet * 10)};
    CheckWin -- Two equal symbols --> CalculateWinTwo{Calculate win (bet * 2)};
    CheckWin -- No equal symbols --> CalculateLose{Calculate lose (bet)};
    CalculateWinThree --> UpdateTokensWinThree{Update tokens}
    CalculateWinTwo --> UpdateTokensWinTwo{Update tokens}
    CalculateLose --> UpdateTokensLose{Update tokens}
    UpdateTokensWinThree --> OutputTokens{Output tokens};
    UpdateTokensWinTwo --> OutputTokens;
    UpdateTokensLose --> OutputTokens;
    OutputTokens --> ContinueGame{Continue game?};
    ContinueGame -- Yes --> GameLoopStart;
    ContinueGame -- No --> End[End];
```
"""
import random

def play_slots():
    """
    Игра "Слоты".
    Реализация игры на Python.
    """
    # Начальное количество жетонов.
    tokens = 100  
    
    # Игровой цикл.
    while True:
        print("У вас", tokens, "жетонов.")
        
        # Запрашиваем у игрока ставку.
        while True:
            try:
                bet = int(input("Введите вашу ставку (или 0 для выхода): "))
                if bet == 0:
                    print("Спасибо за игру!")
                    return  # Завершаем игру если ввели 0
                if bet > tokens:
                    print("У вас недостаточно жетонов. Попробуйте еще раз.")
                else:
                    break  # Выходим из цикла ввода ставки, если ставка валидная.
            except ValueError:
                print("Неверный ввод. Пожалуйста, введите целое число.")
                
        # Генерируем случайные символы.
        symbols = ["*", " ", "$"]
        slot1 = random.choice(symbols)
        slot2 = random.choice(symbols)
        slot3 = random.choice(symbols)
        
        print("Результат:", slot1, slot2, slot3)
        
        # Проверяем на выигрыш.
        if slot1 == slot2 and slot2 == slot3:
           # Три символа совпали. Выигрыш: ставка * 10.
           win = bet * 10
           tokens += win
           print("Вы выиграли!", win, "жетонов!")
        elif slot1 == slot2 or slot1 == slot3 or slot2 == slot3:
           # Два символа совпали. Выигрыш: ставка * 2.
           win = bet * 2
           tokens += win
           print("Вы выиграли!", win, "жетонов!")
        else:
            # Нет совпадений. Проигрыш: ставка.
            tokens -= bet
            print("Вы проиграли", bet, "жетонов.")
        
        # Выводим текущее количество жетонов.
        print("У вас теперь", tokens, "жетонов.")
        
        # Спрашиваем игрока, хочет ли он продолжить.
        if tokens <= 0:
            print("У вас закончились жетоны. Игра окончена.")
            return
        
        play_again = input("Хотите сыграть еще раз? (да/нет): ")
        if play_again.lower() != "да":
            print("Спасибо за игру!")
            break
        
if __name__ == "__main__":
    play_slots()
"""
Пояснения:
1. **`play_slots()`**:
   - Главная функция, запускающая игру.
   - `tokens`: переменная, хранящая количество жетонов у игрока (начальное значение 100).
   - `while True:`: бесконечный цикл, который позволяет игроку играть до тех пор, пока он не захочет закончить.
   - **Ввод ставки:**
      - Внутренний цикл `while True:` запрашивает у игрока ставку.
      - `try-except` блок обрабатывает ошибку, если игрок введет не целое число.
      - Проверяется, что ставка не больше имеющихся жетонов.
   - **Генерация символов:**
      - `symbols`: список возможных символов ("*", " ", "$").
      - `random.choice(symbols)`: выбирает случайный символ из списка для каждого слота.
   - **Проверка выигрыша:**
      - `if slot1 == slot2 and slot2 == slot3`: проверяет, что все три символа совпадают. Выигрыш: ставка * 10.
      - `elif slot1 == slot2 or slot1 == slot3 or slot2 == slot3`: проверяет, что два символа совпадают. Выигрыш: ставка * 2.
      - `else`: нет совпадений, игрок проигрывает ставку.
   - **Обновление жетонов:**
     -  `tokens += win` или `tokens -= bet`: обновляет количество жетонов в зависимости от результата.
   - **Продолжение игры:**
      - Запрашивает у игрока, хочет ли он играть еще раз.
      - `play_again.lower() != "да"`: проверяет ответ игрока (независимо от регистра).
      - Если у игрока закончились жетоны, игра завершается.
2. **`if __name__ == "__main__":`**:
   -  Гарантирует, что функция `play_slots()` будет выполнена только при запуске скрипта напрямую, а не при импорте как модуля.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```