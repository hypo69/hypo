Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для публикации календарных событий в группах Facebook. Он использует Selenium WebDriver для взаимодействия с веб-страницей и предоставляет функции для заполнения различных полей события (заголовок, дата, время, описание).  Функции проверяют результат выполнения каждого действия и логируют ошибки.  Ключевым элементом является `post_event`, которая управляет общим процессом.

Шаги выполнения
-------------------------
1. **Загрузка локейторов:** Функция `j_loads_ns` загружает локейторы (элементы страницы) из файла `post_event.json`, который должен находиться в директории `src/endpoints/advertisement/facebook/locators/`.  Это JSON-файл с координатами (ID, XPATH и т.д.) веб-элементов на странице.

2. **Заполнение заголовка события:** Функция `post_title` заполняет поле заголовка события.  Она принимает экземпляр `Driver` и заголовок `title` в качестве аргументов. Она использует `d.execute_locator` для ввода текста в указанное поле.  Возвращает `True` при успешном выполнении, `None` в противном случае.

3. **Заполнение даты события:** Функция `post_date` заполняет поле даты события. Аналогично `post_title`, принимает `Driver` и дату `date`.

4. **Заполнение времени события:** Функция `post_time` заполняет поле времени события. Аналогично `post_date`.

5. **Заполнение описания события:** Функция `post_description` заполняет поле описания события. Она принимает `Driver` и описание `description` в качестве аргументов.  Обратите внимание на дополнительный вызов `d.scroll` для прокрутки вниз страницы. Это необходимо, если поле описания находится ниже области видимости.

6. **Обработка отправки события:** Функция `post_event` вызывает все предыдущие функции для обработки заголовка, даты, времени и описания.  Она принимает `Driver` и объект `event`, содержащий информацию о событии.

7. **Проверка успешности:** Все функции возвращают `True`, если заполнение поля выполнено успешно, и `None` в противном случае.  Основная функция `post_event` также проверяет результат выполнения каждой подфункции и возвращает соответствующий результат.

Пример использования
-------------------------
.. code-block:: python

    from src.webdriver import Driver
    from src.endpoints.advertisement.facebook.scenarios.post_event import post_event
    from types import SimpleNamespace

    # ... (создаем экземпляр драйвера Driver) ...
    driver = Driver(...)

    # Создаем объект event с необходимыми данными
    event = SimpleNamespace(
        title="Название события",
        description="Описание события",
        start="2024-10-27 10:00",
        promotional_link="Ссылка на промо-материал"
    )
    
    # Вызываем функцию для публикации события
    success = post_event(driver, event)

    if success:
        print("Событие опубликовано успешно!")
    else:
        print("Ошибка при публикации события.")

    # ... (закрываем драйвер) ...
    driver.quit()