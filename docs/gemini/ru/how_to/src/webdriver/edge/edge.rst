Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Edge`, который расширяет базовый класс `selenium.webdriver.Edge` для работы с браузером Microsoft Edge.  Он упрощает конфигурацию WebDriver, используя `fake_useragent` для задания случайного User-Agent, и загружает исполняемые модули для работы с локаторами и JavaScript.  Класс также предоставляет методы для работы с JavaScript на странице.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует необходимые библиотеки, включая `selenium`, `fake_useragent`, `pathlib`, и другие, для работы с WebDriver и JavaScript.
2. **Определение класса `Edge`:** Определяется класс `Edge`, наследующийся от `selenium.webdriver.Edge`.
3. **Инициализация `Edge`:** Конструктор класса принимает необязательный параметр `user_agent`, позволяющий указать пользовательский User-Agent. Если параметр не указан, используется случайный User-Agent, генерируемый `fake_useragent`.  Конфигурирует `EdgeOptions` для добавления указанного `user_agent`.
4. **Загрузка настроек:** Загружает настройки из файла `edge.json` с помощью `j_loads_ns` из `src.utils.jjson`,  в частности путь к исполняемому файлу Edge WebDriver.
5. **Создание `EdgeService`:** Создает экземпляр `EdgeService`, используя путь к исполняемому файлу из настроек.
6. **Инициализация WebDriver:** Используя `super().__init__()`, инициализирует базовый класс `selenium.webdriver.Edge` с заданными `options` и `service`.
7. **Загрузка исполняемых модулей:** Вызывает метод `_payload`, который загружает необходимые исполняемые модули (`ExecuteLocator` и `JavaScript`), предоставляя доступ к методам для работы с локаторами и JavaScript на странице.
8. **Обработка ошибок:** Использует блоки `try...except`, чтобы обработать возможные ошибки при запуске WebDriver (например, если не найден исполняемый файл) и вывести сообщение об ошибке в лог.
9. **Настройка опций (`set_options`)**: Метод `set_options` позволяет добавлять дополнительные опции (например, `--headless`) к EdgeOptions перед запуском WebDriver.

Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.webdriver.edge.edge import Edge
    from selenium.webdriver.common.by import By

    # Создаем экземпляр класса Edge
    driver = Edge()

    # Переходим на страницу
    driver.get("https://www.example.com")

    # Находим элемент по CSS селектору
    element = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")

    # Кликаем на элемент
    element.click()

    # Закрываем браузер
    driver.quit()