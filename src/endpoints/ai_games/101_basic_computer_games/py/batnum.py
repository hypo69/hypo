"""
BATNUM:
=================
Сложность: 2
-----------------
Игра "Угадай число" - это простая игра, в которой компьютер выбирает случайное число от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, является ли введенное число больше или меньше загаданного. Игра заканчивается, когда игрок угадывает число.
Правила игры:
1. Компьютер выбирает случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свое предположение.
3. Компьютер сравнивает предположение игрока с загаданным числом.
4. Если предположение верно, игрок побеждает.
5. Если предположение больше загаданного числа, компьютер сообщает "Слишком много, попробуйте еще".
6. Если предположение меньше загаданного числа, компьютер сообщает "Слишком мало, попробуйте еще".
7. Игрок продолжает делать предположения, пока не угадает число.
-----------------
Алгоритм:
1. Генерировать случайное число в диапазоне от 1 до 100.
2. Вывести сообщение "Я думаю о числе от 1 до 100.".
3. Вывести запрос ввода числа от пользователя.
4. Если введенное число равно загаданному, то вывести "Вы угадали!" и завершить игру.
5. Если введенное число больше загаданного, то вывести "Слишком много, попробуйте еще" и перейти к шагу 3.
6. Если введенное число меньше загаданного, то вывести "Слишком мало, попробуйте еще" и перейти к шагу 3.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Start) --> GenerateRandomNumber(Генерировать случайное число);
    GenerateRandomNumber --> OutputMessage(Вывести сообщение "Я думаю о числе от 1 до 100.");
    OutputMessage --> InputGuess(Ввод предположения);
    InputGuess --> CompareGuess(Сравнить предположение с загаданным числом);
    CompareGuess -- Угадал --> OutputWin(Вывести "Вы угадали!");
    CompareGuess -- Больше --> OutputTooHigh(Вывести "Слишком много, попробуйте еще");
    CompareGuess -- Меньше --> OutputTooLow(Вывести "Слишком мало, попробуйте еще");
    OutputTooHigh --> InputGuess;
    OutputTooLow --> InputGuess;
    OutputWin --> End(End);
```
"""
import random

# Генерируем случайное число от 1 до 100
secret_number = random.randint(1, 100)

# Выводим приветственное сообщение
print("Я думаю о числе от 1 до 100.")

# Основной цикл игры
while True:
    try:
        # Запрашиваем ввод числа от пользователя
        guess = int(input("Попробуйте угадать: "))
    except ValueError:
        # Обработка ошибки ввода, если пользователь ввел не число
        print("Пожалуйста, введите целое число.")
        continue # Возвращаемся к началу цикла, чтобы запросить ввод снова

    # Проверяем, угадал ли пользователь число
    if guess == secret_number:
        print("Вы угадали!")
        break  # Завершаем игру, если пользователь угадал число
    # Если число пользователя больше загаданного
    elif guess > secret_number:
        print("Слишком много, попробуйте еще")
    # Если число пользователя меньше загаданного
    else:
        print("Слишком мало, попробуйте еще")
"""
Пояснения:
1. `import random`: Импортируем модуль `random` для генерации случайных чисел.
2. `secret_number = random.randint(1, 100)`: Генерируем случайное целое число от 1 до 100 и сохраняем его в переменной `secret_number`.
3. `print("Я думаю о числе от 1 до 100.")`: Выводим приветственное сообщение для пользователя.
4. `while True:`: Запускаем бесконечный цикл, который будет продолжаться до тех пор, пока пользователь не угадает число.
5. `try...except ValueError:`: Блок try-except используется для обработки ошибок ввода. Если пользователь введет что-то, что не является целым числом, программа не завершится с ошибкой, а выведет сообщение об ошибке и запросит ввод снова.
6. `guess = int(input("Попробуйте угадать: "))`: Запрашиваем ввод числа от пользователя и преобразуем его в целое число.
7. `if guess == secret_number:`: Проверяем, равно ли введенное пользователем число загаданному.
   - `print("Вы угадали!")`: Если числа равны, выводим сообщение о победе.
   - `break`: Завершаем цикл `while`, что означает окончание игры.
8. `elif guess > secret_number:`: Если введенное число больше загаданного, выводим сообщение "Слишком много, попробуйте еще".
9. `else:`: Если введенное число меньше загаданного, выводим сообщение "Слишком мало, попробуйте еще".
10. `continue`: Ключевое слово `continue` позволяет пропустить итерацию цикла, чтобы начать его заново.
11. Основной цикл while выполняется до тех пор пока пользователь не угадает число. 
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```