"""
BATNUM: BATNUM
=================
Сложность: 4
-----------------
Игра "BATNUM" - это игра, в которой компьютер загадывает случайное число в диапазоне от 1 до 10, а игрок должен угадать это число, используя подсказки в виде количества "быков" и "коров". "Бык" означает, что цифра угадана и находится на правильной позиции. "Корова" означает, что цифра угадана, но находится на неверной позиции. Игра продолжается до тех пор, пока игрок не угадает все цифры в правильной позиции.
Правила игры:
1. Компьютер генерирует случайное 4-значное число, где каждая цифра от 0 до 9 (цифры могут повторяться).
2. Игрок вводит свои предположения, также 4-значные числа.
3. После каждой попытки компьютер сообщает количество "быков" (цифра угадана и находится на правильной позиции) и "коров" (цифра угадана, но находится на неправильной позиции).
4. Игра продолжается, пока игрок не угадает число с 4 "быками".
-----------------
Алгоритм:
1. Сгенерировать случайное 4-значное число, где каждая цифра от 0 до 9 (цифры могут повторяться) и сохранить его в переменной `secretNumber`.
2. Начать цикл "пока не угадано":
    2.1 Запросить у игрока ввод 4-значного числа и сохранить его в переменной `guess`.
    2.2 Инициализировать количество быков `bulls` и коров `cows` в 0.
    2.3 Пройти по каждой цифре guess и secretNumber.
    2.4 Если цифра в guess и secretNumber на одной позиции совпадают, увеличить количество быков `bulls`.
    2.5 Пройти по каждой цифре guess.
    2.6 Если текущая цифра guess есть в secretNumber, но не на той же позиции, увеличить количество коров `cows`.
    2.7 Вывести игроку количество быков и коров
    2.8 Если количество быков равно 4, вывести сообщение о победе и закончить игру.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateSecretNumber["Генерация 4-значного <code><b>secretNumber</b></code>"]
    GenerateSecretNumber --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart --> InputGuess["Ввод 4-значного <code><b>guess</b></code>"]
    InputGuess --> InitializeBullsCows["<code><b>bulls = 0, cows = 0</b></code>"]
    InitializeBullsCows --> CheckBulls{"Проверка быков: сравнение цифр <code><b>guess</b></code> и <code><b>secretNumber</b></code> по позициям, увеличение <code><b>bulls</b></code>"}
    CheckBulls --> CheckCows{"Проверка коров: сравнение цифр <code><b>guess</b></code> с цифрами <code><b>secretNumber</b></code> (не по позициям), увеличение <code><b>cows</b></code>"}
    CheckCows --> OutputResult["Вывод <code><b>bulls</b></code> и <code><b>cows</b></code>"]
    OutputResult --> CheckWin{"Проверка: <code><b>bulls == 4?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    LoopStart -- Нет --> End

```
Legenda:
    Start - Начало игры.
    GenerateSecretNumber - Генерация случайного 4-значного числа secretNumber.
    LoopStart - Начало цикла, который продолжается пока число не угадано.
    InputGuess - Запрос у пользователя ввода 4-значного числа и сохранение его в переменной guess.
    InitializeBullsCows - Инициализация переменных bulls и cows значениями 0.
    CheckBulls - Сравнение цифр guess и secretNumber по позициям, увеличение bulls при совпадении.
    CheckCows - Сравнение цифр guess с цифрами secretNumber (не по позициям), увеличение cows при совпадении.
    OutputResult - Вывод количества быков (bulls) и коров (cows).
    CheckWin - Проверка, равно ли количество быков 4.
    OutputWin - Вывод сообщения о победе, если число угадано.
    End - Конец игры.
"""
import random

def generate_secret_number():
    """Генерирует случайное 4-значное число."""
    return [random.randint(0, 9) for _ in range(4)]

def get_bulls_and_cows(secret_number, guess):
    """Определяет количество быков и коров."""
    bulls = 0
    cows = 0
    for i in range(4):
        if guess[i] == secret_number[i]:
            bulls += 1
    for i in range(4):
        for j in range(4):
            if i != j and guess[i] == secret_number[j]:
                cows += 1
    return bulls, cows

# Генерируем секретное число
secret_number = generate_secret_number()

# Основной игровой цикл
while True:
    # Запрашиваем ввод числа у пользователя
    try:
       guess_str = input("Введите 4-значное число: ")
       guess = [int(digit) for digit in guess_str]
       if len(guess) != 4:
           print("Пожалуйста, введите 4-значное число.")
           continue
    except ValueError:
        print("Пожалуйста, введите 4 целых числа.")
        continue

    # Получаем количество быков и коров
    bulls, cows = get_bulls_and_cows(secret_number, guess)
    
    # Выводим результаты
    print(f"Быки: {bulls}, Коровы: {cows}")
    
    # Проверяем, угадано ли число
    if bulls == 4:
        print("ПОЗДРАВЛЯЮ! Вы угадали число!")
        break
"""
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2. **Функция `generate_secret_number()`**:
    -  `def generate_secret_number():`: Определяет функцию `generate_secret_number`, которая не принимает аргументов.
    -  `return [random.randint(0, 9) for _ in range(4)]`: Генерирует список из 4 случайных цифр (от 0 до 9) и возвращает его. Это и есть загаданное число.
3. **Функция `get_bulls_and_cows(secret_number, guess)`**:
    - `def get_bulls_and_cows(secret_number, guess):`: Определяет функцию `get_bulls_and_cows`, которая принимает два аргумента: `secret_number` (список загаданных цифр) и `guess` (список введенных пользователем цифр).
    - `bulls = 0`: Инициализирует переменную `bulls` для подсчета "быков" (правильно угаданных цифр на правильных позициях).
    -  `cows = 0`: Инициализирует переменную `cows` для подсчета "коров" (правильно угаданных цифр на неправильных позициях).
    - `for i in range(4):`: Запускает цикл, проходящий по каждой цифре в числе.
    - `if guess[i] == secret_number[i]:`: Проверяет, совпадают ли цифры на одной и той же позиции в `guess` и `secret_number`.
        - `bulls += 1`: Если цифры совпадают, увеличивает счетчик `bulls` на 1.
    -  `for i in range(4):`: Запускает еще один внешний цикл, проходящий по каждой цифре введенного числа.
    -  `for j in range(4):`: Вложенный цикл, проходящий по каждой цифре секретного числа.
    -  `if i != j and guess[i] == secret_number[j]:`: Если индексы не совпадают (цифры на разных позициях) и значение цифры в guess совпадает со значением цифры в secret_number, то увеличивает счетчик `cows` на 1.
    -   `return bulls, cows`: Возвращает количество "быков" и "коров".
4. **Основная логика программы**:
   -   `secret_number = generate_secret_number()`: Вызывает функцию для генерации секретного числа и сохраняет результат в переменной `secret_number`.
   -   `while True:`: Запускает бесконечный цикл, который продолжается до тех пор, пока игрок не угадает число.
   -   **Ввод данных**:
        - `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        - `guess_str = input("Введите 4-значное число: ")`: Запрашивает у пользователя 4-значное число в виде строки.
        - `guess = [int(digit) for digit in guess_str]`: Преобразует строку в список целых чисел.
        - `if len(guess) != 4:`: Проверяет, если пользователь ввел не 4-значное число.
            -   `print("Пожалуйста, введите 4-значное число.")`: Выводит сообщение об ошибке.
            -   `continue`: Возвращается в начало цикла.
   -  `bulls, cows = get_bulls_and_cows(secret_number, guess)`: Вызывает функцию для получения количества "быков" и "коров" и сохраняет результат в переменных `bulls` и `cows`.
    -  `print(f"Быки: {bulls}, Коровы: {cows}")`: Выводит количество быков и коров на экран.
    -  `if bulls == 4:`: Проверяет, если количество "быков" равно 4 (что означает, что игрок угадал все цифры на правильных позициях).
        -   `print("ПОЗДРАВЛЯЮ! Вы угадали число!")`: Выводит сообщение о победе.
        -   `break`: Завершает цикл (игру).
"""
