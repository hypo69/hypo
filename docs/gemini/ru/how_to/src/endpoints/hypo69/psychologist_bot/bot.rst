Как использовать класс PsychologistTelgrambot
============================================================================================

Описание
-------------------------
Этот класс представляет собой бота для Telegram, специализирующегося на психологической помощи. Он использует модель GoogleGenerativeAI для генерации ответов на запросы пользователя.  Класс взаимодействует с пользователем, обрабатывает текстовые сообщения, голосовые сообщения и документы, а также содержит логику для обработки ссылок и перенаправления их на соответствующие обработчики.

Шаги выполнения
-------------------------
1. **Инициализация бота:** Создается экземпляр класса `PsychologistTelgrambot`.  В конструкторе устанавливаются токен бота, драйвер для веб-драйвера (Chrome), модель GoogleGenerativeAI, системные инструкции и список вопросов для генерации случайных вопросов.  Загружаются данные (системные инструкции, список вопросов) из файлов на Google Диск.

2. **Регистрация обработчиков:**  Метод `register_handlers()` добавляет обработчики для команд `/start`, `/help`, текстовых сообщений, голосовых сообщений и документов в приложение Telegram бота.

3. **Обработка команды `/start`:** Метод `start()` отвечает на команду `/start`, отправляя приветственное сообщение пользователю.

4. **Обработка текстовых сообщений:** Метод `handle_message()` обрабатывает текстовые сообщения от пользователя. Он записывает сообщение в лог-файл и использует модель `GoogleGenerativeAI` для генерации ответа на сообщение пользователя, сохраняя историю диалога.

5. **Обработка ссылок:** Метод `get_handler_for_url()` анализирует текст сообщения на предмет наличия URL-адресов. Если URL-адрес соответствует одному из известных URL-адресов (например, для интернет-магазинов), вызывается соответствующий обработчик (например, `handle_suppliers_response`).

6. **Обработка ссылок для поставщиков (`handle_suppliers_response`):** Метод `handle_suppliers_response()` обрабатывает URL-адреса от поставщиков, используя внешний сценарий `mexiron`. Если сценарий возвращает успешный результат, отправляет сообщение "Готово!". Иначе, отправляет сообщение "Хуёвенько. Попробуй еще раз".

7. **Обработка URL OneTab (`handle_onetab_response`):** Аналогично предыдущему пункту, но для URL OneTab.

8. **Обработка случайных вопросов (`handle_next_command`):** Метод `handle_next_command()` генерирует случайный вопрос из списка `questions_list` и отправляет его пользователю вместе с ответом, сгенерированным моделью.

9. **Обработка загруженных документов (`handle_document`):** Метод `handle_document()` обрабатывает загруженные пользователем документы. В данном примере просто выводит сообщение о получении документа и его содержимом.

10. **Запуск приложения:** В блоке `if __name__ == "__main__":` происходит инициализация бота и запуск цикла обработки событий Telegram.

Пример использования
-------------------------
.. code-block:: python

    # Создать экземпляр бота
    kt = PsychologistTelgrambot()

    # Запустить бота
    asyncio.run(kt.application.run_polling())