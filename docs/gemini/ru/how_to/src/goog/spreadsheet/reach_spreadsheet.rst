Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код представляет собой модуль `ReachSpreadsheet`, предназначенный для взаимодействия с Google Таблицами через API v4. Он предоставляет функции для создания, редактирования и управления таблицами, включая настройку стилей, добавление листов и совместное использование. Модуль использует аутентификацию с помощью JSON-ключа.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Модуль импортирует `httplib2`, `googleapiclient.discovery`, `googleapiclient.errors`, `oauth2client.service_account` для взаимодействия с API Google Таблиц и необходимых вспомогательных библиотек.

2. **Обработка ошибок:** Модуль определяет пользовательские исключения `SpreadsheetError`, `SpreadsheetNotSetError` и `SheetNotSetError` для более четкого управления ошибками.

3. **Инициализация:** Класс `ReachSpreadsheet` инициализируется с опцией `debugMode` (по умолчанию `False`). Внутри конструктора происходит загрузка JSON-ключа из временного файла `gs.path.tmp / 'e-cat-346312-137284f4419e.json'`. Создается объект `credentials` с помощью `ServiceAccountCredentials`, авторизуется `httpAuth` и создаются необходимые сервисы (`service` для Google Таблиц и `driveService` для Google Диска).

4. **Создание таблицы:** Метод `create()` позволяет создавать новую таблицу. Он принимает заголовок таблицы (`title`), название листа (`sheetTitle`), количество строк (`rows`), столбцов (`cols`), локаль (`locale`) и часовой пояс (`timeZone`).  Метод выполняет запрос к API Google Таблиц для создания таблицы и сохраняет ID созданной таблицы и листа в объекте.

5. **Обмен ссылками:** Методы `share()`, `shareWithEmailForReading()`, `shareWithEmailForWriting()`, `shareWithAnybodyForReading()`, `shareWithAnybodyForWriting()` реализуют обмен ссылками на таблицу. Метод `share()` принимает тело запроса для `driveService.permissions().create()`, где задается тип пользователя, роль и адрес электронной почты.

6. **Получение ссылки на лист:** Метод `getSheetURL()` возвращает URL ссылки на таблицу в Google Таблицах.

7. **Установка таблицы по ID:** Метод `setSpreadsheetById()` устанавливает текущую таблицу по заданному ID (`spreadsheetId`).

8. **Массовое обновление данных:** Метод `runPrepared()` выполняет запланированные операции (методы `prepare_*`) над таблицей. Он обрабатывает запросы, полученные от `requests`, и выполняет обновления через API.

9. **Подготовка операций:** Методы `prepare_*` (например, `prepare_addSheet()`, `prepare_setColumnWidth()`, `prepare_setValues()`, `prepare_mergeCells()`, `prepare_setCellStringFormatterormat()`, `prepare_setCellStringFormatterormats()`) подготавливают запросы для выполнения операций над таблицей (изменение ширины столбцов, добавление листов, вставка данных, форматирование ячеек и т.д.).  Они сохраняют эти запросы в списке `requests` или `valueRanges`.

10. **Добавление листа:** Метод `addSheet()` добавляет новый лист к текущей таблице, устанавливает его текущим листом и возвращает ID нового листа.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.goog.spreadsheet.reach_spreadsheet import ReachSpreadsheet
    # ... (код для инициализации и получения необходимых данных)

    ss = ReachSpreadsheet(debugMode=True)  # Создаем экземпляр класса
    ss.create("Моя таблица", "Мой лист", rows=10, cols=5) # Создаем таблицу
    ss.shareWithEmailForWriting("myemail@example.com") # Отправляем ссылку на таблицу
    ss.prepare_setValues("A1:B2", [["Значение 1", "Значение 2"], ["Значение 3", "Значение 4"]]) # Подготавливаем данные для вставки
    ss.runPrepared() # Выполняем подготовленные операции
    print(ss.getSheetURL()) # Выводим URL таблицы