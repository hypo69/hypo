"""
<HOCKEY>:
=================
Сложность: 5
-----------------
Игра "Хоккей" - это текстовая симуляция хоккейного матча между двумя командами, "COMP" и "YOU". Игрок по очереди с компьютером бросает шайбу, пытаясь забить гол в ворота соперника. 
Результат броска определяется случайным образом с разными вероятностями для каждого из возможных исходов - гол, бросок мимо, блокировка и захват шайбы вратарем. Игра продолжается до тех пор, пока одна из команд не забьет три гола.

Правила игры:
1. Игрок и компьютер по очереди выполняют "броски".
2. Каждый бросок имеет 4 возможных результата: гол, промах, блок и захват вратарем.
3. Вероятность каждого из результатов для игрока и компьютера отличается.
4. Игра продолжается до тех пор, пока одна из команд не забьёт 3 гола.
5.  Побеждает команда, забившая 3 гола первой.
-----------------
Алгоритм:
1. Инициализировать счетчики голов игрока (yourScore) и компьютера (compScore) в 0.
2. Начать игровой цикл.
3.  Вывести текущий счет.
4.  Начать ход игрока:
    4.1. Сгенерировать случайное число от 1 до 100.
    4.2. В зависимости от значения случайного числа определить результат броска игрока:
        - Если число от 1 до 15 - гол.
        - Если число от 16 до 50 - промах.
        - Если число от 51 до 85 - блокировка.
        - Если число от 86 до 100 - захват вратарем.
    4.3. Обновить счет игрока, если был гол.
    4.4. Вывести результат броска.
    4.5. Если игрок забил 3 гола, перейти к шагу 7.
5. Начать ход компьютера:
    5.1. Сгенерировать случайное число от 1 до 100.
    5.2. В зависимости от значения случайного числа определить результат броска компьютера:
        - Если число от 1 до 10 - гол.
        - Если число от 11 до 45 - промах.
        - Если число от 46 до 80 - блокировка.
        - Если число от 81 до 100 - захват вратарем.
    5.3. Обновить счет компьютера, если был гол.
    5.4. Вывести результат броска компьютера.
    5.5. Если компьютер забил 3 гола, перейти к шагу 7.
6. Вернуться к шагу 3.
7. Вывести сообщение о победителе игры.
8. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeScores["<p align='left'>Инициализация переменных:
    <code><b>
    yourScore = 0
    compScore = 0
    </b></code></p>"]
    InitializeScores --> GameLoopStart{"Начало игрового цикла"}
    GameLoopStart --> DisplayScore["Вывод текущего счета"]
    DisplayScore --> PlayerTurnStart["Начало хода игрока"]
    PlayerTurnStart --> GenerateRandomPlayer["<p align='left'>Сгенерировать случайное число для игрока:
    <code><b>
    playerRandom = random(1, 100)
    </b></code></p>"]
    GenerateRandomPlayer --> PlayerShotResult{"Определение результата броска игрока:<br><code><b>1-15: гол</b></code><br><code><b>16-50: промах</b></code><br><code><b>51-85: блок</b></code><br><code><b>86-100: сейв</b></code>"}
    PlayerShotResult --> UpdatePlayerScore{"Обновить счет игрока, если гол"}
    UpdatePlayerScore --> DisplayPlayerResult["Вывод результата броска игрока"]
    DisplayPlayerResult --> CheckPlayerWin{"Проверка: <code><b>yourScore >= 3?</b></code>"}
    CheckPlayerWin -- Да --> OutputPlayerWin["Вывод сообщения: <b>YOU WIN!</b>"]
    OutputPlayerWin --> End["Конец"]
    CheckPlayerWin -- Нет --> ComputerTurnStart["Начало хода компьютера"]
    ComputerTurnStart --> GenerateRandomComputer["<p align='left'>Сгенерировать случайное число для компьютера:
    <code><b>
    compRandom = random(1, 100)
    </b></code></p>"]
    GenerateRandomComputer --> ComputerShotResult{"Определение результата броска компьютера:<br><code><b>1-10: гол</b></code><br><code><b>11-45: промах</b></code><br><code><b>46-80: блок</b></code><br><code><b>81-100: сейв</b></code>"}
    ComputerShotResult --> UpdateComputerScore["Обновить счет компьютера, если гол"]
    UpdateComputerScore --> DisplayComputerResult["Вывод результата броска компьютера"]
    DisplayComputerResult --> CheckComputerWin{"Проверка: <code><b>compScore >= 3?</b></code>"}
    CheckComputerWin -- Да --> OutputComputerWin["Вывод сообщения: <b>COMPUTER WIN!</b>"]
    OutputComputerWin --> End
    CheckComputerWin -- Нет --> GameLoopStart
```

Legenda:
    Start - Начало программы.
    InitializeScores - Инициализация переменных yourScore и compScore (счет игрока и компьютера) в 0.
    GameLoopStart - Начало основного игрового цикла, который продолжается, пока ни одна из команд не забьет 3 гола.
    DisplayScore - Вывод текущего счета игры.
    PlayerTurnStart - Начало хода игрока.
    GenerateRandomPlayer - Генерация случайного числа для определения результата броска игрока.
    PlayerShotResult - Определение результата броска игрока на основе сгенерированного случайного числа (гол, промах, блок или сейв).
    UpdatePlayerScore - Обновление счета игрока, если бросок привел к голу.
    DisplayPlayerResult - Вывод результата броска игрока на экран.
    CheckPlayerWin - Проверка, достиг ли игрок 3 голов для победы.
    OutputPlayerWin - Вывод сообщения о победе игрока.
    End - Конец программы.
    ComputerTurnStart - Начало хода компьютера.
    GenerateRandomComputer - Генерация случайного числа для определения результата броска компьютера.
    ComputerShotResult - Определение результата броска компьютера на основе сгенерированного случайного числа (гол, промах, блок или сейв).
    UpdateComputerScore - Обновление счета компьютера, если бросок привел к голу.
    DisplayComputerResult - Вывод результата броска компьютера на экран.
    CheckComputerWin - Проверка, достиг ли компьютер 3 голов для победы.
    OutputComputerWin - Вывод сообщения о победе компьютера.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'

def play_hockey():
    """
    Запускает текстовую игру в хоккей, где игрок соревнуется с компьютером.
    """

    # Инициализация счетов
    yourScore = 0  # Счет игрока
    compScore = 0  # Счет компьютера
    
    # Основной игровой цикл
    while True:
        # Выводим текущий счет
        print(f"Счет: YOU {yourScore} - COMP {compScore}")

        # Ход игрока
        print("Ваш ход:")
        playerRandom = random.randint(1, 100)  # Генерируем случайное число для определения результата броска
        if playerRandom <= 15:  # Вероятность гола 15%
            print("ГОЛ!!!")
            yourScore += 1  # Увеличиваем счет игрока
        elif playerRandom <= 50:  # Вероятность промаха 35%
            print("Мимо!")
        elif playerRandom <= 85:  # Вероятность блока 35%
            print("Блокировка!")
        else:  # Вероятность сейва 15%
            print("Вратарь поймал шайбу!")

        if yourScore >= 3:  # Проверяем, не выиграл ли игрок
            print("ВЫ ВЫИГРАЛИ!!!")
            break  # Выход из игрового цикла, если игрок победил

        # Ход компьютера
        print("Ход компьютера:")
        compRandom = random.randint(1, 100)  # Генерируем случайное число для определения результата броска компьютера
        if compRandom <= 10:  # Вероятность гола 10%
            print("КОМПЬЮТЕР ЗАБИЛ ГОЛ!")
            compScore += 1  # Увеличиваем счет компьютера
        elif compRandom <= 45:  # Вероятность промаха 35%
            print("Компьютер промахнулся!")
        elif compRandom <= 80:  # Вероятность блока 35%
            print("Компьютерский бросок блокирован!")
        else:  # Вероятность сейва 20%
            print("Вратарь компьютера поймал шайбу!")

        if compScore >= 3:  # Проверяем, не выиграл ли компьютер
            print("КОМПЬЮТЕР ВЫИГРАЛ!")
            break  # Выход из игрового цикла, если компьютер победил

"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random` для генерации случайных чисел, используемых для моделирования результатов бросков.
2.  **Функция `play_hockey()`**:
    -   Определяет функцию, содержащую логику игры в хоккей.
    -   `yourScore = 0`: Инициализирует переменную `yourScore` для хранения количества голов, забитых игроком.
    -   `compScore = 0`: Инициализирует переменную `compScore` для хранения количества голов, забитых компьютером.
    -   **Основной игровой цикл `while True:`**:
        -   Этот цикл продолжается до тех пор, пока одна из команд не наберет 3 гола.
        -   `print(f"Счет: YOU {yourScore} - COMP {compScore}")`: Выводит текущий счет игры.
        -   **Ход игрока**:
            -   `print("Ваш ход:")`: Выводит сообщение о начале хода игрока.
            -   `playerRandom = random.randint(1, 100)`: Генерирует случайное число от 1 до 100 для определения результата броска игрока.
            -   **Определение результата броска игрока**:
                -   `if playerRandom <= 15:`: Если случайное число от 1 до 15 (вероятность 15%), игрок забивает гол.
                -   `print("ГОЛ!!!")`: Выводит сообщение о голе.
                -   `yourScore += 1`: Увеличивает счет игрока на 1.
                -   `elif playerRandom <= 50:`: Если случайное число от 16 до 50 (вероятность 35%), игрок промахивается.
                -   `print("Мимо!")`: Выводит сообщение о промахе.
                -   `elif playerRandom <= 85:`: Если случайное число от 51 до 85 (вероятность 35%), бросок блокируется.
                -   `print("Блокировка!")`: Выводит сообщение о блокировке.
                -   `else:`: Если случайное число больше 85 (вероятность 15%), вратарь ловит шайбу.
                -   `print("Вратарь поймал шайбу!")`: Выводит сообщение о сейве вратаря.
            -   `if yourScore >= 3:`: Проверяет, не набрал ли игрок 3 гола.
            -   `print("ВЫ ВЫИГРАЛИ!!!")`: Выводит сообщение о победе игрока.
            -   `break`: Прерывает цикл `while True`, завершая игру.
        -   **Ход компьютера**:
            -   `print("Ход компьютера:")`: Выводит сообщение о начале хода компьютера.
            -   `compRandom = random.randint(1, 100)`: Генерирует случайное число от 1 до 100 для определения результата броска компьютера.
            -   **Определение результата броска компьютера**:
                -   `if compRandom <= 10:`: Если случайное число от 1 до 10 (вероятность 10%), компьютер забивает гол.
                -   `print("КОМПЬЮТЕР ЗАБИЛ ГОЛ!")`: Выводит сообщение о голе компьютера.
                -   `compScore += 1`: Увеличивает счет компьютера на 1.
                -   `elif compRandom <= 45:`: Если случайное число от 11 до 45 (вероятность 35%), компьютер промахивается.
                -   `print("Компьютер промахнулся!")`: Выводит сообщение о промахе компьютера.
                -   `elif compRandom <= 80:`: Если случайное число от 46 до 80 (вероятность 35%), бросок компьютера блокируется.
                -   `print("Компьютерский бросок блокирован!")`: Выводит сообщение о блокировке.
                -  `else:`: Если случайное число больше 80 (вероятность 20%), вратарь компьютера ловит шайбу.
                -   `print("Вратарь компьютера поймал шайбу!")`: Выводит сообщение о сейве вратаря компьютера.
            -   `if compScore >= 3:`: Проверяет, не набрал ли компьютер 3 гола.
            -   `print("КОМПЬЮТЕР ВЫИГРАЛ!")`: Выводит сообщение о победе компьютера.
            -   `break`: Прерывает цикл `while True`, завершая игру.

3.  **Запуск игры**:
    -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_hockey()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    -  `play_hockey()`: Вызывает функцию для начала игры.
"""
if __name__ == "__main__":
    play_hockey()
```