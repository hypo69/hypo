"""
ACEDU:
=================
Сложность: 3
-----------------
Игра "ACEDU" - это простая игра, в которой компьютер генерирует случайное число от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, было ли загаданное число больше или меньше предложенного игроком. Цель игры - угадать число за минимальное количество попыток.
Правила игры:
1. Компьютер генерирует случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свое предположение (целое число).
3. Если введенное число совпадает с загаданным, игра заканчивается, и игрок получает сообщение о выигрыше и количестве попыток.
4. Если введенное число меньше загаданного, компьютер сообщает "TOO LOW" (слишком мало).
5. Если введенное число больше загаданного, компьютер сообщает "TOO HIGH" (слишком много).
6. Игрок может продолжать попытки до тех пор, пока не угадает число.
-----------------
Алгоритм:
1. Инициализация:
   - Задать начальное количество попыток равным 0.
   - Сгенерировать случайное число между 1 и 100 и присвоить его переменной 'targetNumber'.
2. Основной цикл (до тех пор, пока не угадано):
   - Увеличить счетчик попыток 'numberOfGuesses' на 1.
   - Запросить у пользователя ввод числа.
   - Сравнить введенное число 'userGuess' с загаданным числом 'targetNumber':
     - Если 'userGuess' меньше 'targetNumber', вывести сообщение "TOO LOW".
     - Если 'userGuess' больше 'targetNumber', вывести сообщение "TOO HIGH".
     - Если 'userGuess' равно 'targetNumber', вывести сообщение "YOU GOT IT IN {numberOfGuesses} GUESSES!" и завершить игру.
3. Конец игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start[Начало] --> InitializeVariables[Инициализация переменных: numberOfGuesses = 0, targetNumber = random(1, 100)]
    InitializeVariables --> LoopStart{Начало цикла: пока не угадано}
    LoopStart -- Да --> IncreaseGuesses[numberOfGuesses = numberOfGuesses + 1]
    IncreaseGuesses --> InputGuess[Ввод числа пользователем: userGuess]
    InputGuess --> CheckGuess{Проверка: userGuess == targetNumber?}
    CheckGuess -- Да --> OutputWin[Вывод сообщения: "YOU GOT IT IN {numberOfGuesses} GUESSES!"]
    OutputWin --> End[Конец]
    CheckGuess -- Нет --> CheckLow{Проверка: userGuess < targetNumber?}
    CheckLow -- Да --> OutputLow[Вывод сообщения: "TOO LOW"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh[Вывод сообщения: "TOO HIGH"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End
```
"""
import random

def play_acedu():
    """
    Запускает игру ACEDU.
    """
    # Инициализация количества попыток
    numberOfGuesses = 0
    # Генерируем случайное целое число от 1 до 100
    targetNumber = random.randint(1, 100)
    
    # Основной цикл игры
    while True:
        # Увеличиваем количество попыток
        numberOfGuesses += 1
        # Запрашиваем у пользователя ввод числа
        try:
            userGuess = int(input("YOUR GUESS? "))
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue  # Начинаем цикл заново

        # Проверяем, угадал ли пользователь число
        if userGuess < targetNumber:
            print("TOO LOW")  # Выводим сообщение, что число меньше загаданного
        elif userGuess > targetNumber:
            print("TOO HIGH")  # Выводим сообщение, что число больше загаданного
        else:
            # Если число угадано, выводим сообщение о выигрыше и количестве попыток
            print(f"YOU GOT IT IN {numberOfGuesses} GUESSES!")
            break  # Завершаем цикл и игру

# Запускаем игру
if __name__ == "__main__":
    play_acedu()
"""
Пояснения:
1.  `import random`: Импортируем модуль `random` для генерации случайных чисел.
2.  `def play_acedu():`: Определяем функцию `play_acedu`, которая содержит основную логику игры.
3.  `numberOfGuesses = 0`: Инициализируем переменную `numberOfGuesses` для подсчета попыток пользователя.
4.  `targetNumber = random.randint(1, 100)`: Генерируем случайное целое число от 1 до 100, которое пользователь должен угадать.
5.  `while True:`: Запускаем бесконечный цикл, который будет продолжаться, пока пользователь не угадает число.
6.  `numberOfGuesses += 1`: Увеличиваем количество попыток на 1 каждый раз, когда пользователь делает предположение.
7.  `userGuess = int(input("YOUR GUESS? "))`: Запрашиваем у пользователя ввод числа и преобразуем ввод в целое число.
8.  `try...except ValueError`: обрабатываем возможную ошибку ввода, если пользователь введет не число.
9.  `if userGuess < targetNumber:`: Проверяем, меньше ли введенное число, чем загаданное. Если да, выводим "TOO LOW".
10. `elif userGuess > targetNumber:`: Проверяем, больше ли введенное число, чем загаданное. Если да, выводим "TOO HIGH".
11. `else:`: Если ни одно из предыдущих условий не выполнено, значит, пользователь угадал число.
12. `print(f"YOU GOT IT IN {numberOfGuesses} GUESSES!")`: Выводим сообщение о том, что пользователь угадал число и количество попыток.
13. `break`: Завершаем цикл `while True`, поскольку игра закончена.
14. `if __name__ == "__main__":`: Гарантируем, что функция `play_acedu()` будет запущена только при непосредственном запуске скрипта, а не при импорте в другой модуль.
15. `play_acedu()`: Запускаем игру.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'