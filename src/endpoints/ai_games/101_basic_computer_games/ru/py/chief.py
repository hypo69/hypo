
"""
CHIEF:
=================
Сложность: 4
-----------------
Игра "CHIEF" - это игра, в которой игрок выступает в роли начальника, который должен нанимать и увольнять людей, чтобы максимизировать прибыль компании. 
Игра продолжается до тех пор, пока игрок не захочет завершить игру.

Правила игры:
1. Начальный доход компании равен 100.
2. Начальное количество сотрудников равно 1.
3. Каждый наем сотрудника увеличивает количество сотрудников на 1 и уменьшает доход компании на 10.
4. Каждое увольнение сотрудника уменьшает количество сотрудников на 1 и увеличивает доход компании на 10.
5. Доход компании не может быть меньше 0.
6. Количество сотрудников не может быть меньше 1.
7. Игрок вводит 'H', чтобы нанять сотрудника или 'F', чтобы уволить сотрудника.
8. Игра завершается, когда игрок вводит 'Q'.
-----------------
Алгоритм:
1.  Установить начальный доход компании в 100.
2.  Установить начальное количество сотрудников в 1.
3.  Вывести на экран текущий доход и количество сотрудников.
4.  Начать цикл "пока игрок не введет 'Q'":
    4.1 Запросить у игрока ввод действия ('H' для найма, 'F' для увольнения, 'Q' для выхода).
    4.2 Если ввод равен 'H', то:
        4.2.1 Увеличить количество сотрудников на 1.
        4.2.2 Уменьшить доход компании на 10.
    4.3 Если ввод равен 'F', то:
        4.3.1 Если количество сотрудников больше 1:
            4.3.1.1 Уменьшить количество сотрудников на 1.
            4.3.1.2 Увеличить доход компании на 10.
        4.3.2 Иначе:
            4.3.2.1 Вывести сообщение "НЕЛЬЗЯ УВОЛИТЬ ПОСЛЕДНЕГО СОТРУДНИКА!".
    4.4 Если ввод не равен 'Q', то:
        4.4.1 Если доход компании меньше 0:
            4.4.1.1 Установить доход компании в 0.
        4.4.2 Вывести на экран текущий доход и количество сотрудников.
5. Если ввод равен 'Q', то:
    5.1 Завершить игру.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    companyIncome = 100<br>
    numberOfEmployees = 1
    </b></code></p>"]
    InitializeVariables --> DisplayStatus["Вывод: <b>Текущий доход: <code>{companyIncome}</code>; Количество сотрудников: <code>{numberOfEmployees}</code></b>"]
    DisplayStatus --> LoopStart{"Начало цикла: пока не введен 'Q'"}
    LoopStart --> InputAction["Ввод действия (H/F/Q) пользователем: <code><b>userAction</b></code>"]
    InputAction --> CheckHire{"Проверка: <code><b>userAction == 'H'?</b></code>"}
    CheckHire -- Да --> HireEmployee["<code><b>numberOfEmployees = numberOfEmployees + 1<br>companyIncome = companyIncome - 10</b></code>"]
    HireEmployee --> CheckIncome["Проверка: <code><b>companyIncome < 0?</b></code>"]
    CheckHire -- Нет --> CheckFire{"Проверка: <code><b>userAction == 'F'?</b></code>"}
    CheckFire -- Да --> CheckEmployeeCount{"Проверка: <code><b>numberOfEmployees > 1?</b></code>"}
        CheckEmployeeCount -- Да --> FireEmployee["<code><b>numberOfEmployees = numberOfEmployees - 1<br>companyIncome = companyIncome + 10</b></code>"]
        FireEmployee --> CheckIncome
        CheckEmployeeCount -- Нет --> OutputError["Вывод сообщения: <b>НЕЛЬЗЯ УВОЛИТЬ ПОСЛЕДНЕГО СОТРУДНИКА!</b>"]
        OutputError --> CheckIncome
    CheckFire -- Нет --> CheckQuit{"Проверка: <code><b>userAction == 'Q'?</b></code>"}
    CheckQuit -- Да --> End["Конец"]
    CheckQuit -- Нет --> CheckIncome
    CheckIncome -- Да --> SetIncomeToZero["<code><b>companyIncome = 0</b></code>"]
    SetIncomeToZero --> DisplayStatus
    CheckIncome -- Нет --> DisplayStatus
    DisplayStatus --> LoopStart

```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: companyIncome (доход компании) устанавливается в 100, numberOfEmployees (количество сотрудников) устанавливается в 1.
    DisplayStatus - Вывод текущего дохода компании и количества сотрудников.
    LoopStart - Начало цикла, который продолжается, пока не введен символ 'Q'.
    InputAction - Запрос у пользователя действия: H (нанять), F (уволить) или Q (выйти).
    CheckHire - Проверка, является ли действие пользователя 'H' (нанять).
    HireEmployee - Увеличение количества сотрудников на 1 и уменьшение дохода компании на 10.
    CheckFire - Проверка, является ли действие пользователя 'F' (уволить).
    CheckEmployeeCount - Проверка, больше ли количество сотрудников 1.
    FireEmployee - Уменьшение количества сотрудников на 1 и увеличение дохода компании на 10.
    OutputError - Вывод сообщения об ошибке, что нельзя уволить последнего сотрудника.
    CheckQuit - Проверка, является ли действие пользователя 'Q' (выход).
    End - Конец программы.
    CheckIncome - Проверка, меньше ли доход компании 0.
    SetIncomeToZero - Установка дохода компании в 0.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
companyIncome = 100  # Начальный доход компании
numberOfEmployees = 1  # Начальное количество сотрудников


while True:
    # Выводим текущее состояние компании
    print(f"Текущий доход: {companyIncome}; Количество сотрудников: {numberOfEmployees}")

    # Запрашиваем действие пользователя
    userAction = input("Введите действие (H - нанять, F - уволить, Q - выйти): ").upper()

    if userAction == 'H':
        # Нанимаем сотрудника
        numberOfEmployees += 1
        companyIncome -= 10
    elif userAction == 'F':
        # Увольняем сотрудника
        if numberOfEmployees > 1:
            numberOfEmployees -= 1
            companyIncome += 10
        else:
            print("НЕЛЬЗЯ УВОЛИТЬ ПОСЛЕДНЕГО СОТРУДНИКА!")
    elif userAction == 'Q':
        # Выход из игры
        break
    
    # Проверка, что доход компании не может быть меньше 0
    if companyIncome < 0:
        companyIncome = 0

"""
Пояснения:
1. **Инициализация переменных:**
   - `companyIncome = 100`:  Устанавливает начальный доход компании в 100.
   - `numberOfEmployees = 1`: Устанавливает начальное количество сотрудников в 1.
2. **Основной игровой цикл:**
   - `while True:`: Бесконечный цикл, который продолжается, пока пользователь не введет 'Q' для выхода.
   - **Вывод текущего состояния компании:**
      - `print(f"Текущий доход: {companyIncome}; Количество сотрудников: {numberOfEmployees}")`: Выводит текущий доход и количество сотрудников.
   - **Запрос действия у пользователя:**
      - `userAction = input("Введите действие (H - нанять, F - уволить, Q - выйти): ").upper()`: Запрашивает у пользователя действие (H - нанять, F - уволить, Q - выйти) и преобразует его в верхний регистр.
   - **Обработка действия "Нанять":**
      - `if userAction == 'H':`: Если пользователь ввел 'H', то:
         - `numberOfEmployees += 1`: Увеличивает количество сотрудников на 1.
         - `companyIncome -= 10`: Уменьшает доход компании на 10.
   - **Обработка действия "Уволить":**
     - `elif userAction == 'F':`: Если пользователь ввел 'F', то:
       - `if numberOfEmployees > 1:`: Проверяет, больше ли количество сотрудников 1.
         - `numberOfEmployees -= 1`: Если да, то уменьшает количество сотрудников на 1.
         - `companyIncome += 10`: И увеличивает доход компании на 10.
       - `else:`: Если количество сотрудников не больше 1, то:
         - `print("НЕЛЬЗЯ УВОЛИТЬ ПОСЛЕДНЕГО СОТРУДНИКА!")`: Выводится сообщение, что нельзя уволить последнего сотрудника.
   - **Обработка действия "Выйти":**
     - `elif userAction == 'Q':`: Если пользователь ввел 'Q', то:
       - `break`: Завершает цикл и игру.
   - **Проверка дохода компании:**
     - `if companyIncome < 0:`: Проверяет, не стал ли доход компании отрицательным.
       - `companyIncome = 0`: Если доход стал отрицательным, он устанавливается в 0.
"""
```