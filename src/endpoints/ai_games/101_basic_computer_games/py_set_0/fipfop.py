"""
FIPFOP:
=================
Сложность: 3
-----------------
Игра FIPFOP - это простая игра, в которой компьютер загадывает случайное число в диапазоне от 1 до 100. 
Игрок должен угадать это число, вводя свои предположения. После каждого предположения компьютер сообщает, является ли загаданное число больше или меньше предположенного. 
Игра продолжается до тех пор, пока игрок не угадает число.

Правила игры:
1. Компьютер выбирает случайное число от 1 до 100.
2. Игрок вводит число-предположение.
3. Компьютер проверяет, угадано ли число.
4. Если число угадано, игра заканчивается.
5. Если число не угадано, компьютер сообщает, больше или меньше загаданное число, чем предположенное.
6. Игрок делает новое предположение.
7. Игра повторяется с шага 2.

-----------------
Алгоритм:
1. Сгенерировать случайное число в диапазоне от 1 до 100 и присвоить его переменной targetNumber.
2. Запросить у игрока число-предположение и присвоить его переменной guess.
3. Сравнить guess и targetNumber:
    - Если guess равен targetNumber, вывести сообщение об успехе и завершить игру.
    - Если guess меньше targetNumber, вывести сообщение, что загаданное число больше, и перейти к шагу 2.
    - Если guess больше targetNumber, вывести сообщение, что загаданное число меньше, и перейти к шагу 2.

-----------------
Блок-схема:
```mermaid
graph TD
    A[Start] --> B{Generate Random Number};
    B --> C[Input Guess];
    C --> D{Is Guess == Target?};
    D -- Yes --> E[Output Success];
    E --> F[End];
    D -- No --> G{Is Guess < Target?};
    G -- Yes --> H[Output "Too Low"];
    H --> C;
    G -- No --> I[Output "Too High"];
    I --> C;
```
"""
import random

def play_fipfop():
    """
    Функция для запуска игры FIPFOP.
    """
    # 1. Генерируем случайное число от 1 до 100 (включительно).
    target_number = random.randint(1, 100) 
    
    # Флаг для отслеживания угадал ли игрок число
    is_guessed = False
    
    print("Добро пожаловать в игру FIPFOP!")
    print("Я загадал число от 1 до 100. Попробуй угадать!")

    # Игровой цикл, который продолжается до тех пор, пока число не будет угадано.
    while not is_guessed:
        try:
            # 2. Запрашиваем у игрока число-предположение.
            guess = int(input("Введите ваше предположение: "))
            
            # 3. Сравниваем guess и target_number
            if guess == target_number:
                # Если guess равен target_number, игрок угадал число.
                print("Поздравляю! Вы угадали число!")
                is_guessed = True # Устанавливаем флаг в True для завершения цикла
            elif guess < target_number:
                # Если guess меньше target_number, сообщаем, что загаданное число больше.
                print("Загаданное число больше.")
            else:
                # Если guess больше target_number, сообщаем, что загаданное число меньше.
                print("Загаданное число меньше.")
        except ValueError:
            # Обработка ошибки, если введено не целое число
            print("Некорректный ввод. Пожалуйста, введите целое число.")

# Запуск игры.
if __name__ == "__main__":
    play_fipfop()
"""
Пояснения:
1. `import random`: Импортируем модуль `random` для генерации случайных чисел.
2. `def play_fipfop():`:  Определяем функцию `play_fipfop`, в которой будет происходить вся логика игры.
3. `target_number = random.randint(1, 100)`: Генерируем случайное целое число в диапазоне от 1 до 100 (включительно) и сохраняем его в переменной `target_number`. Это число, которое игрок должен угадать.
4. `is_guessed = False`: Создаем переменную is_guessed  для отслеживания угадал ли игрок число. Изначально она установлена в False.
5.  Выводим приветственное сообщение для игрока.
6. `while not is_guessed:`:  Начинаем цикл `while`, который будет продолжаться до тех пор, пока переменная `is_guessed` не станет `True` (т.е. игрок не угадает число).
7.  `try...except ValueError`:  Используем блок `try...except` для обработки возможных ошибок при вводе пользователем некорректных данных (например, букв вместо чисел).
8.  `guess = int(input("Введите ваше предположение: "))`: Запрашиваем у игрока число-предположение с помощью функции `input` и преобразуем введенную строку в целое число с помощью функции `int`.
9. `if guess == target_number`: Проверяем, равно ли предположение игрока загаданному числу.
10. Если условие верно, выводим поздравление об успехе.
11. Устанавливаем флаг `is_guessed` в `True`, чтобы завершить цикл `while`.
12. `elif guess < target_number`: Если предположение меньше загаданного числа, выводим сообщение "Загаданное число больше.".
13.  `else`:  Если предположение больше загаданного числа, выводим сообщение "Загаданное число меньше.".
14. `except ValueError`:  Если при вводе числа происходит ошибка (например, введены не цифры), выводим сообщение об ошибке.
15. `if __name__ == "__main__":`:  Условный оператор `if __name__ == "__main__":` гарантирует, что функция `play_fipfop()` будет вызвана только при запуске этого скрипта как основного файла.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```