Как использовать функцию j_dumps
================================================================================
Описание
-------------------------
Функция `j_dumps` предназначена для сохранения данных в формате JSON в файл или возвращения данных в виде словаря. Она поддерживает различные типы входных данных, включая словари, объекты SimpleNamespace и списки этих типов. Функция обрабатывает ошибки при чтении и записи данных в файл, а также умеет добавлять данные к существующему файлу в режимах "a+" и "+a".

Шаги выполнения
-------------------------
1. **Подготовьте данные**: Подготовьте данные, которые необходимо сохранить в формате JSON. Это могут быть словари, объекты SimpleNamespace, или списки этих типов.


2. **Укажите путь к файлу (необязательно)**: Если вы хотите сохранить данные в файл, укажите путь к этому файлу в параметре `file_path`. В противном случае, функция вернет данные в виде словаря.


3. **Вызовите функцию `j_dumps`**: Вызовите функцию `j_dumps`, передав ей подготовленные данные и (необязательно) путь к файлу.  Также можно указать:
    - `ensure_ascii`: Булевое значение, указывающее, нужно ли экранировать не-ASCII символы. По умолчанию `True`.
    - `mode`: Режим открытия файла ('w', 'a+', '+a'). По умолчанию 'w'.
    - `exc_info`: Логировать исключения с трейсом. По умолчанию `True`.

4. **Обработка результата**:  Если файл указан, функция сохраняет данные в файл. Если файл не указан, функция возвращает словарь с данными.  Обратите внимание на обработку ошибок:
    - Функция обрабатывает различные типы данных (словари, списки, SimpleNamespace).
    -  Если входные данные представляют собой строку, функция пытается исправить JSON строку с помощью `repair_json` перед загрузкой.
    - Если используется режим `'a+'` или `'+a'`, функция читает существующие данные из файла и добавляет новые данные.  Режим `'a+'` добавляет новые данные в начало, а `'+a'` - в конец.
    - В режиме `'w'` функция перезаписывает файл новыми данными.


Пример использования
-------------------------
.. code-block:: python

    import json
    from pathlib import Path
    from hypotez.src.utils.jjson import j_dumps, j_loads
    
    # Данные для сохранения
    data = {"name": "John Doe", "age": 30}

    # Сохранение данных в файл
    file_path = Path("data.json")
    j_dumps(data, file_path)


    # Чтение данных из файла
    loaded_data = j_loads(file_path)
    print(json.dumps(loaded_data, indent=2))



    # Пример использования с SimpleNamespace
    from types import SimpleNamespace
    ns_data = SimpleNamespace(name="Jane Doe", city="New York")
    j_dumps(ns_data, Path("ns_data.json"))
    
    # пример добавления к существующему файлу
    j_dumps(data, file_path, mode="a+") # добавит данные в начало