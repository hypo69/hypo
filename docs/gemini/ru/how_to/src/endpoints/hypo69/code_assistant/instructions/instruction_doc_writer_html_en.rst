Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит инструкции по генерации документации к коду на языке Python в формате HTML.  Он описывает структуру и формат документации, включая заголовки, описание функций и классов, параметры, возвращаемые значения и исключения.  Он также указывает на необходимость включения оглавления (TOC) в каждый файл документации.

Шаги выполнения
-------------------------
1. **Анализ входных Python-файлов**:  Проанализируйте каждый входной Python-файл.
2. **Используйте стандарт HTML**:  Создавайте документацию используя стандарт HTML.
3. **Заголовки и описание**:  Каждый файл должен начинаться с заголовка (например, `<h1>Module Name</h1>`) и краткого описания содержимого.
4. **Формат комментариев**: Для функций и классов используйте предложенный формат комментариев, содержащий описание аргументов, возвращаемых значений, возможных исключений.
5. **Использование ex вместо e**: В блоках обработки исключений используйте `ex` вместо `e`.
6. **Включение оглавления (TOC)**: Вставьте таблицу содержания (TOC) в начало каждого файла документации, с ссылками на все основные разделы документации модуля.
7. **Форматирование HTML**:  Используйте корректный синтаксис HTML для всех заголовков, списков и ссылок.
8. **Документирование элементов**: Для функций, классов и методов создайте структурированные разделы с описаниями, параметрами, возвращаемыми значениями и возбуждаемыми исключениями.
9. **Согласование уровней заголовков**: Используйте заголовки уровней 1 (<h1>), 2 (<h2>), 3 (<h3>) и 4 (<h4>) последовательно в документе.
10. **Пример файла**:  Используйте пример файла, приведенный в инструкции, как образец.


Пример использования
-------------------------
```rst
.. code-block:: python

    # example_module.py
    def my_function(param: str, param1: Optional[str] = None) -> str:
        """
        Args:
            param (str): Описание параметра `param`.
            param1 (Optional[str], optional): Описание параметра `param1`. Defaults to None.

        Returns:
            str: Возвращаемое значение.

        Raises:
            ValueError: Поднимает ValueError, если param пустой.
        """
        if not param:
            raise ValueError("Параметр param не может быть пустым.")
        return f"Результат функции: {param}"
```


```html
<h1>Module example_module</h1>

<h2>Overview</h2>
<p>Краткое описание модуля.</p>

<h2>Functions</h2>

<h3><code>my_function</code></h3>

<p><strong>Description</strong>: Описание функции.</p>

<p><strong>Parameters</strong>:</p>
<ul>
  <li><code>param</code> (str): Описание параметра `param`.</li>
  <li><code>param1</code> (Optional[str], optional): Описание параметра `param1`. Defaults to None.</li>
</ul>

<p><strong>Returns</strong>:</p>
<ul>
  <li><code>str</code>: Возвращаемое значение.</li>
</ul>

<p><strong>Raises</strong>:</p>
<ul>
  <li><code>ValueError</code>: Поднимает ValueError, если param пустой.</li>
</ul>
```
```
```