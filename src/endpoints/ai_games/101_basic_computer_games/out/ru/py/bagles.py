"""
BAGELS:
=================
Сложность: 5
-----------------
Игра "Бейглз" - это логическая игра-головоломка, в которой игрок должен угадать секретное трехзначное число, используя подсказки, основанные на количестве совпавших цифр и их позициях.

Правила игры:
1. Компьютер генерирует случайное трехзначное число, в котором все цифры разные.
2. Игрок пытается угадать это число.
3. После каждой попытки компьютер дает подсказку, используя следующие правила:
    - "PICO": Если одна цифра угадана, но находится на неверной позиции.
    - "FERMI": Если одна цифра угадана и находится на верной позиции.
    - "BAGELS": Если ни одна цифра не угадана.
4. Игра продолжается до тех пор, пока игрок не угадает число, или не исчерпает все попытки.
-----------------
Алгоритм:
1. Сгенерировать случайное трехзначное число, где все цифры уникальны.
2. Установить количество попыток равным 0.
3. Начать цикл "пока число не угадано или число попыток не превысило максимум":
    3.1 Увеличить количество попыток на 1.
    3.2 Запросить у игрока ввод трехзначного числа.
    3.3 Проверить введенное число на соответствие секретному числу.
    3.4 Если число угадано, вывести сообщение о победе и количестве попыток.
    3.5 Если число не угадано, вывести подсказку:
        - Для каждой цифры введенного числа:
            - Если цифра и ее позиция совпадают с цифрой и позицией в секретном числе, вывести "FERMI".
            - Иначе, если цифра есть в секретном числе, вывести "PICO".
        - Если ни одна цифра не угадана, вывести "BAGELS".
4. Если попытки исчерпаны, вывести сообщение о проигрыше и показать секретное число.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateSecretNumber["Генерация случайного трехзначного числа <code><b>secretNumber</b></code> с уникальными цифрами"]
    GenerateSecretNumber --> InitializeAttempts["<code><b>numberOfGuesses = 0</b></code>, <code><b>maxGuesses = 10</b></code>"]
    InitializeAttempts --> LoopStart{"Начало цикла: пока не угадано AND <code><b>numberOfGuesses</b></code> < <code><b>maxGuesses</b></code>"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == secretNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения о победе: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> GiveClues["Вывод подсказок: FERMI, PICO, BAGELS"]
    GiveClues --> LoopStart
    LoopStart -- Нет --> OutputLose["Вывод сообщения о проигрыше и загаданном числе: <b>You lost. The secret number was: {secretNumber}</b>"]
    OutputLose --> End
```
Legenda:
    Start - Начало программы.
    GenerateSecretNumber - Генерация случайного трехзначного числа secretNumber с уникальными цифрами.
    InitializeAttempts - Инициализация переменных numberOfGuesses (количество попыток) устанавливается в 0, а maxGuesses (максимальное количество попыток) устанавливается в 10.
    LoopStart - Начало цикла, который продолжается, пока число не угадано И количество попыток меньше максимального.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу secretNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    GiveClues - Вывод подсказок FERMI, PICO или BAGELS на основе сравнения пользовательского ввода и загаданного числа.
    OutputLose - Вывод сообщения о проигрыше и загаданном числе, если количество попыток исчерпано.
"""

import random

def generate_secret_number():
    """Генерирует случайное трехзначное число с уникальными цифрами."""
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits)  # Перемешиваем цифры
    # Создаем трехзначное число из первых трех элементов списка (не может начинаться с нуля)
    secret_number = str(digits[1]) + str(digits[2]) + str(digits[3])  
    return secret_number

def get_clues(secret_number, user_guess):
    """
    Возвращает подсказки на основе сравнения загаданного числа и предположения пользователя.

    Args:
        secret_number (str): Загаданное трехзначное число.
        user_guess (str): Предположение пользователя.

    Returns:
        str: Строка с подсказками.
    """
    clues = ""
    if user_guess == secret_number:
        return "YOU GOT IT!" # если числа равны - победа
    for i, digit in enumerate(user_guess):
        if digit == secret_number[i]:
            clues += "FERMI " # цифра и позиция совпадают
        elif digit in secret_number:
            clues += "PICO " # цифра есть, но позиция не совпадает
    if not clues:
        return "BAGELS" # нет совпадений
    return clues.strip()

# Устанавливаем максимальное количество попыток
max_guesses = 10

# Генерируем секретное число
secret_number = generate_secret_number()

# Инициализируем счетчик попыток
numberOfGuesses = 0

# Основной цикл игры
while numberOfGuesses < max_guesses:
    numberOfGuesses += 1 # Увеличиваем количество попыток
    try:
        user_guess = input(f"Попытка {numberOfGuesses}: Введите трехзначное число: ") # Запрашиваем ввод пользователя

        # Проверяем, что ввод состоит из 3 цифр
        if not user_guess.isdigit() or len(user_guess) != 3:
            print("Пожалуйста, введите трехзначное число.")
            continue # Если ввод неверный - начинаем цикл сначала
    except ValueError:
        print("Неверный ввод. Пожалуйста, введите трехзначное число.")
        continue

    clues = get_clues(secret_number, user_guess)
    print(clues)

    if clues == "YOU GOT IT!":
        print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")
        break # Завершаем игру, если число угадано

if numberOfGuesses == max_guesses:
        print(f"Вы проиграли. Загаданное число было: {secret_number}")


"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.

2.  **Функция `generate_secret_number()`**:
    -   Генерирует случайное трехзначное число с уникальными цифрами.
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
    -   `secret_number = str(digits[1]) + str(digits[2]) + str(digits[3])`: Собирает трехзначное число из перемешанного списка цифр (первая цифра не может быть 0).
    -   `return secret_number`: Возвращает сгенерированное число в виде строки.

3.  **Функция `get_clues(secret_number, user_guess)`**:
    -   Принимает два аргумента: загаданное число (`secret_number`) и предположение пользователя (`user_guess`).
    -   Возвращает строку подсказок.
    -   `if user_guess == secret_number:`: Если предположение равно загаданному числу, возвращает сообщение "YOU GOT IT!".
    -   Цикл `for i, digit in enumerate(user_guess):`:
        -   Проходит по каждой цифре предположения пользователя вместе с ее индексом.
        -   `if digit == secret_number[i]:`: Если цифра и ее позиция совпадают с цифрой и позицией в загаданном числе, добавляет "FERMI " к подсказкам.
        -   `elif digit in secret_number:`: Если цифра есть в загаданном числе, но позиция не совпадает, добавляет "PICO " к подсказкам.
    -   `if not clues:`: Если ни одна цифра не совпадает, возвращает "BAGELS".
    -   `return clues.strip()`: Возвращает строку с подсказками (удаляет пробелы в конце).

4.  **Основные переменные**:
    -   `max_guesses = 10`: Устанавливает максимальное количество попыток.
    -   `secret_number = generate_secret_number()`: Генерирует секретное число.
    -   `numberOfGuesses = 0`: Инициализирует счетчик попыток.

5.  **Основной цикл игры `while numberOfGuesses < max_guesses:`**:
    -   Цикл выполняется, пока количество попыток не превысит `max_guesses`.
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1.
    -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `user_guess = input(f"Попытка {numberOfGuesses}: Введите трехзначное число: ")`: Запрашивает ввод пользователя и выводит текущую попытку.
    -  `if not user_guess.isdigit() or len(user_guess) != 3`: Проверяет, что ввод состоит из 3 цифр, в противном случае выводит сообщение об ошибке и переходит к следующей итерации цикла.
    -   `clues = get_clues(secret_number, user_guess)`: Получает подсказки, вызвав функцию `get_clues`.
    -   `print(clues)`: Выводит подсказки.
    -   `if clues == "YOU GOT IT!":`: Если пользователь угадал число, выводится сообщение о победе и цикл прерывается.

6. **Условие проигрыша**
   - `if numberOfGuesses == max_guesses:`: если количество попыток достигло максимума, выводит сообщение о проигрыше и показывает загаданное число
"""
