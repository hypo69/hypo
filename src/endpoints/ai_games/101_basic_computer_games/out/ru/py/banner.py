"""
FROG:
=================
Сложность: 4
-----------------
Игра "Лягушка" - это текстовая игра, в которой лягушка пытается перепрыгнуть через кувшинки, чтобы добраться до другого берега.
Игрок выбирает направления прыжка (вверх, вниз, влево, вправо) и количество шагов. 
Цель игры — достичь противоположного берега, избегая падения в воду.

Правила игры:
1. Лягушка начинает на одном берегу пруда.
2. Пруд представлен в виде матрицы 6x6.
3. Кувшинки расположены на пруду в случайных позициях.
4. Игрок выбирает направление прыжка (вверх, вниз, влево, вправо) и количество шагов.
5. Лягушка перемещается на указанное количество шагов в выбранном направлении.
6. Если лягушка попадает на кувшинку, то она переходит на следующую позицию.
7. Если лягушка выпрыгивает за пределы пруда, то игра заканчивается проигрышем.
8. Цель игры — достичь противоположного берега (координата X = 5)
-----------------
Алгоритм:
1. Инициализировать позиции лягушки и берега.
2. Создать игровую матрицу пруда.
3. Разместить кувшинки на пруду.
4. Начать цикл "пока лягушка не достигла противоположного берега":
    4.1 Запросить у игрока ввод направления и количества шагов.
    4.2 Переместить лягушку на указанное количество шагов в выбранном направлении.
    4.3 Если лягушка вышла за пределы пруда, вывести сообщение "Плюх!" и завершить игру.
    4.4 Если лягушка достигла противоположного берега, вывести сообщение "Ура! Победа!" и завершить игру.
    4.5 Если лягушка попала на кувшинку, пропустить ее.
    4.6 Продолжить цикл.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGame["<p align='left'>Инициализация:<br><code><b>
    frogX = 0<br>
    frogY = 2<br>
    pond[6][6]<br>
    lilypads = generate_random_lilypads()
    </b></code></p>"]
    InitializeGame --> LoopStart{"Начало цикла: пока frogX < 5"}
    LoopStart -- Да --> InputMove["<p align='left'>Запрос ввода:<br><code><b>direction</b></code>, <code><b>steps</b></code></p>"]
    InputMove --> CalculateNewPosition["<p align='left'>Вычисление новой позиции:<br><code><b>newFrogX = frogX + steps*dx<br>newFrogY = frogY + steps*dy</b></code></p>"]
    CalculateNewPosition --> CheckOutOfBounds{"Проверка: <code><b>newFrogX < 0 or newFrogX > 5 or newFrogY < 0 or newFrogY > 5?</b></code>"}
    CheckOutOfBounds -- Да --> OutputLose["Вывод сообщения: <b>Плюх!</b>"]
    OutputLose --> End["Конец"]
    CheckOutOfBounds -- Нет --> CheckWin{"Проверка: <code><b>newFrogX == 5?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>Ура! Победа!</b>"]
    OutputWin --> End
    CheckWin -- Нет --> CheckLilypad{"Проверка: <code><b>pond[newFrogX][newFrogY] == 'L'?</b></code>"}
   CheckLilypad -- Да --> MoveFrog["<p align='left'>Обновление позиции лягушки:<br><code><b>frogX = newFrogX<br> frogY = newFrogY</b></code></p>"]
    MoveFrog --> LoopStart
    CheckLilypad -- Нет --> MoveFrog
    LoopStart -- Нет --> End
```

Legenda:
    Start - Начало программы.
    InitializeGame - Инициализация начальных значений: позиции лягушки frogX (0) и frogY (2), создание игрового поля pond размером 6x6 и генерация случайных позиций кувшинок lilypads.
    LoopStart - Начало цикла, продолжающегося пока позиция лягушки по X (frogX) меньше 5 (пока лягушка не достигнет противоположного берега).
    InputMove - Запрос у пользователя ввода направления (direction) и количества шагов (steps) для прыжка лягушки.
    CalculateNewPosition - Вычисление новой позиции лягушки, основываясь на направлении и количестве шагов.
    CheckOutOfBounds - Проверка, не вышла ли новая позиция лягушки за границы игрового поля.
    OutputLose - Вывод сообщения о проигрыше, если лягушка вышла за пределы игрового поля.
    End - Конец программы.
    CheckWin - Проверка, достигла ли лягушка противоположного берега (frogX = 5).
    OutputWin - Вывод сообщения о победе, если лягушка достигла противоположного берега.
    CheckLilypad - Проверка, находится ли лягушка на кувшинке.
    MoveFrog - Обновление позиции лягушки.
"""
import random

def generate_random_lilypads():
    """Генерирует случайные позиции кувшинок на пруду."""
    lilypads = []
    while len(lilypads) < 10:
        x = random.randint(0, 5)
        y = random.randint(0, 5)
        if (x, y) not in lilypads:
             lilypads.append((x, y))
    return lilypads

# Инициализация начальной позиции лягушки
frog_x = 0
frog_y = 2

# Создаем пруд 6x6
pond = [['.' for _ in range(6)] for _ in range(6)]

# Размещаем кувшинки
lilypads = generate_random_lilypads()
for x, y in lilypads:
    pond[x][y] = 'L'

# Основной игровой цикл
while frog_x < 5:
    # Выводим текущую ситуацию на пруду
    print("  0 1 2 3 4 5")
    for i, row in enumerate(pond):
        print(f"{i} {' '.join(row)}")

    # Запрашиваем ввод от пользователя
    direction = input("Введите направление (вверх, вниз, влево, вправо): ").lower()
    try:
        steps = int(input("Введите количество шагов: "))
    except ValueError:
         print("Некорректный ввод. Введите целое число")
         continue

    # Вычисляем изменение позиции на основе направления
    dx, dy = 0, 0
    if direction == "вверх":
        dx = -1
    elif direction == "вниз":
        dx = 1
    elif direction == "влево":
        dy = -1
    elif direction == "вправо":
        dy = 1
    else:
        print("Некорректное направление. Попробуйте снова.")
        continue


    # Вычисляем новую позицию лягушки
    new_frog_x = frog_x + steps * dx
    new_frog_y = frog_y + steps * dy


    # Проверяем, не вышла ли лягушка за пределы пруда
    if new_frog_x < 0 or new_frog_x > 5 or new_frog_y < 0 or new_frog_y > 5:
        print("Плюх!")
        break

    # Обновляем позицию лягушки
    if pond[new_frog_x][new_frog_y] == 'L':
        frog_x = new_frog_x
        frog_y = new_frog_y
    else:
        frog_x = new_frog_x
        frog_y = new_frog_y


# Проверяем, достигла ли лягушка противоположного берега
if frog_x >= 5:
    print("Ура! Победа!")

"""
Пояснения:
1. **Импорт модуля `random`:**
    - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2. **Функция `generate_random_lilypads()`:**
   - `def generate_random_lilypads():`: Определяет функцию, которая создает список случайных позиций кувшинок на пруду.
   - `lilypads = []`: Инициализирует пустой список `lilypads`, где будут храниться координаты кувшинок.
   - `while len(lilypads) < 10:`: Запускает цикл, который выполняется, пока не будет сгенерировано 10 уникальных кувшинок.
    - `x = random.randint(0, 5)`: Генерирует случайную координату x для кувшинки.
    - `y = random.randint(0, 5)`: Генерирует случайную координату y для кувшинки.
    - `if (x, y) not in lilypads:`: Проверяет, нет ли уже такой кувшинки в списке.
   - `lilypads.append((x, y))`: Добавляет новую кувшинку в список.
   - `return lilypads`: Возвращает список позиций кувшинок.
3. **Инициализация игры:**
   - `frog_x = 0`: Устанавливает начальную позицию лягушки по оси X.
   - `frog_y = 2`: Устанавливает начальную позицию лягушки по оси Y.
   - `pond = [['.' for _ in range(6)] for _ in range(6)]`: Создаёт двумерный список (пруд) размером 6x6, заполненный точками ('.').
   - `lilypads = generate_random_lilypads()`: Генерирует случайные позиции для 10 кувшинок.
   - `for x, y in lilypads:`: Запускает цикл по списку кувшинок.
   - `pond[x][y] = 'L'`: Размещает кувшинки ('L') на поле.
4. **Основной игровой цикл:**
   - `while frog_x < 5:`: Запускает цикл, который продолжается, пока лягушка не достигла противоположного берега (координата X равна 5).
   - Выводит текущее состояние пруда с координатами строк и столбцов.
   - `direction = input("Введите направление (вверх, вниз, влево, вправо): ").lower()`: Запрашивает ввод направления движения лягушки и преобразует его в нижний регистр.
   - `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
   - `steps = int(input("Введите количество шагов: "))`: Запрашивает ввод количества шагов, на которые прыгает лягушка.
   - **Определение направления**:
     - На основе ввода направления устанавливает dx и dy (изменение координат).
     - Если введено некорректное направление, выводит сообщение об ошибке.
    - `new_frog_x = frog_x + steps * dx`: Вычисляет новую позицию лягушки по оси X.
   - `new_frog_y = frog_y + steps * dy`: Вычисляет новую позицию лягушки по оси Y.
   - **Проверка на выход за пределы пруда:**
     - `if new_frog_x < 0 or new_frog_x > 5 or new_frog_y < 0 or new_frog_y > 5:`: Проверяет, не вышла ли лягушка за границы пруда.
      - Если вышла, то выводит "Плюх!" и завершает игру.
   - **Обновление позиции лягушки:**
        - Проверяет, попала ли лягушка на кувшинку. Если да, обновляет координаты лягушки.
   - **Проверка на победу:**
    - `if frog_x >= 5:`: Проверяет, достигла ли лягушка противоположного берега.
    - Если достигла, выводит сообщение о победе.
"""
