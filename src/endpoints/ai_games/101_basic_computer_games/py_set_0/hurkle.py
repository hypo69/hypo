"""
<HURKLE>:
=================
Сложность: 4
-----------------
Описание игры:
Игра "HURKLE" - это игра-угадайка, где игрок пытается угадать местоположение таинственного зверька Хёркла. 
Хёркл прячется в одном из 10 возможных мест (координаты от 1 до 10 по осям X и Y).
Игрок делает ходы, пытаясь определить координаты Хёркла, и игра сообщает, 
насколько близко игрок находится к цели в каждом ходе, измеряя Евклидово расстояние.
Цель игры - угадать координаты Хёркла за минимальное количество ходов.

Правила игры:
1. Хёркл прячется в случайной точке на карте 10x10, где X и Y координаты от 1 до 10 включительно.
2. Игрок вводит координаты X и Y, где, по его мнению, находится Хёркл.
3. После каждого хода игроку сообщается расстояние между его предположением и местоположением Хёркла.
   Расстояние рассчитывается по формуле sqrt((x2-x1)^2 + (y2-y1)^2).
4. Игра продолжается до тех пор, пока игрок не угадает точное местоположение Хёркла.
5. Если игрок угадывает координаты Хёркла, то игра заканчивается.
6. Игра сообщает количество сделанных попыток.

-----------------
Алгоритм:
1. Начало игры.
2. Случайным образом выбирается положение Хёркла (xH, yH) в диапазоне от 1 до 10.
3. Инициализируется количество ходов = 0.
4. Цикл пока игрок не угадает положение Хёркла:
    a. Увеличить количество ходов на 1.
    b. Запросить у игрока координаты (xG, yG) его предположения.
    c. Вычислить расстояние между предположением игрока (xG, yG) и Хёрклом (xH, yH) по формуле:  distance = sqrt((xH - xG)^2 + (yH - yG)^2).
    d. Вывести расстояние до Хёркла.
    e. Проверить, угадал ли игрок положение Хёркла (xG == xH и yG == yH).
       Если угадал, то выйти из цикла.
5. Вывести сообщение о победе и количестве ходов.
6. Конец игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало игры) --> GenerateHurkleLocation(Сгенерировать случайное положение Хёркла);
    GenerateHurkleLocation --> InitializeGuessCount(Установить количество попыток = 0);
    InitializeGuessCount --> GuessLoopStart(Начало цикла угадывания);
    GuessLoopStart --> IncrementGuessCount(Увеличить количество попыток);
    IncrementGuessCount --> GetPlayerGuess(Запросить координаты у игрока);
    GetPlayerGuess --> CalculateDistance(Вычислить расстояние);
    CalculateDistance --> OutputDistance(Вывести расстояние);
    OutputDistance --> CheckWin(Проверить, угадал ли игрок);
    CheckWin -- Да --> OutputWinMessage(Вывести сообщение о победе);
    CheckWin -- Нет --> GuessLoopStart;
    OutputWinMessage --> End(Конец игры);
```
"""
import random
import math

def play_hurkle():
    """
    Основная функция игры "HURKLE".
    Реализует логику игры, включая генерацию положения Хёркла,
    ввод данных от игрока, вычисление расстояния и проверку на победу.
    """

    # 2. Случайным образом выбирается положение Хёркла (hurkle_x, hurkle_y) в диапазоне от 1 до 10.
    hurkle_x = random.randint(1, 10)  # Координата X Хёркла (случайное число от 1 до 10)
    hurkle_y = random.randint(1, 10)  # Координата Y Хёркла (случайное число от 1 до 10)

    # 3. Инициализируется количество ходов = 0.
    guess_count = 0 # Количество попыток, которые сделал игрок

    # 4. Цикл пока игрок не угадает положение Хёркла:
    while True:
        # a. Увеличить количество ходов на 1.
        guess_count += 1 # Увеличиваем счетчик попыток

        # b. Запросить у игрока координаты (guess_x, guess_y) его предположения.
        try:
            guess_x = int(input(f"Попытка {guess_count}. Введите координату X (1-10): ")) # Запрос координаты X у игрока
            guess_y = int(input(f"Попытка {guess_count}. Введите координату Y (1-10): ")) # Запрос координаты Y у игрока
        except ValueError:
            print("Пожалуйста, введите целое число.") # Сообщение об ошибке ввода
            continue # Вернуться к началу цикла
        
        if not (1 <= guess_x <= 10 and 1 <= guess_y <= 10):
            print("Координаты должны быть в диапазоне от 1 до 10.") # Сообщение об ошибке ввода диапазона координат
            continue # Вернуться к началу цикла

        # c. Вычислить расстояние между предположением игрока (guess_x, guess_y) и Хёрклом (hurkle_x, hurkle_y).
        distance = math.sqrt((hurkle_x - guess_x)**2 + (hurkle_y - guess_y)**2) # Вычисление расстояния по формуле Евклида

        # d. Вывести расстояние до Хёркла.
        print(f"Расстояние до Хёркла: {distance:.2f}") # Вывод расстояния до Хёркла (два знака после запятой)

        # e. Проверить, угадал ли игрок положение Хёркла (guess_x == hurkle_x и guess_y == hurkle_y).
        if guess_x == hurkle_x and guess_y == hurkle_y:
            # Если угадал, то выйти из цикла.
            break
    # 5. Вывести сообщение о победе и количестве ходов.
    print(f"Поздравляю! Вы угадали Хёркла за {guess_count} попыток!") # Сообщение о победе и количестве попыток

    # 6. Конец игры.

if __name__ == "__main__":
    play_hurkle()  # Вызов функции игры
"""
Пояснения:

Функция play_hurkle():
  - Инициализирует игру, генерируя случайные координаты Хёркла (hurkle_x, hurkle_y) в диапазоне от 1 до 10.
  - Инициализирует счетчик попыток guess_count = 0.
  - В цикле while True:
    - Увеличивает счетчик попыток guess_count на 1.
    - Запрашивает у игрока координаты X (guess_x) и Y (guess_y) его предположения.
    - Обрабатывает ошибки ввода, проверяя, что введены целые числа и что координаты находятся в пределах диапазона (1-10).
    - Вычисляет расстояние между предположением игрока и положением Хёркла с помощью функции sqrt из модуля math и выводит его на экран.
    - Проверяет, угадал ли игрок точное местоположение Хёркла. Если координаты совпадают, то цикл завершается.
  - После завершения цикла while, игра выводит поздравление и количество попыток, потребовавшихся для угадывания.
  - Конец игры.

Переменные:
  - hurkle_x: Координата X Хёркла.
  - hurkle_y: Координата Y Хёркла.
  - guess_count: Количество попыток, сделанных игроком.
  - guess_x: Координата X, которую вводит игрок.
  - guess_y: Координата Y, которую вводит игрок.
  - distance: Расстояние между предположением игрока и Хёрклом.

Основные шаги:
  1. Начало игры: игра инициализируется и генерируется положение Хёркла.
  2. Основной цикл игры:
    a. Игрок вводит координаты.
    b. Вычисляется расстояние до Хёркла.
    c. Проверяется, угадал ли игрок.
  3. Конец игры: выводится сообщение о победе и количестве попыток.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```