"""
HI Q:
=================
Сложность: 5
-----------------
Игра "Hi-Q" - это головоломка, в которой на доске с отверстиями и колышками, нужно перемещать колышки, перепрыгивая через соседние, чтобы в конце остался один колышек в центре. Игра начинается с установкой колышков на все отверстия, кроме одного в центре.
Цель игры - убрать все колышки, кроме одного, делая перепрыгивания через колышки по горизонтали или вертикали.

Правила игры:
1.  Игровое поле состоит из 33 отверстий, расположенных в форме ромба.
2.  В начале игры все отверстия, кроме центрального, заняты колышками.
3.  Ход заключается в перепрыгивании одним колышком через соседний колышек в свободное отверстие.
4.  Колышек, через который перепрыгнули, удаляется с поля.
5.  Цель игры - оставить на поле только один колышек, который должен находиться в центре.
6.  Игрок должен вводить координаты колышка, который будет перемещен, и координаты отверстия, куда он будет перемещен.
7.  Игра продолжается, пока игрок не выиграет или не сможет сделать ход.

-----------------
Алгоритм:
1.  Инициализировать игровое поле: создать массив (board) для представления игрового поля, где 1 означает наличие колышка, 0 – отсутствие.
2.  В начале игры, на поле все ячейки, кроме центральной, имеют значение 1.
3.  Вывести текущее состояние игрового поля.
4.  Запросить у игрока координаты колышка, который будет перемещен.
5.  Запросить у игрока координаты отверстия, куда он будет перемещен.
6.  Проверить, является ли ход допустимым:
    6.1. Колышек на исходных координатах должен существовать (значение 1 в массиве board).
    6.2. В конечных координатах должно быть пустое место (значение 0 в массиве board).
    6.3. Перемещение должно осуществляться на 2 позиции по горизонтали или вертикали (прыжок через 1 колышек).
    6.4. Промежуточный колышек должен существовать.
7.  Если ход допустим, выполнить перемещение колышка:
    7.1. Установить значение исходной ячейки в 0 (удалить колышек).
    7.2. Установить значение промежуточной ячейки в 0 (удалить перепрыгнутый колышек).
    7.3. Установить значение конечной ячейки в 1 (поставить колышек).
8.  Проверить, выиграл ли игрок: если на поле остался только один колышек в центре, вывести сообщение о победе и завершить игру.
9.  Если нет доступных ходов, вывести сообщение о проигрыше и завершить игру.
10. Повторять шаги с 3 по 9, пока игра не будет завершена.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBoard["<p align='left'>Инициализация доски:
    <code><b>
    board = [
        [0, 0, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 0, 0]
    ]
    </b></code></p>"]
    InitializeBoard --> DisplayBoard["Вывод доски"]
    DisplayBoard --> InputStartCoords["Ввод координат начальной позиции <code><b>(row1, col1)</b></code>"]
    InputStartCoords --> InputEndCoords["Ввод координат конечной позиции <code><b>(row2, col2)</b></code>"]
    InputEndCoords --> CheckMove["Проверка допустимости хода"]
    CheckMove -- Да --> MovePeg["<p align='left'>Перемещение колышка:
    <code><b>
    board[row1][col1] = 0
    board[midRow][midCol] = 0
    board[row2][col2] = 1
    </b></code></p>"]
    MovePeg --> CheckWin["Проверка: <code><b>остался один колышек в центре?</b></code>"]
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>Вы выиграли!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> CheckNoMoves{"Проверка: <code><b>есть ли доступные ходы?</b></code>"}
    CheckNoMoves -- Да --> DisplayBoard
    CheckNoMoves -- Нет --> OutputLose["Вывод сообщения: <b>Нет ходов, вы проиграли!</b>"]
    OutputLose --> End
    CheckMove -- Нет --> DisplayBoard
```

**Legenda**
    Start - Начало программы.
    InitializeBoard - Инициализация игрового поля (доски) с начальным расположением колышков.
    DisplayBoard - Вывод текущего состояния игрового поля на экран.
    InputStartCoords - Запрос у пользователя координат начальной позиции колышка для перемещения (row1, col1).
    InputEndCoords - Запрос у пользователя координат конечной позиции колышка для перемещения (row2, col2).
    CheckMove - Проверка допустимости хода: колышек должен существовать в начальной позиции, конечная позиция должна быть пустой, перемещение должно быть на две позиции по горизонтали или вертикали, и промежуточный колышек должен существовать.
    MovePeg - Перемещение колышка на игровом поле, удаление перепрыгнутого колышка.
    CheckWin - Проверка, выиграл ли игрок (остался ли только один колышек в центре).
    OutputWin - Вывод сообщения о победе и завершение игры.
    CheckNoMoves - Проверка, есть ли доступные ходы.
    OutputLose - Вывод сообщения о проигрыше и завершение игры, если нет доступных ходов.
    End - Конец программы.

"""
import sys

__author__ = 'hypo69 (hypo69@davidka.net)'

def print_board(board):
    """Выводит текущее состояние доски."""
    print("  ", end="")
    for i in range(7):
        print(f"{i} ", end="")
    print()
    for i, row in enumerate(board):
        print(f"{i} ", end="")
        for cell in row:
            print(f"{cell} ", end="")
        print()

def is_valid_move(board, row1, col1, row2, col2):
     """Проверяет, является ли ход допустимым."""
     # Проверка нахождения координат в пределах доски
     if not (0 <= row1 < 7 and 0 <= col1 < 7 and 0 <= row2 < 7 and 0 <= col2 < 7):
          return False

     # Проверка, что начальная позиция содержит колышек (1)
     if board[row1][col1] != 1:
          return False

     # Проверка, что конечная позиция пуста (0)
     if board[row2][col2] != 0:
        return False
     
     # Вычисление промежуточной позиции колышка
     mid_row = (row1 + row2) // 2
     mid_col = (col1 + col2) // 2
     
     # Проверка, что перемещение на две клетки по горизонтали или вертикали
     if abs(row1 - row2) + abs(col1 - col2) != 2 and abs(row1 - row2) + abs(col1-col2) != 4:
         return False
     
     # Проверка, что промежуточная позиция содержит колышек (1)
     if board[mid_row][mid_col] != 1:
          return False
     
     return True
    
def make_move(board, row1, col1, row2, col2):
    """Выполняет перемещение колышка на доске."""
    mid_row = (row1 + row2) // 2
    mid_col = (col1 + col2) // 2

    board[row1][col1] = 0
    board[mid_row][mid_col] = 0
    board[row2][col2] = 1

def check_win(board):
    """Проверяет, выиграл ли игрок."""
    count = 0
    for row in board:
        for cell in row:
            if cell == 1:
                count += 1
    # Проверяем, что остался только один колышек в центре
    if count == 1 and board[3][3] == 1:
        return True
    return False

def check_no_moves(board):
     """Проверяет, есть ли доступные ходы на доске."""
     for row1 in range(7):
          for col1 in range(7):
               if board[row1][col1] == 1:
                    for row2 in range(7):
                         for col2 in range(7):
                            if is_valid_move(board, row1, col1, row2, col2):
                                 return True
     return False

def main():
    """Основная логика игры HI Q."""
    # Инициализация игрового поля
    board = [
        [0, 0, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 0, 0],
        [1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 0, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 1, 0, 0],
        [0, 0, 1, 1, 1, 0, 0]
    ]
    
    while True:
        print_board(board) # Вывод текущего состояния доски
        try:
            # Запрос координат у пользователя
            row1 = int(input("Введите строку колышка для перемещения: "))
            col1 = int(input("Введите столбец колышка для перемещения: "))
            row2 = int(input("Введите строку, куда переместить колышек: "))
            col2 = int(input("Введите столбец, куда переместить колышек: "))
        except ValueError:
            print("Некорректный ввод, попробуйте снова.")
            continue

        # Проверка допустимости хода
        if is_valid_move(board, row1, col1, row2, col2):
            make_move(board, row1, col1, row2, col2) # Выполнение перемещения
            if check_win(board): # Проверка на победу
                print_board(board)
                print("Вы выиграли!")
                break
            if not check_no_moves(board): # Проверка на отсутствие ходов
                print("Нет доступных ходов, вы проиграли!")
                break
        else:
            print("Недопустимый ход, попробуйте снова.")

if __name__ == "__main__":
    main()
"""
Пояснения:
1.  **Импорт модуля `sys`**:
   -  `import sys`: Импортирует модуль `sys`, который используется в функции `print_board` для управления выводом.
2. **Функция `print_board(board)`**:
   - Принимает в качестве параметра board - текущее состояние игровой доски.
   - Выводит на консоль нумерацию столбцов (0-6) в первой строке.
   - Проходит по каждой строке игровой доски, выводя номер строки, а затем значения ячеек этой строки. 
   - Выводит текущее состояние доски.
3.  **Функция `is_valid_move(board, row1, col1, row2, col2)`**:
    -   Принимает в качестве параметров board - игровую доску, а так же row1, col1 - координаты начальной позиции и row2, col2 - координаты конечной позиции.
    -   Проверяет, находятся ли координаты в пределах доски.
    -   Проверяет, что начальная позиция содержит колышек (значение 1).
    -   Проверяет, что конечная позиция пуста (значение 0).
    -   Вычисляет координаты промежуточной позиции (колышка, через который будет совершен прыжок)
    -   Проверяет, что перемещение является корректным (на 2 клетки по вертикали или горизонтали).
    -   Проверяет, что промежуточная позиция содержит колышек.
    -   Возвращает True если ход допустим, иначе False.
4.  **Функция `make_move(board, row1, col1, row2, col2)`**:
    -   Принимает в качестве параметров board - игровую доску, а так же row1, col1 - координаты начальной позиции и row2, col2 - координаты конечной позиции.
    -   Вычисляет координаты промежуточного колышка.
    -   Выполняет перемещение: начальная позиция становится пустой (0), промежуточный колышек удаляется (0) и на конечную позицию ставится колышек (1).
5.  **Функция `check_win(board)`**:
    -   Принимает в качестве параметра board - игровую доску.
    -   Считает количество колышков на доске.
    -   Проверяет, что остался только один колышек в центре доски.
    -   Возвращает True, если игрок выиграл, иначе False.
6.  **Функция `check_no_moves(board)`**:
    -   Принимает в качестве параметра board - игровую доску.
    -   Проходит по всем позициям на доске.
    -   Для каждой позиции, где есть колышек, перебирает все остальные позиции.
    -   Если находит хотя бы один допустимый ход, возвращает True, иначе False.
7.  **Функция `main()`**:
    -   Инициализирует игровую доску board.
    -   Запускает основной игровой цикл while True.
    -   Вызывает функцию print_board для вывода текущего состояния игровой доски.
    -   Запрашивает у пользователя координаты для перемещения колышка.
    -   Обрабатывает исключение ValueError, если ввод не целое число.
    -   Проверяет допустимость хода с помощью функции is_valid_move.
    -   Если ход допустим:
        -   Выполняет ход, вызывая функцию make_move.
        -   Проверяет на победу, вызывая функцию check_win.
            - Если игрок выиграл, выводит сообщение и завершает игру.
        -   Проверяет наличие доступных ходов.
            - Если нет доступных ходов, выводит сообщение о проигрыше и завершает игру.
    -   Если ход недопустим, сообщает об этом пользователю.
8. **Условие `if __name__ == "__main__":`**:
    - Гарантирует, что функция `main()` будет вызвана только при запуске скрипта напрямую.
"""
