Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код предоставляет класс `OpenAIModel`, который позволяет взаимодействовать с API OpenAI, отправлять запросы, обрабатывать ответы и проводить обучение модели.  Класс включает методы для получения списка доступных моделей и помощников, отправки сообщений, анализа тональности, описания изображений, динамического обучения и обучения модели на предоставленных данных.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует нужные библиотеки, включая `openai`, `pandas`, `requests`, `PIL`, `pathlib`, `time`, и другие, для работы с API OpenAI, обработкой данных и изображениями.
2. **Определение констант:**  `MODE` устанавливает режим работы (например, `'dev'` для разработки).
3. **Класс `OpenAIModel`:**
    - **`__init__`:** Инициализирует объект модели: создает клиента OpenAI, устанавливает идентификатор помощника (по умолчанию `gs.credentials.openai.assistant_id.code_assistant`), задаёт систему инструкций (если указано), загружает помощника и диалоговый поток.
    - **`list_models`:** Получает список доступных моделей из API OpenAI и возвращает их идентификаторы.
    - **`list_assistants`:** Загружает список помощников из файла `assistants.json`.
    - **`set_assistant`:** Устанавливает помощника по его идентификатору.
    - **`_save_dialogue`:** Сохраняет историю диалогов в файл (JSON).
    - **`determine_sentiment`:** Анализирует тональность сообщения (положительная, отрицательная, нейтральная) на основе набора ключевых слов.
    - **`ask`:** Отправляет сообщение модели, получает ответ, анализирует его тональность и сохраняет диалог.  Реализует механизм обработки ошибок и повторных попыток.
    - **`describe_image`:** Описывает изображение, используя API OpenAI. Принимает путь к изображению, опционально - подсказку и систему инструкций. Возвращает результат в формате SimpleNamespace.
    - **`describe_image_by_requests`:**  Аналогичная функция, но использует `requests` для отправки запроса в API OpenAI.
    - **`dynamic_train`:** Динамически загружает предыдущие диалоги и производит fine-tuning модели на основе этой информации.
    - **`train`:** Обучает модель на предоставленных данных. Принимает путь к CSV файлу или директории с CSV файлами, метки данных (положительные или отрицательные). Возвращает ID задачи обучения.
    - **`save_job_id`:** Сохраняет ID задачи обучения с описанием в файл.
4. **Функция `main`:**
    - **Инициализация:** Инициализирует объект `OpenAIModel` и выполняет основные действия.
    - **Получение моделей:** Запрашивает и выводит список доступных моделей.
    - **Получение помощников:** Запрашивает и выводит список доступных помощников.
    - **Запрос к модели:**  Отправляет запрос к модели и выводит ответ.
    - **Динамическое обучение:** Выполняет динамическое обучение.
    - **Обучение модели:** Обучает модель на данных и выводит ID задачи.
    - **Сохранение ID задачи:** Сохраняет ID задачи обучения с описанием.
    - **Описание изображения:**  Вызывает метод для описания изображения.

Пример использования
-------------------------
.. code-block:: python

    import gs  # Предполагается, что gs определен где-то в проекте
    from hypotez.src.ai.openai.model.training import OpenAIModel

    # путь к файлу с данными
    data_file = gs.path.google_drive / 'AI' / 'training_data.csv'

    # Инициализация объекта модели
    model = OpenAIModel(system_instruction="Вы - полезный помощник.")

    # Обучение модели
    job_id = model.train(data_file=data_file)

    if job_id:
        print(f"Запущен процесс обучения с ID: {job_id}")

    # Запрос к модели
    user_input = "Расскажите о преимуществах Python."
    response = model.ask(user_input)
    print(f"Ответ модели: {response}")