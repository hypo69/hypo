"""
RUSROU:
=================
Сложность: 4
-----------------
Игра RUSROU - это простая игра, в которой компьютер загадывает случайное число от 1 до 100, а игрок должен его угадать. После каждой попытки компьютер сообщает, является ли введенное число больше или меньше загаданного. 
Игра заканчивается, когда игрок угадывает число.

Правила игры:
1. Компьютер загадывает случайное число от 1 до 100.
2. Игрок вводит число, которое, по его мнению, является загаданным.
3. Компьютер сообщает игроку, является ли введенное число больше или меньше загаданного.
4. Игра продолжается до тех пор, пока игрок не угадает число.
-----------------
Алгоритм:
1. Задать случайное число в диапазоне от 1 до 100.
2. Начать цикл:
    2.1. Запросить у пользователя ввод числа.
    2.2. Если введенное число равно загаданному числу, перейти к шагу 3.
    2.3. Если введенное число меньше загаданного, вывести сообщение "TOO LOW".
    2.4. Если введенное число больше загаданного, вывести сообщение "TOO HIGH".
    2.5. Вернуться к шагу 2.1
3. Вывести сообщение "YOU GOT IT IN N GUESSES", где N - число попыток.
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация:
    <code><b>
    targetNumber = random(1, 100)
    numberOfGuesses = 0
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла"}
    LoopStart --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
```
Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: targetNumber (загаданное число) генерируется случайным образом от 1 до 100, а numberOfGuesses (количество попыток) устанавливается в 0.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
"""
import random

__author__ = 'hypo69 (hypo69@davidka.net)'

# Генерируем случайное число от 1 до 100
targetNumber = random.randint(1, 100)
# Инициализируем счетчик попыток
numberOfGuesses = 0

# Начинаем бесконечный цикл
while True:
    # Запрашиваем у пользователя ввод числа
    try:
        userGuess = int(input("Введите ваше предположение: "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue
    
    # Увеличиваем счетчик попыток
    numberOfGuesses += 1

    # Проверяем, угадано ли число
    if userGuess == targetNumber:
        print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")
        break  # Выход из цикла, если число угадано
    elif userGuess < targetNumber:
        print("TOO LOW")  # Сообщаем, что загаданное число больше
    else:
        print("TOO HIGH")  # Сообщаем, что загаданное число меньше
"""
Пояснения:
1. **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2. **Инициализация переменных**:
    - `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в `targetNumber`. Это число, которое игрок должен угадать.
    - `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses`, которая будет считать количество попыток игрока, начиная с нуля.
3. **Основной игровой цикл `while True:`**:
    -   Этот цикл будет выполняться до тех пор, пока игрок не угадает число.
    -   **Ввод пользовательского числа**:
        -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `userGuess = int(input("Введите ваше предположение: "))`: Выводит на экран сообщение с запросом ввести число, которое по мнению игрока является загаданным, и сохраняет введенное число в переменную `userGuess`.
    -   `numberOfGuesses += 1`: увеличивает счетчик попыток на 1 при каждой итерации цикла.
    -   **Проверка, угадано ли число**:
        -   `if userGuess == targetNumber:`: Если введенное число равно загаданному числу, то игрок угадал число.
            -   `print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")`: Выводит на экран сообщение о выигрыше и количестве попыток, которое понадобилось игроку.
            -   `break`: Завершает цикл, так как игра окончена.
    -   **Проверка, является ли введенное число меньше загаданного**:
        -   `elif userGuess < targetNumber:`: Если введенное число меньше загаданного, то:
            -   `print("TOO LOW")`: Выводит подсказку, что нужно ввести число больше.
    -   **Если введенное число больше загаданного**:
        -   `else:`: Если введенное число не равно и не меньше загаданного, значит оно больше.
            -   `print("TOO HIGH")`: Выводит подсказку, что нужно ввести число меньше.
"""
