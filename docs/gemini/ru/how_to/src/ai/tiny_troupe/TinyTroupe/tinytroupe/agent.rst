Как использовать класс TinyPerson
========================================================================================

Описание
-------------------------
Этот класс представляет собой симулированного человека в мире TinyTroupe.  Он моделирует когнитивные состояния, взаимодействие с окружением и другими агентами, а также хранение и извлечение информации из памяти.  Класс позволяет агенту выполнять действия, получать стимулы, и реагировать на них.  Ключевыми методами являются `listen`, `act`, `socialize`, `see`, `think`, и `internalize_goal`, которые позволяют агенту общаться, принимать решения, реагировать на визуальные и социальные стимулы, размышлять и ставить цели. Класс также включает методы для управления памятью (`EpisodicMemory`, `SemanticMemory`), добавления когнитивных способностей (`mental_faculties`), и сериализации/десериализации (`save_spec`, `load_spec`).

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:**  Класс `TinyPerson` импортирует необходимые модули, включая `os`, `csv`, `json`, `ast`, `textwrap`, `datetime`, `chevron`, `logging`, `rich`, `copy`,  и другие для работы с файлами, данными, логированием, отображением, копированием и другими вспомогательными функциями.


2. **Создание экземпляра класса:** Для создания агента (TinyPerson) необходимо инициализировать объект класса `TinyPerson`, передавая ему имя.
    ```python
    agent = TinyPerson(name="AgentName")
    ```

3. **Инициализация памяти:** При создании агента можно указать `episodic_memory` и `semantic_memory`. Если не указать, будут использованы значения по умолчанию.  `SemanticMemory` отвечает за хранение знаний. `EpisodicMemory` хранит краткосрочную информацию, как текущие сообщения.


4. **Добавление когнитивных способностей (mental faculties):**  Для добавления дополнительных способностей, например,  способности вспоминать информацию из памяти, можно использовать методы `add_mental_faculty` или `add_mental_faculties`


5. **Взаимодействие с окружением:**  Агент взаимодействует с окружением с помощью методов `listen`, `act`, `socialize`, `see` и `think`. `listen` обрабатывает речь от других агентов, `act` производит действия, `socialize` обрабатывает социальные взаимодействия, `see` обрабатывает визуальные данные. `think` позволяет агенту проводить внутренний анализ и устанавливать цели.



6. **Определение характеристик:**  Агент может определять свои характеристики (возраст, национальность и т.д.) через метод `define`.

7. **Определение отношений с другими агентами:**  Метод `related_to` позволяет определить отношения с другими агентами.

8. **Чтение документов:** Методы `read_documents_from_folder` и `read_documents_from_web` позволяют добавить информацию из файлов и веб-страниц в семантическую память.

9. **Сериализация/десериализация:** Методы `save_spec` и `load_spec` позволяют сохранить и загрузить состояние агента.


10. **Обработка действий:** Методы `act`, `listen`, `socialize`, `see`, `think` и `internalize_goal`  обрабатывают различные типы стимулов и выдают действия.

11. **Перемещение в другое место:** `move_to` позволяет агенту менять текущее местоположение.


12. **Определение доступных агентов:** Методы `make_agent_accessible` и `make_agent_inaccessible` управляют списком доступных для взаимодействия агентов.



Пример использования
-------------------------
```python
import tinytroupe.agent as agent # Импортируем класс TinyPerson
# Создание агента
agent1 = agent.TinyPerson(name="Agent1")

# Добавление нового документа
agent1.read_documents_from_folder("./documents")

# Взаимодействие
agent1.listen("Привет, Agent1!")
agent1.act()

# Сохранение
agent1.save_spec("agent1_spec.json")
```
```


```