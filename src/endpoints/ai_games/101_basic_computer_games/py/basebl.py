"""
BASEBL:
=================
Сложность: 4
-----------------
Игра "Бейсбол" - это игра, где игрок пытается угадать 4-значное число, при этом каждая цифра числа должна быть уникальной. Компьютер дает подсказки о том, сколько цифр угадано и сколько из них находятся на правильной позиции.
Игра продолжается до тех пор, пока игрок не угадает число.

Правила игры:
1. Компьютер генерирует случайное 4-значное число, где все цифры уникальны.
2. Игрок вводит 4-значное число.
3. Компьютер сообщает количество "коров" (верных цифр на неправильных позициях) и "быков" (верных цифр на правильных позициях).
4. Игра продолжается, пока игрок не угадает число, получив 4 "быка".
-----------------
Алгоритм:
1.  Сгенерировать случайное 4-значное число, где все цифры уникальны (targetNumber).
2.  Начать цикл "пока число не угадано":
    2.1 Запросить у игрока ввод 4-значного числа (userGuess).
    2.2 Вызвать функцию для подсчета "коров" и "быков".
        2.2.1 Инициализировать счетчики "коров" (cows) и "быков" (bulls) в 0.
        2.2.2 Пройти по каждой цифре введенного числа.
            2.2.2.1 Если цифра на текущей позиции совпадает с цифрой загаданного числа на той же позиции, увеличить счетчик "быков".
            2.2.2.2 Если цифра из введенного числа есть в загаданном числе, но не на текущей позиции, увеличить счетчик "коров".
        2.2.3 Вернуть количество "коров" и "быков".
    2.3 Вывести количество "коров" и "быков" для игрока.
    2.4 Если количество "быков" равно 4, вывести сообщение "ПОЗДРАВЛЯЮ! Вы угадали число." и выйти из цикла.
3. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateTargetNumber["<p align='left'>Генерация случайного 4-значного числа с уникальными цифрами: <code><b>targetNumber</b></code></p>"]
    GenerateTargetNumber --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CalculateCowsAndBulls["<p align='left'>Вычисление <code><b>cows</b></code> и <code><b>bulls</b></code></p>"]
    CalculateCowsAndBulls --> OutputCowsAndBulls["Вывод: <code><b>cows</b></code> и <code><b>bulls</b></code>"]
    OutputCowsAndBulls --> CheckBulls{"Проверка: <code><b>bulls == 4</b></code>?"}
    CheckBulls -- Да --> OutputWin["Вывод сообщения: <b>ПОЗДРАВЛЯЮ! Вы угадали число.</b>"]
    OutputWin --> End["Конец"]
    CheckBulls -- Нет --> LoopStart
    
```

Legenda:
    Start - Начало программы.
    GenerateTargetNumber - Генерация случайного 4-значного числа с уникальными цифрами.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    InputGuess - Запрос у пользователя ввода 4-значного числа.
    CalculateCowsAndBulls - Вычисление количества "коров" (cows) и "быков" (bulls) на основе введенного числа и загаданного числа.
    OutputCowsAndBulls - Вывод количества "коров" и "быков" для игрока.
    CheckBulls - Проверка, равно ли количество "быков" 4.
    OutputWin - Вывод сообщения о победе.
    End - Конец программы.
"""
import random

def generate_target_number():
    """Генерирует случайное 4-значное число с уникальными цифрами."""
    digits = list(range(10))  # Создаем список цифр от 0 до 9
    random.shuffle(digits)    # Перемешиваем цифры в случайном порядке
    target_number = digits[:4] # Берем первые 4 цифры из перемешанного списка
    # Если первая цифра 0 - перегенерируем
    while target_number[0] == 0:
       random.shuffle(digits)
       target_number = digits[:4] 
    
    return "".join(map(str, target_number)) # Преобразуем список в строку, например: [1, 2, 3, 4] -> "1234"

def calculate_cows_and_bulls(target, guess):
    """Вычисляет количество 'коров' и 'быков'."""
    cows = 0 # Инициализируем счетчик "коров"
    bulls = 0 # Инициализируем счетчик "быков"
    
    # Проходим по каждой цифре введенного числа
    for i in range(len(guess)):
        if guess[i] == target[i]: # Если цифры на текущей позиции совпадают
            bulls += 1           # Увеличиваем счетчик "быков"
        elif guess[i] in target: # Если цифра есть в загаданном числе, но не на текущей позиции
            cows += 1            # Увеличиваем счетчик "коров"
    return cows, bulls # Возвращаем количество "коров" и "быков"

# Генерируем загаданное число
targetNumber = generate_target_number()
# Основной игровой цикл
while True:
    try:
        # Запрашиваем ввод числа у пользователя
        userGuess = input("Введите 4-значное число: ")
        if not userGuess.isdigit() or len(userGuess) != 4:
            print("Пожалуйста, введите корректное 4-значное число")
            continue
        # Вычисляем количество коров и быков
        cows, bulls = calculate_cows_and_bulls(targetNumber, userGuess)
        # Выводим результаты
        print(f"Коровы: {cows}, Быки: {bulls}")

        # Если количество быков равно 4, то игрок угадал число
        if bulls == 4:
            print("ПОЗДРАВЛЯЮ! Вы угадали число.")
            break # Завершаем цикл
    except ValueError:
        print("Пожалуйста, введите корректное 4-значное число")

"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел и перемешивания.
2.  **Функция `generate_target_number()`**:
    -   `digits = list(range(10))`: Создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
    -   `target_number = digits[:4]`: Берет первые 4 цифры из перемешанного списка, формируя 4-значное число.
    -    `while target_number[0] == 0:`:Проверка, если первая цифра 0 - перегенерируем.
    -   `return "".join(map(str, target_number))`: Преобразует список цифр в строку, например, [1,2,3,4] в "1234".
3.  **Функция `calculate_cows_and_bulls(target, guess)`**:
    -   `cows = 0` и `bulls = 0`: Инициализирует счетчики "коров" и "быков".
    -   `for i in range(len(guess)):`: Проходит по каждой цифре в введенном числе.
    -   `if guess[i] == target[i]:`: Если цифра на текущей позиции в guess совпадает с цифрой на той же позиции в target, увеличивает счетчик `bulls`.
    -   `elif guess[i] in target:`: Если цифра из guess есть в target, но не на той же позиции, увеличивает счетчик `cows`.
    -   `return cows, bulls`: Возвращает количество "коров" и "быков".
4.  **Основная часть программы**:
    -   `targetNumber = generate_target_number()`: Генерирует загаданное число.
    -   `while True:`: Основной игровой цикл, который продолжается, пока игрок не угадает число.
        -`try...except ValueError`: блок обработки ошибок ввода, если пользователь введет не цифры
        -   `userGuess = input("Введите 4-значное число: ")`: Запрашивает у пользователя ввод 4-значного числа.
        -   `if not userGuess.isdigit() or len(userGuess) != 4:`:Проверяет, что ввод - это 4 цифры.
        -   `cows, bulls = calculate_cows_and_bulls(targetNumber, userGuess)`: Вызывает функцию для вычисления "коров" и "быков".
        -   `print(f"Коровы: {cows}, Быки: {bulls}")`: Выводит результаты игроку.
        -   `if bulls == 4:`: Если количество "быков" равно 4, выводит сообщение о победе и завершает цикл.
"""
