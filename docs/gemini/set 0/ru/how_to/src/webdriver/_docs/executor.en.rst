Как использовать класс ExecuteLocator
=========================================================================================

Описание
-------------------------
Класс `ExecuteLocator` из модуля `src.webdriver` предназначен для выполнения различных действий с элементами веб-страницы с помощью Selenium WebDriver.  Он обрабатывает локейторы (locator dictionaries), определяющие, какие элементы и как следует найти и с ними взаимодействовать.  Класс предоставляет методы для поиска элементов, получения их атрибутов, отправки сообщений (ввода текста), а также для работы с событиями (например, нажатие кнопок).

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек и модулей:**
   Класс `ExecuteLocator` импортирует библиотеку Selenium WebDriver, а также внутренние модули для работы с настройками, логированием и обработкой исключений. Это обеспечивает взаимодействие с веб-страницами и необходимую логику работы.

2. **Инициализация экземпляра класса:**
   Для использования `ExecuteLocator` необходимо создать его экземпляр, передав в конструктор `__init__` объект WebDriver.  Это устанавливает связь с браузером для дальнейшего взаимодействия.

3. **Выполнение локейтора:**
   Метод `execute_locator` является основным методом для выполнения действий, описанных в локейторе. Он принимает словарь `locator` с параметрами для выполнения действия,  `message` (для ввода текста), `typing_speed` (скорость ввода),  и `continue_on_error` (флаг продолжения выполнения при ошибке).  Этот метод выбирает и выполняет действия на основе параметров в `locator`.

4. **Получение веб-элементов:**
   Метод `get_webelement_by_locator` получает элементы на странице по заданному локейтору.  Это может быть один элемент или список элементов.

5. **Получение атрибутов элементов:**
   Метод `get_attribute_by_locator` извлекает атрибуты из найденных элементов.  Возможен возврат значения атрибута, списка значений или других данных в зависимости от конфигурации.

6. **Отправка сообщений:**
   Метод `send_message` отправляет текстовые сообщения на веб-элемент.  Он позволяет имитировать ввод текста, учитывая заданную `typing_speed`.

7. **Оценивание локейтора:**
   Метод `evaluate_locator` обрабатывает атрибуты локейтора, в том числе потенциальные подстановки параметров (например, `%EXTERNAL_MESSAGE%`).

8. **Обработка ошибок:**
   Класс `ExecuteLocator` включает обработку исключений (например, `NoSuchElementException`, `TimeoutException`) для надежного выполнения и логирования ошибок. Это предотвращает сбой при поиске элементов или при выполнении других операций.

Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from src.webdriver import ExecuteLocator

    # ... (Инициализация WebDriver) ...
    driver = webdriver.Chrome()

    locator = {
        "element": {
            "by": "id",
            "selector": "myElementId",
            "attribute": "value",
            "event": "click()"
        }
    }

    executor = ExecuteLocator(driver)
    result = executor.execute_locator(locator)

    if result:
        print("Действие выполнено успешно")
    else:
        print("Ошибка при выполнении действия")

    driver.quit()