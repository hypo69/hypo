Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует драйвер Chrome для Selenium, предоставляя централизованную настройку через файл `chrome.json`. Он поддерживает различные пользовательские профили и настройки, такие как user-agent и директория профиля браузера, что позволяет гибко и автоматизировать взаимодействие с браузером Chrome.  Код обеспечивает расширенную обработку логов и исключений. Он также предоставляет методы для работы с JavaScript в браузере, локаторами элементов и скриншотами.  Ключевая особенность - создание синглтона (единственного экземпляра) драйвера, что улучшает производительность и предотвращает создание лишних объектов.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек:** Код импортирует необходимые модули, такие как `selenium`, `fake_useragent`, `pathlib`, `json`,  и другие.

2. **Загрузка настроек из файла `chrome.json`:** Код использует функцию `j_loads_ns` для загрузки настроек из файла `chrome.json`, расположенного в директории `webdriver/chrome`.  Настройки хранятся в формате JSON и включают в себя пользовательский агент, директорию профиля браузера и пути к исполняемому файлу браузера.

3. **Создание объекта ChromeOptions:** Создает объект `ChromeOptions` для настройки параметров Chrome.

4. **Настройка аргументов опций:** Код итерирует по настройкам из `chrome.json` и добавляет соответствующие аргументы в объект `ChromeOptions`.  Это включает в себя обработку настроек пользовательского агента, профиля и других опций, заданных в `chrome.json`.

5. **Нормализация путей:** Функция `normalize_path` обрабатывает пути, заменяя placeholders (например, `%APPDATA%`) на соответствующие пути в системе.

6. **Указание пути к исполняемому файлу Chrome:**  Код устанавливает путь к исполняемому файлу Chrome (`binary_location`) из файла конфигурации `chrome.json` и использует его для инициализации `ChromeService`.

7. **Создание объекта Chrome WebDriver:** Код инициализирует экземпляр класса `Chrome`, наследующегося от `webdriver.Chrome`.  Он использует загруженные настройки и заданные опции для настройки драйвера.

8. **Обработка исключений:**  Код содержит обработку возможных исключений (`WebDriverException` и другие), при возникновении ошибки, она логгируется, и процесс останавливается.

9. **Инициализация вспомогательных методов:** Код инициализирует вспомогательные методы для работы с JavaScript (`JavaScript`), локаторами элементов (`ExecuteLocator`) для дальнейшего использования в других частях приложения.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.webdriver.chrome.chrome import Chrome

    # Создаем экземпляр Chrome WebDriver
    driver = Chrome()

    # Получаем ссылку на главную страницу и переходим на нее
    driver.get("https://www.example.com")

    # Находим элемент и печатаем его текст
    element = driver.find_element("xpath", "//h1")  # Замените xpath на нужный селектор
    print(element.text)

    # Закрываем браузер
    driver.quit()