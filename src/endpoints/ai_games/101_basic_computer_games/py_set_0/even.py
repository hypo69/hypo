"""
EVEN:
=================
Сложность: 2
-----------------
Игра "EVEN" - это простая числовая игра, в которой компьютер загадывает случайное число от 1 до 1000, а игрок пытается его угадать. После каждой попытки компьютер сообщает, является ли загаданное число больше или меньше предложенного игроком числа. 
-----------------
Правила игры:
1. Компьютер выбирает случайное целое число в диапазоне от 1 до 1000.
2. Игрок вводит число, которое, по его мнению, является загаданным.
3. Компьютер сравнивает введенное число с загаданным и сообщает игроку, является ли загаданное число больше или меньше введенного.
4. Игрок продолжает угадывать до тех пор, пока не назовет верное число.
-----------------
Алгоритм:
1. Задать случайное целое число в диапазоне от 1 до 1000 (secretNumber).
2. Начать цикл:
    2.1. Запросить ввод числа от игрока (playerGuess).
    2.2. Если playerGuess больше secretNumber, то вывести "TOO HIGH".
    2.3. Если playerGuess меньше secretNumber, то вывести "TOO LOW".
    2.4. Если playerGuess равно secretNumber, то вывести "YOU GOT IT!", и закончить игру.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> GenerateSecretNumber(Сгенерировать случайное число от 1 до 1000 - secretNumber)
    GenerateSecretNumber --> InputGuess(Ввести число - playerGuess)
    InputGuess --> CheckGuess(Проверить playerGuess)
    CheckGuess -- playerGuess > secretNumber --> OutputTooHigh(Вывести "TOO HIGH")
    OutputTooHigh --> InputGuess
    CheckGuess -- playerGuess < secretNumber --> OutputTooLow(Вывести "TOO LOW")
    OutputTooLow --> InputGuess
    CheckGuess -- playerGuess = secretNumber --> OutputCorrect(Вывести "YOU GOT IT!")
    OutputCorrect --> End(Конец)
```
"""
import random

def play_even_game():
    """
    Функция реализует игру "EVEN".

    Функция не принимает аргументов.
    Функция не возвращает значений, но выводит сообщения в консоль и обрабатывает пользовательский ввод.
    """

    # 1. Генерируем случайное число от 1 до 1000, которое нужно угадать
    secret_number = random.randint(1, 1000)

    # 2. Начинаем цикл угадывания
    while True:
        # 2.1. Запрашиваем у пользователя число
        try:
          player_guess = int(input("Угадайте число от 1 до 1000: "))
        except ValueError:
          print("Пожалуйста, введите целое число.")
          continue # Если ввод не является числом, переходим к следующей итерации

        # 2.2. Если число игрока больше загаданного числа, выводим сообщение "TOO HIGH"
        if player_guess > secret_number:
            print("TOO HIGH")
        # 2.3. Если число игрока меньше загаданного числа, выводим сообщение "TOO LOW"
        elif player_guess < secret_number:
            print("TOO LOW")
        # 2.4. Если число игрока равно загаданному числу, выводим сообщение "YOU GOT IT!" и завершаем игру
        else:
            print("YOU GOT IT!")
            break

# Запускаем игру
if __name__ == "__main__":
    play_even_game()
"""
Пояснения:
=================
1. `import random`: импортируем модуль random для генерации случайных чисел.

2. `def play_even_game():`: объявляем функцию, которая содержит логику игры.

3. `secret_number = random.randint(1, 1000)`: генерируем случайное целое число в диапазоне от 1 до 1000 и сохраняем его в переменной `secret_number`.

4. `while True:`: начинаем бесконечный цикл, который будет продолжаться до тех пор, пока игрок не угадает число.

5. `player_guess = int(input("Угадайте число от 1 до 1000: "))`: запрашиваем у пользователя число и преобразуем его в целое число. Если ввод не является числом выводится сообщение об ошибке
    и программа переходит к следующему циклу.

6.  `if player_guess > secret_number:`: проверяем, если число игрока больше загаданного числа.
    `print("TOO HIGH")`: выводим сообщение "TOO HIGH" если это условие верно.

7.  `elif player_guess < secret_number:`: проверяем, если число игрока меньше загаданного числа.
   `print("TOO LOW")`: выводим сообщение "TOO LOW" если это условие верно.

8.  `else:`: если ни одно из вышеприведенных условий не выполнено, значит число игрока равно загаданному числу.
    `print("YOU GOT IT!")`: выводим сообщение "YOU GOT IT!".
    `break`: завершаем цикл, и игра заканчивается.

9.  `if __name__ == "__main__":`: проверяем, если скрипт запущен как основная программа.
     `play_even_game()`: вызываем функцию `play_even_game()`, если скрипт запущен как основная программа.
    
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```