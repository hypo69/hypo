Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит набор функций, предназначенных для работы с XPath, CSS Selectors, и узлами DOM (Document Object Model) в браузере.  Функции позволяют получать элементы,  выполнять XPath выражения, обрабатывать результаты, а также манипулировать атрибутами и классами элементов.  Код предоставляет методы для различных типов результатов XPath (числа, строки, булевы значения, итераторы/снимки узлов),  учитывая контекст, в котором выполняются запросы. Код обрабатывает различные типы входных данных и валидирует контекст запроса (например, проверяет, что контекстом является документ или элемент).  Также реализованы функции для сохранения и восстановления атрибутов и классов элементов, работы со фреймами и управления ошибками.

Шаги выполнения
-------------------------
1. **Инициализация:** Код определяет глобальное пространство имен `tryxpath.functions`.
2. **Проверка на повторное выполнение:** Проверяет, выполнялся ли код ранее. Если да,  выполнение останавливается.
3. **Функция `fu.execExpr`:**  Эта функция является основной для выполнения XPath или CSS запросов.
   - Она принимает выражение, метод (например, `evaluate`, `querySelector`, `querySelectorAll`), и опции.
   - В зависимости от метода выбирается соответствующий способ получения результатов.
   - `evaluate` использует `document.evaluate` для выполнения XPath, обрабатывая разные типы результатов XPath.
   - `querySelector` и `querySelectorAll` используют методы `querySelector` и `querySelectorAll` для выполнения CSS запросов, а возвращает элементы.
   - Все методы бросают исключения для некорректных контекстов.
4. **Обработка результатов:** Функция `fu.resToArr` преобразует результат `evaluate` в массив.
   - В зависимости от типа результата (число, строка, булево, итератор узлов, снимок узлов) выполняется соответствующая обработка.
   - Если тип результата не распознан, выбрасывается исключение.
5. **Функции для работы с узлами и атрибутами:**
   - `fu.isDocOrElem`, `fu.isAttrItem`, `fu.isNodeItem` — для проверки типа узлов/атрибутов.
   - `fu.getItemDetail`, `fu.getItemDetails` — для получения подробных данных об узлах (тип, имя, значение, текст).
   - `fu.saveItemClass`, `fu.restoreItemClass`, `fu.addClassToItem`, `fu.saveItemAttrs`, `fu.restoreItemAttrs` — функции для сохранения и восстановления атрибутов и классов.
6. **Функции для работы с фреймами:** `fu.getFrameAncestry`, `fu.findFrameElement`, `fu.findFrameIndex` позволяют работать с фреймами.
7. **Функции для создания таблиц:** Функции `fu.createHeaderRow`, `fu.createDetailTableHeader`, `fu.createDetailRow`, `fu.appendDetailRows`, `fu.updateDetailsTable` создают и обновляют таблицы с подробной информацией об элементах DOM.
8. **Обработка ошибок:**  Функция `fu.onError` обрабатывает ошибки, которые могут возникнуть при выполнении других функций.
9. **Прочие функции:**  Остальные функции обеспечивают вспомогательные функции для работы с DOM, такими как проверка типов данных, конвертирование, преобразование результатов в массивы, получение элементов, а также обработка различных типов результатов XPath.


Пример использования
-------------------------
.. code-block:: javascript
    
    // Получение всех элементов с классом "myClass"
    var elements = tryxpath.functions.execExpr(".//div[@class='myClass']", "evaluate", {"context": document});
    console.log(elements.items);

    // Пример использования функции добавления класса
    tryxpath.functions.addClassToItems("highlighted", elements.items);

    // Пример добавления атрибута index
    tryxpath.functions.setIndexToItems("index", elements.items);

    // Пример создания таблицы из элементов
    var details = tryxpath.functions.getItemDetails(elements.items);
    var tableContainer = document.getElementById("myTable");
    tryxpath.functions.updateDetailsTable(tableContainer, details);