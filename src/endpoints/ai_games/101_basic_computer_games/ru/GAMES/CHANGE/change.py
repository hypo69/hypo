"""
HURKLE:
=================
Сложность: 6
-----------------
Игра "Хёркл" - это игра-поиск, в которой игрок пытается найти компьютер, который "прячется" в случайном месте на сетке 10x10. Игрок получает подсказки о направлении (север, юг, восток, запад) и расстоянии до Хёркла после каждого хода. Игрок побеждает, когда находит Хёркла.

Правила игры:
1. Компьютер размещает Хёркла в случайной точке на сетке 10x10 (координаты от 1 до 10 по x и y).
2. Игрок вводит координаты своей попытки найти Хёркла.
3. Компьютер вычисляет расстояние между позицией игрока и позицией Хёркла и выдает подсказки:
    - Направление (север, юг, восток, запад или их комбинации).
    - Расстояние до Хёркла.
4. Игрок продолжает делать попытки, пока не найдет Хёркла, т.е. координаты его попытки не совпадут с координатами Хёркла.
-----------------
Алгоритм:
1.  Инициализировать координаты Хёркла случайными целыми числами от 1 до 10 для x и y.
2.  Начать цикл "пока Хёркл не найден":
    2.1 Запросить у игрока координаты его попытки (x и y).
    2.2 Если координаты игрока совпадают с координатами Хёркла, вывести сообщение о победе и завершить игру.
    2.3 Иначе вычислить расстояние между координатами игрока и координатами Хёркла.
    2.4 Вычислить и вывести направление до Хёркла (комбинация N, S, E, W).
    2.5 Вывести расстояние до Хёркла.
3. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeHurklePosition["<p align='left'>Инициализация:
    <code><b>
    hurkleX = random(1, 10)
    hurkleY = random(1, 10)
    </b></code></p>"]
    InitializeHurklePosition --> GameLoopStart{"Начало цикла: пока Хёркл не найден"}
    GameLoopStart -- Да --> InputGuess["Ввод координат игрока: <code><b>userX, userY</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userX == hurkleX and userY == hurkleY</b></code>?"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU FOUND HIM!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CalculateDistance["<p align='left'>Вычисление:
    <code><b>
    distanceX = userX - hurkleX
    distanceY = userY - hurkleY
    distance = sqrt(distanceX^2 + distanceY^2)
    </b></code></p>"]
    CalculateDistance --> CalculateDirection["<p align='left'>Определение направления:
     <code><b>
    direction = ''
    if distanceY > 0: direction = direction + 'N'
    if distanceY < 0: direction = direction + 'S'
    if distanceX > 0: direction = direction + 'E'
    if distanceX < 0: direction = direction + 'W'
    </b></code></p>"]
    CalculateDirection --> OutputClue["Вывод сообщения: <b>{direction}, distance: {distance}</b>"]
     OutputClue --> GameLoopStart
    GameLoopStart -- Нет --> End
```

Legenda:
    Start - Начало программы.
    InitializeHurklePosition - Инициализация координат Хёркла hurkleX и hurkleY случайными целыми числами от 1 до 10.
    GameLoopStart - Начало цикла, который продолжается, пока Хёркл не найден.
    InputGuess - Запрос у пользователя координат его попытки (userX, userY).
    CheckGuess - Проверка, совпадают ли координаты игрока с координатами Хёркла.
    OutputWin - Вывод сообщения о победе "YOU FOUND HIM!" и завершение игры.
    End - Конец программы.
    CalculateDistance - Вычисление расстояния между позицией игрока и позицией Хёркла.
    CalculateDirection - Определение направления до Хёркла (комбинация N, S, E, W).
    OutputClue - Вывод подсказки (направление и расстояние) до Хёркла.
```
import random
import math

# 1. Инициализация координат Хёркла случайными целыми числами от 1 до 10
hurkleX = random.randint(1, 10)
hurkleY = random.randint(1, 10)

# 2. Основной игровой цикл (пока Хёркл не найден)
while True:
    # 2.1 Запрос у игрока координат его попытки
    try:
        userX = int(input("Введите X координату (от 1 до 10): "))
        userY = int(input("Введите Y координату (от 1 до 10): "))
    except ValueError:
        print("Пожалуйста, введите целые числа.")
        continue

    # Проверка ввода координат
    if not (1 <= userX <= 10 and 1 <= userY <= 10):
            print("Координаты должны быть в диапазоне от 1 до 10.")
            continue
    # 2.2 Проверка, угадал ли игрок позицию Хёркла
    if userX == hurkleX and userY == hurkleY:
        print("YOU FOUND HIM!")
        break  # Завершение игры, если Хёркл найден

    # 2.3 Вычисление расстояния между позицией игрока и позицией Хёркла
    distanceX = userX - hurkleX
    distanceY = userY - hurkleY
    distance = math.sqrt(distanceX**2 + distanceY**2)

    # 2.4 Определение направления до Хёркла (комбинация N, S, E, W)
    direction = ""
    if distanceY > 0:
        direction += "N"
    if distanceY < 0:
        direction += "S"
    if distanceX > 0:
        direction += "E"
    if distanceX < 0:
        direction += "W"

    # 2.5 Вывод подсказки (направление и расстояние) до Хёркла
    print(f"{direction if direction else 'Здесь'}, расстояние: {distance:.2f}")

"""
Объяснение кода:
1.  **Импорт модулей `random` и `math`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
   - `import math`: Импортирует модуль `math`, который используется для вычисления квадратного корня.
2.  **Инициализация координат Хёркла**:
    -   `hurkleX = random.randint(1, 10)`: Генерирует случайное целое число от 1 до 10 для координаты X Хёркла.
    -   `hurkleY = random.randint(1, 10)`: Генерирует случайное целое число от 1 до 10 для координаты Y Хёркла.
3.  **Основной игровой цикл `while True:`**:
    - Бесконечный цикл, который продолжается до тех пор, пока игрок не найдет Хёркла (не будет выполнена команда `break`).
    -  **Ввод координат игрока**:
        -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целые числа, то будет выведено сообщение об ошибке.
        - `userX = int(input("Введите X координату (от 1 до 10): "))`: Запрашивает у игрока X координату.
        -  `userY = int(input("Введите Y координату (от 1 до 10): "))`: Запрашивает у игрока Y координату.
    -   **Проверка валидности ввода**:
        -   `if not (1 <= userX <= 10 and 1 <= userY <= 10):`: Проверяет, что координаты находятся в диапазоне от 1 до 10.
        -   `print("Координаты должны быть в диапазоне от 1 до 10.")`: Выводит сообщение об ошибке, если координаты неверны.
        -    `continue`: Переходит к следующей итерации цикла.
    -   **Проверка, угадал ли игрок позицию Хёркла**:
        -   `if userX == hurkleX and userY == hurkleY:`: Проверяет, совпадают ли координаты игрока и Хёркла.
        -   `print("YOU FOUND HIM!")`: Выводит сообщение о победе.
        -   `break`: Завершает цикл (игру), если Хёркл найден.
    -  **Вычисление расстояния**:
        -   `distanceX = userX - hurkleX`: Вычисляет разницу координат X.
        -  `distanceY = userY - hurkleY`: Вычисляет разницу координат Y.
        -   `distance = math.sqrt(distanceX**2 + distanceY**2)`: Вычисляет расстояние по теореме Пифагора.
    - **Определение направления**:
        -   `direction = ""`: Инициализирует пустую строку для хранения направления.
        -   `if distanceY > 0: direction += "N"`: Если разница Y положительная, добавляет "N" (север).
        -   `if distanceY < 0: direction += "S"`: Если разница Y отрицательная, добавляет "S" (юг).
        -   `if distanceX > 0: direction += "E"`: Если разница X положительная, добавляет "E" (восток).
        -   `if distanceX < 0: direction += "W"`: Если разница X отрицательная, добавляет "W" (запад).
    - **Вывод подсказки**:
        -  `print(f"{direction if direction else 'Здесь'}, расстояние: {distance:.2f}")`: Выводит направление (если есть, иначе выводит "Здесь") и расстояние до Хёркла.
"""
