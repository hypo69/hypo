
<BOWL>:
=================
Сложность: 3
-----------------
Игра в боулинг - это простая игра, где игрок бросает мяч по кеглям. В этой версии игры игрок делает 10 бросков и очки за каждый бросок суммируются. Игра не учитывает страйки и спейры.
Игроку предлагается по очереди ввести количество сбитых кеглей за каждый из 10 бросков. В конце игры выводится общее количество очков.

Правила игры:
1. Игрок делает 10 бросков.
2. За каждый бросок игрок вводит количество сбитых кеглей (от 0 до 10).
3. Общее количество очков равно сумме сбитых кеглей за все 10 бросков.
4. Страйки и спейры в этой версии игры не учитываются.
-----------------
Алгоритм:
1. Инициализировать переменную для хранения общего количества очков (totalScore) нулем.
2. Начать цикл 10 раз (для 10 бросков).
    2.1 Запросить у пользователя количество сбитых кеглей в текущем броске.
    2.2 Убедиться, что количество сбитых кеглей находится в диапазоне от 0 до 10.
    2.3 Прибавить количество сбитых кеглей к общему количеству очков (totalScore).
3. Вывести общее количество очков (totalScore).
4. Завершить игру.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeScore["Инициализация: <code><b>totalScore = 0</b></code>"]
    InitializeScore --> LoopStart{"Начало цикла: <code><b>for i = 1 to 10</b></code>"}
    LoopStart -- Да --> InputPins["Ввод: <code><b>pinsDown</b></code>"]
    InputPins --> ValidateInput{"Проверка: <code><b>0 <= pinsDown <= 10</b></code>?"}
    ValidateInput -- Да --> AddScore["<code><b>totalScore = totalScore + pinsDown</b></code>"]
    AddScore --> LoopStart
    ValidateInput -- Нет --> OutputError["Вывод ошибки: <b>Некорректный ввод. Введите от 0 до 10</b>"]
    OutputError --> InputPins
    LoopStart -- Нет --> OutputScore["Вывод: <b>Общее количество очков: <code>{totalScore}</code></b>"]
    OutputScore --> End["Конец"]
```
Legenda:
    Start - Начало программы.
    InitializeScore - Инициализация переменной totalScore (общее количество очков) нулем.
    LoopStart - Начало цикла, который выполняется 10 раз (для 10 бросков).
    InputPins - Запрос у пользователя ввода количества сбитых кеглей в текущем броске (pinsDown).
    ValidateInput - Проверка, находится ли введенное количество сбитых кеглей в диапазоне от 0 до 10.
    AddScore - Добавление количества сбитых кеглей (pinsDown) к общему количеству очков (totalScore).
    OutputError - Вывод сообщения об ошибке, если введенное количество сбитых кеглей некорректно.
    OutputScore - Вывод общего количества очков (totalScore) после завершения всех 10 бросков.
    End - Конец программы.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализация общего количества очков
totalScore = 0

# Цикл для 10 бросков
for i in range(1, 11):
    while True:
        try:
            # Запрашиваем ввод количества сбитых кеглей
            pinsDown = int(input(f"Бросок {i}: Введите количество сбитых кеглей (от 0 до 10): "))
            # Проверка корректности ввода
            if 0 <= pinsDown <= 10:
                break # Выходим из цикла, если ввод корректный
            else:
                print("Некорректный ввод. Введите значение от 0 до 10.")
        except ValueError:
            print("Некорректный ввод. Введите целое число.")
    # Добавляем очки к общему счету
    totalScore += pinsDown

# Выводим общий счет
print(f"Общее количество очков: {totalScore}")


"""
Объяснение кода:
1.  **Инициализация переменной `totalScore`**:
    -   `totalScore = 0`:  Инициализирует переменную `totalScore` для хранения общего количества очков. Начальное значение равно 0.
2. **Цикл для 10 бросков**:
    -   `for i in range(1, 11):`:  Цикл `for` выполняется 10 раз, представляя 10 бросков в игре. Переменная `i` принимает значения от 1 до 10.
3.  **Внутренний цикл `while True:` для валидации ввода**:
    -   `while True:`:  Бесконечный цикл, который будет выполняться до тех пор, пока пользователь не введет корректное значение.
    -   **Ввод данных**:
        -   `try...except ValueError`: Блок `try-except` используется для обработки возможных ошибок ввода.
        -  `pinsDown = int(input(f"Бросок {i}: Введите количество сбитых кеглей (от 0 до 10): "))`: Запрашивает у пользователя количество сбитых кеглей для текущего броска и преобразует введенное значение в целое число.
       -  `if 0 <= pinsDown <= 10`: Проверяет, является ли введенное число корректным (находится ли оно в диапазоне от 0 до 10 включительно).
       -  `break`: Если ввод корректен (число находится в диапазоне от 0 до 10), цикл `while` прерывается, и программа переходит к следующему шагу.
       - `else:`: Если введенное число не находится в диапазоне от 0 до 10, выводится сообщение об ошибке.
       -`except ValueError:`:  Если ввод не является целым числом, программа обрабатывает ошибку и выводит сообщение об ошибке.
4. **Добавление очков к общему счету**:
    -  `totalScore += pinsDown`:  Добавляет количество сбитых кеглей в текущем броске к общему количеству очков.
5.  **Вывод общего счета**:
    -   `print(f"Общее количество очков: {totalScore}")`: Выводит общее количество очков, набранных за все 10 бросков.
"""
```