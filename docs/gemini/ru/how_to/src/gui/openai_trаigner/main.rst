Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует приложение с интерфейсом Qt, которое позволяет пользователю вводить URL-адрес и загружать его в веб-браузер, встроенный в приложение. Приложение также имеет возможность минимизации в системный трей, а также предлагает меню для выбора популярных сервисов Google и выбора различных чат-ботов (моделей).

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует необходимые библиотеки PyQt6 для создания графического интерфейса, QtWebEngineWidgets для интеграции веб-браузера и другие вспомогательные модули.

2. **Создание главного окна приложения:** Создается класс `AssistantMainWindow`, наследующий от `QMainWindow`.

3. **Настройка размеров окна:** Определяются размеры окна, занимающие 75% от экрана.

4. **Выбор браузера:**  Запрашивается у пользователя, какой браузер (Chrome, Firefox, Edge) использовать по умолчанию. Если выбор некорректен, программа завершается.

5. **Создание профиля браузера:** Создается профиль браузера (`QWebEngineProfile`) на основе выбранного браузера,  используя пути к профилям Chrome, Firefox или Edge.

6. **Создание веб-браузера:** Создается виджет веб-браузера (`QWebEngineView`) и устанавливается выбранный браузерный профиль.

7. **Создание верхней панели:** Создается виджет `title_bar` для верхней панели с кнопками.

8. **Создание поля для ввода URL:** Создается поле ввода для URL-адреса (`QLineEdit`).

9. **Создание кнопки для загрузки URL:** Создается кнопка "Загрузить" (`QPushButton`).

10. **Создание кнопок управления окном:** Создаются кнопки для минимизации (`window-minimize`), перехода на весь экран (`view-fullscreen`) и закрытия (`window-close`) окна.

11. **Создание и конфигурация системного трея:** Создается системный трей для минимизации окна. Создается контекстное меню для системного трея с действиями восстановления и выхода.

12. **Создание меню сервисов Google и выбора модели:** Создаются меню для выбора Google сервисов (Gmail, Google Docs, etc.) и для выбора моделей чат-ботов.

13. **Создание кнопок для меню:** Создаются кнопки для доступа к меню выбора сервисов Google и моделей чат-ботов.

14. **Управление расположением элементов на форме:** Устанавливаются layouts (`QHBoxLayout`, `QVBoxLayout`) для размещения элементов на форме.

15. **Загрузка URL:** Метод `load_url` загружает введенный URL в веб-браузер.

16. **Сворачивание в трей:** Метод `hide_to_tray` сворачивает приложение в системный трей.

17. **Выход из приложения:** Метод `quit_app` закрывает приложение.

18. **Обработка закрытия окна:** Метод `closeEvent` перехватывает событие закрытия и сворачивает окно в трей вместо его закрытия.

19. **Запуск приложения:** В блоке `if __name__ == "__main__":` создается приложение `QApplication` и запускается главная функция.

Пример использования
-------------------------
.. code-block:: python

    import sys
    from PyQt6.QtWidgets import QApplication
    from hypotez.src.gui.openai_trаigner.main import AssistantMainWindow

    if __name__ == "__main__":
        app = QApplication(sys.argv)
        window = AssistantMainWindow()
        window.show()
        sys.exit(app.exec())

Этот код запускает приложение `AssistantMainWindow`.  Пользователь может ввести URL в поле ввода и нажать "Загрузить" или использовать меню для загрузки Google сервисов или выбрать модель чат-бота.