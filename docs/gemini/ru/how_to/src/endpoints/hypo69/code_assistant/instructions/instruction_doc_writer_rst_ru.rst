Инструкции по генерации документации для Python-кода
=====================================================

Описание
-------------------------
Данные инструкции описывают процесс создания документации в формате reStructuredText (RST) для Python-кода.  Документация будет использоваться с Sphinx для генерации пользовательской документации.

Шаги выполнения
-------------------------

1. **Анализ кода:** Проанализируйте каждый входной Python-файл, обращая внимание на:
    - Структуру кода (модули, классы, функции, методы).
    - Логику работы каждого элемента.
    - Параметры функций и методов, включая их типы и описания.
    - Возвращаемые значения и возможные исключения.


2. **Создание шаблона RST:** Создайте текстовый файл с расширением `.rst` для каждого входного файла Python.
    - Напишите заголовок первого уровня (`=`) для файла, используя имя модуля/класса.
    - Добавьте краткое описание содержимого модуля/класса (подзаголовок второго уровня).
    - Используйте директиву `.. automodule::` для автоматической генерации документации для всего модуля, включая все функции и классы в нём.

    - Для функций и методов, используйте директиву `.. autofunction::` или `.. automethod::` для автоматической генерации документации.
    - Добавьте описание функций и методов в комментарии к коду в формате, указанном в примере из исходных данных:

        ```python
        def function(param: str, param1: Optional[str | dict | str] = None) -> dict | None:
            """
            Аргументы:
                param (str): Описание параметра `param`.
                param1 (Optional[str | dict | str], optional): Описание параметра `param1`. По умолчанию равно `None`.

            Возвращаемое значение:
                dict | None: Описание возвращаемого значения. Возвращает словарь или `None`.

            Исключения:
                SomeError: Описание ситуации, в которой возникает исключение `SomeError`.
            """
        ```
        - Используйте `ex` вместо `e` в блоках обработки исключений.


3. **Структура TOC (дерево оглавления):**
    - В файле `index.rst` создайте секцию `.. toctree::` для перечисления всех модулей и их соответствующих файлов `.rst`. Это обеспечит навигацию по документации.

4. **Форматирование и стилизация:**
    - Используйте заголовки различного уровня (1, 2, 3, 4), чтобы структурировать документацию.
    - Следуйте правилам форматирования, указанным в исходных данных.


Пример использования
-------------------------
.. code-block:: rst

   Модуль для работы с базами данных
   ================================

   .. automodule:: mydatabase
       :members:
       :undoc-members:
       :show-inheritance:


   Функция для подключения к базе данных
   -------------------------------------

   .. autofunction:: mydatabase.connect_to_db

   .. code-block:: python
       
       def connect_to_db(host: str, user: str, password: str) -> sqlite3.Connection:
           """
           Подключается к базе данных SQLite.

           Аргументы:
               host (str): Хост базы данных.
               user (str): Имя пользователя.
               password (str): Пароль.

           Возвращаемое значение:
               sqlite3.Connection: Объект подключения к базе данных.

           Исключения:
               sqlite3.Error: Возникает при ошибке подключения.
           """
           try:
               conn = sqlite3.connect(host)
               return conn
           ex cept sqlite3.Error as e:
               raise Exception(f"Ошибка подключения к базе данных: {e}")