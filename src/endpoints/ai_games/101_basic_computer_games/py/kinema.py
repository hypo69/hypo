"""
KINEMA:
=================
Сложность: 4
-----------------
Игра KINEMA представляет собой простую анимацию с использованием текстовых символов.
На экране поочередно отображаются символы "/\", "\/", "\|", имитирующие движение.
Анимация повторяется заданное количество раз.

Правила игры:
1. Игра не имеет пользовательского ввода и интерактивности.
2. Пользователь устанавливает количество циклов анимации.
3. Анимация состоит из последовательной смены трех символов.
4. Каждый символ выводится на экран, а затем происходит задержка.
5. После завершения всех циклов анимации, игра завершается.

-----------------
Алгоритм:
1. Установить количество циклов анимации.
2. Начать цикл по количеству циклов анимации.
3. Вывести символ "/\" на экран.
4. Пауза на короткое время.
5. Вывести символ "\/" на экран.
6. Пауза на короткое время.
7. Вывести символ "\|" на экран.
8. Пауза на короткое время.
9. Перейти к шагу 2 до исчерпания количества циклов анимации.
10. Завершить программу.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InputCycles["Ввод количества циклов: <code><b>numberOfCycles</b></code>"]
    InputCycles --> InitializeCycleCounter["<code><b>currentCycle = 0</b></code>"]
    InitializeCycleCounter --> LoopStart{"Начало цикла: <code><b>currentCycle < numberOfCycles</b></code>"}
    LoopStart -- Да --> DisplaySymbol1["Вывести символ: <code><b>/\\</b></code>"]
    DisplaySymbol1 --> Pause1["Пауза"]
    Pause1 --> DisplaySymbol2["Вывести символ: <code><b>\\/</b></code>"]
    DisplaySymbol2 --> Pause2["Пауза"]
    Pause2 --> DisplaySymbol3["Вывести символ: <code><b>\\|</b></code>"]
    DisplaySymbol3 --> Pause3["Пауза"]
    Pause3 --> IncreaseCycleCounter["<code><b>currentCycle = currentCycle + 1</b></code>"]
    IncreaseCycleCounter --> LoopStart
    LoopStart -- Нет --> End["Конец"]
```
Legenda:
    Start - Начало программы.
    InputCycles - Запрос у пользователя ввода количества циклов анимации и сохранение его в переменной numberOfCycles.
    InitializeCycleCounter - Инициализация счетчика циклов currentCycle значением 0.
    LoopStart - Начало цикла, который выполняется, пока currentCycle меньше numberOfCycles.
    DisplaySymbol1 - Вывод символа "/\" на экран.
    Pause1 - Пауза на короткое время.
    DisplaySymbol2 - Вывод символа "\/" на экран.
    Pause2 - Пауза на короткое время.
    DisplaySymbol3 - Вывод символа "\|" на экран.
    Pause3 - Пауза на короткое время.
    IncreaseCycleCounter - Увеличение счетчика циклов currentCycle на 1.
    End - Конец программы.

"""
import time

__author__ = 'hypo69 (hypo69@davidka.net)'

# Запрашиваем у пользователя количество циклов анимации
try:
    numberOfCycles = int(input("Введите количество циклов анимации: "))
except ValueError:
    print("Пожалуйста, введите целое число.")
    exit() # Завершаем программу, если ввод некорректный


# Инициализируем счетчик циклов
currentCycle = 0

# Основной цикл анимации
while currentCycle < numberOfCycles:
    # Выводим первый символ и делаем небольшую паузу
    print("/\\", end="\r") # \r - возврат каретки - переводит курсор в начало строки без перехода на новую строку.
    time.sleep(0.2)  # Пауза в 0.2 секунды

    # Выводим второй символ и делаем небольшую паузу
    print("\\/", end="\r")
    time.sleep(0.2) # Пауза в 0.2 секунды

    # Выводим третий символ и делаем небольшую паузу
    print("||", end="\r")
    time.sleep(0.2) # Пауза в 0.2 секунды

    # Увеличиваем счетчик циклов
    currentCycle += 1

print("\nАнимация завершена!") # Сообщение о завершении
"""
Пояснения:
1. **Импорт модуля `time`**:
   - `import time`: Импортирует модуль `time`, который используется для создания задержек.
2. **Запрос количества циклов**:
   - `numberOfCycles = int(input("Введите количество циклов анимации: "))`: Запрашивает у пользователя количество циклов и преобразует ввод в целое число.
   - `try...except ValueError`: Обработка ошибки ввода, в случае если пользователь введёт не целое число.
3. **Инициализация счетчика циклов**:
   - `currentCycle = 0`: Устанавливает счетчик циклов в 0.
4. **Основной цикл анимации**:
   - `while currentCycle < numberOfCycles:`: Цикл выполняется, пока `currentCycle` меньше `numberOfCycles`.
   - **Вывод символов и паузы**:
        - `print("/\\", end="\r")`: Выводит символ "/\" и возвращает каретку в начало строки (без перехода на новую строку).
        -  `time.sleep(0.2)`: Приостанавливает выполнение программы на 0.2 секунды.
        - Повторяет вывод символов "\\/" и "||" с задержками.
    - **Увеличение счетчика циклов**:
        - `currentCycle += 1`: Увеличивает счетчик циклов на 1 для перехода к следующей итерации.
5. **Завершение программы**:
    - `print("\nАнимация завершена!")`: Выводит сообщение о завершении анимации после завершения цикла.
"""
