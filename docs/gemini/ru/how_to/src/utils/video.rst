Как использовать функцию save_video_from_url
========================================================================================

Описание
-------------------------
Функция `save_video_from_url` загружает видео из указанного URL и сохраняет его в локальный файл. Функция использует асинхронные операции для повышения производительности и обработки потенциальных сетевых проблем. Она включает в себя проверки на ошибки при загрузке и сохранении файла, а также обработку пустых файлов.

Шаги выполнения
-------------------------
1. **Инициализация:**
    Функция принимает два аргумента: `url` (адрес видео) и `save_path` (путь к месту сохранения файла).
2. **Подключение к сети:**
    Используется `aiohttp.ClientSession()` для асинхронного запроса данных по указанному URL.
3. **Проверка HTTP статуса:**
    `response.raise_for_status()` проверяет статус ответа сервера на наличие ошибок HTTP. Если статус не 200, то генерируется исключение, которое обрабатывается.
4. **Создание папки для сохранения (если нужно):**
   Метод `save_path.parent.mkdir(parents=True, exist_ok=True)` создает все необходимые родительские папки для сохранения файла, если их не существует.
5. **Чтение данных и сохранение в файл:**
    Используется цикл `while True` для чтения данных с сервера по частям (по 8192 байт) и записи в локальный файл с помощью `aiofiles`.
6. **Обработка ошибок HTTP и сети:**
   Блок `try...except aiohttp.ClientError as e:`  обрабатывает исключения, возникающие при сетевых проблемах во время загрузки.
7. **Проверка на наличие файла и его размер:**
    После завершения загрузки, функция проверяет, был ли файл успешно сохранён и не пуст. Если нет, возвращается None, и ошибки записываются в лог.
8. **Возврат пути к файлу:**
   Если все шаги пройдены успешно, функция возвращает путь к сохраненному файлу.


Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from pathlib import Path
    from src.utils.video import save_video_from_url

    async def main():
        url = "https://www.example.com/video.mp4"  # Замените на реальный URL
        save_path = "downloaded_video.mp4"
        result = await save_video_from_url(url, save_path)
        if result:
            print(f"Видео успешно сохранено в {result}")
        else:
            print("Ошибка при сохранении видео.")

    if __name__ == "__main__":
        asyncio.run(main())
```

```rst
Как использовать функцию get_video_data
========================================================================================

Описание
-------------------------
Функция `get_video_data` получает бинарные данные из файла видео.

Шаги выполнения
-------------------------
1. **Проверка существования файла:**
   Функция проверяет существует ли файл по указанному пути. Если нет, то возвращается None и выводится сообщение об ошибке в лог.
2. **Открытие файла в бинарном режиме:**
   Если файл существует, он открывается в бинарном режиме чтения (`"rb"`).
3. **Чтение данных:**
   Функция читает все данные из файла с помощью `file.read()`.
4. **Обработка ошибок:**
   Блок `try...except` обрабатывает все возможные исключения при работе с файлом (например, ошибки чтения). В случае ошибки функция возвращает None и записывает сообщение об ошибке в лог.
5. **Возврат данных:**
   Если файл прочитан без ошибок, функция возвращает бинарные данные (`bytes`).


Пример использования
-------------------------
.. code-block:: python

    from src.utils.video import get_video_data

    file_name = "downloaded_video.mp4"  # Замените на имя вашего файла
    video_data = get_video_data(file_name)

    if video_data:
        # Обработка полученных данных
        print(video_data[:10])  # Вывод первых 10 байт для проверки
    else:
        print("Ошибка при чтении файла.")