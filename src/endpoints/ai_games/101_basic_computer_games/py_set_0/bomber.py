"""
<BOMBER>:
=================
Сложность: 3
-----------------
Игра "Бомбер" представляет собой простую текстовую игру, где игрок должен угадать, на каком этаже находится бомба, чтобы обезвредить ее. Игрок имеет ограниченное количество попыток. Игра заканчивается либо успехом (обезвреживанием бомбы), либо поражением (исчерпанием попыток).
Правила игры:
1.  Игра загадывает случайный этаж, на котором спрятана бомба, от 1 до 10.
2.  Игроку дается 5 попыток, чтобы угадать этаж с бомбой.
3.  Игрок вводит номер этажа.
4.  Если игрок угадывает этаж с бомбой, игра выводит сообщение об обезвреживании бомбы и завершается.
5.  Если игрок не угадывает, ему сообщается, выше или ниже находится бомба.
6.  Если игрок не угадал за 5 попыток, игра выводит сообщение о взрыве бомбы и завершается.
-----------------
Алгоритм:
1.  Задать случайное число этажа бомбы (targetFloor) от 1 до 10.
2.  Установить количество попыток (attemptsLeft) равным 5.
3.  Начать цикл, пока количество попыток (attemptsLeft) больше 0.
4.  Вывести количество оставшихся попыток.
5.  Запросить у игрока номер этажа (guessFloor).
6.  Если номер этажа (guessFloor) равен этажу бомбы (targetFloor):
    -   Вывести сообщение о том, что бомба обезврежена.
    -   Завершить игру.
7.  Если номер этажа (guessFloor) меньше этажа бомбы (targetFloor):
    -   Вывести сообщение, что бомба находится выше.
8.  Иначе:
    -   Вывести сообщение, что бомба находится ниже.
9.  Уменьшить количество попыток (attemptsLeft) на 1.
10. Если количество попыток (attemptsLeft) равно 0:
    -   Вывести сообщение о том, что бомба взорвалась.
    -   Завершить игру.
-----------------
Блок-схема:
```mermaid
  graph TD
      Start[Начало] --> GenerateRandomFloor[Сгенерировать случайный этаж (targetFloor) от 1 до 10];
      GenerateRandomFloor --> InitializeAttempts[Установить количество попыток (attemptsLeft) = 5];
      InitializeAttempts --> CheckAttempts[Проверить, остались ли попытки (attemptsLeft > 0)?];
      CheckAttempts -- Да --> DisplayAttempts[Вывести оставшееся количество попыток (attemptsLeft)];
      DisplayAttempts --> InputGuess[Запросить у игрока номер этажа (guessFloor)];
      InputGuess --> CompareFloors[Сравнить (guessFloor == targetFloor)?];
      CompareFloors -- Да --> BombDefused[Вывести сообщение "Бомба обезврежена"];
      BombDefused --> End[Конец];
      CompareFloors -- Нет --> CheckGuessLower[Проверить (guessFloor < targetFloor)?];
      CheckGuessLower -- Да --> OutputHigher[Вывести сообщение "Бомба находится выше"];
      OutputHigher --> ReduceAttempts[Уменьшить количество попыток (attemptsLeft) на 1];
       CheckGuessLower -- Нет --> OutputLower[Вывести сообщение "Бомба находится ниже"];
       OutputLower --> ReduceAttempts
      ReduceAttempts --> CheckAttempts;
      CheckAttempts -- Нет --> BombExploded[Вывести сообщение "Бомба взорвалась"];
      BombExploded --> End;
```
"""
import random

def play_bomber():
    """
    Запускает игру "Бомбер".
    """
    # 1. Задаем случайное число этажа, где спрятана бомба
    target_floor = random.randint(1, 10)
    
    # 2. Задаем количество попыток
    attempts_left = 5
    
    # 3. Основной цикл игры
    while attempts_left > 0:
        # 4. Выводим количество оставшихся попыток
        print(f"У вас осталось {attempts_left} попыток.")
        
        # 5. Запрашиваем у игрока номер этажа
        try:
          guess_floor = int(input("Введите номер этажа (1-10): "))
        except ValueError:
          print("Пожалуйста, введите целое число.")
          continue
        
        # 6. Проверяем, угадал ли игрок этаж
        if guess_floor == target_floor:
            print("Поздравляем! Вы обезвредили бомбу!")
            return  # Завершаем игру
        
        # 7. Сообщаем игроку, выше или ниже находится бомба
        if guess_floor < target_floor:
            print("Бомба находится выше.")
        else:
            print("Бомба находится ниже.")
        
        # 8. Уменьшаем количество попыток
        attempts_left -= 1
    
    # 9. Если попытки закончились
    print("Упс! Бомба взорвалась!")

# Запуск игры
if __name__ == "__main__":
    play_bomber()
"""
Пояснения:
1. `import random`: Импортирует модуль random для генерации случайных чисел.
2. `def play_bomber():`: Определяет функцию play_bomber, которая содержит всю логику игры.
3. `target_floor = random.randint(1, 10)`: Генерирует случайное целое число в диапазоне от 1 до 10 включительно, которое представляет собой этаж, где спрятана бомба.
4. `attempts_left = 5`: Инициализирует переменную `attempts_left`, которая отслеживает количество оставшихся попыток.
5. `while attempts_left > 0:`: Запускает цикл while, который продолжается до тех пор, пока у игрока остаются попытки.
6. `print(f"У вас осталось {attempts_left} попыток.")`: Выводит количество оставшихся попыток на экран.
7.  `try-except` Защита от ввода некорректных данных
8. `guess_floor = int(input("Введите номер этажа (1-10): "))`: Запрашивает у игрока номер этажа и преобразует ввод в целое число.
9. `if guess_floor == target_floor:`: Проверяет, угадал ли игрок этаж. Если да, выводится сообщение о победе и игра завершается.
10. `if guess_floor < target_floor:`: Если игрок не угадал, проверяется, находится ли загаданный этаж выше введенного.
11. `else:`: Если загаданный этаж не выше и не равен введенному, значит он ниже, и выводится соответствующее сообщение.
12. `attempts_left -= 1`: Уменьшает количество оставшихся попыток.
13. `print("Упс! Бомба взорвалась!")`: Выводится сообщение о проигрыше, если у игрока закончились попытки.
14. `if __name__ == "__main__":`: Проверяет, запущена ли программа напрямую, и если да, вызывает функцию `play_bomber()`.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```