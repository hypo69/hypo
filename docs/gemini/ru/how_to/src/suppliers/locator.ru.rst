Как использовать локаторы полей на HTML-странице
=========================================================================================

Описание
-------------------------
Этот блок кода содержит примеры локаторов для поиска элементов на веб-странице с использованием WebDriver.  Локаторы определяют, как найти конкретный элемент на странице, используя различные стратегии поиска (XPATH, CSS, ID и т.д.) и атрибуты (innerText, src, id, и т.д.).  Каждый локатор имеет описание, что позволяет понять его назначение и ожидаемое поведение.

Шаги выполнения
-------------------------
1. **Просмотр локатора:**  Проанализируйте словарь с локатором. Обратите внимание на следующие ключи:
    - `attribute`: Атрибут, который необходимо получить от найденного веб-элемента (например, `innerText`, `src`, `id`). Если значение `null` или `false`, WebDriver вернет весь элемент.
    - `by`: Метод поиска элемента (например, `XPATH`, `ID`).
    - `selector`: Селектор, который используется для поиска элемента (например, `//button[@id = 'closeXButton']`).
    - `if_list`:  Как обращаться со списком найденных элементов. `first` - берет первый элемент, `all` - все элементы, `last` - последний элемент.
    - `use_mouse`:  Использовать ли мышь для взаимодействия с элементом (`true` или `false`).
    - `event`: Действие, которое нужно выполнить с элементом перед получением атрибута (например, `click()`, `screenshot()`).
    - `mandatory`:  Обязательность получения элемента. `true` -  вызывает ошибку, если элемент не найден. `false` -  элемент пропускается, если не найден.
    - `locator_description`:  Описание назначения локатора.
2. **Идентификация элемента:**  WebDriver использует указанный `by` и `selector`, чтобы найти соответствующий веб-элемент на странице.
3. **Обработка списка (если требуется):** Если `if_list` имеет значение, отличное от `null` или `false`, WebDriver выбирает элемент из найденного списка, руководствуясь указанным значением `if_list`. Например, если `if_list` равно `first`, выбирается первый элемент.
4. **Выполнение события (если указано):** Если в локаторе определен `event` (например, `click()`, `screenshot()`), WebDriver выполняет это действие с найденным элементом *перед* извлечением значения атрибута.
5. **Извлечение атрибута:** WebDriver получает значение атрибута, указанного в `attribute`, у выбранного веб-элемента.
6. **Обработка результата:** Полученное значение атрибута возвращается программой, которая использует данный локатор.


Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from selenium.webdriver.common.by import By

    # ... (код для инициализации WebDriver) ...

    locator_data = {
        "close_banner": {
            "attribute": null,
            "by": "XPATH",
            "selector": "//button[@id = 'closeXButton']",
            "if_list": "first",
            "use_mouse": false,
            "mandatory": false,
            "event": "click()",
            "locator_description": "Закрываю pop-up окно"
        }
    }

    def find_element_by_locator(driver, locator):
        try:
            element = driver.find_element(By.XPATH, locator["selector"])
            if locator.get("event"):
                # Обработка события
                if locator["event"] == "click()":
                    element.click()

            return element
        except Exception as e:
            if locator.get("mandatory"):
                raise Exception(f"Не найден обязательный элемент: {locator['locator_description']}. Ошибка: {e}")
            else:
                print(f"Не найден необязательный элемент: {locator['locator_description']}.")
                return None


    try:
        close_button = find_element_by_locator(driver, locator_data["close_banner"])
        if close_button:
            print("Кнопка закрытия найдена и обработана.")
    except Exception as e:
        print(f"Ошибка при поиске элемента: {e}")

    # ... (остальной код программы) ...