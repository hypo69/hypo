Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит набор функций, которые полезны для тестирования в проекте TinyTroupe.  Они предоставляют инструменты для проверки действий, стимулов, наличия определенных типов действий/стимулов, валидации предложений с помощью LLM, а также работы с файлами и настройкой тестовых окружений.

Шаги выполнения
-------------------------
1. **Импорт необходимых библиотек**: Код импортирует `os`, `sys`, `time`, `pytest`, `importlib` и модули из проекта TinyTroupe, включая `openai_utils`, `agent`, `environment`.  Этот шаг необходим для доступа к функциям и классам для работы с LLM, агентами, окружениями.
2. **Загрузка патчей**: Код добавляет пути к каталогам проекта `tinytroupe`, `.` и `..` в переменную `sys.path`, что позволяет Python найти необходимые модули.
3. **Кэширование API**: Функция `openai_utils.force_api_cache(True, "tests_cache.pickle")` включает кэширование API запросов, что ускоряет тестирование.
4. **Функции проверки наличия действий/стимулов**:
    - `contains_action_type(actions, action_type)`: проверяет наличие действия заданного типа в списке действий (`actions`).
    - `contains_action_content(actions, action_content)`: проверяет наличие действия с заданным контентом (независимо от регистра) в списке действий.
    - `contains_stimulus_type(stimuli, stimulus_type)`: проверяет наличие стимула заданного типа в списке стимулов.
    - `contains_stimulus_content(stimuli, stimulus_content)`: проверяет наличие стимула с заданным контентом (независимо от регистра) в списке стимулов.
5. **Функция проверки завершения действия**:
    - `terminates_with_action_type(actions, action_type)`: проверяет, заканчивается ли список действий действием заданного типа.
6. **Проверка предложений с помощью LLM**:
    - `proposition_holds(proposition)`: проверяет истинность данного предложения, вызывая LLM.  Предложение проверяется на предмет его истинности (true/false). Результат возвращается как `bool` (True/False).
7. **Поддержка работы с текстом**:
    - `only_alphanumeric(string)`: возвращает строку, содержащую только буквенно-цифровые символы.
    - `create_test_system_user_message(user_prompt, system_prompt)`: создает список сообщений для системы и пользователя.
8. **Функция проверки конфигураций агентов**:
    - `agents_configs_are_equal(agent1, agent2, ignore_name=False)`: сравнивает конфигурации двух агентов, игнорируя имя (если необходимо).
9. **Функции для работы с файлами**:
    - `remove_file_if_exists(file_path)`: удаляет файл, если он существует по заданному пути.
    - `get_relative_to_test_path(path_suffix)`: генерирует относительный путь к файлу теста.
10. **Фикстуры**:
    - `focus_group_world()`: создаёт тестовое окружение (`TinyWorld`) с группой агентов (людьми).
    - `setup()`: очищает агентов и окружения перед запуском теста.


Пример использования
-------------------------
.. code-block:: python

    import pytest
    from testing_utils import contains_action_type, proposition_holds
    from tinytroupe.agent import TinyPerson
    # ... (другие импорты)

    def test_action_type():
        # Предполагаемый список действий
        actions = [...] 

        # Проверка наличия действия типа "greeting"
        assert contains_action_type(actions, "greeting") is True

    def test_proposition():
        # Предложение для проверки
        proposition = "Это предложение истинно."

        # Проверка предложения с помощью LLM
        result = proposition_holds(proposition)
        assert result is True  # Или False, в зависимости от ожидания