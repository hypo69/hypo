Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот блок кода содержит определения классов и функций, необходимые для взаимодействия с API OpenAI.  Он позволяет отправлять запросы к API OpenAI, обрабатывать ответы, кэшировать запросы для повышения производительности и управлять конфигурацией. Классы `OpenAIClient` и `AzureClient` реализуют взаимодействие с соответствующими API. Функции для работы с кэшем, выбором модели, параметрами и настройкой клиента также включены.  Код предоставляет гибкие и контролируемые способы отправки запросов к API OpenAI.


Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**:  Код импортирует нужные модули: `os`, `openai`, `time`, `json`, `pickle`, `logging`, `configparser`, `tiktoken`, и `utils`.  Это необходимо для работы с API, обработкой времени, сохранения данных и логирования.

2. **Чтение конфигурации**: Используя функцию `utils.read_config_file()`, считывается конфигурация из файла `config.ini`. Эта конфигурация определяет параметры взаимодействия с API.

3. **Определение параметров по умолчанию**: Функция `default` инициализирует значения параметров по умолчанию для взаимодействия с OpenAI, такие как модель, максимальное количество токенов, температура, и другие настройки. Эти параметры могут быть переопределены при вызове функции.

4. **Регистрация клиентов**: Классы `OpenAIClient` и `AzureClient` регистрируются с помощью функции `register_client`.  Эти классы реализуют взаимодействие с OpenAI API и Azure OpenAI Service соответственно.  Это позволяет пользователю выбрать тип API.

5. **Функция `client()`**:  Эта функция возвращает зарегистрированный клиент (`OpenAIClient` или `AzureClient`) в соответствии с выбранным типом API, указанным в файле конфигурации.

6. **Класс `LLMCall`**:  Этот класс предоставляет интерфейс для взаимодействия с LLM (Large Language Model). Он позволяет передавать систему и пользовательские шаблоны сообщений, а также другие параметры модели, чтобы создавать запросы к API.

7. **Метод `send_message` класса `OpenAIClient`**:  Метод `send_message` отправляет сообщение на API OpenAI с заданными параметрами (модель, температура, количество токенов и т.д.). Метод управляет кэшированием запросов, экспоненциальным возвратом, а также обработкой ошибок (например, `InvalidRequestError`, `RateLimitError`). Он возвращает ответ от API или `None` в случае ошибки.

8. **Метод `get_embedding`**:  Получает встраивание (embedding) заданного текста, используя указанную модель.


Пример использования
-------------------------
.. code-block:: python

    import os
    from tinytroupe import openai_utils

    # Убедитесь, что у вас настроен OPENAI_API_KEY
    os.environ["OPENAI_API_KEY"] = "YOUR_OPENAI_API_KEY"

    # Создаем экземпляр клиента
    client = openai_utils.client()

    # Пример отправки сообщения
    messages = [
        {"role": "user", "content": "Привет, как дела?"}
    ]
    response = client.send_message(current_messages=messages, max_tokens=50)

    if response:
        print(response)
    else:
        print("Ошибка при отправке запроса")