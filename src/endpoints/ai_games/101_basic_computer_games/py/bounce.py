"""
BOUNCE:
=================
Сложность: 3
-----------------
Игра "Отскок" - это простая аркадная игра, в которой точка (представленная как символ "*") перемещается по экрану, отскакивая от его границ. Игрок управляет начальной скоростью и направлением точки, вводя значения скорости по горизонтали и вертикали. Цель игры - наблюдать за движением точки и, при желании, попытаться предсказать её траекторию.

Правила игры:
1. Игрок вводит начальную горизонтальную и вертикальную скорости точки.
2. Точка начинает двигаться по экрану, отскакивая от его границ.
3. Экран имеет фиксированный размер (20x20 символов).
4. Игра продолжается до тех пор, пока игрок не решит ее остановить (при нажатии Ctrl+C).
-----------------
Алгоритм:
1.  Установить размер экрана 20х20.
2.  Запросить у игрока ввод начальной горизонтальной и вертикальной скоростей.
3.  Установить начальное положение точки в центре экрана (10, 10).
4.  Начать бесконечный цикл:
    4.1 Рассчитать новое положение точки, добавив к текущим координатам значения горизонтальной и вертикальной скоростей.
    4.2 Если точка достигла границы экрана по горизонтали, то изменить знак горизонтальной скорости на противоположный.
    4.3 Если точка достигла границы экрана по вертикали, то изменить знак вертикальной скорости на противоположный.
    4.4 Очистить экран.
    4.5 Отобразить точку на новом положении.
    4.6 Задержка в 0.05 секунды.
5. Конец игры (принудительное завершение цикла).
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeScreen["<p align='left'>Инициализация экрана:
    <code><b>
    screenSize = 20
    </b></code></p>"]
    InitializeScreen --> InputSpeed["<p align='left'>Ввод скорости:<br>
    <code><b>
    horizontalSpeed = input('Введите горизонтальную скорость: ')
    verticalSpeed = input('Введите вертикальную скорость: ')
    </b></code></p>"]
    InputSpeed --> InitializePosition["<p align='left'>Инициализация позиции:
    <code><b>
    x = 10
    y = 10
    </b></code></p>"]
    InitializePosition --> LoopStart{"Начало бесконечного цикла"}
    LoopStart --> CalculateNewPosition["<p align='left'>Вычисление новой позиции:
    <code><b>
    x = x + horizontalSpeed
    y = y + verticalSpeed
    </b></code></p>"]
    CalculateNewPosition --> CheckHorizontalBoundary{"Проверка: <code><b>x &lt; 1 or x &gt; screenSize</b></code>?"}
    CheckHorizontalBoundary -- Да --> ReverseHorizontalSpeed["<code><b>horizontalSpeed = -horizontalSpeed</b></code>"]
    ReverseHorizontalSpeed --> CheckVerticalBoundary{"Проверка: <code><b>y &lt; 1 or y &gt; screenSize</b></code>?"}
    CheckHorizontalBoundary -- Нет --> CheckVerticalBoundary
    CheckVerticalBoundary -- Да --> ReverseVerticalSpeed["<code><b>verticalSpeed = -verticalSpeed</b></code>"]
    ReverseVerticalSpeed --> ClearScreen["Очистка экрана"]
    CheckVerticalBoundary -- Нет --> ClearScreen
    ClearScreen --> DrawPoint["<p align='left'>Отображение точки:
    <code><b>
    screen[y][x] = '*'
    </b></code></p>"]
    DrawPoint --> OutputScreen["Вывод экрана"]
    OutputScreen --> Delay["Задержка 0.05 секунды"]
     Delay --> LoopStart

    LoopStart -- Нет --> End["Конец (принудительное завершение)"]

```
**Legenda**:
    Start - Начало программы.
    InitializeScreen - Инициализация размера экрана. Устанавливается размер экрана 20x20.
    InputSpeed - Запрос у пользователя начальной горизонтальной и вертикальной скоростей движения точки.
    InitializePosition - Инициализация начальной позиции точки в центре экрана (координаты x=10, y=10).
    LoopStart - Начало бесконечного цикла, в котором будет происходить движение точки и её отскок от границ экрана.
    CalculateNewPosition - Вычисление новых координат точки на основе текущих координат и скоростей.
    CheckHorizontalBoundary - Проверка, не вышла ли точка за горизонтальные границы экрана.
    ReverseHorizontalSpeed - Изменение знака горизонтальной скорости на противоположный при выходе за границы экрана, что приводит к отскоку.
    CheckVerticalBoundary - Проверка, не вышла ли точка за вертикальные границы экрана.
    ReverseVerticalSpeed - Изменение знака вертикальной скорости на противоположный при выходе за границы экрана, что приводит к отскоку.
    ClearScreen - Очистка экрана перед отрисовкой новой позиции точки.
    DrawPoint - Отрисовка точки на новой позиции на экране.
    OutputScreen - Вывод текущего состояния экрана.
    Delay - Задержка в 0.05 секунды для управления скоростью движения точки.
    End - Конец программы (принудительное завершение при нажатии Ctrl+C).

"""
import time
import os


__author__ = 'hypo69 (hypo69@davidka.net)'

screen_size = 20  # Размер экрана 20x20
try:
    # Запрашиваем у пользователя начальные значения скорости
    horizontal_speed = int(input("Введите горизонтальную скорость (целое число): "))
    vertical_speed = int(input("Введите вертикальную скорость (целое число): "))
except ValueError:
     print("Ошибка: Пожалуйста, введите целое число для скорости.")
     exit()


# Начальная позиция точки в центре экрана
x = screen_size // 2
y = screen_size // 2

# Бесконечный цикл для анимации
try:
    while True:
        # Обновление позиции точки
        x += horizontal_speed
        y += vertical_speed
        
        # Проверка столкновения с границами экрана
        if x < 0 or x >= screen_size:
            horizontal_speed = -horizontal_speed  # Изменение направления по горизонтали
        if y < 0 or y >= screen_size:
            vertical_speed = -vertical_speed    # Изменение направления по вертикали

        # Создание пустого экрана
        screen = [[' ' for _ in range(screen_size)] for _ in range(screen_size)]

        # Отображение точки на экране
        screen[y][x] = '*'

        # Вывод экрана
        os.system('cls' if os.name == 'nt' else 'clear') # Очистка экрана
        for row in screen:
            print(''.join(row))

        time.sleep(0.05)  # Задержка в 0.05 секунды
except KeyboardInterrupt:
    print("\nИгра завершена.")


"""
Пояснения:

1.  **Импорт модулей**:
    -   `import time`: Импортирует модуль `time` для создания задержки в цикле анимации.
    -   `import os`: Импортирует модуль `os` для очистки консоли.
2.  **Размер экрана**:
    -   `screen_size = 20`: Задает размер экрана как 20x20 символов.
3.  **Запрос начальных скоростей**:
    -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -  `horizontal_speed = int(input(...))`: Запрашивает у пользователя начальную горизонтальную скорость и преобразует ее в целое число.
    -  `vertical_speed = int(input(...))`: Запрашивает у пользователя начальную вертикальную скорость и преобразует ее в целое число.
4.  **Начальная позиция точки**:
    -   `x = screen_size // 2`: Устанавливает начальную координату x точки в центр экрана.
    -  `y = screen_size // 2`: Устанавливает начальную координату y точки в центр экрана.
5.  **Основной цикл анимации**:
    -   `try...except KeyboardInterrupt`: Блок try-except обрабатывает принудительное завершение программы (Ctrl+C).
    -   `while True:`: Бесконечный цикл, пока программа не будет прервана.
    -   **Обновление позиции точки**:
        -   `x += horizontal_speed`: Изменяет координату x точки на значение горизонтальной скорости.
        -   `y += vertical_speed`: Изменяет координату y точки на значение вертикальной скорости.
    -   **Проверка границ**:
        -   `if x < 0 or x >= screen_size:`: Проверяет, не вышла ли точка за горизонтальные границы экрана.
        -   `horizontal_speed = -horizontal_speed`: Изменяет знак горизонтальной скорости на противоположный (отражение от границы).
        -   `if y < 0 or y >= screen_size:`: Проверяет, не вышла ли точка за вертикальные границы экрана.
        -   `vertical_speed = -vertical_speed`: Изменяет знак вертикальной скорости на противоположный (отражение от границы).
    -   **Создание экрана**:
        -   `screen = [[' ' for _ in range(screen_size)] for _ in range(screen_size)]`: Создает пустой экран, заполненный пробелами.
    -  **Отображение точки**:
        -   `screen[y][x] = '*'`: Устанавливает символ '*' (точку) на текущей позиции.
    -   **Вывод экрана**:
        - `os.system('cls' if os.name == 'nt' else 'clear')`: Очищает консоль перед выводом нового кадра (работает как в Windows, так и в Linux/macOS).
        -   `for row in screen:`: Итерируется по строкам экрана.
        -   `print(''.join(row))`: Выводит каждую строку.
    -  **Задержка**:
        - `time.sleep(0.05)`: Делает задержку в 0.05 секунды, чтобы анимация не была слишком быстрой.
6. **Обработка прерывания**:
     -   `except KeyboardInterrupt:`:  Перехватывает нажатие Ctrl+C для завершения программы.
     -   `print("\nИгра завершена.")`: Выводит сообщение о завершении игры.
"""
```