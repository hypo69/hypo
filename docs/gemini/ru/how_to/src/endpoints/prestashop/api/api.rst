Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует класс `PrestaShop`, предназначенный для взаимодействия с API веб-сервиса PrestaShop.  Класс предоставляет методы для выполнения CRUD-операций (создание, чтение, обновление, удаление), поиска ресурсов и загрузки изображений. Он обрабатывает ошибки в ответах API и предоставляет инструменты для работы с данными в формате JSON и XML.  Основная функциональность сосредоточена на методах `create`, `read`, `write`, `unlink`, `search`, `create_binary` и `upload_image` для взаимодействия с различными ресурсами PrestaShop.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**:  Код импортирует необходимые библиотеки, такие как `requests`, `xml.etree.ElementTree`, `pathlib`, `enum`, и другие вспомогательные модули, необходимые для работы с API.

2. **Определение класса `PrestaShop`**:  Класс `PrestaShop` содержит атрибуты для API-ключа, домена, формата данных, языка по умолчанию и режима отладки. Конструктор класса инициализирует сеанс `requests` и устанавливает параметры подключения.

3. **Методы взаимодействия с API**:  Класс `PrestaShop` предоставляет методы (`ping`, `create`, `read`, `write`, `unlink`, `search`, `create_binary`, `upload_image`) для разных действий с ресурсами PrestaShop.  Эти методы отправляют запросы к API, обрабатывают ответ и возвращают данные в виде словаря Python (JSON) или объекта ElementTree (XML).

4. **Обработка ошибок**: Метод `_check_response` проверяет код ответа HTTP.  При ошибках, метод `_parse_response_error` анализирует ответ и выводит подробное сообщение об ошибке (сообщения в формате JSON или XML).

5. **Подготовке запросов**: Метод `_prepare` подготавливает URL для запроса, включающая параметры.

6. **Исполнение запросов**: Метод `_exec`  отправляет HTTP-запрос к API используя `requests.request`.  Если режим отладки включен, то ошибки выводятся в отдельный файл `stderr.log`.

7. **Анализ ответа**: Метод `_parse` обрабатывает ответ API, определяя, является ли он JSON или XML, и преобразовывает его в соответствующий формат данных Python.

8. **Загрузка файлов**: Метод `create_binary` осуществляет загрузку бинарных файлов (например, изображений) в PrestaShop API.  Метод `save_png_from_url` загружает изображение из URL.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.endpoints.prestashop.api.api import PrestaShop

    # Замените на свои данные
    api = PrestaShop(
        API_DOMAIN="https://your-prestashop-domain.com/api/",
        API_KEY="YOUR_API_KEY",
        data_format='JSON',
        default_lang=1,
        debug=True
    )

    # Пример создания записи
    data = {
        'tax': {
            'rate': 3.00,
            'active': '1',
            'name': {
                'language': {
                    'attrs': {'id': '1'},
                    'value': '3% tax'
                }
            }
        }
    }

    new_tax = api.create('taxes', data)
    print(new_tax)

    # Пример получения записи
    tax_id = new_tax['id']
    tax_details = api.read('taxes', tax_id)
    print(tax_details)

    # Пример удаления записи
    api.unlink('taxes', tax_id)