Как использовать класс TinyWorld
========================================================================================

Описание
-------------------------
Класс `TinyWorld` служит основой для определения окружения, в котором агенты взаимодействуют друг с другом и внешними сущностями (например, поисковыми системами). Он предоставляет методы для управления агентами, отслеживания времени симуляции, обработки действий агентов и передачи сообщений между ними.  Класс поддерживает управление временем с использованием `timedelta`, что позволяет проводить симуляцию с заданной скоростью. Также реализованы методы для добавления, удаления и получения агентов, а так же для передачи различных типов сообщений (например, сообщений, мыслей и целей).

Шаги выполнения
-------------------------
1. **Инициализация окружения:** Создайте экземпляр класса `TinyWorld`, указав имя окружения, список агентов, начальную дату и время, и флаг `broadcast_if_no_target`.
2. **Добавление агентов:** Используйте метод `add_agents()` или `add_agent()` для добавления агентов в окружение. Убедитесь, что имена агентов уникальны.
3. **Выполнение шагов симуляции:** Используйте метод `run()`, передавая количество шагов (`steps`) и (необязательно) интервал времени между шагами (`timedelta_per_step`). Метод `run()`  вызывает метод `_step()` для каждого шага.
4. **Обработка действий агентов:** Метод `_step()` обрабатывает действия всех агентов, вызванные методом `act()`.  Он использует метод `_handle_actions` для обработки типов действий агентов, таких как "REACH_OUT" и "TALK".
5. **Обработка действий:** Метод `_handle_actions()` определяет тип действия, цель и содержание и вызывает соответствующий обработчик (например, `_handle_reach_out()` или `_handle_talk()`).
6. **Передача сообщений:** Методы `broadcast()`, `broadcast_thought()`, `broadcast_internal_goal()`, `broadcast_context_change()` передают сообщения всем агентам в окружении.
7. **Получение состояния:** Метод `encode_complete_state()` сериализует текущее состояние окружения в формат данных, удобный для хранения или передачи.
8. **Восстановление состояния:** Метод `decode_complete_state()` восстанавливает состояние окружения из данных, сохраненных ранее.

Пример использования
-------------------------
.. code-block:: python

    from tinytroupe.environment import TinyWorld
    from tinytroupe.agent import TinyPerson
    from datetime import datetime, timedelta
    
    # Создаем агентов
    agent1 = TinyPerson("Agent 1")
    agent2 = TinyPerson("Agent 2")

    # Создаем окружение
    world = TinyWorld(name="My World", agents=[agent1, agent2], initial_datetime=datetime(2024, 1, 1))
    
    # Запускаем симуляцию на 2 шага
    world.run(steps=2, timedelta_per_step=timedelta(hours=1))