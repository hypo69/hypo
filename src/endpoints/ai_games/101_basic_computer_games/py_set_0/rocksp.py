"""
<ROCKSP>:
=================
Сложность: 2
-----------------
Игра "Камень, ножницы, бумага" против компьютера. Игрок делает выбор (камень, ножницы или бумага), компьютер делает случайный выбор. Победитель определяется по стандартным правилам: камень бьет ножницы, ножницы бьют бумагу, бумага бьет камень.
Правила игры: 
1. Игрок выбирает один из вариантов: камень (1), ножницы (2) или бумага (3).
2. Компьютер случайным образом выбирает один из тех же вариантов.
3. Сравниваются выборы игрока и компьютера, определяется победитель или ничья.
4. Игра продолжается до тех пор, пока игрок не введёт 0.
-----------------
Алгоритм:
1. Инициализация:
   - Запускается бесконечный цикл игры.
2. Получение выбора игрока:
   - Запрашивается ввод от игрока: 1 - камень, 2 - ножницы, 3 - бумага, 0 - выход.
   - Если ввод игрока равен 0, цикл прерывается (конец игры).
3. Получение случайного выбора компьютера:
   - Компьютер случайно выбирает число от 1 до 3.
4. Вывод на экран выбора компьютера.
5. Определение победителя:
   - Сравниваются выбор игрока и компьютера по правилам игры:
      - Если оба выбора совпадают - ничья.
      - Если игрок выбрал 1 (камень) и компьютер 2 (ножницы), то игрок победил.
      - Если игрок выбрал 2 (ножницы) и компьютер 3 (бумага), то игрок победил.
      - Если игрок выбрал 3 (бумага) и компьютер 1 (камень), то игрок победил.
      - Во всех остальных случаях побеждает компьютер.
6. Вывод результата:
   - Выводится сообщение о результате раунда: победа игрока, поражение, ничья.
7. Повторение цикла:
   - Переход к началу цикла для следующего раунда, пока игрок не введет 0.
-----------------
Блок-схема: 
```mermaid
  graph TD
      Start(Начало) --> GameLoop{Начало цикла игры};
    GameLoop --> InputPlayerChoice{Ввод выбора игрока};
    InputPlayerChoice -- 0 --> End(Конец);
    InputPlayerChoice -- other --> GenerateComputerChoice{Выбор компьютера};
    GenerateComputerChoice --> OutputComputerChoice{Вывод выбора компьютера};
    OutputComputerChoice --> CompareChoices{Сравнение выбора игрока и компьютера};
    CompareChoices -- Ничья --> OutputDraw{Вывод: ничья};
    CompareChoices -- Игрок победил --> OutputPlayerWin{Вывод: игрок победил};
    CompareChoices -- Компьютер победил --> OutputComputerWin{Вывод: компьютер победил};
    OutputDraw --> GameLoop;
    OutputPlayerWin --> GameLoop;
    OutputComputerWin --> GameLoop;
```
"""
import random

def play_rock_paper_scissors():
    """
    Игра "Камень, ножницы, бумага" против компьютера.
    """
    while True: # Бесконечный цикл для повторения игры до ввода 0
        try:
            player_choice = int(input("Ваш выбор (1 - камень, 2 - ножницы, 3 - бумага, 0 - выход): ")) # Запрашиваем выбор игрока
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите число.") # Обработка ошибки нечислового ввода
            continue # Начать цикл заново
        if player_choice == 0: # Если игрок выбрал 0, заканчиваем игру
            print("Игра окончена.")
            break 
        if player_choice < 0 or player_choice > 3: # Проверяем, что ввод игрока находится в диапазоне 0-3
             print("Некорректный ввод. Введите число от 0 до 3.")
             continue 
        computer_choice = random.randint(1, 3) # Компьютер делает случайный выбор из 1, 2, 3
        print("Компьютер выбрал:", computer_choice) # Выводим на экран выбор компьютера
        
        # Определяем победителя
        if player_choice == computer_choice: # Если оба выбора одинаковые - ничья
            print("Ничья!")
        elif (player_choice == 1 and computer_choice == 2) or \
             (player_choice == 2 and computer_choice == 3) or \
             (player_choice == 3 and computer_choice == 1): # Условия победы игрока
            print("Вы победили!")
        else: # Во всех других случаях побеждает компьютер
            print("Вы проиграли!")

if __name__ == "__main__":
    play_rock_paper_scissors() # Запускаем игру
"""
Пояснения:
1.  `import random`: Импортируем модуль random для генерации случайного выбора компьютера.
2.  `def play_rock_paper_scissors():`: Определяем функцию для игры.
3.  `while True:`: Начинаем бесконечный цикл, чтобы игрок мог играть несколько раз подряд, пока не введет 0.
4.  `try-except`: Блок для обработки ошибок, если пользователь введет не число.
5.  `player_choice = int(input(...))`: Запрашиваем ввод от игрока и преобразуем его в целое число.
6.  `if player_choice == 0:`: Проверяем, если игрок хочет выйти из игры.
7.  `computer_choice = random.randint(1, 3)`: Генерируем случайное число от 1 до 3 для выбора компьютера.
8.  `print("Компьютер выбрал:", computer_choice)`: Выводим на экран выбор компьютера.
9.  Условные выражения `if/elif/else`: Определяем победителя, сравнивая выбор игрока и компьютера.
10.  `print(...)`: Выводим результат игры на экран.
11. `if __name__ == "__main__":`: Гарантируем, что игра будет запущена только при прямом запуске файла, а не при импорте его как модуля.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```