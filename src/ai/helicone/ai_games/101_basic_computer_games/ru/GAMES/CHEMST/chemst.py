"""
CHEMST:
=================
Сложность: 7
-----------------
Игра "CHEMST" (Химик) - это игра, в которой игрок пытается угадать химические элементы, основываясь на подсказках. Компьютер выбирает случайный элемент из заданного списка, а игрок делает попытки угадать его. Игра не является реалистичным симулятором химии, скорее это игра на угадывание слова с ограниченным количеством попыток. После каждой попытки игроку сообщается, есть ли в его догадке буквы из загаданного элемента и на каких позициях.

Правила игры:
1.  Компьютер выбирает случайный химический элемент из списка.
2.  Игрок пытается угадать элемент, вводя название элемента.
3.  После каждой попытки компьютер показывает, сколько букв из предположения игрока совпадают с буквами загаданного элемента, и на каких позициях.
4.  Игрок имеет максимум 8 попыток.
5.  Игра заканчивается, когда игрок угадывает элемент или исчерпывает все попытки.
-----------------
Алгоритм:
1.  Задать список химических элементов.
2.  Выбрать случайный элемент из списка.
3.  Установить количество попыток равным 0.
4.  Начать цикл "пока число попыток меньше 8":
    4.1 Запросить у игрока ввод названия элемента.
    4.2 Увеличить число попыток на 1.
    4.3 Если введенное название элемента равно загаданному элементу, вывести сообщение о победе и выйти из цикла.
    4.4 Иначе, создать строку подсказки.
    4.5 Сравнить каждую букву из предположения игрока с соответствующей буквой из загаданного элемента.
        - Если буквы совпадают и находятся на одинаковых позициях, поставить букву на эту же позицию в строке подсказки.
        - Если буквы совпадают но не находятся на одинаковых позициях, поставить символ `+` на эту же позицию в строке подсказки.
        - Если буквы не совпадают, поставить символ `-` на эту же позицию в строке подсказки.
    4.6 Вывести строку подсказки.
5. Если цикл завершился, но элемент не угадан, вывести сообщение о проигрыше и правильный ответ.
6. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    elements = ['HYDROGEN', 'HELIUM', ... ]
    targetElement = random(elements)
    numberOfGuesses = 0
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: <code><b>numberOfGuesses < 8</b></code>"}
    LoopStart -- Да --> InputGuess["Ввод элемента пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> CheckGuess{"Проверка: <code><b>userGuess == targetElement?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CreateHint["Создать строку подсказки"]
    CreateHint --> CompareLetters["Сравнить буквы: 
     <code><b>
       for i in range(len(targetElement)):
         if userGuess[i] == targetElement[i]: hint += userGuess[i]
         elif userGuess[i] in targetElement: hint += '+'
         else: hint += '-'
       </b></code>
     "]
    CompareLetters --> OutputHint["Вывести строку подсказки <code><b>hint</b></code>"]
    OutputHint --> LoopStart
    LoopStart -- Нет --> OutputLose["Вывод сообщения: <b>YOU LOSE! The element was <code>{targetElement}</code></b>"]
    OutputLose --> End
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: список элементов elements, выбор случайного элемента targetElement, и установка количества попыток numberOfGuesses в 0.
    LoopStart - Начало цикла, который продолжается, пока количество попыток numberOfGuesses меньше 8.
    InputGuess - Запрос у пользователя ввода названия элемента и сохранение его в переменной userGuess.
    IncreaseGuesses - Увеличение счетчика количества попыток numberOfGuesses на 1.
    CheckGuess - Проверка, равно ли введенное название элемента userGuess загаданному элементу targetElement.
    OutputWin - Вывод сообщения о победе, если названия элементов равны, с указанием количества попыток.
    End - Конец программы.
    CreateHint - Создание строки подсказки для пользователя.
    CompareLetters - Сравнение букв в введенном элементе с буквами в загаданном элементе и формирование строки подсказки.
    OutputHint - Вывод строки подсказки.
    OutputLose - Вывод сообщения о проигрыше, если количество попыток исчерпано, и показ правильного ответа.
"""
import random

# Список химических элементов
elements = ['HYDROGEN', 'HELIUM', 'LITHIUM', 'BERYLLIUM', 'BORON', 'CARBON', 'NITROGEN', 'OXYGEN', 'FLUORINE', 'NEON', 'SODIUM', 'MAGNESIUM', 'ALUMINUM', 'SILICON', 'PHOSPHORUS', 'SULFUR', 'CHLORINE', 'ARGON', 'POTASSIUM', 'CALCIUM']
# Выбираем случайный элемент из списка
targetElement = random.choice(elements)
# Инициализируем количество попыток
numberOfGuesses = 0

# Основной игровой цикл
while numberOfGuesses < 8:
    # Запрашиваем ввод элемента у пользователя
    userGuess = input("Введите название элемента: ").upper()
    # Увеличиваем количество попыток
    numberOfGuesses += 1

    # Проверяем, угадан ли элемент
    if userGuess == targetElement:
        print(f"ПОЗДРАВЛЯЮ! Вы угадали элемент за {numberOfGuesses} попыток!")
        break # Завершаем цикл, если элемент угадан
    else:
        # Создаем строку подсказки
        hint = ""
        # Сравниваем каждую букву предположения с буквами загаданного элемента
        for i in range(len(targetElement)):
            if i < len(userGuess):
              if userGuess[i] == targetElement[i]:
                  hint += userGuess[i]  # Если буквы совпадают и находятся на одинаковых позициях, добавляем букву
              elif userGuess[i] in targetElement:
                  hint += "+"   # Если буквы совпадают, но не на одинаковых позициях, добавляем +
              else:
                  hint += "-"  # Если буквы не совпадают, добавляем -
            else:
                hint += "-"
        # Выводим строку подсказку
        print(hint)

# Если попытки закончились, а элемент не угадан
if numberOfGuesses == 8:
    print(f"ВЫ ПРОИГРАЛИ! Загаданный элемент был {targetElement}")

"""
Объяснение кода:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для выбора случайного элемента из списка.

2.  **Список химических элементов `elements`**:
    -   `elements = [...]`: Создает список химических элементов.

3.  **Выбор случайного элемента**:
    -   `targetElement = random.choice(elements)`: Выбирает случайный элемент из списка `elements` и сохраняет его в переменной `targetElement`.

4.  **Инициализация количества попыток**:
    -   `numberOfGuesses = 0`: Устанавливает начальное количество попыток равным 0.

5.  **Основной игровой цикл `while numberOfGuesses < 8:`**:
    -   Цикл выполняется, пока количество попыток `numberOfGuesses` меньше 8.

6.  **Ввод предположения игрока**:
    -   `userGuess = input("Введите название элемента: ").upper()`: Запрашивает у пользователя ввод названия элемента, преобразует ввод в верхний регистр и сохраняет в переменной `userGuess`.

7.  **Увеличение количества попыток**:
    -   `numberOfGuesses += 1`: Увеличивает счетчик количества попыток на 1.

8.  **Проверка на победу**:
    -   `if userGuess == targetElement:`: Проверяет, совпадает ли введенный пользователем элемент с загаданным.
    -   `print(f"ПОЗДРАВЛЯЮ! Вы угадали элемент за {numberOfGuesses} попыток!")`: Выводит сообщение о победе с количеством попыток.
    -   `break`: Завершает цикл, если элемент угадан.

9. **Создание строки подсказки**:
    -   `else:`:  Если элемент не угадан, выполняется блок else.
    -   `hint = ""`: Инициализирует пустую строку для подсказки.
    -   `for i in range(len(targetElement)):`: Цикл для перебора всех букв в загаданном элементе.
        -  `if i < len(userGuess):`: Проверяет, не выходит ли индекс за длину введенного пользователем слова.
        -   `if userGuess[i] == targetElement[i]:`: Если буквы совпадают и на тех же позициях, добавляем букву в строку hint.
        -    `elif userGuess[i] in targetElement:`: Если буква из догадки присутствует в загаданном элементе но не на той же позиции, добавляем "+".
        -    `else:`: Если буквы не совпадают, добавляем "-".
        -  `else:`: Если индекс выходит за рамки длины введенного слова, ставим "-"
    -    `print(hint)`: Выводит строку подсказки.

10. **Проверка на проигрыш**:
    -   `if numberOfGuesses == 8:`: После завершения цикла проверяется, закончились ли попытки.
    -   `print(f"ВЫ ПРОИГРАЛИ! Загаданный элемент был {targetElement}")`: Выводит сообщение о проигрыше и показывает правильный ответ.
"""
