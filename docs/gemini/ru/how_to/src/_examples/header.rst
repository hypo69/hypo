Как использовать этот блок кода
========================================================================================

Описание
-------------------------
Этот код определяет функцию `set_project_root`, которая находит корневую директорию проекта, начиная с текущей директории файла. Он ищет файлы-маркеры (например, `pyproject.toml`, `requirements.txt`, `.git`), и останавливается, когда находит директорию, содержащую хотя бы один из них.  Затем добавляет корневую директорию в `sys.path`, что позволяет импортировать модули из проекта. Код также загружает настройки из файла `settings.json` и описание проекта из `README.MD`. Наконец, он инициализирует переменные, содержащие имя проекта, версию, описание, детали, автора, копирайт и ссылку на бонусы для разработчика.

Шаги выполнения
-------------------------
1. **Определение функции `set_project_root`**: Функция принимает кортеж `marker_files` с именами файлов/папок, которые будут использоваться для поиска корневой директории проекта.
2. **Получение текущей директории**:  Получается директория, в которой находится текущий файл (`__file__`).
3. **Поиск корневой директории**: Цикл перебирает директории, начиная с текущей и поднимаясь вверх по иерархии директорий. В каждой директории проверяется наличие одного из файлов/папок из `marker_files`.  Если такой файл найден, корневая директория запоминается, и цикл прерывается.
4. **Добавление корневой директории в sys.path**: Если корневая директория не содержится в списке `sys.path`, она добавляется в начало этого списка.
5. **Возврат корневой директории**: Функция возвращает путь к корневой директории проекта.
6. **Получение корневой директории проекта**: Вызов функции `set_project_root()` с указанием файлов-маркеров. Результат сохраняется в переменной `__root__`.
7. **Загрузка настроек**: Файл `settings.json` в директории `src` читается и загружается в формате JSON в переменную `settings`.
8. **Обработка ошибок при чтении настроек**: Обработка исключений `FileNotFoundError` и `json.JSONDecodeError` для случая, когда файл `settings.json` не найден или имеет неправильный формат.
9. **Загрузка документации**: Файл `README.MD` в директории `src` читается в переменную `doc_str`.
10. **Обработка ошибок при чтении документации**: Обработка исключений `FileNotFoundError` и `json.JSONDecodeError` для случая, когда файл `README.MD` не найден или имеет неправильный формат.
11. **Инициализация переменных проекта**: Переменные `__project_name__`, `__version__`, `__doc__`, `__details__`, `__author__`, `__copyright__`, `__cofee__` инициализируются значениями из `settings` или устанавливаются по умолчанию.


Пример использования
-------------------------
.. code-block:: python

    # Этот пример предполагает, что у вас есть файл settings.json и README.MD в правильном месте.
    from hypotez.src.utils._examples.header import set_project_root
    # ... (другие импорты)
    
    project_root = set_project_root()
    print(f"Корневая директория проекта: {project_root}")
    print(f"Название проекта: {__project_name__}")
    print(f"Версия проекта: {__version__}")