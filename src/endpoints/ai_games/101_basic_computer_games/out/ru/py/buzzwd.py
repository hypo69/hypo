"""
BUZZWD:
=================
Сложность: 4
-----------------
Игра "BUZZWD" - это простая игра, в которой компьютер загадывает слово, а игрок пытается его угадать, вводя буквы.
 После каждой введенной буквы игра сообщает, есть ли эта буква в загаданном слове и на каких позициях.
 Цель игры - угадать слово за минимальное количество попыток.

Правила игры:
1. Компьютер выбирает случайное слово из списка.
2. Игрок вводит по одной букве за раз.
3. После каждого ввода компьютер проверяет, есть ли введенная буква в загаданном слове.
4. Если буква есть, компьютер сообщает, на каких позициях она встречается.
5. Игра продолжается до тех пор, пока игрок не угадает все буквы в слове.
-----------------
Алгоритм:
1.  Выбрать случайное слово из списка слов.
2.  Создать массив, представляющий загаданное слово, заполненный символами "_".
3.  Пока есть прочерки в массиве:
    3.1 Запросить у игрока ввод буквы.
    3.2 Пройтись по всем буквам загаданного слова и сравнить с введенной буквой:
        3.2.1. Если буква совпадает, то заменить соответствующий прочерк в массиве на введенную букву и сообщить, что буква есть в слове и на каких позициях.
    3.3 Если не найдено совпадений, сообщить, что такой буквы нет в слове.
4. Вывести сообщение о том, что слово угадано.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    wordList = ['APPLE', 'BANANA', 'CHERRY', 'GRAPE', 'KIWI']
    targetWord = random(wordList)
    displayWord = ['_','_','_','_','_']
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока есть '_' в <code><b>displayWord</b></code>"}
    LoopStart -- Да --> InputGuess["Ввод буквы пользователем: <code><b>userLetter</b></code>"]
    InputGuess --> CheckLetter{"Проверка: <code><b>userLetter</b></code> есть в <code><b>targetWord</b></code>?"}
    CheckLetter -- Да --> UpdateDisplayWord["<p align='left'>Обновление <code><b>displayWord</b></code>:
    замена '_' на <code><b>userLetter</b></code> на соответствующих позициях,
    Вывод: <b>Буква есть в слове</b></p>"]
    UpdateDisplayWord --> OutputDisplayWord["Вывод: <b>displayWord</b>"]
    OutputDisplayWord --> LoopStart
    CheckLetter -- Нет --> OutputNoLetter["Вывод: <b>Такой буквы нет в слове</b>"]
    OutputNoLetter --> OutputDisplayWord
     LoopStart -- Нет --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: wordList (список слов), targetWord (загаданное слово выбирается случайно из wordList), displayWord (массив для отображения угаданных букв, изначально заполненный "_").
    LoopStart - Начало цикла, который продолжается пока в displayWord есть символ "_".
    InputGuess - Запрос у пользователя ввода буквы и сохранение ее в переменной userLetter.
    CheckLetter - Проверка, есть ли введенная буква userLetter в загаданном слове targetWord.
    UpdateDisplayWord - Обновление массива displayWord: замена "_" на userLetter на соответствующих позициях и вывод сообщения что такая буква есть.
    OutputDisplayWord - Вывод текущего состояния массива displayWord.
    OutputNoLetter - Вывод сообщения, что такой буквы нет в слове.
    OutputWin - Вывод сообщения о победе когда нет больше символов "_" в displayWord.
    End - Конец программы.
"""
import random

# Список слов для выбора
wordList = ["APPLE", "BANANA", "CHERRY", "GRAPE", "KIWI"]
# Выбираем случайное слово из списка
targetWord = random.choice(wordList)
# Создаем массив для отображения угаданных букв, заполненный "_".
displayWord = ["_"] * len(targetWord)

# Основной игровой цикл
while "_" in displayWord:
    # Запрашиваем у игрока ввод буквы
    userLetter = input("Введите букву: ").upper()

    # Флаг для отслеживания, была ли найдена буква
    letterFound = False
    # Проходим по всем буквам в загаданном слове
    for i in range(len(targetWord)):
        # Если буква совпадает с введенной
        if targetWord[i] == userLetter:
            # Заменяем прочерк на букву в массиве для отображения
            displayWord[i] = userLetter
            letterFound = True
    # Выводим текущее состояние массива с угаданными буквами
    print(" ".join(displayWord))
    # Если буква не найдена
    if not letterFound:
        print("Такой буквы нет в слове.")
# Если все буквы угаданы, выводим сообщение о победе
print("ПОЗДРАВЛЯЮ! Вы угадали слово!")

"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайного слова.
2.  **Инициализация переменных**:
    -   `wordList = ["APPLE", "BANANA", "CHERRY", "GRAPE", "KIWI"]`: Список слов для выбора.
    -   `targetWord = random.choice(wordList)`: Выбирает случайное слово из списка.
    -   `displayWord = ["_"] * len(targetWord)`: Создает список `displayWord` длиной `targetWord` и заполняет его символами "_". Это список отображает текущее состояние отгаданных букв.
3.  **Основной цикл `while "_" in displayWord:`**:
    -   Цикл продолжается до тех пор, пока в списке `displayWord` есть символ "_", что означает, что не все буквы угаданы.
    -   `userLetter = input("Введите букву: ").upper()`: Запрашивает у пользователя ввод буквы и преобразует ее в верхний регистр для сравнения.
    -   `letterFound = False`: Инициализирует флаг `letterFound`, который будет отслеживать, найдена ли введенная буква в слове.
    -   **Цикл `for i in range(len(targetWord)):`**:
        -   Проходит по каждой букве в загаданном слове.
        -   `if targetWord[i] == userLetter:`: Если буква в загаданном слове совпадает с введенной пользователем.
        -   `displayWord[i] = userLetter`: Заменяет прочерк на букву в `displayWord`, если найдено совпадение.
        -   `letterFound = True`: Устанавливает флаг `letterFound` в `True`, если буква найдена.
    -   `print(" ".join(displayWord))`: Выводит текущее состояние `displayWord` на экран.
    -   `if not letterFound:`: Если после прохода по всем буквам флаг `letterFound` остался `False`, значит введенной буквы нет в слове.
    -   `print("Такой буквы нет в слове.")`: Выводит сообщение, что такой буквы нет в слове.
4.  **Вывод сообщения о победе**:
    -   `print("ПОЗДРАВЛЯЮ! Вы угадали слово!")`: Выводит сообщение о победе, когда цикл завершается (все буквы угаданы).
"""
```