"""
<ACEDU>:
=================
Сложность: 5
-----------------
Игра представляет собой образовательную программу, предлагающую пользователю выбрать одну из четырех математических операций (сложение, вычитание, умножение, деление) и затем решить 10 случайно сгенерированных примеров, сложность которых зависит от выбора операции. Программа отслеживает правильность ответов пользователя и в конце предоставляет общее количество правильных ответов, а также процент правильных ответов.
Правила игры:
1. Пользователю предлагается выбрать одну из четырех математических операций: сложение, вычитание, умножение или деление.
2. После выбора операции, пользователю предлагается решить 10 случайно сгенерированных примеров, сложность которых зависит от выбранной операции.
3. Пользователь вводит свои ответы на каждый пример.
4. Программа проверяет правильность ответов и подсчитывает количество правильных ответов.
5. В конце игры программа выводит общее количество правильных ответов и процент правильных ответов.

-----------------
Алгоритм:
1. Вывести пользователю меню выбора операции: сложение(1), вычитание(2), умножение(3), деление(4).
2. Получить ввод пользователя.
3. Инициализировать счетчик правильных ответов (correctAnswers) в 0.
4. Начать цикл 10 раз (для 10 примеров):
    4.1 Сгенерировать случайные числа (number1, number2) в зависимости от выбранной операции.
       - Для сложения, вычитания и умножения: от 1 до 10
       - Для деления: от 1 до 10, но с условием, чтобы number1 было кратно number2.
    4.2 Сформировать пример и вывести его пользователю.
    4.3 Получить ответ пользователя.
    4.4 Вычислить правильный ответ.
    4.5 Сравнить ответ пользователя с правильным ответом.
    4.6 Если ответ верный, увеличить счетчик правильных ответов на 1.
5. Вывести общее количество правильных ответов (correctAnswers).
6. Вычислить процент правильных ответов, разделив количество правильных ответов на 10 и умножив на 100.
7. Вывести процент правильных ответов.
8. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> DisplayMenu["Вывод меню: 1-Сложение, 2-Вычитание, 3-Умножение, 4-Деление"]
    DisplayMenu --> InputChoice["Ввод выбора операции"]
    InputChoice --> InitializeCorrectAnswers["Инициализация: <code>correctAnswers = 0</code>"]
    InitializeCorrectAnswers --> LoopStart{"Начало цикла (10 раз)"}
    LoopStart -- Да --> GenerateNumbers["Генерация случайных чисел <code>number1, number2</code> в зависимости от выбора операции"]
    GenerateNumbers --> DisplayProblem["Вывод примера: <code>number1 operator number2 = ?</code>"]
    DisplayProblem --> InputAnswer["Ввод ответа пользователя"]
    InputAnswer --> CalculateCorrectAnswer["Вычисление правильного ответа"]
    CalculateCorrectAnswer --> CheckAnswer{"Проверка: <code>userAnswer == correctAnswer?</code>"}
    CheckAnswer -- Да --> IncreaseCorrectAnswers["<code>correctAnswers = correctAnswers + 1</code>"]
    IncreaseCorrectAnswers --> LoopEnd
    CheckAnswer -- Нет --> LoopEnd
    LoopEnd --> LoopStart{"Конец цикла (10 раз)"}
    LoopStart -- Нет --> OutputTotalCorrectAnswers["Вывод: <b>Общее количество правильных ответов: <code>correctAnswers</code></b>"]
    OutputTotalCorrectAnswers --> CalculatePercentage["Вычисление процента правильных ответов: <code>percentage = (correctAnswers / 10) * 100</code>"]
    CalculatePercentage --> OutputPercentage["Вывод: <b>Процент правильных ответов: <code>percentage</code>%</b>"]
    OutputPercentage --> End["Конец"]

```
**Legenda:**
    Start - Начало программы.
    DisplayMenu - Вывод на экран меню выбора арифметической операции.
    InputChoice - Получение ввода пользователя (выбранная операция: 1 - сложение, 2 - вычитание, 3 - умножение, 4 - деление).
    InitializeCorrectAnswers - Инициализация счетчика правильных ответов (correctAnswers) значением 0.
    LoopStart - Начало цикла, который повторяется 10 раз для решения 10 примеров.
    GenerateNumbers - Генерация двух случайных чисел (number1, number2) в зависимости от выбранной пользователем операции.
    DisplayProblem - Вывод на экран сгенерированного математического примера.
    InputAnswer - Получение ввода ответа пользователя.
    CalculateCorrectAnswer - Вычисление правильного ответа на сгенерированный пример.
    CheckAnswer - Сравнение ответа пользователя с правильным ответом.
    IncreaseCorrectAnswers - Увеличение счетчика правильных ответов на 1, если ответ пользователя правильный.
    LoopEnd - Конец цикла, который повторяется 10 раз.
    OutputTotalCorrectAnswers - Вывод на экран общего количества правильных ответов.
    CalculatePercentage - Вычисление процента правильных ответов.
    OutputPercentage - Вывод на экран процента правильных ответов.
    End - Конец программы.
"""
import random

def get_user_choice():
    """Выводит меню выбора операции и получает выбор пользователя."""
    print("Выберите операцию:")
    print("1. Сложение")
    print("2. Вычитание")
    print("3. Умножение")
    print("4. Деление")
    while True:
        try:
            choice = int(input("Введите номер операции: "))
            if 1 <= choice <= 4:
                return choice
            else:
                print("Неверный ввод. Введите число от 1 до 4.")
        except ValueError:
            print("Неверный ввод. Введите целое число.")

def generate_numbers(operation):
    """Генерирует случайные числа для примеров в зависимости от выбранной операции."""
    if operation == 4:  # Деление
        number2 = random.randint(1, 10)
        number1 = number2 * random.randint(1, 10)
        return number1, number2
    else:
       number1 = random.randint(1, 10)
       number2 = random.randint(1, 10)
       return number1, number2

def display_problem(number1, number2, operation):
    """Выводит математический пример на экран."""
    if operation == 1:
        operator = "+"
    elif operation == 2:
        operator = "-"
    elif operation == 3:
        operator = "*"
    else:
        operator = "/"
    print(f"Сколько будет {number1} {operator} {number2}?")
    
def calculate_correct_answer(number1, number2, operation):
    """Вычисляет правильный ответ для примера."""
    if operation == 1:
        return number1 + number2
    elif operation == 2:
        return number1 - number2
    elif operation == 3:
        return number1 * number2
    else:
        return number1 / number2

def check_answer(user_answer, correct_answer):
    """Проверяет ответ пользователя и возвращает True, если он правильный."""
    try:
      if float(user_answer) == correct_answer:
        return True
      else:
        return False
    except ValueError:
       return False

def main():
    """Основная функция игры, которая управляет процессом."""
    operation = get_user_choice()  # Получаем выбор операции от пользователя
    correctAnswers = 0 # Инициализируем счетчик правильных ответов

    # Основной цикл для решения 10 примеров
    for _ in range(10):
        number1, number2 = generate_numbers(operation) # Генерируем случайные числа для примера
        display_problem(number1, number2, operation) # Выводим пример на экран
        try:
            userAnswer = input("Ваш ответ: ") # Получаем ответ пользователя
            correctAnswer = calculate_correct_answer(number1, number2, operation) # Вычисляем правильный ответ

            if check_answer(userAnswer, correctAnswer):
                correctAnswers += 1 # Если ответ правильный, увеличиваем счетчик
                print("Правильно!")
            else:
                print(f"Неправильно. Правильный ответ: {correctAnswer}")

        except ValueError:
            print("Неверный ввод. Пожалуйста, введите число.")
    print(f"Общее количество правильных ответов: {correctAnswers}") # Выводим общее количество правильных ответов
    percentage = (correctAnswers / 10) * 100 # Вычисляем процент правильных ответов
    print(f"Процент правильных ответов: {percentage}%") # Выводим процент правильных ответов

if __name__ == "__main__":
    main() # Запускаем основную функцию игры

"""
Объяснение кода:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.

2. **Функция `get_user_choice()`**:
    - Выводит меню с вариантами арифметических операций и запрашивает ввод пользователя.
    - Обеспечивает корректный ввод номера операции (1-4), и возвращает этот номер.
    - Обрабатывает `ValueError`, если пользователь вводит некорректное значение.

3. **Функция `generate_numbers(operation)`**:
    - Генерирует два случайных числа (`number1`, `number2`) в зависимости от выбранной операции:
        - Для сложения, вычитания и умножения: числа от 1 до 10.
        - Для деления: `number2` от 1 до 10, а `number1` кратно `number2`, чтобы результат был целым числом.
    - Возвращает сгенерированные числа.
    
4. **Функция `display_problem(number1, number2, operation)`**:
    - Выводит на экран математический пример с использованием правильного оператора в зависимости от выбора пользователя.

5. **Функция `calculate_correct_answer(number1, number2, operation)`**:
    - Вычисляет правильный ответ на математический пример, используя выбранную операцию.
    - Возвращает результат.
    
6. **Функция `check_answer(user_answer, correct_answer)`**:
    - Проверяет, равен ли ответ пользователя правильному ответу.
    -  Конвертирует `user_answer` во float для сравнения с correct_answer.
    - Возвращает `True`, если ответы равны, и `False` в противном случае. Обрабатывает `ValueError`, если пользователь вводит некорректное значение.

7. **Функция `main()`**:
    - Получает выбор операции от пользователя, вызывая функцию `get_user_choice()`.
    - Инициализирует счетчик правильных ответов `correctAnswers` в 0.
    - В цикле, который выполняется 10 раз:
        - Генерирует случайные числа и выводит пример на экран.
        - Запрашивает ввод ответа пользователя.
        - Вычисляет правильный ответ, вызывает `calculate_correct_answer()`.
        - Сравнивает ответ пользователя с правильным ответом, вызывает `check_answer()`.
        - Увеличивает счетчик правильных ответов, если ответ верный, и выводит соответствующее сообщение.
        - Обрабатывает `ValueError`, если пользователь вводит некорректное значение.
    - Выводит общее количество правильных ответов.
    - Вычисляет и выводит процент правильных ответов.

8. **Запуск программы**:
    - `if __name__ == "__main__":`: Гарантирует, что функция `main()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    - `main()`: Вызывает функцию для начала игры.
"""
