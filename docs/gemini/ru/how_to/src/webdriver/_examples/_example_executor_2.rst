Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код демонстрирует примеры использования класса `ExecuteLocator` для выполнения задач тестирования с помощью Selenium WebDriver.  Он содержит примеры работы с различными локаторами (XPath, элементы списка, события), обработку ошибок, отправку сообщений и получение атрибутов.  Код показывает, как создать экземпляр `ExecuteLocator`, выполнить локатор, обработать возможные исключения и использовать различные параметры, такие как `continue_on_error`, для управления поведением при ошибках.  

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует `webdriver` из Selenium, `ExecuteLocator` из модуля `src.webdriver.executor`, `gs` и класс исключений `ExecuteLocatorException`.

2. **Создание WebDriver:** Создаётся экземпляр WebDriver (в данном случае Chrome) с указанием пути к исполняемому файлу драйвера.  Открывается веб-страница `https://example.com`.

3. **Создание экземпляра ExecuteLocator:** Создаётся экземпляр класса `ExecuteLocator` с переданным в конструктор объектом WebDriver.

4. **Примеры использования `execute_locator`:**  Код демонстрирует несколько примеров использования метода `execute_locator` для поиска элементов по XPath, получения текстового содержимого, отправки сообщений и нажатия кнопок.  Разные примеры содержат сложные локаторы, работа с несколькими локаторами одновременно и обработка различных атрибутов.

5. **Обработка исключений:** Примеры демонстрируют использование блоков `try...except` для перехвата исключений `ExecuteLocatorException` и обработки ошибок при выполнении локатора.

6. **Использование `send_message`:** Код показывает как отправлять сообщения в поля ввода, используя метод `send_message` с параметром `typing_speed` и обработкой ошибок.

7. **Работа со списками локаторов:**  Демонстрируется, как выполнить несколько локаторов (с разными событиями и атрибутами) одновременно.

8. **Использование `evaluate_locator`:**  Представлен пример использования метода `evaluate_locator` для извлечения значений атрибутов элементов.

9. **Выполнение тестового локатора:** Представлен полный пример теста, который включает в себя все предыдущие шаги.

10. **Закрытие WebDriver:**  После выполнения всех тестов код закрывает соединение с WebDriver (`driver.quit()`).


Пример использования
-------------------------
.. code-block:: python

    from selenium import webdriver
    from src.webdriver.executor import ExecuteLocator
    from src import gs  # Предполагается, что gs содержит путь к драйверу
    # ... (импорт других необходимых модулей)

    # Путь к исполняемому файлу драйвера Chrome
    chrome_driver_path = gs['chrome_driver_path']

    # Создание WebDriver
    driver = webdriver.Chrome(executable_path=chrome_driver_path)
    driver.get("https://example.com")

    # Создание экземпляра ExecuteLocator
    locator = ExecuteLocator(driver)

    # Пример использования execute_locator (замена на свой локатор)
    simple_locator = {
        "by": "XPATH",
        "selector": "//h1",
        "attribute": "textContent",
        "event": None,
        "mandatory": True,
        # ... другие поля
    }

    result = locator.execute_locator(simple_locator)
    print(f"Результат: {result}")


    driver.quit()