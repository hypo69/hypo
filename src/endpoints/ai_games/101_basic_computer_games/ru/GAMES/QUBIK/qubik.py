"""
QUBIK:
=================
Сложность: 7
-----------------
Игра "Кубик" представляет собой симуляцию вращения трехмерного куба, составленного из маленьких кубиков. Игрок вводит координаты (X, Y, Z) одного из внутренних кубиков, и программа показывает его положение относительно текущей ориентации большого куба. Игрок также может вращать куб по осям X, Y или Z.
Цель игры - понять, как вращение куба влияет на относительные координаты выбранного внутреннего кубика.
-----------------
Правила игры:
1.  В начале игры создается куб 3x3x3.
2.  Игрок вводит координаты (X, Y, Z) внутреннего кубика, где координаты лежат в диапазоне от 1 до 3.
3.  Программа выводит текущее положение введенного кубика относительно текущей ориентации куба.
4.  Игрок может вращать куб на 90 градусов вокруг оси X, Y или Z.
5.  После каждого вращения куба программа выводит новые координаты кубика.
6.  Игра продолжается, пока игрок не введет "END" (или 0) для завершения.
-----------------
Алгоритм:
1.  Инициализировать куб 3x3x3 (представлен как массив) и установить начальную ориентацию.
2.  Пока не введена команда "END":
    2.1 Запросить у пользователя координаты X, Y, Z.
    2.2 Если введены координаты:
        2.2.1 Вывести текущее положение кубика.
    2.3 Если введены команды "X", "Y", "Z"
        2.3.1 Выполнить вращение куба в направлении указанной оси
    2.4. Если введена команда 0 или END завершить игру.
3.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeCube["<p align='left'>Инициализация куба 3x3x3 и начальной ориентации</p>"]
    InitializeCube --> MainLoop{"Начало основного цикла: пока не введено 'END'"}
    MainLoop -- Да --> InputCommand["Запрос у пользователя: X, Y, Z или 'X', 'Y', 'Z' или 'END'"]
    InputCommand --> CheckEnd{"Проверка: введено 'END'?"}
    CheckEnd -- Да --> End["Конец"]
    CheckEnd -- Нет --> CheckCoordinates{"Проверка: введены координаты X, Y, Z?"}
    CheckCoordinates -- Да --> OutputPosition["Вывод текущего положения кубика"]
    OutputPosition --> MainLoop
    CheckCoordinates -- Нет --> CheckRotation{"Проверка: введена команда вращения 'X', 'Y' или 'Z'?"}
     CheckRotation -- Да --> RotateCube["Вращение куба вокруг указанной оси"]
    RotateCube --> MainLoop
    CheckRotation -- Нет --> MainLoop
    MainLoop -- Нет --> End
```

Legenda:
    Start - Начало программы.
    InitializeCube - Инициализация трехмерного массива, представляющего куб 3x3x3, и установка начальной ориентации.
    MainLoop - Начало основного цикла, который продолжается, пока пользователь не введет "END".
    InputCommand - Запрос у пользователя ввода координат X, Y, Z или команды вращения X, Y, Z, или 'END'.
    CheckEnd - Проверка, введено ли 'END'.
    End - Конец программы.
    CheckCoordinates - Проверка, введены ли координаты X, Y, Z.
    OutputPosition - Вывод текущего положения указанного кубика после преобразований.
    CheckRotation - Проверка, введена ли команда вращения 'X', 'Y' или 'Z'.
    RotateCube - Выполнение вращения куба вокруг указанной оси.
"""
import numpy as np

# Функция для поворота куба вокруг оси X
def rotate_x(cube):
    """
    Поворачивает куб на 90 градусов вокруг оси X.

    Args:
        cube (numpy.ndarray): трехмерный массив, представляющий куб.

    Returns:
        numpy.ndarray: Повернутый куб.
    """
    return np.rot90(cube, k=-1, axes=(1, 2))

# Функция для поворота куба вокруг оси Y
def rotate_y(cube):
    """
        Поворачивает куб на 90 градусов вокруг оси Y.

        Args:
            cube (numpy.ndarray): трехмерный массив, представляющий куб.

        Returns:
            numpy.ndarray: Повернутый куб.
        """
    return np.rot90(cube, k=-1, axes=(0, 2))

# Функция для поворота куба вокруг оси Z
def rotate_z(cube):
    """
            Поворачивает куб на 90 градусов вокруг оси Z.

            Args:
                cube (numpy.ndarray): трехмерный массив, представляющий куб.

            Returns:
                numpy.ndarray: Повернутый куб.
            """
    return np.rot90(cube, k=-1, axes=(0, 1))

# Функция для получения положения кубика
def get_cube_position(cube, x, y, z):
    """
        Получает текущее положение кубика в кубе.

        Args:
            cube (numpy.ndarray): трехмерный массив, представляющий куб.
            x (int): координата кубика по оси X (от 1 до 3).
            y (int): координата кубика по оси Y (от 1 до 3).
            z (int): координата кубика по оси Z (от 1 до 3).

        Returns:
            tuple: координаты кубика в текущей ориентации куба.
        """
    return cube[z-1, y-1, x-1]

# Инициализация куба 3x3x3
cube = np.arange(1, 28).reshape(3, 3, 3) # Создаем куб 3x3x3

# Игровой цикл
while True:
    command = input("Введите координаты (X Y Z) или команду ('X', 'Y', 'Z') или 'END' для выхода: ").upper()
    
    if command == "END" or command == "0":
        print("Игра завершена.")
        break
    
    parts = command.split()
    
    if len(parts) == 3:
        try:
            x, y, z = map(int, parts)
            if 1 <= x <= 3 and 1 <= y <= 3 and 1 <= z <= 3:
                pos = get_cube_position(cube, x, y, z)
                print(f"Положение кубика ({x}, {y}, {z}): {pos}")
            else:
                  print("Координаты должны быть целыми числами от 1 до 3.")
        except ValueError:
                print("Неверный формат координат.")
    elif len(parts) == 1:
        if command == "X":
            cube = rotate_x(cube)
            print("Куб повернут вокруг оси X.")
        elif command == "Y":
            cube = rotate_y(cube)
            print("Куб повернут вокруг оси Y.")
        elif command == "Z":
            cube = rotate_z(cube)
            print("Куб повернут вокруг оси Z.")
        else:
              print("Неизвестная команда.")
    else:
         print("Неверный формат ввода.")
         
"""
Объяснение кода:

1.  **Импорт модуля `numpy`**:
    -  `import numpy as np`: Импортирует модуль `numpy`, который используется для работы с массивами.
2.  **Функции поворота куба:**
    -   `rotate_x(cube)`:
        -   Принимает массив, представляющий куб.
        -   Использует `np.rot90()` для поворота куба на 90 градусов против часовой стрелки вокруг оси X.
        -   Возвращает повернутый куб.
    -   `rotate_y(cube)`:
        -   Аналогично `rotate_x`, но поворачивает вокруг оси Y.
    -   `rotate_z(cube)`:
        -   Аналогично `rotate_x`, но поворачивает вокруг оси Z.
3.  **Функция `get_cube_position(cube, x, y, z)`**:
    -  Принимает куб и координаты кубика (x, y, z).
    -  Возвращает значение кубика по указанным координатам, с учетом индексации массива (индексы массива начинаются с 0, а координаты кубика — с 1).
4.  **Инициализация куба**:
    -  `cube = np.arange(1, 28).reshape(3, 3, 3)`: Создает трехмерный массив (куб) размером 3x3x3, заполненный числами от 1 до 27.
5.  **Основной игровой цикл `while True:`**:
    -  `command = input("Введите координаты (X Y Z) или команду ('X', 'Y', 'Z') или 'END' для выхода: ").upper()`: Запрашивает ввод пользователя и переводит его в верхний регистр.
    -  **Обработка команды "END"**:
        -   `if command == "END" or command == "0":`: Проверяет, введена ли команда "END" или "0" для завершения игры.
        -  `break`: Если введена, цикл завершается.
    -  **Разбор ввода**:
       -  `parts = command.split()`: Разделяет введенную строку на части по пробелам.
    -  **Обработка ввода координат (X Y Z)**:
        -  `if len(parts) == 3:`: Проверяет, что введено 3 элемента, ожидая координаты X, Y, Z.
        -  `try...except ValueError`: обрабатывает ошибку неверного ввода.
        -   `x, y, z = map(int, parts)`: Преобразует введенные части в целые числа.
        -  `if 1 <= x <= 3 and 1 <= y <= 3 and 1 <= z <= 3`: Проверяет, находятся ли введенные координаты в диапазоне от 1 до 3.
        -   `pos = get_cube_position(cube, x, y, z)`: Получает положение кубика по координатам.
        -  `print(f"Положение кубика ({x}, {y}, {z}): {pos}")`: Выводит положение кубика.
        -   `else`: если координаты вне диапазона.
        -   `print("Координаты должны быть целыми числами от 1 до 3.")`: Вывод сообщения об ошибке.
    -  **Обработка команд вращения ("X", "Y", "Z")**:
        -  `elif len(parts) == 1:`: Проверяет, что введена только одна команда.
        -  `if command == "X":`: Проверяет, введена ли команда "X".
            -  `cube = rotate_x(cube)`: Вращает куб вокруг оси X.
            -  `print("Куб повернут вокруг оси X.")`: Выводит сообщение о повороте.
        -  `elif command == "Y":`: Аналогично для оси Y.
        -   `elif command == "Z":`: Аналогично для оси Z.
         -  `else`: если введена неизвестная команда.
            - `print("Неизвестная команда.")`: Сообщение об ошибке.
    -  `else:`: если неверный формат ввода
        - `print("Неверный формат ввода.")`: Сообщение об ошибке.
"""
