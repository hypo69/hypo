"""
MATHDI:
=================
Сложность: 4
-----------------
Игра "Математическая задача" предлагает пользователю решить простую арифметическую задачу (сложение или вычитание) и проверяет правильность ответа. Если ответ верный, программа выводит сообщение "GOOD", в противном случае - "NO".

Правила игры:
1. Программа случайным образом генерирует два числа в диапазоне от 1 до 9.
2. Программа случайным образом выбирает операцию сложения или вычитания.
3. Программа выводит математическую задачу пользователю.
4. Пользователь должен ввести ответ.
5. Программа проверяет правильность ответа и выводит "GOOD" или "NO".
-----------------
Алгоритм:
1.  Сгенерировать случайное число от 1 до 9 и сохранить в A.
2.  Сгенерировать случайное число от 1 до 9 и сохранить в B.
3.  Сгенерировать случайное число от 1 до 2.
4.  Если случайное число равно 1, то выполнить сложение A + B, иначе выполнить вычитание A - B.
5.  Вывести на экран математическую задачу в виде "A + B =" или "A - B =" и запросить ввод ответа.
6.  Если ответ пользователя равен вычисленному результату, вывести "GOOD", иначе вывести "NO".
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateA["Генерация случайного числа <code><b>a</b></code> от 1 до 9"]
    GenerateA --> GenerateB["Генерация случайного числа <code><b>b</b></code> от 1 до 9"]
    GenerateB --> GenerateOperation["Генерация случайного числа <code><b>operationType</b></code> от 1 до 2"]
    GenerateOperation --> CheckOperation{"<code><b>operationType == 1 ?</b></code>"}
    CheckOperation -- Да --> Addition["<code><b>result = a + b</b></code>"]
    CheckOperation -- Нет --> Subtraction["<code><b>result = a - b</b></code>"]
    Addition --> OutputQuestion["Вывод вопроса: <code><b>a + b = ?</b></code>"]
    Subtraction --> OutputQuestion
    OutputQuestion --> InputAnswer["Ввод ответа: <code><b>userAnswer</b></code>"]
    InputAnswer --> CheckAnswer{"<code><b>userAnswer == result ?</b></code>"}
     CheckAnswer -- Да --> OutputGood["Вывод: <b>GOOD</b>"]
     CheckAnswer -- Нет --> OutputNo["Вывод: <b>NO</b>"]
    OutputGood --> End["Конец"]
    OutputNo --> End
```
Legenda:
    Start - Начало программы.
    GenerateA - Генерация случайного числа a в диапазоне от 1 до 9.
    GenerateB - Генерация случайного числа b в диапазоне от 1 до 9.
    GenerateOperation - Генерация случайного числа operationType в диапазоне от 1 до 2, определяющего тип операции (1 - сложение, 2 - вычитание).
    CheckOperation - Проверка: равно ли operationType 1?
    Addition - Вычисление результата сложения result = a + b.
    Subtraction - Вычисление результата вычитания result = a - b.
    OutputQuestion - Вывод на экран математической задачи в виде a + b = ? или a - b = ?.
    InputAnswer - Запрос ввода ответа от пользователя и сохранение его в userAnswer.
    CheckAnswer - Проверка: равен ли ответ пользователя userAnswer вычисленному результату result?
    OutputGood - Вывод сообщения "GOOD", если ответ пользователя верный.
    OutputNo - Вывод сообщения "NO", если ответ пользователя неверный.
    End - Конец программы.
"""
import random

# Генерируем случайное число от 1 до 9
numberA = random.randint(1, 9)
# Генерируем случайное число от 1 до 9
numberB = random.randint(1, 9)
# Генерируем случайное число для выбора операции (1 - сложение, 2 - вычитание)
operationType = random.randint(1, 2)

# Определяем операцию и вычисляем результат
if operationType == 1:
    result = numberA + numberB
    operationSymbol = "+"
else:
    result = numberA - numberB
    operationSymbol = "-"

# Выводим математическую задачу
print(f"Решите пример: {numberA} {operationSymbol} {numberB} = ?")

# Получаем ответ от пользователя
try:
    userAnswer = int(input("Ваш ответ: "))
except ValueError:
    print("Пожалуйста, введите целое число.")
    exit()

# Проверяем правильность ответа
if userAnswer == result:
    print("GOOD")
else:
    print("NO")
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Генерация случайных чисел**:
    -   `numberA = random.randint(1, 9)`: Генерирует случайное целое число в диапазоне от 1 до 9 и сохраняет его в переменной `numberA`.
    -   `numberB = random.randint(1, 9)`: Генерирует случайное целое число в диапазоне от 1 до 9 и сохраняет его в переменной `numberB`.
    -   `operationType = random.randint(1, 2)`: Генерирует случайное целое число 1 или 2, которое будет определять, какая операция будет выполняться (1 - сложение, 2 - вычитание).
3.  **Определение операции и вычисление результата**:
    -   `if operationType == 1:`: Проверяет, равна ли переменная `operationType` 1.
        -  Если да, то выполняется сложение: `result = numberA + numberB`, и символ операции `operationSymbol` устанавливается в "+".
    -   `else:`: Если `operationType` не равно 1 (то есть равно 2), выполняется вычитание:
        - `result = numberA - numberB`, и символ операции `operationSymbol` устанавливается в "-".
4. **Вывод математической задачи**:
    -   `print(f"Решите пример: {numberA} {operationSymbol} {numberB} = ?")`: Выводит на экран математическую задачу для пользователя в формате "a + b = ?" или "a - b = ?".
5. **Получение ответа от пользователя**:
   -   `try...except ValueError`: Блок `try-except` обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке и программа завершится.
   -   `userAnswer = int(input("Ваш ответ: "))`: Запрашивает у пользователя ввод ответа и преобразует его в целое число.
6.  **Проверка правильности ответа**:
    -   `if userAnswer == result:`: Проверяет, равен ли введенный пользователем ответ вычисленному результату.
        -   Если ответ верный, выводится сообщение "GOOD".
    -   `else:`: Если ответ неверный:
        -   Выводится сообщение "NO".
"""
