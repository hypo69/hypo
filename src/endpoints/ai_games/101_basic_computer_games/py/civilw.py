"""
CIVILW:
=================
Сложность: 5
-----------------
Игра "Гражданская война" - это текстовая стратегия, в которой игрок управляет войсками северян и сражается с конфедератами. Игрок имеет ограниченное количество войск, которое он может размещать на разных фронтах, и должен победить конфедератов, пока не будут потеряны все войска.

Правила игры:
-----------------
1. В начале игры игроку сообщается общее количество войск (оно же количество полков) Северян и задается количество фронтов.
2. Игрок должен распределить свои войска (полки) между фронтами, вводя количество полков для каждого фронта по очереди.
3. После распределения войск, компьютер рассчитывает урон, нанесенный конфедератами на каждом фронте.
4. Если на каком-либо фронте количество войск Северян не превышает урон, нанесенный конфедератами, то все войска на этом фронте уничтожаются.
5. Если хотя бы на одном фронте остался хотя бы один полк, игрок выигрывает.
6. Игрок проигрывает, если после всех сражений не осталось ни одного полка.

Алгоритм:
-----------------
1. **Начало:** Инициализировать общее количество полков Северян (initial_polks) равным 1000 и количество фронтов (number_of_fronts) равным 3.
2. **Ввод данных:** Запросить у игрока количество полков для каждого фронта по очереди. 
3. **Расчет урона:** Для каждого фронта вычислить урон, нанесенный конфедератами (damage_per_front) как случайное целое число от 1 до 300.
4. **Битва:** Проверить для каждого фронта, если количество полков на фронте (polks_on_front) меньше или равно урону на фронте (damage_per_front), то обнулить количество полков на фронте (polks_on_front = 0).
5. **Проверка выигрыша:** Проверить, если на каком-либо фронте остался хотя бы один полк (polks_on_front > 0), то игрок выиграл. Вывести сообщение о победе.
6. **Проверка проигрыша:** Если ни на одном фронте не осталось войск, игрок проиграл. Вывести сообщение о поражении.
7. **Конец:** Завершить игру.

-----------------
Блок-схема:
```mermaid
  graph TD
      Start(Начало) --> Initialize(Инициализация войск и фронтов);
      Initialize --> InputLoopStart(Начало цикла ввода фронтов);
      InputLoopStart --> InputPolks(Ввод полков для фронта);
      InputPolks --> IncrementFront(Увеличить номер фронта);
      IncrementFront --> CheckFronts(Проверить, все ли фронты введены);
      CheckFronts -- Нет --> InputLoopStart;
      CheckFronts -- Да --> CalculateDamageLoopStart(Начало цикла расчета урона);
      CalculateDamageLoopStart --> CalculateDamage(Рассчитать урон на фронте);
      CalculateDamage --> Battle(Битва: Проверка и обнуление полков);
      Battle --> IncrementFrontDamage(Увеличить номер фронта для расчета урона);
      IncrementFrontDamage --> CheckFrontsDamage(Проверить, весь ли урон рассчитан);
      CheckFrontsDamage -- Нет --> CalculateDamageLoopStart;
      CheckFrontsDamage -- Да --> CheckWin(Проверить победу);
      CheckWin -- Победа --> OutputWin(Вывести сообщение о победе);
      CheckWin -- Поражение --> CheckLose(Проверить поражение);
      CheckLose -- Поражение --> OutputLose(Вывести сообщение о поражении);
       CheckLose -- Нет поражения --> End(Конец);
      OutputWin --> End;
      OutputLose --> End;
      End(Конец);
```
"""
import random

def civil_war_game():
    """
    Игра "Гражданская война".
    Игрок распределяет полки между фронтами и сражается с конфедератами.
    """

    initial_polks = 1000  # Начальное количество полков северян
    number_of_fronts = 3  # Количество фронтов
    front_polks = []  # Список для хранения количества полков на каждом фронте

    print("Гражданская война началась!")
    print(f"У вас есть {initial_polks} полков, и {number_of_fronts} фронта.")

    # Цикл ввода количества полков для каждого фронта
    for front in range(number_of_fronts):
        while True:
            try:
                polks_on_front = int(input(f"Введите количество полков для фронта {front + 1}: "))
                if polks_on_front >= 0:
                    front_polks.append(polks_on_front)
                    break
                else:
                    print("Количество полков не может быть отрицательным.")
            except ValueError:
                print("Неверный ввод. Пожалуйста, введите целое число.")

    # Цикл расчета урона и битвы на каждом фронте
    for front in range(number_of_fronts):
        damage_per_front = random.randint(1, 300)  # Случайный урон от 1 до 300
        print(f"Фронт {front + 1}: Атака конфедератов нанесла {damage_per_front} урона.")
        if front_polks[front] <= damage_per_front:
            print(f"На фронте {front + 1} все ваши полки уничтожены.")
            front_polks[front] = 0  # Обнуляем полки на фронте

    # Проверка победы
    win = False
    for polks in front_polks:
      if polks > 0:
          win = True
          break

    if win:
      print("Вы победили! Север одержал верх!")
    else:
      print("Вы проиграли. Все ваши полки уничтожены.")

# Запускаем игру
civil_war_game()
"""
Пояснения:
    `initial_polks`: переменная для хранения начального количества полков северян (1000).
    `number_of_fronts`: переменная для хранения количества фронтов (3).
    `front_polks`: список для хранения количества полков на каждом фронте.
    Цикл `for front in range(number_of_fronts)`:
        - цикл для ввода количества полков для каждого фронта
        - `polks_on_front`: временная переменная для хранения количества полков, введенного пользователем для текущего фронта.
        - `input(f"Введите количество полков для фронта {front + 1}: ")`: запрос у пользователя количества полков для текущего фронта.
        - `front_polks.append(polks_on_front)`: добавляем введенное количество полков в список `front_polks`.
    Цикл `for front in range(number_of_fronts)`:
        - цикл для расчета урона и битвы на каждом фронте
        - `damage_per_front = random.randint(1, 300)`: вычисляем случайный урон для текущего фронта.
        - если количество полков на фронте меньше или равно урону, то все полки на фронте уничтожаются (front_polks[front] = 0).
    Цикл `for polks in front_polks`:
    - цикл для проверки победы, проверяется если хоть на одном фронте количество полков больше 0, то игрок победил (win = True)
    В конце, в зависимости от результата проверки выводится сообщение о победе или поражении
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'