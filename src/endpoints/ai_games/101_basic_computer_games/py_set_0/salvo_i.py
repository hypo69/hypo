"""
<SALVO I>:
=================
Сложность: 3
-----------------
SALVO I - это простая игра, в которой игрок пытается угадать случайным образом сгенерированное число в диапазоне от 1 до 100. Игроку дается 7 попыток. Игра выводит подсказки "Слишком мало" или "Слишком много", чтобы помочь игроку угадать число.
Правила игры:
1. Компьютер генерирует случайное целое число от 1 до 100.
2. Игроку дается 7 попыток, чтобы угадать это число.
3. После каждой попытки компьютер сообщает, является ли предположение игрока слишком большим или слишком маленьким, либо верным.
4. Если игрок угадывает число, он выигрывает.
5. Если игрок исчерпывает все попытки, он проигрывает.
-----------------
Алгоритм:
1. Инициализировать:
   - Случайным образом выбрать целое число `target_number` в диапазоне от 1 до 100.
   - Задать количество попыток `attempts_count` равным 7.
2. Начать игровой цикл:
   - Вывести на экран количество оставшихся попыток.
   - Запросить у игрока ввод числа `player_guess`.
   - Уменьшить счетчик попыток `attempts_count` на 1.
   - Проверить условие:
     - Если `player_guess` равно `target_number`, то:
       - Вывести сообщение о победе.
       - Перейти к концу игры.
     - Иначе, если `player_guess` меньше `target_number`, то:
       - Вывести сообщение "Слишком мало".
     - Иначе:
       - Вывести сообщение "Слишком много".
   - Если `attempts_count` равно 0, то:
     - Вывести сообщение о проигрыше и загаданном числе `target_number`.
     - Перейти к концу игры.
   - Иначе перейти к началу игрового цикла.
3. Конец игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало) --> Initialize(Инициализация);
    Initialize --> GameLoop(Начало цикла игры);
    GameLoop --> OutputAttempts(Вывод оставшихся попыток);
    OutputAttempts --> InputGuess(Запрос ввода числа);
    InputGuess --> DecreaseAttempts(Уменьшение количества попыток);
    DecreaseAttempts --> CheckGuess(Проверка предположения);
    CheckGuess -- Верно --> Win(Вывод сообщения о победе);
    CheckGuess -- Не верно --> CheckTooLow(Проверка, меньше ли число);
    CheckTooLow -- Да --> OutputTooLow(Вывод "Слишком мало");
    CheckTooLow -- Нет --> OutputTooHigh(Вывод "Слишком много");
    OutputTooLow --> CheckAttempts(Проверка количества попыток);
    OutputTooHigh --> CheckAttempts;
    CheckAttempts -- Попытки есть --> GameLoop;
    CheckAttempts -- Попыток нет --> Lose(Вывод сообщения о проигрыше);
    Win --> End(Конец);
    Lose --> End;
```
"""
import random

def play_salvo():
    """
    Игра SALVO I: Игрок пытается угадать случайное число.
    """
    # 1. Инициализация игры
    target_number = random.randint(1, 100)  # Генерируем случайное число от 1 до 100
    attempts_count = 7  # Устанавливаем начальное количество попыток

    # 2. Игровой цикл
    while attempts_count > 0:
        print(f"У вас осталось {attempts_count} попыток.")
        try:
            player_guess = int(input("Введите ваше предположение (число от 1 до 100): ")) # Запрашиваем у игрока ввод числа
        except ValueError:
           print("Пожалуйста, введите целое число.")
           continue 

        attempts_count -= 1  # Уменьшаем количество попыток на 1

        if player_guess == target_number:  # Проверяем, угадал ли игрок число
            print("Поздравляю, вы угадали число!")
            return  # Завершаем игру, если угадали

        if player_guess < target_number:  # Если число меньше загаданного
            print("Слишком мало.")
        else:  # Если число больше загаданного
            print("Слишком много.")

    # 3. Если попытки закончились
    print(f"Вы проиграли. Загаданное число было {target_number}.")

# Запускаем игру
if __name__ == "__main__":
    play_salvo()
"""
Пояснения:
1.  `import random`: Импортируем модуль `random` для генерации случайных чисел.
2.  `def play_salvo():`: Определяем функцию `play_salvo`, которая содержит всю логику игры.
3.  `target_number = random.randint(1, 100)`: Генерируем случайное целое число в диапазоне от 1 до 100, которое игрок должен угадать. Сохраняем это число в переменной `target_number`.
4.  `attempts_count = 7`: Инициализируем переменную `attempts_count` значением 7, которое будет отслеживать количество оставшихся у игрока попыток.
5.  `while attempts_count > 0:`:  Начинаем цикл `while`, который продолжается до тех пор, пока у игрока есть попытки (`attempts_count` больше 0).
6.  `print(f"У вас осталось {attempts_count} попыток.")`: Выводим на экран количество оставшихся попыток.
7. `try ... except ValueError`: Используем конструкцию `try-except` для обработки некорректного ввода пользователя (не целое число).
8.  `player_guess = int(input("Введите ваше предположение (число от 1 до 100): "))`: Запрашиваем у пользователя ввод числа и преобразуем его в целое число, которое сохраняем в переменной `player_guess`.
9. `attempts_count -= 1`: Уменьшаем количество попыток на 1 после каждой попытки игрока.
10. `if player_guess == target_number:`: Проверяем, равно ли предположение игрока загаданному числу. Если равно, выводим сообщение о победе и завершаем игру с помощью `return`.
11. `if player_guess < target_number:`: Если предположение игрока меньше загаданного числа, выводим сообщение "Слишком мало."
12. `else:`: В противном случае (если предположение игрока больше загаданного числа), выводим сообщение "Слишком много."
13. `print(f"Вы проиграли. Загаданное число было {target_number}.")`: Если цикл завершился (то есть, попытки закончились), выводим сообщение о проигрыше и загаданное число.
14. `if __name__ == "__main__":`: Проверяем, является ли скрипт основным.
15. `play_salvo()`: Если да, то вызываем функцию `play_salvo()` для начала игры.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```