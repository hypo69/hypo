Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит обработчики событий для расширения браузера Firefox, работающего с функцией tryxpath.  Код отвечает за различные операции, связанные с отображением результатов поиска, стилизацией, хранением состояния и обновлением CSS в открытом окне.  Он управляет обменом сообщениями с содержащейся страницей, загрузкой CSS-файлов, обновлением хранилища и отвечает на запросы о состоянии и результатах.

Шаги выполнения
-------------------------
1. **Обработка сообщений:** Код устанавливает обработчик `browser.runtime.onMessage.addListener(genericListener)`, который отвечает на сообщения, направленные в расширение.

2. **Разделение обработчиков:** Функция `genericListener` обрабатывает сообщения, ищет в словаре `genericListener.listeners` обработчик для соответствующего типа события.

3. **Обработка различных событий:**  Внутри `genericListener.listeners` определены функции для обработки различных событий, таких как:
    * `storePopupState`: сохраняет состояние всплывающего окна.
    * `requestRestorePopupState`: восстанавливает состояние всплывающего окна.
    * `requestInsertStyleToPopup`: вставляет CSS стили в всплывающее окно.
    * `showAllResults`: собирает результаты и открывает новую вкладку для их отображения.
    * `loadResults`: возвращает результаты поиска в ответ на запрос.
    * `updateCss`: удаляет устаревшие CSS стили и вставляет новые в активную вкладку.
    * `loadOptions`: возвращает настройки (attributes, css, popupCss).
    * `requestSetContentInfo`: отправляет информацию о контенте в активную вкладку.

4. **Изменение настроек:** Код отслеживает изменения в хранилище настроек `browser.storage` и обновляет соответствующие переменные (attributes, css, popupCss) в ответ на изменения.

5. **Загрузка CSS:**  Если CSS отсутствует в хранилище, код загружает его из файла `/css/try_xpath_insert.css`.

6. **Инициализация:**  Код извлекает значения attributes, css и popupCss из синхронизированного хранилища, а затем загружает CSS либо из хранилища, либо из файла.

7. **Обработка ошибок:** Используется `fu.onError` для обработки ошибок, возникающих при взаимодействии с хранилищем и другими операциями.


Пример использования
-------------------------
.. code-block:: javascript
    // Внутри скрипта содержимой страницы (например, popup.js)
    browser.runtime.sendMessage({
        "event": "requestInsertStyleToPopup"
    });

    // Внутри скрипта расширения (try_xpath_background.js)
    genericListener.listeners.requestInsertStyleToPopup = function () {
        browser.runtime.sendMessage({
            "event": "insertStyleToPopup",
            "css": popupCss
        });
    };