"""
STOCK:
=================
Сложность: 4
-----------------
Игра "STOCK" представляет собой простую экономическую симуляцию, в которой игрок пытается заработать деньги, покупая и продавая акции в течение определенного количества раундов (дней). 
Цена акций изменяется случайным образом каждый раунд. Цель игры - максимизировать прибыль к концу игры.

Правила игры:
1. Игроку дается начальная сумма денег.
2. Каждый раунд представляет собой день, в течение которого цена акции случайным образом колеблется.
3. Игрок может купить или продать акции в каждом раунде, если у него есть деньги или акции.
4. Игрок должен ввести количество акций для покупки или продажи.
5. После каждого раунда отображается текущая цена акции, количество имеющихся акций, имеющиеся деньги и общая стоимость.
6. Игра продолжается в течение заданного числа раундов.
7. Цель игры - накопить как можно больше денег к концу игры.
-----------------
Алгоритм:
1. Инициализировать переменные: количество дней, текущий день, количество денег, цену акции и количество акций.
2.  Вывести приветственное сообщение и начальное состояние.
3.  Начать цикл для каждого дня:
    3.1 Сгенерировать новую случайную цену акции.
    3.2 Вывести текущий день, цену акции, количество акций и сумму денег.
    3.3 Запросить действие игрока (купить или продать акции).
    3.4 Если игрок решил купить акции:
        3.4.1 Запросить количество акций для покупки.
        3.4.2 Проверить, достаточно ли денег для покупки. Если нет, вывести сообщение об ошибке.
        3.4.3 Если достаточно денег, уменьшить количество денег на стоимость покупки, увеличить количество акций.
    3.5 Если игрок решил продать акции:
        3.5.1 Запросить количество акций для продажи.
        3.5.2 Проверить, достаточно ли акций для продажи. Если нет, вывести сообщение об ошибке.
        3.5.3 Если достаточно акций, увеличить количество денег на стоимость продажи, уменьшить количество акций.
    3.6 Перейти к следующему дню.
4.  По окончании всех дней, вывести итоговое состояние и сообщение о завершении игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfDays = 20<br>
    currentDay = 1<br>
    money = 1000<br>
    stockPrice = random(5, 50)<br>
    numberOfStocks = 0<br>
    </b></code></p>"]
    InitializeVariables --> GameLoopStart{"Начало цикла: пока <code><b>currentDay <= numberOfDays</b></code>"}
    GameLoopStart -- Да --> UpdateStockPrice["<code><b>stockPrice = random(stockPrice * 0.9, stockPrice * 1.1)</b></code>"]
    UpdateStockPrice --> DisplayStatus["<p align='left'>Вывести состояние: 
    <code><b>
    currentDay, stockPrice,<br>
     numberOfStocks, money
    </b></code></p>"]
    DisplayStatus --> InputAction["Ввод действия: <code><b>action</b></code>"]
    InputAction --> CheckAction{"Проверка: <code><b>action == 'buy'?</b></code>"}
    CheckAction -- Да --> InputBuyStocks["Ввод количества для покупки: <code><b>stocksToBuy</b></code>"]
    InputBuyStocks --> CheckMoney{"Проверка: <code><b>money >= stocksToBuy * stockPrice?</b></code>"}
    CheckMoney -- Да --> BuyStocks["<code><b>money = money - stocksToBuy * stockPrice;<br>numberOfStocks = numberOfStocks + stocksToBuy</b></code>"]
    BuyStocks --> IncrementDay["<code><b>currentDay = currentDay + 1</b></code>"]
    IncrementDay --> GameLoopStart
    CheckMoney -- Нет --> OutputNotEnoughMoney["Вывод сообщения: <b>NOT ENOUGH MONEY</b>"]
    OutputNotEnoughMoney --> IncrementDay
    CheckAction -- Нет --> CheckSell{"Проверка: <code><b>action == 'sell'?</b></code>"}
    CheckSell -- Да --> InputSellStocks["Ввод количества для продажи: <code><b>stocksToSell</b></code>"]
     InputSellStocks --> CheckStocks{"Проверка: <code><b>numberOfStocks >= stocksToSell?</b></code>"}
    CheckStocks -- Да --> SellStocks["<code><b>money = money + stocksToSell * stockPrice;<br>numberOfStocks = numberOfStocks - stocksToSell</b></code>"]
    SellStocks --> IncrementDay
    CheckStocks -- Нет --> OutputNotEnoughStocks["Вывод сообщения: <b>NOT ENOUGH STOCKS</b>"]
    OutputNotEnoughStocks --> IncrementDay
   CheckSell -- Нет -->  IncrementDay
   GameLoopStart -- Нет --> End["Конец"]
```
**Legenda**:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: `numberOfDays` (количество дней) устанавливается в 20, `currentDay` (текущий день) устанавливается в 1, `money` (количество денег) устанавливается в 1000, `stockPrice` (цена акции) генерируется случайным образом в диапазоне от 5 до 50, а `numberOfStocks` (количество акций) устанавливается в 0.
    GameLoopStart - Начало цикла, который продолжается, пока текущий день `currentDay` меньше или равен общему количеству дней `numberOfDays`.
    UpdateStockPrice - Обновление цены акции `stockPrice` случайным образом в диапазоне от 90% до 110% от текущей цены.
    DisplayStatus - Вывод текущего состояния игры: `currentDay`, `stockPrice`, `numberOfStocks`, и `money`.
    InputAction - Запрос действия у пользователя: покупка ('buy') или продажа ('sell') акций.
    CheckAction - Проверка, выбрал ли пользователь действие "купить" ('buy').
    InputBuyStocks - Запрос у пользователя количества акций для покупки `stocksToBuy`.
    CheckMoney - Проверка, достаточно ли у пользователя денег `money` для покупки запрошенного количества акций `stocksToBuy` по текущей цене `stockPrice`.
    BuyStocks - Покупка акций: уменьшение количества денег `money` на стоимость покупки и увеличение количества акций `numberOfStocks`.
     IncrementDay - Увеличение текущего дня `currentDay` на 1.
    OutputNotEnoughMoney - Вывод сообщения об ошибке, если у пользователя недостаточно денег для покупки.
    CheckSell - Проверка, выбрал ли пользователь действие "продать" ('sell').
    InputSellStocks - Запрос у пользователя количества акций для продажи `stocksToSell`.
    CheckStocks - Проверка, достаточно ли у пользователя акций `numberOfStocks` для продажи запрошенного количества `stocksToSell`.
    SellStocks - Продажа акций: увеличение количества денег `money` на стоимость продажи и уменьшение количества акций `numberOfStocks`.
    OutputNotEnoughStocks - Вывод сообщения об ошибке, если у пользователя недостаточно акций для продажи.
    End - Конец программы.
"""
import random

# Инициализация параметров игры
numberOfDays = 20 # количество дней
currentDay = 1 # текущий день
money = 1000 # количество денег
stockPrice = random.randint(5, 50) # случайная цена акции
numberOfStocks = 0 # количество акций

# Вывод приветствия и начального состояния
print("Добро пожаловать в игру STOCK!")
print(f"Начальное состояние: День {currentDay}, Цена акции: {stockPrice}, Акций: {numberOfStocks}, Денег: {money}\n")

# Основной игровой цикл
while currentDay <= numberOfDays:
    # Изменяем цену акции случайным образом
    stockPrice = round(random.uniform(stockPrice * 0.9, stockPrice * 1.1),2)

    # Выводим текущее состояние
    print(f"День {currentDay}, Цена акции: {stockPrice}, Акций: {numberOfStocks}, Денег: {money}")

    # Запрашиваем действие пользователя
    action = input("Купить (buy) или продать (sell) акции? (или нажмите Enter для перехода к следующему дню): ").lower()
    
    # Обработка действий пользователя
    if action == 'buy':
        try:
            stocksToBuy = int(input("Сколько акций купить? "))
            if money >= stocksToBuy * stockPrice:
                money -= stocksToBuy * stockPrice
                numberOfStocks += stocksToBuy
                print("Покупка совершена")
            else:
                print("Недостаточно денег для покупки.")
        except ValueError:
             print("Некорректный ввод. Пожалуйста, введите целое число.")
    elif action == 'sell':
        try:
             stocksToSell = int(input("Сколько акций продать? "))
             if numberOfStocks >= stocksToSell:
                 money += stocksToSell * stockPrice
                 numberOfStocks -= stocksToSell
                 print("Продажа совершена")
             else:
                 print("Недостаточно акций для продажи.")
        except ValueError:
            print("Некорректный ввод. Пожалуйста, введите целое число.")
    else:
        print("Переходим к следующему дню.")

    currentDay += 1
    print("-----------------")
# Вывод итогового состояния игры
print("Игра окончена!")
print(f"Итоговое состояние: День {currentDay - 1}, Цена акции: {stockPrice}, Акций: {numberOfStocks}, Денег: {money}")

"""
Объяснение кода:

1. **Инициализация переменных**:
   - `numberOfDays`: общее количество дней игры (20).
   - `currentDay`: текущий день (начинается с 1).
   - `money`: начальная сумма денег у игрока (1000).
   - `stockPrice`: начальная цена акции, генерируется случайным образом от 5 до 50.
   - `numberOfStocks`: количество акций у игрока (начинается с 0).
2. **Вывод приветствия и начального состояния**:
   - Выводится сообщение о начале игры и текущее состояние игрока.
3. **Основной игровой цикл `while currentDay <= numberOfDays:`**:
   - Цикл продолжается до тех пор, пока не пройдут все дни.
   - **Изменение цены акции:**
     - `stockPrice = round(random.uniform(stockPrice * 0.9, stockPrice * 1.1),2)`: Цена акции изменяется случайным образом, в диапазоне от 90% до 110% от текущей цены, и округляется до 2 знаков после запятой.
   - **Вывод текущего состояния**:
     - Вывод текущего дня, цены акции, количества акций и денег.
   - **Ввод действия игрока**:
     - `action = input("Купить (buy) или продать (sell) акции? (или нажмите Enter для перехода к следующему дню): ").lower()`: Запрашивается действие у пользователя (купить, продать или пропустить день), действие приводится к нижнему регистру для удобства.
    - **Обработка действий игрока**:
        - `if action == 'buy'`:
          -  Запрашивается количество акций для покупки `stocksToBuy`.
          -  Проверяется, достаточно ли денег для покупки: `if money >= stocksToBuy * stockPrice:`.
          - Если достаточно, деньги уменьшаются, акции увеличиваются.
          - Иначе, выводится сообщение о нехватке денег.
        - `elif action == 'sell'`:
            -   Запрашивается количество акций для продажи `stocksToSell`.
            -   Проверяется, достаточно ли акций для продажи: `if numberOfStocks >= stocksToSell:`.
            -   Если достаточно, деньги увеличиваются, акции уменьшаются.
            -   Иначе, выводится сообщение о нехватке акций.
        - `else:`:
           - Если пользователь ввел что-то другое или нажал enter, игра переходит к следующему дню.
     -  **Увеличение текущего дня**:
        -  `currentDay += 1`: Текущий день увеличивается на 1.
        -   `print("-----------------")`: Выводится разделитель для визуального разделения дней.

4. **Вывод итогового состояния игры**:
   - После окончания цикла выводится сообщение о завершении игры и итоговое состояние игрока.
"""
