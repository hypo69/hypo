
"""
ACEDU:
=================
Сложность: 3
-----------------
Игра "ACEDU" представляет собой простую игру, где компьютер загадывает случайное число от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, было ли введенное число больше или меньше загаданного. Игра заканчивается, когда игрок угадывает число.

Правила игры:
1. Компьютер выбирает случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свои предположения о загаданном числе.
3. После каждой попытки компьютер сообщает, было ли введенное число слишком низким, слишком высоким или угадано.
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число.
-----------------
Алгоритм:
1.  Установить счетчик попыток в 0.
2.  Сгенерировать случайное число в диапазоне от 1 до 100.
3.  Начать цикл "пока число не угадано":
    3.1 Увеличить счетчик попыток на 1.
    3.2 Запросить у игрока ввод числа.
    3.3 Если введенное число равно загаданному числу, перейти к шагу 4.
    3.4 Если введенное число меньше загаданного числа, вывести сообщение "TOO LOW".
    3.5 Если введенное число больше загаданного числа, вывести сообщение "TOO HIGH".
4. Вывести сообщение "YOU GOT IT IN {количество попыток} GUESSES!"
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetNumber = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End
```
**Legenda:**
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: numberOfGuesses (количество попыток) устанавливается в 0, а targetNumber (загаданное число) генерируется случайным образом от 1 до 100.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода числа и сохранение его в переменной userGuess.
    CheckGuess - Проверка, равно ли введенное число userGuess загаданному числу targetNumber.
    OutputWin - Вывод сообщения о победе, если числа равны, с указанием количества попыток.
    End - Конец программы.
    CheckLow - Проверка, меньше ли введенное число userGuess загаданного числа targetNumber.
    OutputLow - Вывод сообщения "TOO LOW", если введенное число меньше загаданного.
    OutputHigh - Вывод сообщения "TOO HIGH", если введенное число больше загаданного.
"""


__author__ = 'hypo69 (hypo69@davidka.net)'

import random

# Инициализируем счетчик количества попыток.
numberOfGuesses = 0

# Генерируем случайное число от 1 до 100, которое нужно угадать.
targetNumber = random.randint(1, 100)

# Запускаем основной цикл игры, который продолжается до тех пор, пока игрок не угадает число.
while True:
    # Увеличиваем счетчик попыток на 1 при каждой итерации цикла.
    numberOfGuesses += 1
    
    # Запрашиваем у игрока ввод числа и сохраняем его в переменной userGuess.
    try:
        userGuess = int(input("Попытка №{}. Введите число от 1 до 100: ".format(numberOfGuesses)))
    except ValueError:
        # Если пользователь ввел не целое число, сообщаем об ошибке и переходим к следующей итерации цикла.
        print("Пожалуйста, введите целое число.")
        continue

    # Проверяем, угадал ли игрок число.
    if userGuess == targetNumber:
        # Если число угадано, выводим сообщение о победе с количеством попыток и выходим из цикла.
        print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")
        break
    elif userGuess < targetNumber:
        # Если введенное число меньше загаданного, выводим сообщение "TOO LOW".
        print("TOO LOW")
    else:
        # Если введенное число больше загаданного, выводим сообщение "TOO HIGH".
        print("TOO HIGH")

"""
Пояснения:
1.  **Импорт модуля `random`**:
    - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Инициализация переменных**:
    - `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses` для подсчета попыток игрока.
    - `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в `targetNumber`.
3.  **Основной цикл `while True:`**:
    - Бесконечный цикл, который продолжается до тех пор, пока игрок не угадает число (будет выполнена команда `break`).
    - `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1 при каждом новом витке цикла.
    - **Ввод данных**:
        - `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        - `userGuess = int(input("Попытка №{}. Введите число от 1 до 100: ".format(numberOfGuesses)))`: Запрашивает у пользователя число и преобразует его в целое число, сохраняя результат в `userGuess`.
    - **Условие победы**:
        - `if userGuess == targetNumber:`: Проверяет, равно ли введенное число загаданному числу.
        - `print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")`: Выводит сообщение о победе и количестве попыток.
        - `break`: Завершает цикл (игру), если число угадано.
    - **Подсказки**:
        - `elif userGuess < targetNumber:`: Проверяет, если введенное число меньше загаданного.
        - `print("TOO LOW")`: Выводит подсказку, что нужно ввести число больше.
        - `else:`: Если число не угадано и не меньше загаданного, то оно больше.
        - `print("TOO HIGH")`: Выводит подсказку, что нужно ввести число меньше.
"""