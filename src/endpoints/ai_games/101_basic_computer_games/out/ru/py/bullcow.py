
"""
BULLCOW:
=================
Сложность: 6
-----------------
Игра "Быки и Коровы" - это игра на логику и дедукцию, где один игрок (в данном случае компьютер) загадывает четырехзначное число с неповторяющимися цифрами, а второй игрок (человек) пытается угадать это число. После каждой попытки игрока компьютер сообщает, сколько "быков" (цифры угаданы и стоят на своих местах) и "коров" (цифры угаданы, но стоят не на своих местах) есть в его предположении.

Правила игры:
1.  Компьютер загадывает четырехзначное число, где все цифры различны.
2.  Игрок делает предположения, вводя четырехзначное число с неповторяющимися цифрами.
3.  Компьютер выводит количество "быков" (правильные цифры на правильных позициях) и "коров" (правильные цифры на неправильных позициях).
4.  Игра продолжается до тех пор, пока игрок не угадает все четыре цифры на правильных местах (4 "быка").
5. Игроку дается 10 попыток. Если за 10 попыток число не угадано, игра заканчивается поражением.
-----------------
Алгоритм:
1.  Сгенерировать случайное четырехзначное число с уникальными цифрами.
2.  Установить счетчик попыток в 0.
3.  Начать цикл "пока количество попыток не равно 10":
    3.1 Увеличить счетчик попыток на 1.
    3.2 Запросить у игрока ввод четырехзначного числа.
    3.3 Если введенное число имеет неповторяющиеся цифры, выполнить проверку, иначе вывести сообщение об ошибке.
    3.4 Проверить число на количество "быков" и "коров".
    3.5 Вывести количество "быков" и "коров".
    3.6 Если количество "быков" равно 4, то вывести сообщение о победе и завершить игру.
4.  Если цикл завершился, вывести сообщение о поражении и загаданное число.
5. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateTargetNumber["<p align='left'>Генерация случайного 4-значного числа <code><b>targetNumber</b></code> с уникальными цифрами</p>"]
    GenerateTargetNumber --> InitializeGuesses["<code><b>numberOfGuesses = 0</b></code>"]
    InitializeGuesses --> LoopStart{"Начало цикла: <code><b>numberOfGuesses < 10</b></code>"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["<p align='left'>Ввод пользователем 4-значного числа
    <code><b>userGuess</b></code></p>"]
    InputGuess --> ValidateInput{"<p align='left'>Проверка: <code><b>userGuess</b></code> состоит из 4 уникальных цифр?</p>"}
    ValidateInput -- Да --> CalculateBullsCows["<p align='left'>Вычисление быков (<code><b>bulls</b></code>) и коров (<code><b>cows</b></code>)
    </p>"]
    CalculateBullsCows --> OutputBullsCows["<p align='left'>Вывод: <code><b>bulls</b></code> и <code><b>cows</b></code></p>"]
    OutputBullsCows --> CheckWin{"Проверка: <code><b>bulls == 4</b></code>?"}
    CheckWin -- Да --> OutputWin["Вывод сообщения о победе"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
    ValidateInput -- Нет --> OutputError["Вывод сообщения об ошибке ввода"]
    OutputError --> LoopStart
    LoopStart -- Нет --> OutputLose["Вывод сообщения о поражении и загаданное число <code><b>targetNumber</b></code>"]
    OutputLose --> End
```

Legenda:
    Start - Начало программы.
    GenerateTargetNumber - Генерация случайного 4-значного числа с уникальными цифрами.
    InitializeGuesses - Инициализация переменной numberOfGuesses (количество попыток) значением 0.
    LoopStart - Начало цикла, который продолжается, пока количество попыток меньше 10.
    IncreaseGuesses - Увеличение счетчика количества попыток на 1.
    InputGuess - Запрос у пользователя ввода 4-значного числа с уникальными цифрами и сохранение его в переменной userGuess.
    ValidateInput - Проверка, состоит ли введенное число из 4 уникальных цифр.
    CalculateBullsCows - Вычисление количества "быков" (bulls) и "коров" (cows) на основе сравнения userGuess и targetNumber.
    OutputBullsCows - Вывод пользователю количества "быков" и "коров".
    CheckWin - Проверка, равно ли количество "быков" 4.
    OutputWin - Вывод сообщения о победе.
    End - Конец программы.
    OutputError - Вывод сообщения об ошибке, если ввод не соответствует условиям.
    OutputLose - Вывод сообщения о поражении и загаданного числа, если попытки закончились.
"""
import random

def generate_secret_number():
    """Генерирует случайное четырехзначное число с уникальными цифрами."""
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits) # Перемешиваем цифры в случайном порядке
    # Первые четыре цифры будут загаданным числом, преобразуем их в строку
    return "".join(map(str, digits[:4]))

def get_user_guess():
    """Запрашивает у пользователя четырехзначное число и проверяет ввод."""
    while True:
      user_guess = input("Введите четырехзначное число с неповторяющимися цифрами: ")
      if len(user_guess) == 4 and user_guess.isdigit() and len(set(user_guess)) == 4:
            return user_guess
      else:
            print("Некорректный ввод. Пожалуйста, введите четырехзначное число с неповторяющимися цифрами.")


def calculate_bulls_cows(secret_number, user_guess):
    """Вычисляет количество быков и коров."""
    bulls = 0 # Инициализируем счетчик быков
    cows = 0  # Инициализируем счетчик коров
    for i, digit in enumerate(user_guess): # Цикл для перебора цифр в предположении пользователя
        if digit == secret_number[i]: # Проверка на совпадение цифры и позиции в загаданном числе
            bulls += 1 # Увеличиваем счетчик быков
        elif digit in secret_number: # Проверка на совпадение цифры в загаданном числе
             cows += 1 # Увеличиваем счетчик коров
    return bulls, cows # Возвращаем количество быков и коров

# Генерируем секретное число
targetNumber = generate_secret_number()
# Инициализируем счетчик попыток
numberOfGuesses = 0
# Основной игровой цикл
while numberOfGuesses < 10:
    numberOfGuesses += 1
    # Получаем предположение пользователя
    userGuess = get_user_guess()
    # Вычисляем количество быков и коров
    bulls, cows = calculate_bulls_cows(targetNumber, userGuess)
    print(f"Быки: {bulls}, Коровы: {cows}")
    # Проверяем, угадано ли число
    if bulls == 4:
        print(f"Поздравляю! Вы угадали число {targetNumber} за {numberOfGuesses} попыток!")
        break
# Если попытки закончились, выводим сообщение о проигрыше
if numberOfGuesses == 10:
    print(f"Вы проиграли! Загаданное число было {targetNumber}")
"""
Пояснения:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2. **Функция `generate_secret_number()`**:
   - `digits = list(range(10))`: Создает список цифр от 0 до 9.
   - `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
   - `return "".join(map(str, digits[:4]))`: Возвращает строку, состоящую из первых четырех цифр перемешанного списка.
3. **Функция `get_user_guess()`**:
   - Бесконечный цикл `while True:`: Позволяет запрашивать ввод до тех пор, пока он не будет корректным.
   - `user_guess = input("Введите четырехзначное число с неповторяющимися цифрами: ")`: Выводит запрос на ввод числа.
   - `if len(user_guess) == 4 and user_guess.isdigit() and len(set(user_guess)) == 4:`: Проверяет, является ли ввод числом, состоит ли он из 4 символов, и уникальны ли его цифры.
    - `return user_guess`: Возвращает корректный ввод.
    - `else: print("Некорректный ввод. Пожалуйста, введите четырехзначное число с неповторяющимися цифрами.")`: Выводит сообщение об ошибке, если ввод некорректный.
4. **Функция `calculate_bulls_cows(secret_number, user_guess)`**:
    - `bulls = 0`: Инициализирует счетчик быков.
    - `cows = 0`: Инициализирует счетчик коров.
    - `for i, digit in enumerate(user_guess)`: Перебирает все цифры в введенном числе и их индексы.
        - `if digit == secret_number[i]`: Сравнивает цифру по индексу с загаданным числом и если цифры на одной позиции совпадают, то количество быков увеличивается на 1.
        - `elif digit in secret_number`: Проверяет, содержится ли цифра из ввода пользователя в загаданном числе.
             - `cows += 1`: Увеличивает счетчик коров.
    - `return bulls, cows`: Возвращает количество быков и коров.
5. **Основной блок кода**:
    - `targetNumber = generate_secret_number()`: Генерирует секретное число.
    - `numberOfGuesses = 0`: Инициализирует счетчик попыток.
    - `while numberOfGuesses < 10`: Основной цикл игры с ограничением в 10 попыток.
      - `numberOfGuesses += 1`: Увеличивает счетчик попыток.
      - `userGuess = get_user_guess()`: Запрашивает ввод пользователя.
      - `bulls, cows = calculate_bulls_cows(targetNumber, userGuess)`: Вычисляет количество быков и коров.
      - `print(f"Быки: {bulls}, Коровы: {cows}")`: Выводит результаты.
      - `if bulls == 4`: Проверяет условие победы.
        - Выводит сообщение о победе и завершает цикл `break`.
        - `if numberOfGuesses == 10`: Проверяет, были ли исчерпаны все попытки.
        - Выводит сообщение о проигрыше и загаданное число.
"""
```