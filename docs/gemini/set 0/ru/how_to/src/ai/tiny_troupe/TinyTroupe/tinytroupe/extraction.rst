Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит классы для извлечения и сокращения данных из элементов TinyTroupe (например, агентов и миров).  Классы позволяют структурировать данные, полученные из симуляций, например, извлечь ключевые моменты из истории взаимодействий агента, сгенерировать синтетические данные или преобразовать данные в более читаемый формат (например, JSON или CSV). Модуль также предоставляет механизм для сокращения извлечённых данных и экспорта артефактов из элементов TinyTroupe.  Код использует OpenAI API для обработки запросов на извлечение данных.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек**: Код импортирует необходимые модули, такие как `os`, `json`, `chevron`, `logging`, `pandas`, `pypandoc`, `markdown`, `typing`, `openai_utils`, `utils` и другие.

2. **Создание класса `ResultsExtractor`**: Этот класс содержит методы для извлечения результатов из агентов и миров.
    - `__init__`: Инициализирует класс, устанавливает путь к шаблону запроса и инициализирует словари для кэширования результатов извлечения.
    - `extract_results_from_agent`: Извлекает результаты из объекта `TinyPerson`.  Запрашивает у OpenAI ключевые моменты из истории взаимодействий агента, учитывая цель извлечения, ситуацию и опциональные параметры.
    - `extract_results_from_world`: Аналогично `extract_results_from_agent`, но извлекает результаты из объекта `TinyWorld`.
    - `save_as_json`: Сохраняет результаты извлечения в файл в формате JSON.

3. **Создание класса `ResultsReducer`**: Этот класс предоставляет методы для сокращения данных, полученных из `ResultsExtractor`.
    - `add_reduction_rule`: Добавляет правило сокращения для определённого типа события.
    - `reduce_agent`: Сокращает данные о взаимодействиях агента на основе заданных правил.
    - `reduce_agent_to_dataframe`: Преобразует результат сокращения в DataFrame Pandas.

4. **Создание класса `ArtifactExporter`**: Этот класс отвечает за экспорт артефактов из элементов TinyTroupe (например, для создания синтетических файлов данных из симуляций).
    - `export`: Экспортирует данные артефакта в указанный файл в различных форматах (txt, json, docx). Поддерживает дедент строки, очистку имени артефакта и сохраняет данные в указанную папку.
    - `_export_as_txt`, `_export_as_json`, `_export_as_docx`: Вспомогательные методы для экспорта данных в разные форматы.

5. **Создание класса `Normalizer`**:  Этот класс предназначен для нормализации текстовых элементов, например, абзацев или концепций.
    - `__init__`: Инициализирует список элементов для нормализации, число элементов и флагом verbose для вывода debug сообщений.  Запрашивает у OpenAI нормализованные значения для входных элементов.
    - `normalize`: Нормализует входные элементы (строку или список строк). Использует кеширование для улучшения производительности.

6. **Определение `default_extractor`**: Указывает `ResultsExtractor` по умолчанию.


Пример использования
-------------------------
.. code-block:: python

    from tinytroupe.extraction import ResultsExtractor, ArtifactExporter
    from tinytroupe.agent import TinyPerson

    # Предполагается, что у вас есть инициализированный объект TinyPerson
    agent = TinyPerson(...)

    # Создание экземпляра ResultsExtractor
    extractor = ResultsExtractor()

    # Извлечение результатов из агента
    results = extractor.extract_results_from_agent(agent, extraction_objective="Главные моменты взаимодействия", situation="Обычная ситуация")

    # Сохранение результатов в JSON
    exporter = ArtifactExporter(base_output_folder="./output")
    exporter.export("agent_results", results, content_type="agent_interactions", target_format="json", verbose=True)