Инструкции по генерации документации для Python-кода
========================================================================================

Описание
-------------------------
Данные инструкции описывают, как генерировать документацию в формате reStructuredText (RST) для Python-кода. Документация будет пригодна для дальнейшей компиляции с помощью Sphinx.  Инструкции охватывают структуру документации, правила оформления, использование директив Sphinx для автоматической генерации документации к функциям и классам, а также создание дерева оглавления (TOC).

Шаги выполнения
-------------------------
1. **Анализ входного файла:** Проанализируйте предоставленный Python-файл. Обратите внимание на структуру кода (классы, функции, переменные).
2. **Создание заголовка файла:** Напишите заголовок RST файла. Заголовок должен быть заголовком первого уровня (`=`) и отражать название модуля, содержащего Python-код.  Пример: `Название модуля`.
3. **Описание содержимого:** Добавьте краткое описание содержимого модуля под заголовком.  Опишите, что делает данный модуль.
4. **Документирование классов и функций:** В файлах Python, для каждого класса и функции используйте docstrings с указанием аргументов, возвращаемых значений и возможных исключений.  Придерживайтесь строгого формата docstrings, указанного в инструкции.
5. **Директивы Sphinx для классов и функций:** Добавьте директивы Sphinx (`.. automodule::`, `.. autofunction::`) для автоматической генерации документации к классам и функциям.  Используйте директивы, обеспечивающие вывод списка всех функций модуля, их документацию и наследование. Например:
   ```rst
   .. automodule:: module_name
       :members:
       :undoc-members:
       :show-inheritance:
   ```
6. **Форматирование заголовков:** Используйте заголовки разного уровня (`=`, `-`, `~`, `^`) для организации документации, соответствующей структуре кода.
7. **Включение разделов (TOC):**  В файле `index.rst` используйте директиву `.. toctree::` для создания дерева оглавления, которое будет содержать ссылки на все описания модулей.
8. **Создание примеров (опционально):** При необходимости добавьте примеры использования функций и классов в формате `.. code-block:: python`.
9. **Соответствие правилам:** Придерживайтесь заданных в инструкции правил оформления документации (формат docstrings, использование директивы `ex` вместо `e`, формат заголовков).


Пример использования
-------------------------
.. code-block:: rst

    Название модуля
    ==============

    .. automodule:: module_name
        :members:
        :undoc-members:
        :show-inheritance:

    Функции
    --------

    .. autofunction:: module_name.функция_1
    ```