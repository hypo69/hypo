Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот JavaScript-код отвечает за отображение результатов поиска, полученных с помощью расширения tryxpath. Он получает данные (results) из другого источника (предположительно, из браузера) и заполняет элементы HTML на странице с результатами поиска.  Код обрабатывает результаты поиска, включая контекстную информацию и основные результаты, а также добавляет возможность скачивания информации в текстовом формате.

Шаги выполнения
-------------------------
1. **Получение результатов (results):**  Код ожидает загрузки результатов из другого источника (подразумевается, что это происходит через `browser.runtime.sendMessage`).  Данные передаются в виде объекта `results`.
2. **Обработка результатов (results):**
   - **Заполнение элементов HTML:**  Функция `showAllResults` заполняет элементы HTML (например, "message", "title", "url") данными из объекта `results`.
   - **Обработка контекстных данных (results.context):** Если в `results` есть свойство `context`, код заполняет элементы, относящиеся к контексту поиска. Если свойство `context` отсутствует, удаляет соответствующую область.
   - **Обработка основных результатов (results.main):** Заполняет элементы, относящиеся к основным результатам поиска.
   - **Обновление таблицы деталей:**  Функция `fu.updateDetailsTable` используется для обновления таблиц с деталями контекста (`context-detail`) и основных результатов (`main-details`).  Она принимает данные о деталях и заголовках из `results`.
3. **Создание URL для скачивания:**  Функция `makeTextDownloadUrl` генерирует URL для скачивания текстовых файлов с информацией о результатах (в разных форматах).
4. **Функции `makeInfoText` и `makeConvertedInfoText`:**  Генерируют текстовые строки для скачиваемых файлов, добавляя форматирование для лучшего восприятия информации.  Отличие этих функций в обработке некоторых полей, например, представление значений в JSON.
5. **Обработка событий нажатия:**
   - **Клик на кнопке в context-detail:**  При нажатии на кнопку в таблице контекста, отправляет сообщение в активную вкладку (с помощью `browser.tabs.sendMessage`) для фокусировки на выбранном элементе контекста.
   - **Клик на кнопке в main-details:**  При нажатии на кнопку в таблице основных результатов, отправляет сообщение в активную вкладку для фокусировки на выбранном элементе.
6. **Назначение обработчиков событий:** При загрузке страницы устанавливаются обработчики событий `load` для обработки ответов и `click` для реагирования на нажатия кнопок в таблицах.

Пример использования
-------------------------
.. code-block:: javascript
    
    // Предполагается, что tryxpath - это объект, содержащий функции, необходимые для работы
    // Данный пример показывает как использовать showAllResults.  
    // Предполагается, что результаты поиска получены из другого источника.

    let results = {
        "message": "Поиск выполнен",
        "title": "Результаты поиска",
        "href": "https://example.com",
        "frameId": 123,
        "context": {
            "method": "xpath",
            "expression": "//div[@class='result']",
            "specifiedResultType": "text",
            "resultType": "text",
            "resolver": "default",
            "itemDetail": [{"type": "div", "name": "result", "value": "some value", "textContent": "some text"}]
        },
        "main": {
            "method": "xpath",
            "expression": "//div[@class='result']",
            "specifiedResultType": "text",
            "resultType": "text",
            "resolver": "default",
            "itemDetails": []
        }
    };

    showAllResults(results);