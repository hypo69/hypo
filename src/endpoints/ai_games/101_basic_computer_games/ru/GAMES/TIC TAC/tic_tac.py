```
TIC TAC:
=================
Сложность: 4
-----------------
Игра "Крестики-нолики" - это классическая игра для двух игроков, где каждый игрок по очереди ставит свой символ (X или O) на поле 3x3. Цель игры - первым собрать три своих символа в ряд по горизонтали, вертикали или диагонали.

Правила игры:
1. Игра происходит на поле 3x3, представленном в виде нумерованной сетки.
2. Игрок 1 (компьютер) играет за 'X', игрок 2 (человек) играет за 'O'.
3. Игроки по очереди вводят номер клетки, в которую хотят поставить свой символ.
4. Если клетка уже занята, то ход повторяется до тех пор пока не будет выбрана свободная клетка.
5. Игрок, первым собравший три своих символа в ряд (горизонтально, вертикально или диагонально), выигрывает.
6. Если все клетки заполнены, и ни один из игроков не собрал три в ряд, то игра заканчивается вничью.
-----------------
Алгоритм:
1.  Инициализировать игровое поле как список из 10 элементов, где первые 9 элементов представляют клетки на поле, а 0 не используется. Все элементы инициализировать пробелами.
2.  Начать цикл пока не будет объявлен победитель или не будет ничья.
3.  Вывести текущее состояние игрового поля.
4.  Запросить у игрока (человека) ввод номера клетки, куда он хочет поставить 'O'.
5.  Проверить, является ли ввод игрока допустимым (число от 1 до 9 и клетка свободна).
6.  Поставить 'O' на выбранную клетку.
7.  Проверить, выиграл ли игрок (человек). Если выиграл, вывести сообщение о победе и закончить игру.
8.  Проверить, не является ли игра ничьей. Если ничья, вывести сообщение о ничьей и закончить игру.
9.  Найти первую свободную клетку на игровом поле.
10. Поставить 'X' на первую свободную клетку.
11. Проверить, выиграл ли компьютер. Если выиграл, вывести сообщение о победе и закончить игру.
12. Проверить, не является ли игра ничьей. Если ничья, вывести сообщение о ничьей и закончить игру.
13. Если победитель или ничья не определены, повторить шаги с 3 по 12.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeBoard["Инициализация игрового поля: <code><b>board = [' '] * 10</b></code>"]
    InitializeBoard --> GameLoopStart{"Начало цикла игры"}
    GameLoopStart --> DisplayBoard["Вывод игрового поля"]
    DisplayBoard --> PlayerInput{"Запрос ввода хода игрока (O): <code><b>cellNumber</b></code>"}
    PlayerInput --> ValidateInput{"Проверка ввода: <code><b>cellNumber</b></code> в диапазоне 1-9 и клетка свободна?"}
    ValidateInput -- Да --> PlacePlayerMove["Разместить 'O' в клетке <code><b>cellNumber</b></code>"]
    PlacePlayerMove --> CheckPlayerWin{"Проверка победы игрока?"}
    CheckPlayerWin -- Да --> OutputPlayerWin["Вывод сообщения: <b>Игрок (O) выиграл!</b>"]
    OutputPlayerWin --> End["Конец игры"]
    CheckPlayerWin -- Нет --> CheckDraw{"Проверка ничьи?"}
    CheckDraw -- Да --> OutputDraw["Вывод сообщения: <b>Ничья!</b>"]
    OutputDraw --> End
    CheckDraw -- Нет --> FindComputerMove["Найти первую свободную клетку"]
    FindComputerMove --> PlaceComputerMove["Разместить 'X' в найденной свободной клетке"]
    PlaceComputerMove --> CheckComputerWin{"Проверка победы компьютера?"}
    CheckComputerWin -- Да --> OutputComputerWin["Вывод сообщения: <b>Компьютер (X) выиграл!</b>"]
    OutputComputerWin --> End
    CheckComputerWin -- Нет --> CheckDraw2{"Проверка ничьи?"}
    CheckDraw2 -- Да --> OutputDraw2["Вывод сообщения: <b>Ничья!</b>"]
     OutputDraw2 --> End
    CheckDraw2 -- Нет --> GameLoopStart
    ValidateInput -- Нет --> PlayerInput
    GameLoopStart -- Нет --> End


```
Legenda:
    Start - Начало программы.
    InitializeBoard - Инициализация игрового поля board.
    GameLoopStart - Начало основного цикла игры.
    DisplayBoard - Вывод текущего состояния игрового поля.
    PlayerInput - Запрос у игрока ввода номера клетки для хода.
    ValidateInput - Проверка корректности ввода номера клетки.
    PlacePlayerMove - Размещение хода игрока (O) на доске.
    CheckPlayerWin - Проверка, выиграл ли игрок (O).
    OutputPlayerWin - Вывод сообщения о победе игрока.
    CheckDraw - Проверка, является ли текущее состояние доски ничьей.
    OutputDraw - Вывод сообщения о ничьей.
    FindComputerMove - Поиск первой свободной клетки для хода компьютера.
    PlaceComputerMove - Размещение хода компьютера (X) на доске.
    CheckComputerWin - Проверка, выиграл ли компьютер (X).
    OutputComputerWin - Вывод сообщения о победе компьютера.
    CheckDraw2 - Проверка ничьей после хода компьютера.
    OutputDraw2 - Вывод сообщения о ничьей.
    End - Конец программы.
"""



# Функция для вывода игрового поля
def print_board(board):
    """
    Выводит текущее состояние игрового поля.

    Args:
        board: Список, представляющий игровое поле.
    """
    print("\n   " + board[1] + " | " + board[2] + " | " + board[3])
    print("  ---+---+---")
    print("   " + board[4] + " | " + board[5] + " | " + board[6])
    print("  ---+---+---")
    print("   " + board[7] + " | " + board[8] + " | " + board[9] + "\n")


# Функция для проверки победы
def check_win(board, player):
    """
    Проверяет, есть ли выигрышная комбинация для данного игрока.

    Args:
        board: Список, представляющий игровое поле.
        player: Символ игрока ('X' или 'O').

    Returns:
        True, если игрок выиграл, иначе False.
    """
    # Все возможные выигрышные комбинации
    winning_combinations = [
        [1, 2, 3], [4, 5, 6], [7, 8, 9],  # Горизонтальные
        [1, 4, 7], [2, 5, 8], [3, 6, 9],  # Вертикальные
        [1, 5, 9], [3, 5, 7]  # Диагональные
    ]
    # Проходим по каждой комбинации и проверяем, соответствует ли она символам игрока
    for combination in winning_combinations:
        if (board[combination[0]] == board[combination[1]] ==
                board[combination[2]] == player):
            return True
    return False


# Функция для проверки ничьи
def check_draw(board):
    """
    Проверяет, является ли текущая игра ничьей.

    Args:
        board: Список, представляющий игровое поле.

    Returns:
        True, если ничья, иначе False.
    """
    # Если все клетки заполнены и нет победителя, то игра заканчивается ничьей
    return ' ' not in board[1:]


def play_tic_tac_toe():
    """
    Основная функция для запуска игры "Крестики-нолики".
    """
    # Инициализируем игровое поле
    board = [' '] * 10  # 0 индекс не используется
    # Основной игровой цикл
    while True:
        # Выводим игровое поле
        print_board(board)

        # Ход игрока (человека)
        while True:
            try:
                cellNumber = int(input("Введите номер клетки (1-9) для 'O': "))
                # Проверяем ввод на корректность
                if 1 <= cellNumber <= 9 and board[cellNumber] == ' ':
                    board[cellNumber] = 'O'
                    break
                else:
                    print("Неверный ввод. Пожалуйста, введите номер свободной клетки от 1 до 9.")
            except ValueError:
                print("Неверный ввод. Пожалуйста, введите целое число от 1 до 9.")
        # Проверяем, выиграл ли игрок
        if check_win(board, 'O'):
            print_board(board)
            print("Вы выиграли! Поздравляю!")
            break

        # Проверяем, не ничья ли
        if check_draw(board):
            print_board(board)
            print("Ничья!")
            break

        # Ход компьютера
        # Ищем первую свободную клетку
        for i in range(1, 10):
            if board[i] == ' ':
                board[i] = 'X'
                break

        # Проверяем, выиграл ли компьютер
        if check_win(board, 'X'):
            print_board(board)
            print("Компьютер выиграл!")
            break
        # Проверяем, не ничья ли
        if check_draw(board):
            print_board(board)
            print("Ничья!")
            break


# Запуск игры
if __name__ == "__main__":
    play_tic_tac_toe()


"""
Объяснение кода:
1.  **Функция `print_board(board)`**:
    -   Принимает список `board`, представляющий игровое поле.
    -   Выводит текущее состояние поля в консоль, разделяя клетки линиями для наглядности.
2.  **Функция `check_win(board, player)`**:
    -   Принимает `board` и символ `player` ('X' или 'O').
    -   Содержит список `winning_combinations`, описывающий все возможные выигрышные комбинации.
    -   Проверяет каждую комбинацию на наличие трех символов игрока.
    -   Возвращает `True`, если есть выигрышная комбинация для данного игрока, иначе `False`.
3.  **Функция `check_draw(board)`**:
    -   Принимает список `board`.
    -   Проверяет, есть ли свободные клетки на игровом поле.
    -   Возвращает `True`, если все клетки заполнены (ничья), иначе `False`.
4.  **Функция `play_tic_tac_toe()`**:
    -   Инициализирует `board` как список из 10 элементов, где первые 9 представляют клетки, а 0 не используется.
    -   Основной цикл `while True:` продолжается до тех пор, пока не будет объявлен победитель или не будет ничья.
    -   Выводит текущее состояние доски с помощью `print_board(board)`.
    -   **Ход игрока**:
        -   Внутренний цикл `while True:` обеспечивает повторный ввод, пока не будет введен корректный ход.
        -   Запрашивает ввод номера клетки у игрока и проверяет его корректность (число от 1 до 9 и клетка свободна).
        -   Устанавливает символ 'O' в выбранную клетку.
        -   Выходит из внутреннего цикла, если ввод корректен.
    -   **Проверка победы игрока**:
        -   Вызывает функцию `check_win` для проверки победы игрока.
        -   Выводит сообщение о победе и заканчивает игру, если игрок выиграл.
    -   **Проверка ничьей**:
        -   Вызывает `check_draw`, чтобы проверить, не ничья ли игра.
        -   Выводит сообщение о ничьей и заканчивает игру, если ничья.
    -   **Ход компьютера**:
        -   Ищет первую свободную клетку в списке `board`.
        -   Устанавливает символ 'X' в найденную свободную клетку.
    -   **Проверка победы компьютера**:
        -   Вызывает `check_win`, чтобы проверить победу компьютера.
        -   Выводит сообщение о победе и заканчивает игру, если компьютер выиграл.
    -   **Проверка ничьей после хода компьютера**:
        -   Вызывает `check_draw` для проверки ничьи после хода компьютера.
        -   Выводит сообщение о ничьей, если игра завершилась вничью.

5.  **Запуск игры**:
    -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_tic_tac_toe()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    - `play_tic_tac_toe()`: Вызывает функцию для начала игры.
"""
