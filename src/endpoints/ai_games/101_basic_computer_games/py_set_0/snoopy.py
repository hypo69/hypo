"""
<SNOOPY>:
=================
Сложность: 2
-----------------
SNOOPY - это игра-угадайка, где компьютер выбирает случайное число от 1 до 100, а игрок пытается его угадать. 
Компьютер подсказывает, было ли число игрока больше или меньше загаданного. 
Игра заканчивается, когда игрок угадывает число, после чего ему сообщается количество попыток.
-----------------
Правила игры:
1. Компьютер выбирает случайное целое число в диапазоне от 1 до 100.
2. Игрок вводит свое предположение.
3. Компьютер сообщает, больше или меньше загаданное число, чем предположение игрока.
4. Игра продолжается, пока игрок не угадает число.
5. После угадывания числа, игра выводит количество попыток.
-----------------
Алгоритм:
1. Инициализация:
   - Загадывается случайное число в диапазоне от 1 до 100.
   - Количество попыток устанавливается в 0.
2. Цикл угадывания:
   - Увеличить количество попыток на 1.
   - Запросить ввод числа у пользователя.
   - Если число пользователя меньше загаданного, вывести "TOO LOW, TRY AGAIN".
   - Если число пользователя больше загаданного, вывести "TOO HIGH, TRY AGAIN".
   - Если число пользователя равно загаданному, перейти к шагу 3.
3. Вывод результата:
   - Вывести сообщение "YOU GOT IT IN " и количество попыток.
4. Конец игры.
-----------------
Блок-схема:
```mermaid
  flowchart TD
    Start --> GenerateSecretNumber
    GenerateSecretNumber --> InitializeAttempts
    InitializeAttempts --> GuessLoop
    GuessLoop --> IncrementAttempts
    IncrementAttempts --> InputGuess
    InputGuess --> CheckGuess
    CheckGuess -- Guess < Secret --> TooLow
    CheckGuess -- Guess > Secret --> TooHigh
    CheckGuess -- Guess = Secret --> OutputResult
    TooLow --> GuessLoop
    TooHigh --> GuessLoop
    OutputResult --> End
    
    subgraph " "
    Start[Start]
    GenerateSecretNumber[Сгенерировать случайное число (1-100)]
    InitializeAttempts[Кол-во попыток = 0]
    GuessLoop[Цикл угадывания]
    IncrementAttempts[Увеличить кол-во попыток на 1]
    InputGuess[Запросить число у пользователя]
    CheckGuess[Проверить число пользователя]
    TooLow[Вывести "TOO LOW, TRY AGAIN"]
    TooHigh[Вывести "TOO HIGH, TRY AGAIN"]
    OutputResult[Вывести "YOU GOT IT IN" и кол-во попыток]
    End[Конец]
    end
```
"""
import random

def play_snoopy():
    """
    Игра SNOOPY - угадай число.
    """
    # Генерируем случайное число от 1 до 100 (включительно)
    secret_number = random.randint(1, 100)
    # Инициализируем счетчик попыток
    attempts = 0
    
    # Начинаем цикл угадывания
    while True:
        # Увеличиваем количество попыток на 1
        attempts += 1
        # Запрашиваем ввод числа у пользователя
        try:
             guess = int(input("Угадайте число от 1 до 100: "))
        except ValueError:
           print("Пожалуйста, введите целое число.")
           continue
        # Проверяем, угадал ли пользователь число
        if guess < secret_number:
            print("TOO LOW, TRY AGAIN") # Если число пользователя меньше загаданного, выводим сообщение
        elif guess > secret_number:
            print("TOO HIGH, TRY AGAIN")# Если число пользователя больше загаданного, выводим сообщение
        else:
            # Если пользователь угадал число, выводим сообщение об успехе и количестве попыток
            print(f"YOU GOT IT IN {attempts} TRIES")
            # Завершаем игру
            break

# Запускаем игру
if __name__ == "__main__":
    play_snoopy()

"""
Пояснения:

1. `import random`: Импортирует модуль `random` для генерации случайных чисел.
2. `def play_snoopy():`: Определяет функцию `play_snoopy`, которая содержит всю логику игры.
3. `secret_number = random.randint(1, 100)`: Генерирует случайное целое число от 1 до 100 и сохраняет его в переменной `secret_number`. Это число, которое игрок должен угадать.
4. `attempts = 0`: Инициализирует переменную `attempts` нулем. Эта переменная будет отслеживать количество попыток, сделанных игроком.
5. `while True:`: Начинает бесконечный цикл. Цикл будет продолжаться до тех пор, пока игрок не угадает число.
6. `attempts += 1`: Увеличивает количество попыток на 1 каждый раз, когда игрок делает предположение.
7. `try...except ValueError`: Обрабатывает ошибку, если пользователь введет не целое число.
8. `guess = int(input("Угадайте число от 1 до 100: "))`: Запрашивает у пользователя ввод числа и преобразует ввод в целое число. Сохраняет результат в переменной `guess`.
9. `if guess < secret_number:`: Проверяет, меньше ли число, введенное пользователем, чем загаданное число. Если да, то выводит сообщение "TOO LOW, TRY AGAIN".
10. `elif guess > secret_number:`: Проверяет, больше ли число, введенное пользователем, чем загаданное число. Если да, то выводит сообщение "TOO HIGH, TRY AGAIN".
11. `else:`: Выполняется, если число, введенное пользователем, равно загаданному числу.
12. `print(f"YOU GOT IT IN {attempts} TRIES")`: Выводит сообщение о том, что игрок угадал число, и количество попыток, которое ему потребовалось.
13. `break`: Завершает цикл `while`, так как игра окончена.
14. `if __name__ == "__main__":`: Гарантирует, что код `play_snoopy()` будет выполнен только при запуске этого скрипта, а не при импорте как модуля.
15. `play_snoopy()`: Вызывает функцию `play_snoopy`, чтобы начать игру.

licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```