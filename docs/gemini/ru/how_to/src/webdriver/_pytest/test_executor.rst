Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит тесты для класса `ExecuteLocator`, который отвечает за взаимодействие с веб-элементами. Тесты проверяют различные сценарии, такие как получение элемента по локатору, получение атрибута элемента, отправку сообщения элементу и другие.  Код использует `pytest` для запуска тестов и `unittest.mock` для создания фиктивных объектов, таких как веб-драйвер.  Тесты проверяют корректное взаимодействие с веб-элементами и обработку исключений.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует необходимые модули, включая `pytest`, `unittest.mock`, `selenium`, `ExecuteLocator`, и классы исключений.

2. **Создание фикстур:** Фикстура `driver_mock` создает фиктивный объект веб-драйвера. Фикстура `execute_locator` создает экземпляр класса `ExecuteLocator`, используя фиктивный веб-драйвер.

3. **Определение тестов:** Тесты проверяют различные методы класса `ExecuteLocator`:
    - `test_get_webelement_by_locator_single_element`: Проверяет получение одного элемента по локатору.
    - `test_get_webelement_by_locator_multiple_elements`: Проверяет получение нескольких элементов по локатору.
    - `test_get_webelement_by_locator_no_element`: Проверяет, что метод возвращает `False`, если элемент не найден.
    - `test_get_attribute_by_locator`: Проверяет получение атрибута элемента по локатору.
    - `test_send_message`: Проверяет отправку сообщения элементу.
    - `test_send_message_typing_speed`: Проверяет отправку сообщения элементу с задержкой.

4. **Мокинг методов:** Используются `MagicMock` для мокирования методов `find_elements`, `get_attribute`, и `send_keys` веб-драйвера и элемента.

5. **Проверка ожидаемых результатов:** В каждом тесте проверяются вызовы методов `find_elements`, `get_attribute`, и `send_keys`, а также возвращаемые значения.

Пример использования
-------------------------
.. code-block:: python

    # Предполагая, что ExecuteLocator и необходимые фикстуры уже импортированы
    import pytest
    from unittest.mock import MagicMock
    from selenium.webdriver.common.by import By
    from src.webdriver.executor import ExecuteLocator

    # Создание фиктивного объекта веб-драйвера
    driver_mock = MagicMock()

    # Создание объекта ExecuteLocator с фиктивным веб-драйвером
    execute_locator = ExecuteLocator(driver_mock)

    # Пример использования метода get_webelement_by_locator
    locator = {
        "by": "XPATH",
        "selector": "//div[@id='test']"
    }
    result = execute_locator.get_webelement_by_locator(locator)
    
    # Проверка результата (в реальном коде нужно проверять на ожидаемый результат)
    assert result is not False  # Или проверка на конкретный элемент, если ожидается один элемент