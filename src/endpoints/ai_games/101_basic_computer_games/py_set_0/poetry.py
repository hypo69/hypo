"""
<POETRY>:
=================
Сложность: 2
-----------------
Это игра, в которой пользователь вводит строку слов, а программа случайным образом выбирает одно из них.
Правила игры: Пользователь вводит слова, разделенные пробелами. После ввода программа выводит случайно выбранное слово из введенного списка.
-----------------
Алгоритм:
1. Запросить у пользователя ввод строки слов, разделенных пробелами.
2. Разделить введенную строку на отдельные слова, используя пробел в качестве разделителя.
3. Сгенерировать случайное целое число в диапазоне от 1 до количества слов в списке.
4. Вывести слово из списка, соответствующее сгенерированному случайному числу (индекс в списке будет на 1 меньше).
-----------------
Блок-схема: 
```mermaid
graph TD
    Start(Начало) --> Input(Ввод строки слов);
    Input --> Split(Разделить строку на слова);
    Split --> GenerateRandom(Сгенерировать случайное число);
    GenerateRandom --> GetWord(Выбрать слово по индексу);
    GetWord --> Output(Вывод выбранного слова);
    Output --> End(Конец);
```
"""
import random

def poetry_game():
    """
    Игра в поэзию: выбирает случайное слово из введенной пользователем строки.
    """
    # 1. Запрашиваем у пользователя строку слов, разделенных пробелами.
    input_string = input("Введите несколько слов, разделенных пробелами: ")

    # 2. Разделяем строку на отдельные слова, используя пробел в качестве разделителя.
    words_list = input_string.split()

    # Проверка, что введен хотя бы одно слово.
    if not words_list:
        print("Вы не ввели ни одного слова.")
        return

    # 3. Генерируем случайное целое число в диапазоне от 1 до количества слов в списке.
    # random.randint() возвращает случайное целое число включая оба конца диапазона.
    # Для списка слов, у которого индексация начинается с 0 , нужно привести это к диапазону индексов.
    # Длина списка это количество элементов в нём.
    random_index = random.randint(0, len(words_list) - 1)
    
    # 4. Выводим слово из списка, соответствующее сгенерированному случайному числу.
    selected_word = words_list[random_index]
    print("Случайное слово:", selected_word)

# Запуск игры
if __name__ == "__main__":
    poetry_game()
"""
Пояснения:
1.  `import random`: Импортирует модуль `random` для генерации случайных чисел.
2.  `poetry_game()`: Функция, реализующая логику игры.
3.  `input_string = input(...)`: Запрашивает у пользователя ввод строки слов и сохраняет в переменной `input_string`.
4.  `words_list = input_string.split()`: Разделяет строку на список слов, используя пробел как разделитель. Результат сохраняется в `words_list`.
5. `if not words_list:`: Проверка, что пользователь ввёл хотя бы одно слово. Если список пустой выводится сообщение и функция завершается.
6.  `random_index = random.randint(0, len(words_list) - 1)`: Генерирует случайное целое число, представляющее индекс случайного слова из списка. `random.randint` генерирует целое число в указанном диапазоне включительно.
7.  `selected_word = words_list[random_index]`: Выбирает слово из списка по случайному индексу и сохраняет его в `selected_word`.
8.  `print("Случайное слово:", selected_word)`: Выводит выбранное случайное слово.
9.  `if __name__ == "__main__":`: Защита от запуска кода при импорте модуля. Код в блоке запустится только если файл исполняется напрямую.
10. `poetry_game()`: Вызов функции для запуска игры.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```