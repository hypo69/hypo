Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет функцию `set_project_root`, которая находит корневую директорию проекта.  Функция ищет директории, содержащие определённые маркерные файлы (pyproject.toml, requirements.txt, .git), начиная с текущей директории. Если такие файлы найдены, функция возвращает путь к родительской директории.  В противном случае возвращает текущую директорию.  Далее, код загружает настройки из файла settings.json и документацию из README.MD, если они существуют.  Если файлы не найдены или содержат недопустимые данные, соответствующие переменные получают значения по умолчанию.  Наконец, код сохраняет найденную корневую директорию в переменной `__root__` и добавляет её в `sys.path`.  Этот код необходим для правильного импорта модулей из других папок проекта.


Шаги выполнения
-------------------------
1. **Определение функции `set_project_root`**: Код определяет функцию, которая принимает кортеж `marker_files` с именами файлов, которые будут использованы для поиска корневой директории проекта.

2. **Инициализация переменных**: Код инициализирует переменную `current_path` с путем к текущему файлу и `__root__` с текущей директорией.

3. **Поиск корневой директории**: Код итерируется по родительским директориям `current_path` и проверяет наличие маркерных файлов в каждой директории.  Если маркерный файл найден, `__root__` обновляется до родительской директории, и цикл прерывается.

4. **Добавление в sys.path**: Если `__root__` не входит в `sys.path`, то код добавляет его в начало списка `sys.path`.

5. **Возврат корневой директории**: Функция возвращает путь к `__root__`.

6. **Получение корневой директории проекта**: Код вызывает функцию `set_project_root` для получения пути к корневой директории проекта.

7. **Чтение настроек из settings.json**: Код пытается открыть файл `settings.json` в корневой директории и загрузить его содержимое в переменную `settings` с помощью `json.load`. Обрабатывает исключения `FileNotFoundError` и `json.JSONDecodeError`, если файл не найден или невалиден.

8. **Чтение документации из README.MD**: Код пытается открыть файл `README.MD` в корневой директории и прочитать его содержимое в переменную `doc_str`. Обрабатывает исключения `FileNotFoundError` и `json.JSONDecodeError`, если файл не найден или невалиден.

9. **Получение данных из настроек**: Код получает значения из словаря `settings` для переменных: `__project_name__`, `__version__`, `__author__`, `__copyright__`, `__cofee__` и `__doc__`, используя значения по умолчанию, если соответствующие ключи отсутствуют или файл не найден.

10. **Возвращает настройки**:  Код возвращает значения переменных.


Пример использования
-------------------------
.. code-block:: python

    from hypotez.src.endpoints.emil.header import set_project_root

    root_dir = set_project_root()
    print(root_dir)