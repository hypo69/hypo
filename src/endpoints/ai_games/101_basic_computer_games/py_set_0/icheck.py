"""
BULLS:
=================
Сложность: 4
-----------------
Игра "Быки и Коровы" - это классическая игра-головоломка, в которой один игрок загадывает секретное четырехзначное число, а другой игрок пытается его угадать. После каждой попытки отгадывающий получает подсказку в виде количества "быков" и "коров". "Бык" означает, что цифра угадана и находится на правильной позиции. "Корова" означает, что цифра угадана, но находится на неправильной позиции. Цель игры - угадать загаданное число за минимальное количество попыток.
Правила игры:
1. Компьютер загадывает случайное четырехзначное число, в котором все цифры различны.
2. Игрок вводит свою попытку - четырехзначное число.
3. Компьютер проверяет попытку и сообщает количество "быков" (цифра угадана и находится на правильной позиции) и "коров" (цифра угадана, но находится на неправильной позиции).
4. Игра продолжается, пока игрок не угадает число или не исчерпает количество попыток (в данной реализации количество попыток не ограничено).
-----------------
Алгоритм:
1. Сгенерировать случайное 4-х значное число с уникальными цифрами.
2. Запросить у игрока 4-х значное число.
3. Сравнить введенное число с загаданным:
    - Если цифра и ее позиция совпадают, то увеличить счетчик "быков".
    - Если цифра присутствует в загаданном числе, но ее позиция не совпадает, то увеличить счетчик "коров".
4. Вывести игроку количество "быков" и "коров".
5. Если количество "быков" равно 4, то игрок победил, вывести поздравление и завершить игру.
6. Иначе перейти к шагу 2.
-----------------
Блок-схема: 
```mermaid
  graph TD
      Start --> GenerateSecretNumber;
      GenerateSecretNumber --> InputGuess;
      InputGuess --> CheckGuess;
      CheckGuess --> CountBullsAndCows;
      CountBullsAndCows --> OutputResult;
      OutputResult --> CheckWin;
      CheckWin -- Yes --> OutputWinMessage;
      OutputWinMessage --> End;
      CheckWin -- No --> InputGuess;
      
      subgraph "Генерация секретного числа"
      GenerateSecretNumber[Сгенерировать случайное 4-х значное число с уникальными цифрами]
      end
      
      subgraph "Игровой цикл"
      InputGuess[Запросить у игрока 4-х значное число]
      CheckGuess[Сравнить введенное число с загаданным]
      CountBullsAndCows[Подсчет быков и коров]
      OutputResult[Вывести игроку количество быков и коров]
      CheckWin[Проверка на победу (быков == 4)]
      end
      
      subgraph "Конец игры"
      OutputWinMessage[Вывести сообщение о победе]
      End[Конец игры]
      end

```
"""
import random

def generate_secret_number():
    """
    Генерирует случайное четырехзначное число с уникальными цифрами.

    Returns:
        str: Случайное четырехзначное число в виде строки.
    """
    digits = list(range(10))  # Создаем список цифр от 0 до 9
    random.shuffle(digits)  # Перемешиваем цифры случайным образом
    secret_number = "".join(map(str, digits[0:4])) #  Выбираем первые 4 цифры и преобразуем их в строку
    return secret_number

def check_guess(secret_number, guess):
    """
    Проверяет введенное пользователем число и подсчитывает количество "быков" и "коров".

    Args:
        secret_number (str): Загаданное четырехзначное число.
        guess (str): Введенное пользователем четырехзначное число.

    Returns:
        tuple: Кортеж, содержащий количество "быков" и "коров".
    """
    bulls = 0
    cows = 0
    for i in range(4): # Цикл по каждой позиции в числе
        if guess[i] == secret_number[i]: #  Если цифра и ее позиция совпадают, то это "бык"
            bulls += 1
        elif guess[i] in secret_number: #  Если цифра есть в загаданном числе, но ее позиция не совпадает, то это "корова"
            cows += 1
    return bulls, cows


def play_bulls_and_cows():
    """
    Основная функция, реализующая игровой процесс.
    """
    secret_number = generate_secret_number() # Генерируем загаданное число
    print("Я загадал 4-значное число с уникальными цифрами. Попробуй угадать!")

    while True: #  Начинаем бесконечный цикл для ввода попыток от игрока, пока не будет угаданно число
        guess = input("Введите ваше предположение (4 цифры): ") # Получаем ввод от пользователя
        if len(guess) != 4 or not guess.isdigit(): # Проверяем что введено ровно 4 цифры
            print("Пожалуйста, введите 4-значное число.") # Если нет, то просим ввести правильное значение
            continue

        bulls, cows = check_guess(secret_number, guess) #  Проверяем введенное число и получаем количество быков и коров
        print(f"Быки: {bulls}, Коровы: {cows}") #  Выводим на экран количество быков и коров

        if bulls == 4:  # Если угаданы все 4 цифры и позиции, то есть 4 "быка"
            print("Поздравляю! Вы угадали число!") # Выводим поздравление
            break # И выходим из цикла игры
        
if __name__ == "__main__":
    play_bulls_and_cows()
"""
Пояснения:
1. `generate_secret_number()`: Эта функция генерирует случайное четырехзначное число, в котором все цифры различны. Она создает список цифр от 0 до 9, перемешивает его случайным образом и затем выбирает первые четыре цифры, которые преобразует в строку и возвращает ее.
2. `check_guess(secret_number, guess)`: Эта функция сравнивает введенное пользователем число с загаданным числом и подсчитывает количество "быков" и "коров". "Бык" означает, что цифра угадана и находится на правильной позиции, а "корова" означает, что цифра угадана, но находится на неправильной позиции.
3. `play_bulls_and_cows()`: Эта функция является основной функцией, которая управляет игровым процессом. Она вызывает функцию generate_secret_number(), чтобы сгенерировать случайное число, а затем переходит в бесконечный цикл, где запрашивает ввод от пользователя, вызывает функцию check_guess() для сравнения с загаданным числом, выводит результат и проверяет, угадал ли пользователь число.
4. Основной блок `if __name__ == "__main__":`: Этот блок гарантирует, что функция play_bulls_and_cows() будет вызвана только при запуске скрипта напрямую, а не при импорте модуля.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```