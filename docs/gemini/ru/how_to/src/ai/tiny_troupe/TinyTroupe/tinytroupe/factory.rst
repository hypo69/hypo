Как использовать класс TinyFactory
========================================================================================

Описание
-------------------------
Класс `TinyFactory` — базовый класс для различных типов фабрик.  Он предназначен для упрощения расширения системы, особенно в отношении кэширования транзакций.  Класс управляет списком всех созданных фабрик, предоставляя статические методы для добавления, удаления и доступа к ним.  Также реализованы механизмы кэширования состояния фабрики с помощью методов `encode_complete_state` и `decode_complete_state` для сохранения и восстановления состояния.  Подкласс `TinyPersonFactory` отвечает за генерацию экземпляров `TinyPerson` на основе предоставленного контекста.

Шаги выполнения
-------------------------
1. **Создание экземпляра:** Для создания экземпляра фабрики необходимо вызвать конструктор `__init__(self, simulation_id=None)`.  Аргумент `simulation_id` используется для связи с конкретной симуляцией.  Фабрика автоматически получает уникальное имя, формируемое с помощью `utils.fresh_id()`.

2. **Регистрация фабрики:** Экземпляр фабрики автоматически регистрируется в глобальном словаре `all_factories` класса `TinyFactory` с использованием статического метода `add_factory()`.  Имя фабрики должно быть уникальным.  Ошибка `ValueError` возникает, если фабрика с таким же именем уже существует.

3. **Установка симуляции:**  Для свободных окружений (где `simulation_id` равен `None`), можно использовать статический метод `set_simulation_for_free_factories()`, чтобы добавить фабрику в симуляцию.

4. **Сохранение и восстановление состояния:**  Методы `encode_complete_state()` и `decode_complete_state()` позволяют сериализовать и десериализовать состояние фабрики.  Подклассы должны переопределять эти методы, если содержат не сериализуемые элементы.

5. **Генерация TinyPersonFactory:** Для генерации списка `TinyPersonFactory` используется статический метод `generate_person_factories()`.  Он принимает количество фабрик и общий контекст.  Внутри метода, используется OpenAI's LLM для создания описаний `TinyPerson` на основе контекста.

6. **Генерация TinyPerson:** Метод `generate_person()` генерирует `TinyPerson` на основе контекста и дополнительных характеристик.  Используется шаблон `prompt` из файла `prompts/generate_person.mustache`.  Метод использует кэширование (`generated_minibios` и `generated_names`) для избежания дублирования.

7. **Настройка агента:** Метод `_setup_agent()` настраивает сгенерированного агента `TinyPerson` с помощью предоставленных параметров.

Пример использования
-------------------------
.. code-block:: python

    import tinytroupe.utils as utils
    from tinytroupe.factory import TinyFactory, TinyPersonFactory
    
    # Создание TinyPersonFactory
    context = "Описание контекста"
    factory = TinyPersonFactory(context_text=context)

    # Генерация списка TinyPersonFactory
    num_factories = 5
    factories = TinyPersonFactory.generate_person_factories(number_of_factories=num_factories, generic_context_text=context)

    # Генерация TinyPerson
    person = factory.generate_person(agent_particularities="Дополнительные параметры агента")

    if person:
        print(person.get("name"))