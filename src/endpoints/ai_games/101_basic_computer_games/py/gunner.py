"""
<GUNNER>:
=================
Сложность: 3
-----------------
Игра "Стрелок" - это простая текстовая игра, в которой игрок пытается сбить цель, стреляя из пушки. Цель перемещается по экрану, и игрок должен ввести угол и скорость выстрела, чтобы попасть в нее. Игра моделирует параболическую траекторию снаряда, игрок имеет ограниченное число попыток.
Правила игры:
1. Цель находится на случайном расстоянии от игрока.
2. Игрок вводит угол и скорость выстрела.
3. Программа вычисляет траекторию снаряда.
4. Если снаряд попадает в цель, игрок побеждает.
5. Если снаряд не попадает в цель после определенного количества попыток, игрок проигрывает.
-----------------
Алгоритм:
1. Инициализация:
    - Задать случайную дистанцию до цели (targetDistance) от 100 до 900.
    - Задать начальное количество выстрелов (shotsLeft) равное 10.
2. Игровой цикл (пока shotsLeft > 0):
    - Вывести на экран количество оставшихся выстрелов (shotsLeft).
    - Запросить у игрока угол выстрела (shotAngle) в градусах.
    - Запросить у игрока начальную скорость выстрела (shotVelocity).
    - Преобразовать угол выстрела (shotAngle) в радианы (shotAngleRad).
    - Вычислить дальность полета снаряда (shotDistance) по формуле: shotDistance = (shotVelocity^2 * sin(2 * shotAngleRad)) / 32.2.
    - Вывести на экран дальность полета снаряда (shotDistance).
    - Если дальность полета снаряда (shotDistance) находится в пределах ±10 от дистанции до цели (targetDistance), то вывести сообщение о попадании, завершить игру.
    - Иначе, уменьшить количество выстрелов на 1 (shotsLeft).
3. Если количество выстрелов (shotsLeft) закончилось, вывести сообщение о проигрыше.
"""
```mermaid
graph TD
    Start(Start) --> Initialize(Инициализация);
    Initialize --> LoopStart{Выстрелов осталось > 0?};
    LoopStart -- Yes --> ShowShots(Показать количество выстрелов);
    ShowShots --> InputAngle(Запросить угол выстрела);
    InputAngle --> InputVelocity(Запросить скорость выстрела);
    InputVelocity --> AngleToRadians(Угол в радианы);
    AngleToRadians --> CalculateDistance(Вычислить дальность выстрела);
    CalculateDistance --> ShowDistance(Показать дальность выстрела);
    ShowDistance --> CheckHit{Попадание?};
    CheckHit -- Yes --> OutputWin(Вывод "Попал!");
    OutputWin --> End(End);
    CheckHit -- No --> DecreaseShots(Уменьшить выстрелы на 1);
    DecreaseShots --> LoopStart;
    LoopStart -- No --> OutputLose(Вывод "Проиграл");
    OutputLose --> End;
    
    style Start fill:#f9f,stroke:#333,stroke-width:2px
    style End fill:#f9f,stroke:#333,stroke-width:2px
```
```python
import random
import math

"""
Пояснения:
1. Импортируем модули random для генерации случайных чисел и math для математических функций.
2. Функция calculate_shot_distance(velocity, angle_radians) вычисляет дальность полета снаряда, на основе введенных пользователем данных.
   - Принимает начальную скорость (velocity) и угол (angle_radians) в радианах.
   - Использует формулу дальности полета снаряда, учитывая ускорение свободного падения (g = 32.2).
   - Возвращает рассчитанную дальность полета.
3. В основной части программы:
   - Инициализируем цель (targetDistance) - случайное число от 100 до 900.
   - Задаем начальное количество выстрелов (shotsLeft) равное 10.
4. Запускаем игровой цикл (while shotsLeft > 0).
   - Выводим на экран количество оставшихся выстрелов.
   - Запрашиваем у пользователя угол выстрела в градусах и начальную скорость.
   - Переводим угол выстрела из градусов в радианы.
   - Вычисляем дальность полета снаряда, используя функцию calculate_shot_distance.
   - Выводим на экран дальность полета снаряда.
   - Проверяем, попал ли снаряд в цель (разница между дальностью и целью не больше 10). Если попал, выводим сообщение о победе и завершаем игру.
   - Если не попал, уменьшаем количество оставшихся выстрелов на 1.
5. Если цикл завершается (закончились все попытки), выводим сообщение о поражении.
"""
def calculate_shot_distance(velocity, angle_radians):
    """Вычисляет дальность полета снаряда"""
    g = 32.2 # Ускорение свободного падения
    distance = (velocity**2 * math.sin(2 * angle_radians)) / g
    return distance

# Инициализация игры
targetDistance = random.randint(100, 900)  # Случайная дистанция до цели
shotsLeft = 10  # Количество попыток

# Игровой цикл
while shotsLeft > 0:
    print(f"Выстрелов осталось: {shotsLeft}")

    # Запрос данных у пользователя
    try:
      shotAngle = float(input("Введите угол выстрела в градусах: "))
      shotVelocity = float(input("Введите начальную скорость выстрела: "))
    except ValueError:
        print("Ошибка: Пожалуйста, введите числовые значения.")
        continue # Возврат к началу цикла

    # Перевод угла в радианы
    shotAngleRad = math.radians(shotAngle)

    # Расчет дальности полета
    shotDistance = calculate_shot_distance(shotVelocity, shotAngleRad)
    print(f"Дальность полета: {shotDistance:.2f}")

    # Проверка попадания
    if abs(shotDistance - targetDistance) <= 10:
        print("Попал!")
        break

    # Уменьшение количества выстрелов
    shotsLeft -= 1

# Проверка окончания игры
if shotsLeft == 0:
    print("Проиграл!")

"""
Пояснения:
1.  `random.randint(100, 900)`: Эта строка генерирует случайное целое число в диапазоне от 100 до 900 (включительно) и присваивает его переменной `targetDistance`. Это имитирует расстояние до цели.
2.  `shotsLeft = 10`: Здесь устанавливается начальное количество попыток (выстрелов), которое равно 10.
3.  `while shotsLeft > 0:`: Этот цикл `while` выполняется до тех пор, пока у игрока есть оставшиеся выстрелы (`shotsLeft` больше 0).
4.  `print(f"Выстрелов осталось: {shotsLeft}")`: В начале каждого цикла выводится на экран количество оставшихся выстрелов.
5.  `shotAngle = float(input("Введите угол выстрела в градусах: "))`: Эта строка выводит сообщение с запросом ввести угол выстрела в градусах и преобразует введенное значение в число с плавающей точкой, сохраняя его в переменной `shotAngle`.
6.  `shotVelocity = float(input("Введите начальную скорость выстрела: "))`: Эта строка выводит сообщение с запросом ввести начальную скорость выстрела и преобразует введенное значение в число с плавающей точкой, сохраняя его в переменной `shotVelocity`.
7.  `shotAngleRad = math.radians(shotAngle)`: Здесь происходит преобразование угла из градусов в радианы с помощью функции `math.radians()`, результат сохраняется в переменной `shotAngleRad`.
8.  `shotDistance = calculate_shot_distance(shotVelocity, shotAngleRad)`: Вызывается функция `calculate_shot_distance()` для расчета дальности полета снаряда, а результат сохраняется в переменной `shotDistance`.
9.  `print(f"Дальность полета: {shotDistance:.2f}")`: Выводит на экран рассчитанную дальность полета с округлением до двух знаков после запятой.
10. `if abs(shotDistance - targetDistance) <= 10:`: Проверяет, попал ли снаряд в цель. Расстояние между дальностью полета и расстоянием до цели должно быть не больше 10 единиц. Если условие истинно, то выводится сообщение "Попал!", и цикл завершается с помощью `break`.
11. `shotsLeft -= 1`: Если снаряд не попал в цель, уменьшается количество оставшихся выстрелов на 1.
12. `if shotsLeft == 0:`: После завершения цикла (когда `shotsLeft` становится равным 0) происходит проверка, закончились ли все выстрелы. Если да, то выводится сообщение "Проиграл!".
"""
"""
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```