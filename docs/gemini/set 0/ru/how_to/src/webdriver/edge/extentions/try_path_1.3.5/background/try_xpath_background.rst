Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код реализует обработчик сообщений для расширения браузера, работающего с TryXPath.  Он отвечает на различные сообщения, связанные с управлением отображением результатов поиска, стилями и настройками. Код использует API браузера для взаимодействия с вкладками, вставления CSS, отправки сообщений между содержанием вкладки и расширением и получения данных из хранилища настроек.  Ключевые функции включают загрузку стилей из файла, обновление CSS на вкладках, получение и сохранение состояния всплывающего окна, и отправку результатов поиска в новое окно.

Шаги выполнения
-------------------------
1. **Обработка сообщений:** Код устанавливает обработчик для событий `browser.runtime.onMessage`. Этот обработчик, `genericListener`, проверяет тип сообщения и вызывает соответствующую функцию для его обработки.

2. **Обработка конкретных сообщений:**
    - `storePopupState`: Сохраняет состояние всплывающего окна в переменную `popupState`.
    - `requestRestorePopupState`: Отправляет сообщение в основную часть расширения для восстановления состояния всплывающего окна.
    - `requestInsertStyleToPopup`: Отправляет сообщение в основную часть расширения для вставки CSS стилей во всплывающее окно.
    - `showAllResults`: Собирает данные результатов поиска, сохраняет информацию о вкладке и фрейме, и открывает новую вкладку для отображения результатов.
    - `loadResults`: Возвращает данные результатов поиска в ответ на сообщение.
    - `updateCss`: Обновляет CSS стили на текущей вкладке.  Включает удаление устаревших стилей и добавление новых. Использует `browser.tabs.removeCSS` и `browser.tabs.insertCSS`.
    - `loadOptions`: Возвращает атрибуты, CSS и стили всплывающего окна в ответ на запрос.
    - `requestSetContentInfo`: Отправляет сообщение для настройки атрибутов содержимого на текущей вкладке.

3. **Загрузка стилей:** Функция `loadDefaultCss` загружает CSS стили из файла `/css/try_xpath_insert.css` с помощью `XMLHttpRequest`.

4. **Обработка изменений хранилища:** Вешается обработчик на изменения в хранилище настроек `browser.storage.onChanged`, обновляя локальные переменные (`attributes`, `css`, `popupCss`) при изменении.

5. **Инициализация из хранилища:** Код запрашивает значения настроек `attributes`, `css`, `popupCss` из синхронизированного хранилища `browser.storage.sync`. Если значение `css` отсутствует, он загружает его с помощью `loadDefaultCss`.

Пример использования
-------------------------
.. code-block:: javascript
    // Отправка сообщения расширению для обновления CSS
    browser.runtime.sendMessage({
        "event": "updateCss",
        "expiredCssSet": ["css_to_remove1", "css_to_remove2"],
        "css": "body { color: red; }"
    });