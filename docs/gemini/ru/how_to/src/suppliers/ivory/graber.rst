Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код определяет класс `Graber` для сбора данных о товарах с сайта `ivory.co.il`.  Класс наследуется от базового класса `Grbr` и предоставляет методы для извлечения различных полей товара.  Он использует асинхронные функции, работающие с веб-драйвером, для извлечения данных с веб-страницы.  Код содержит декоратор `close_pop_up` (хотя он и закомментирован) для закрытия всплывающих окон на сайте.  В классе реализованы функции для обработки различных полей товара, которые можно вызывать, передавая соответствующий идентификатор товара.

Шаги выполнения
-------------------------
1. **Импортирование необходимых библиотек:** Код импортирует нужные библиотеки, включая `asyncio`, `pydantic`, `src` (вероятно, собственный модуль проекта), `webdriver`, `logger`, и другие.

2. **Определение глобальных настроек (Context):** Закомментированные строки определяют класс `Context` для хранения глобальных настроек, таких как экземпляр веб-драйвера и локатор.

3. **Определение декоратора `close_pop_up`:** Закомментированный декоратор `close_pop_up` предназначен для закрытия всплывающих окон перед выполнением основной логики функций. Он принимает дополнительное значение `value` и обертывает функцию, а затем выполняет действия для закрытия окна.

4. **Определение класса `Graber`:** Класс `Graber` наследуется от `Grbr`, инициализируется экземпляром веб-драйвера и содержит метод `grab_page`.

5. **Функция `grab_page`:** Функция `grab_page` асинхронно собирает данные полей товара.

6. **Внутренняя функция `fetch_all_data`:**  Эта функция содержит вызовы к различным методам класса (`self.id_product`, `self.description_short`, `self.name`, и т.д.) для извлечения специфических полей товара по соответствующим идентификаторам.

7. **Возврат данных:** Метод `grab_page` возвращает заполненный объект `ProductFields` с собранными данными.

Пример использования
-------------------------
.. code-block:: python

    import asyncio
    from src.webdriver import Driver
    from hypotez.src.suppliers.ivory.graber import Graber
    from src.product import ProductFields

    async def main():
        driver = Driver()  # Инициализация веб-драйвера
        graber = Graber(driver)
        try:
            product_data = await graber.grab_page(driver, id_product='123')  # Пример - извлекаем данные для товара с id 123
            if product_data:
                print(product_data.name) #  Выводим имя товара
                # ...обработка остальных данных...
        finally:
            await driver.quit()


    if __name__ == "__main__":
        asyncio.run(main())