"""
SLOTS:
=================
Сложность: 4
-----------------
Игра "Слоты" - это простая игра-симулятор игрового автомата с тремя барабанами. 
Игрок вводит сумму ставки и крутит барабаны, пытаясь получить выигрышные комбинации. 
Различные комбинации символов дают разные выигрыши. 
Игра продолжается до тех пор, пока у игрока есть деньги для ставок.

Правила игры:
1. Игрок начинает с определенной суммы денег (например, $10).
2. Игрок вводит сумму ставки.
3. Барабаны "крутятся" - генерируются три случайных числа в диапазоне от 1 до 3, которые представляют собой символы на барабанах.
4. В зависимости от выпавшей комбинации символов, игрок получает выигрыш или проигрывает.
    - Три одинаковых числа - выигрыш, равный десятикратной ставке.
    - Две единицы и одно любое другое число - выигрыш, равный двукратной ставке.
    - Любая другая комбинация - игрок теряет ставку.
5. Игра продолжается до тех пор, пока у игрока есть деньги для ставок.
-----------------
Алгоритм:
1.  Установить начальную сумму денег игрока (например, 10).
2.  Начать цикл "пока у игрока есть деньги":
    2.1 Запросить у игрока ввод суммы ставки.
    2.2 Если ставка больше, чем текущая сумма денег, вывести сообщение об ошибке и перейти к началу цикла.
    2.3 Если ставка меньше или равна нулю, то завершить игру.
    2.4 Сгенерировать три случайных числа в диапазоне от 1 до 3 (символы на барабанах).
    2.5 Вывести на экран сгенерированные символы.
    2.6 Проверить комбинацию символов:
        - Если все три числа одинаковые, то выигрыш равен ставке * 10.
        - Если два числа равны 1, то выигрыш равен ставке * 2.
        - В остальных случаях игрок проигрывает.
    2.7 Вывести сообщение о выигрыше или проигрыше, и новую сумму денег.
3. Вывести сообщение об окончании игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeMoney["<p align='left'>Инициализация: 
    <code><b>playerMoney = 10</b></code></p>"]
    InitializeMoney --> GameLoop{"Начало игрового цикла: пока есть деньги"}
    GameLoop -- Да --> InputBet["Ввод ставки: <code><b>bet</b></code>"]
    InputBet --> CheckBetAmount{"Проверка: <code><b>bet > playerMoney?</b></code>"}
    CheckBetAmount -- Да --> OutputError["Вывод сообщения: <b>Ставка больше чем есть денег!</b>"]
    OutputError --> GameLoop
    CheckBetAmount -- Нет --> CheckBetZero{"Проверка: <code><b>bet <= 0?</b></code>"}
    CheckBetZero -- Да --> End["Конец игры"]
    CheckBetZero -- Нет --> GenerateSlots["<p align='left'>Генерация случайных символов:
    <code><b>slot1 = random(1, 3)
    slot2 = random(1, 3)
    slot3 = random(1, 3)
    </b></code></p>"]
    GenerateSlots --> OutputSlots["Вывод: <code><b>slot1, slot2, slot3</b></code>"]
    OutputSlots --> CheckCombination{"Проверка комбинации"}
    CheckCombination --> CheckThreeEqual{"Проверка: <code><b>slot1 == slot2 == slot3?</b></code>"}
    CheckThreeEqual -- Да --> CalculateWinThree["<code><b>winAmount = bet * 10</b></code>"]
    CalculateWinThree --> UpdateMoney["<code><b>playerMoney = playerMoney + winAmount</b></code>"]
    UpdateMoney --> OutputWin["Вывод сообщения о выигрыше и новая сумма денег"]
    OutputWin --> GameLoop
    CheckThreeEqual -- Нет --> CheckTwoOnes{"Проверка: <code><b>(slot1 == 1 AND slot2 == 1) OR (slot1 == 1 AND slot3 == 1) OR (slot2 == 1 AND slot3 == 1)?</b></code>"}
    CheckTwoOnes -- Да --> CalculateWinTwo["<code><b>winAmount = bet * 2</b></code>"]
    CalculateWinTwo --> UpdateMoney
    CheckTwoOnes -- Нет --> CalculateLose["<code><b>winAmount = -bet</b></code>"]
    CalculateLose --> UpdateMoney
    
    
```

Legenda:
    Start - Начало программы.
    InitializeMoney - Инициализация начальной суммы денег игрока (playerMoney) равной 10.
    GameLoop - Начало цикла игры, который выполняется, пока у игрока есть деньги.
    InputBet - Запрос у игрока ввода суммы ставки (bet).
    CheckBetAmount - Проверка: больше ли введенная ставка (bet) чем текущая сумма денег игрока (playerMoney).
    OutputError - Вывод сообщения об ошибке, если ставка больше, чем есть денег у игрока.
    CheckBetZero - Проверка: не является ли ставка меньше или равна нулю. Если да, игра завершается.
    GenerateSlots - Генерация трех случайных чисел от 1 до 3, представляющих собой символы на барабанах (slot1, slot2, slot3).
    OutputSlots - Вывод сгенерированных символов на экран.
    CheckCombination - Проверка выигрышной комбинации.
    CheckThreeEqual - Проверка: равны ли все три символа (slot1, slot2, slot3).
    CalculateWinThree - Расчет выигрыша, если три символа равны: выигрыш равен ставке, умноженной на 10.
    UpdateMoney - Обновление суммы денег игрока: к текущей сумме денег добавляется выигрыш (winAmount).
    OutputWin - Вывод сообщения о выигрыше и новой сумме денег.
    CheckTwoOnes - Проверка: есть ли среди трех символов два символа, равные 1.
    CalculateWinTwo - Расчет выигрыша, если есть два символа, равные 1: выигрыш равен ставке, умноженной на 2.
    CalculateLose - Расчет проигрыша: выигрыш равен отрицательной ставке.
    End - Конец игры.
"""
import random

# Начальная сумма денег игрока
playerMoney = 10

# Основной игровой цикл
while playerMoney > 0:
    # Запрос ставки у игрока
    try:
        bet = int(input(f"У вас ${playerMoney}. Введите вашу ставку (или 0 для выхода): "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверка на корректность ставки
    if bet > playerMoney:
        print("Ставка больше, чем у вас есть денег!")
        continue
    if bet <= 0:
        break # Завершаем игру, если ставка равна 0 или меньше

    # Генерация случайных чисел для барабанов
    slot1 = random.randint(1, 3)
    slot2 = random.randint(1, 3)
    slot3 = random.randint(1, 3)

    print(f"Крутятся барабаны: {slot1}, {slot2}, {slot3}")

    # Проверка выигрышных комбинаций и расчет выигрыша
    winAmount = 0
    if slot1 == slot2 == slot3:
        winAmount = bet * 10
        print("Выигрыш! Три одинаковых символа!")
    elif (slot1 == 1 and slot2 == 1) or (slot1 == 1 and slot3 == 1) or (slot2 == 1 and slot3 == 1):
        winAmount = bet * 2
        print("Выигрыш! Две единицы!")
    else:
        winAmount = -bet
        print("Вы проиграли.")

    # Обновление суммы денег игрока
    playerMoney += winAmount
    print(f"У вас ${playerMoney}.\n")

print("Игра окончена.")
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Инициализация начальной суммы денег игрока**:
   -  `playerMoney = 10`: Устанавливает начальную сумму денег игрока в 10.
3.  **Основной игровой цикл `while playerMoney > 0:`**:
    -   Цикл продолжается, пока у игрока есть деньги (больше 0).
    -   **Ввод ставки**:
        -   `try...except ValueError:`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `bet = int(input(f"У вас ${playerMoney}. Введите вашу ставку (или 0 для выхода): "))`: Запрашивает ставку у игрока.
    -   **Проверка ставки**:
        -   `if bet > playerMoney:`: Проверяет, не превышает ли ставка текущий баланс.
        -   `print("Ставка больше, чем у вас есть денег!")`: Выводит сообщение об ошибке, если ставка слишком велика.
        -   `if bet <= 0`: Проверяет, не является ли ставка отрицательной или нулем.
        -    `break`: Завершает игровой цикл, если ставка равна 0 или меньше.
    -   **Генерация "барабанов"**:
        -   `slot1 = random.randint(1, 3)`: Генерирует случайное число от 1 до 3 для первого барабана.
        -   `slot2 = random.randint(1, 3)`: Генерирует случайное число от 1 до 3 для второго барабана.
        -   `slot3 = random.randint(1, 3)`: Генерирует случайное число от 1 до 3 для третьего барабана.
    -   **Вывод "барабанов" на экран**:
        -   `print(f"Крутятся барабаны: {slot1}, {slot2}, {slot3}")`: Выводит сгенерированные символы барабанов.
    -   **Проверка выигрышных комбинаций и расчет выигрыша**:
        -    `winAmount = 0`: Инициализирует переменную `winAmount` для хранения размера выигрыша.
        -   `if slot1 == slot2 == slot3:`: Проверяет, все ли три символа одинаковы.
            - `winAmount = bet * 10`: Устанавливает выигрыш в 10 раз больше ставки, если все три символа равны.
        -   `elif (slot1 == 1 and slot2 == 1) or (slot1 == 1 and slot3 == 1) or (slot2 == 1 and slot3 == 1):`: Проверяет, есть ли среди символов две единицы.
            - `winAmount = bet * 2`: Устанавливает выигрыш в 2 раза больше ставки, если есть две единицы.
        - `else:`: Если ни одно из предыдущих условий не выполнено, то игрок проиграл.
            -  `winAmount = -bet`: Устанавливает выигрыш в отрицательное значение ставки.
        -   `print("Вы проиграли.")` - сообщает что игрок проиграл.
    -   **Обновление баланса игрока**:
        -   `playerMoney += winAmount`: Обновляет баланс игрока, добавляя выигрыш (или отнимая проигрыш).
        -   `print(f"У вас ${playerMoney}.\n")`: Выводит текущий баланс игрока.
4.  **Завершение игры**:
    -   `print("Игра окончена.")`: Выводит сообщение об окончании игры, когда у игрока заканчиваются деньги.
"""
