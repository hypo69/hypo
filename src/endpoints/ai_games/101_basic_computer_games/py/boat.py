"""
BOAT:
=================
Сложность: 5
-----------------
Игра "Морской бой" представляет собой текстовую версию классической игры. Игрок и компьютер по очереди "стреляют" по клеткам на поле, стараясь потопить корабли противника. Цель игры – первым потопить все корабли противника. В этой версии, поле представляет собой одномерный массив, где каждая ячейка может быть пустой, содержать корабль или быть "подбитой".

Правила игры:
1.  Игрок и компьютер имеют одинаковые "поля" (массивы) с кораблями и без них.
2.  Игрок и компьютер по очереди вводят номер ячейки, по которой производится "выстрел".
3.  Если "выстрел" попадает в ячейку с кораблем, корабль считается "подбитым", а ячейка помечается как "подбитая".
4.  Если "выстрел" попадает в пустую ячейку, то ничего не происходит.
5.  Игра заканчивается, когда все корабли одного из игроков потоплены.
-----------------
Алгоритм:
1. Инициализация:
    1.1 Создать два массива: один для игрока, другой для компьютера.
    1.2 Разместить корабли (в данном случае один корабль длиной 3) на обоих полях.
    1.3 Установить начальное количество попаданий как для игрока, так и для компьютера в 0.
2. Основной игровой цикл:
    2.1 Вывод текущего состояния поля игрока (в виде номеров ячеек и символов).
    2.2 Игрок вводит номер ячейки для выстрела.
    2.3 Проверка попадания:
        2.3.1 Если попадание, увеличить счетчик попаданий игрока.
        2.3.2 Обновить состояние массива: пометить ячейку как "подбитую".
    2.4 Если игрок не попал, ход переходит компьютеру.
    2.5 Компьютер выбирает случайную ячейку для выстрела.
    2.6 Проверка попадания для компьютера.
        2.6.1 Если попадание, увеличить счетчик попаданий компьютера.
        2.6.2 Обновить состояние массива компьютера.
    2.7 Повторять шаги 2.1-2.6, пока один из игроков не потопит все корабли противника.
3. Определение победителя и вывод сообщения.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGame["Инициализация игры:<br>Создание массивов,<br>размещение кораблей,<br>счетчики попаданий = 0"]
    InitializeGame --> PlayerTurnStart{"Начало хода игрока"}
    PlayerTurnStart --> ShowPlayerBoard["Показать поле игрока"]
    ShowPlayerBoard --> PlayerInput["Ввод номера ячейки игроком: <code><b>playerGuess</b></code>"]
    PlayerInput --> CheckPlayerHit{"Проверка попадания игрока: <code><b>playerGuess</b></code>"}
    CheckPlayerHit -- Да --> PlayerHit["<code><b>playerHits = playerHits + 1</b></code><br>Обновить поле игрока: подбито"]
    PlayerHit --> CheckPlayerWin{"<code><b>playerHits == 3?</b></code>"}
    CheckPlayerHit -- Нет --> ComputerTurnStart["Начало хода компьютера"]
    CheckPlayerWin -- Да --> PlayerWin["Игрок выиграл"]
    PlayerWin --> End["Конец"]
    CheckPlayerWin -- Нет --> ComputerTurnStart
    ComputerTurnStart --> ComputerInput["Компьютер выбирает случайную ячейку: <code><b>computerGuess</b></code>"]
     ComputerInput --> CheckComputerHit{"Проверка попадания компьютера: <code><b>computerGuess</b></code>"}
    CheckComputerHit -- Да --> ComputerHit["<code><b>computerHits = computerHits + 1</b></code><br>Обновить поле компьютера: подбито"]
    ComputerHit --> CheckComputerWin{"<code><b>computerHits == 3?</b></code>"}
    CheckComputerHit -- Нет --> PlayerTurnStart
    CheckComputerWin -- Да --> ComputerWin["Компьютер выиграл"]
     ComputerWin --> End
     CheckComputerWin -- Нет --> PlayerTurnStart
```
Legenda:
    Start - Начало игры.
    InitializeGame - Инициализация игровых переменных, таких как создание массивов для игрового поля, размещение кораблей и установка начальных значений счетчиков попаданий.
    PlayerTurnStart - Начало хода игрока.
    ShowPlayerBoard - Отображение текущего состояния игрового поля для игрока.
    PlayerInput - Получение ввода от игрока, номера ячейки для "выстрела".
    CheckPlayerHit - Проверка, попал ли игрок в корабль противника.
    PlayerHit - Действия при попадании игрока: увеличение счетчика попаданий и обновление поля.
    CheckPlayerWin - Проверка, выиграл ли игрок (потопил все корабли противника).
    ComputerTurnStart - Начало хода компьютера.
     ComputerInput - Компьютер выбирает случайную ячейку для "выстрела".
    CheckComputerHit - Проверка, попал ли компьютер в корабль игрока.
    ComputerHit - Действия при попадании компьютера: увеличение счетчика попаданий и обновление поля.
    CheckComputerWin - Проверка, выиграл ли компьютер (потопил все корабли игрока).
    PlayerWin - Игрок выиграл игру.
    ComputerWin - Компьютер выиграл игру.
    End - Конец игры.
"""

import random

__author__ = 'hypo69 (hypo69@davidka.net)'
"""
Пояснения:
1.  Импорт модуля `random` для выбора случайных ходов компьютера.
2.  Функция `print_board(board)` выводит текущее состояние игрового поля на экран.
3.  Функция `place_ship(board, ship_length)` размещает корабль на поле.
    -   `start = random.randint(0, len(board) - ship_length)` - выбирается случайная позиция начала корабля.
    -  `for i in range(start, start + ship_length):` -  заполняет ячейки поля символом "B" (корабль).
4.  Функция `check_hit(board, guess)` проверяет, было ли попадание в корабль.
     - Если в ячейке, выбранной пользователем, находится корабль (символ "B"), то возвращает `True`.
    -   Также, если было попадание, ячейка поля меняется на "H" (hit - подбито).
5.  Функция `play_game()` является основной функцией игры.
    -   Инициализирует два игровых поля (для игрока и компьютера), а также начальное количество попаданий для каждого.
    -  Размещает на каждом из полей корабль.
    -   Начинается основной цикл игры `while True:`, который продолжается, пока один из игроков не выиграет.
        -    **Ход игрока**:
            -   Отображается поле игрока.
            -  Запрашивается номер ячейки для выстрела.
            -   Проверяется попадание вызовом функции `check_hit()`.
             -  Если есть попадание, увеличивается счетчик попаданий игрока, в противном случае ход переходит компьютеру.
        -  **Ход компьютера**:
            -   Компьютер выбирает случайную ячейку.
            -   Проверяется попадание, при попадании обновляется поле и счетчик попаданий компьютера.
        -   Проверка выигрыша: После каждого хода проверяется, не выиграл ли один из игроков, и если да, то игра завершается.
6.  Запуск игры.
"""
def print_board(board):
    """Выводит текущее состояние игрового поля."""
    for i, cell in enumerate(board):
        print(i, cell, end=" ")
    print()

def place_ship(board, ship_length):
    """Размещает корабль на игровом поле."""
    start = random.randint(0, len(board) - ship_length)
    for i in range(start, start + ship_length):
        board[i] = "B"  # B - корабль

def check_hit(board, guess):
    """Проверяет, было ли попадание в корабль."""
    if board[guess] == "B":
        board[guess] = "H"  # H - подбито
        return True
    return False

def play_game():
    """Основная функция игры."""
    board_size = 10  # Размер игрового поля
    ship_length = 3  # Длина корабля

    player_board = ["."] * board_size  # Игровое поле игрока
    computer_board = ["."] * board_size # Игровое поле компьютера

    place_ship(player_board, ship_length)
    place_ship(computer_board, ship_length)

    player_hits = 0  # Количество попаданий игрока
    computer_hits = 0 # Количество попаданий компьютера

    while True:
        # Ход игрока
        print("Ваше поле:")
        print_board(player_board)
        try:
           player_guess = int(input("Введите номер ячейки для выстрела: "))
        except ValueError:
           print("Пожалуйста, введите целое число.")
           continue

        if check_hit(computer_board, player_guess):
            print("Попадание!")
            player_hits += 1
        else:
            print("Промах.")

        if player_hits == ship_length:
            print("Вы выиграли!")
            break

        # Ход компьютера
        computer_guess = random.randint(0, board_size - 1)
        if check_hit(player_board, computer_guess):
             print(f"Компьютер попал в ячейку {computer_guess}!")
             computer_hits += 1
        else:
             print(f"Компьютер промахнулся, стрелял в ячейку {computer_guess}.")

        if computer_hits == ship_length:
            print("Компьютер выиграл!")
            break


if __name__ == "__main__":
    play_game()
"""
Пояснения:
1. **`print_board(board)`**:
   -   Функция принимает список `board`, который представляет игровое поле.
   -   Итерируется по элементам списка `board`, выводя на экран индекс и значение каждого элемента.
2.  **`place_ship(board, ship_length)`**:
    -   Функция принимает список `board`, представляющий игровое поле, и `ship_length` — длину корабля.
    -  Случайным образом выбирает начальную позицию корабля.
    -   Размещает корабль, помечая соответствующие ячейки буквой "B".
3.  **`check_hit(board, guess)`**:
    -  Функция принимает список `board` и `guess` - индекс ячейки для проверки.
    -   Проверяет, есть ли в ячейке, выбранной пользователем, корабль ("B").
    -   Если есть, заменяет "B" на "H" (hit - подбито), и возвращает `True`.
    -  В противном случае возвращает `False`.
4.  **`play_game()`**:
    -  **Инициализация игры**:
        -   `board_size = 10`: Устанавливает размер игрового поля.
        -   `ship_length = 3`: Устанавливает длину корабля.
        -  `player_board = ["."] * board_size`: Создает список, представляющий игровое поле игрока. "." — пустая ячейка.
        - `computer_board = ["."] * board_size`: Создает список, представляющий игровое поле компьютера.
        -   `place_ship(player_board, ship_length)`: размещает корабль на поле игрока.
        -   `place_ship(computer_board, ship_length)`: размещает корабль на поле компьютера.
        -   `player_hits = 0`, `computer_hits = 0`: Инициализируются счетчики попаданий.
    -  **Основной игровой цикл (`while True`):**
        -  **Ход игрока:**
            - Выводит текущее состояние поля игрока.
            -   Запрашивает у игрока номер ячейки для выстрела.
             -  Проверяет попадание с помощью `check_hit` и увеличивает счетчик попаданий, если выстрел был удачным.
             -  Выводит сообщение о попадании или промахе.
            -   Проверяет, не выиграл ли игрок (уничтожил все корабли компьютера).
        -  **Ход компьютера:**
            -   Компьютер случайным образом выбирает номер ячейки.
            -  Проверяет попадание и увеличивает счетчик попаданий.
            -   Выводит сообщение о выстреле компьютера.
            -   Проверяет, не выиграл ли компьютер.
        -   Если один из игроков выиграл, цикл завершается.
5. **`if __name__ == "__main__":`**:
    -    Запускает функцию `play_game()` если скрипт запущен напрямую.
"""
