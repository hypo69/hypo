"""
<BLKJAK>:
=================
Сложность: 4
-----------------
Игра "Блэкджек" - это карточная игра, в которой игрок соревнуется с дилером. 
Цель игры - набрать сумму очков, как можно более близкую к 21, но не превышающую ее.
Значение карт: карты от 2 до 10 имеют номинальную стоимость, валет, дама и король имеют стоимость 10, а туз может быть либо 1, либо 11, в зависимости от того, что выгоднее для игрока.

Правила игры:
1. Игроку и дилеру раздается по две карты. Одна из карт дилера остается закрытой (в коде не реализованно).
2. Игрок может брать дополнительные карты (hit) до тех пор, пока его сумма не превысит 21 или пока он не решит остановиться (stand).
3. Если игрок набирает больше 21, он проигрывает (bust).
4. После того, как игрок остановился, дилер открывает свою закрытую карту и берет дополнительные карты до тех пор, пока его сумма не достигнет 17 или более.
5. Если сумма дилера превышает 21, игрок выигрывает.
6. Если сумма дилера и игрока не превышает 21, то выигрывает тот, у кого сумма больше.
7. Если сумма очков у игрока и дилера равна, то объявляется ничья.
-----------------
Алгоритм:
1.  Инициализация:
    - Установить начальный баланс игрока (в коде не реализовано).
    - Создать колоду карт (в коде используется укороченная колода, без учета масти).
    - Раздать игроку и дилеру по две карты.
2.  Игровой цикл:
    - Вывести на экран карты игрока и сумму очков.
    - Предложить игроку взять еще карту (HIT) или остановиться (STAND).
    - Если игрок выбирает HIT, раздать ему еще одну карту и обновить сумму.
    - Если игрок выбирает STAND, перейти к ходу дилера.
    - Если сумма очков игрока превышает 21, игрок проигрывает.
3.  Ход дилера:
    - Дилер берет карты до тех пор, пока сумма его очков не станет 17 или больше.
    - Если сумма очков дилера превышает 21, игрок выигрывает.
4.  Определение победителя:
    - Сравнить сумму очков игрока и дилера и определить победителя или ничью.
5.  Конец игры.
-----------------
Блок-схема:
```mermaid
graph TD
    Start(Начало игры) --> Init(Инициализация игры);
    Init --> PlayerTurn(Ход игрока);
    PlayerTurn --> ShowPlayerCards(Показать карты игрока);
    ShowPlayerCards --> InputChoice(Запрос выбора: HIT или STAND);
    InputChoice -- HIT --> HitPlayer(Раздать карту игроку);
    HitPlayer --> CalcPlayerScore(Пересчет очков игрока);
    CalcPlayerScore --> CheckPlayerBust(Проверка на перебор);
    CheckPlayerBust -- Да --> PlayerLose(Игрок проиграл);
    CheckPlayerBust -- Нет --> PlayerTurn;
    InputChoice -- STAND --> DealerTurn(Ход дилера);
    DealerTurn --> DealerDraws(Дилер набирает карты);
    DealerDraws --> CheckDealerBust(Проверка на перебор дилера);
    CheckDealerBust -- Да --> PlayerWin(Игрок выиграл);
    CheckDealerBust -- Нет --> CompareScores(Сравнение очков);
    CompareScores --> WinnerCheck(Определение победителя);
    WinnerCheck -- Игрок выиграл --> PlayerWin;
    WinnerCheck -- Дилер выиграл --> PlayerLose;
    WinnerCheck -- Ничья --> PushGame(Ничья);
    PlayerWin --> End(Конец игры);
    PlayerLose --> End;
    PushGame --> End;
    
```
"""
import random

def calculate_score(cards):
    """
    Вычисляет сумму очков в руке, учитывая тузы (1 или 11).
    
    Args:
      cards (list of int): Список карт в руке игрока.
    
    Returns:
        int: Сумма очков в руке.
    """
    score = sum(cards)
    # Проверяем наличие туза (1) и при необходимости меняем на 11
    if 1 in cards and score + 10 <= 21:
      score += 10
    return score

def deal_card(deck):
    """
    Раздает карту из колоды.

    Args:
      deck (list of int): Колода карт.
    
    Returns:
        int: карта из колоды
    """
    return deck.pop()

def play_blackjack():
    """
    Запускает игру "Блэкджек".
    """
    # 1. Инициализация:
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 1] # Укороченная колода без учета масти
    random.shuffle(deck) # Перемешиваем колоду

    player_cards = [] # Рука игрока
    dealer_cards = [] # Рука дилера

    # Раздаем по 2 карты
    for _ in range(2):
      player_cards.append(deal_card(deck))
      dealer_cards.append(deal_card(deck))


    # 2. Игровой цикл:
    while True:
        player_score = calculate_score(player_cards)
        print("Ваши карты:", player_cards, ", Сумма очков:", player_score)

        # Проверяем на "перебор"
        if player_score > 21:
            print("У вас перебор! Вы проиграли.")
            return
        
        # Запрашиваем ход
        choice = input("Хотите взять еще карту (HIT) или остановиться (STAND)? (h/s): ").lower()
        if choice == 'h':
            player_cards.append(deal_card(deck))
        elif choice == 's':
            break
        else:
          print("Пожалуйста введите h или s.")

    # 3. Ход дилера:
    print("Карты дилера:", dealer_cards)
    dealer_score = calculate_score(dealer_cards)
    while dealer_score < 17:
        dealer_cards.append(deal_card(deck))
        dealer_score = calculate_score(dealer_cards)
        print("Дилер взял карту. Карты дилера:", dealer_cards, ", Сумма очков:", dealer_score)


    # 4. Определение победителя:
    print("Итого:")
    print("Ваши карты:", player_cards, ", Сумма очков:", player_score)
    print("Карты дилера:", dealer_cards, ", Сумма очков:", dealer_score)

    if dealer_score > 21:
      print("У дилера перебор! Вы выиграли.")
    elif dealer_score == player_score:
      print("Ничья!")
    elif player_score > dealer_score:
        print("Вы выиграли!")
    else:
        print("Вы проиграли.")


# 5. Запуск игры
if __name__ == "__main__":
    play_blackjack()
"""
Пояснения:
================
    calculate_score(cards): Функция для расчета суммы очков в руке, учитывая туз (1 или 11).
        cards (list of int): Список карт в руке.
        score = sum(cards): Суммирует все карты в руке.
        if 1 in cards and score + 10 <= 21: Проверяет, есть ли туз(1) в руке и можно ли использовать его как 11.
        score += 10: Если можно, прибавляем к сумме 10 (туз = 11).
        return score: Возвращает итоговую сумму очков.

    deal_card(deck): Функция для раздачи карты из колоды.
        deck (list of int): Список карт в колоде.
        return deck.pop(): Возвращает последнюю карту из колоды и удаляет ее из колоды.

    play_blackjack(): Основная функция игры.
        deck = [...]: Создает колоду карт, в которой 1 - это туз, а 10 - это валет, дама и король.
        random.shuffle(deck): Перемешивает колоду.
        player_cards = []: Создает пустой список для карт игрока.
        dealer_cards = []: Создает пустой список для карт дилера.
        for _ in range(2): Раздаем по 2 карты игроку и дилеру
        while True: Запускает бесконечный цикл до конца игры.
            player_score = calculate_score(player_cards): Вычисляет сумму очков игрока.
            print("Ваши карты:", player_cards, ", Сумма очков:", player_score): Выводит карты игрока и сумму очков.
            if player_score > 21: Проверяет, не превысила ли сумма 21 у игрока.
            choice = input("..."): Запрашивает ход игрока - взять еще карту или остановиться.
            if choice == 'h': Игрок выбирает взять карту
              player_cards.append(deal_card(deck)): Добавляет карту в руку игрока
            elif choice == 's': Игрок выбирает остановиться
              break: Прерывает цикл и переходит к ходу дилера
             else:
               print("Пожалуйста введите h или s."): Выводит сообщение об ошибке, если введен неверный символ.
        print("Карты дилера:", dealer_cards): Выводит карты дилера.
        dealer_score = calculate_score(dealer_cards): Вычисляет сумму очков дилера.
        while dealer_score < 17: Дилер берет карты до тех пор пока его сумма не будет >=17
           dealer_cards.append(deal_card(deck)): Добавляет карту в руку дилера.
           print("Дилер взял карту. Карты дилера:", dealer_cards, ", Сумма очков:", dealer_score): Выводит карты дилера и сумму очков.
        print("Итого:") Выводит результат игры.
        if dealer_score > 21: Проверяет перебор у дилера, если да то игрок выиграл.
        elif dealer_score == player_score: Проверяет ничью.
        elif player_score > dealer_score: Проверяет победу игрока.
        else: Игрок проиграл.
if __name__ == "__main__":
    play_blackjack(): Запускает игру, если скрипт запущен как основной.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```