Как использовать класс OggConverter для преобразования и сохранения аудио
==============================================================================

Описание
-------------------------
Класс `OggConverter` предоставляет методы для загрузки аудио в формате OGG из URL, сохранения его в файл и преобразования в формат MP3.  Он использует библиотеки `axios`, `fluent-ffmpeg`, и `fs` для работы с HTTP запросами, файловой системой и преобразованием аудио.

Шаги выполнения
-------------------------
1. **Импортирование необходимых модулей:**  Код импортирует необходимые модули, включая `axios` для запросов к URL, `fs` для работы с файлами, `fluent-ffmpeg` для преобразования аудио, `path` для работы с путями, и `@ffmpeg-installer/ffmpeg` для указания пути к ffmpeg.  Метод `removeFile` для удаления временных файлов также импортируется.

2. **Инициализация класса `OggConverter`:** Создается новый экземпляр класса `OggConverter`.  Это необходимо для доступа к методам класса.

3. **Загрузка аудио из URL:** Метод `create` принимает URL аудио файла и имя файла для сохранения.
   - Он формирует полный путь к файлу OGG в директории `/voices`.
   - Использует `axios` для загрузки аудио потока по указанному URL.
   - Создает `createWriteStream` для записи загруженного потока в файл OGG.
   - Ожидает завершения записи потока, используя `stream.on('finish')`, чтобы убедиться, что весь файл записан.
   - Возвращает путь к сохраненному файлу OGG.

4. **Преобразование OGG в MP3:** Метод `toMp3` принимает путь к файлу OGG и имя файла MP3 для сохранения.
   - Формирует полный путь к выходу в формате MP3.
   - Использует `fluent-ffmpeg` для преобразования файла OGG в MP3.
   - Устанавливает ограничение времени на 30 секунд (с помощью `-t 30`).
   - Ожидает завершения преобразования с помощью обработчиков событий `'end'` и `'error'`, чтобы обработать успешное завершение или ошибки.
   - Удаляет временный файл OGG при успешном преобразовании.
   - Возвращает путь к сохраненному файлу MP3.

5. **Обработка ошибок:**  В обоих методах предусмотрен `try...catch` для перехвата ошибок при работе с файлами или сетью и вывода сообщений об ошибках в консоль.

Пример использования
-------------------------
.. code-block:: javascript
    
    import { ogg } from './ogg.js';
    const url = 'https://example.com/audio.ogg';
    const filename = 'myAudio';
    
    async function convertAndSave() {
        try {
            const oggPath = await ogg.create(url, filename);
            const mp3Path = await ogg.toMp3(oggPath, filename);
            console.log(`Аудио успешно преобразовано в MP3: ${mp3Path}`);
        } catch (error) {
            console.error('Ошибка:', error);
        }
    }
    
    convertAndSave();