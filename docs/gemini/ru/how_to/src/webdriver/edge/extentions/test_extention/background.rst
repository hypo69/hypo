Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код обрабатывает сообщения, отправляемые другими частями расширения для Chrome.  Если получено сообщение с действием `'collectData'`, содержащее URL, то он отправляет данные на сервер. Данные для отправки извлекаются из хранилища `chrome.storage.local`.

Шаги выполнения
-------------------------
1. **Обработка события щелчка по иконке расширения**: Функция `chrome.browserAction.onClicked.addListener` слушает события щелчка по иконке расширения. При щелчке на иконку расширения генерируется сообщение с действием `'collectData'` и URL текущей вкладки.

2. **Отправка сообщения содержимому вкладки**:  Функция `chrome.tabs.sendMessage` отправляет сообщение текущему содержимому вкладки (по идентификатору `tab.id`). Сообщение содержит информацию `action: 'collectData'` и `url: tab.url`.

3. **Прослушивание сообщений**: Функция `chrome.runtime.onMessage.addListener` слушает сообщения, отправленные из других частей расширения, в том числе из содержимого вкладки.

4. **Проверка действия**: Если полученное сообщение содержит `message.action === 'collectData'`, это означает, что необходимо собрать и отправить данные.

5. **Получение данных из хранилища**: Функция `chrome.storage.local.get('collectedData', (result) => { ... })` извлекает данные из локального хранилища `chrome.storage.local` с ключом `collectedData`.

6. **Проверка наличия данных**: Если данные из хранилища (`collectedData`) найдены, то отправляются на сервер. В противном случае, выводится сообщение об отсутствии данных.

7. **Отправка данных на сервер**: Функция `sendDataToServer(message.url)` отправляет данные на сервер с помощью `fetch` запроса POST. Данные отправляются в формате JSON.

8. **Обработка ответа сервера**: `fetch` обрабатывает ответ сервера. При успешной отправке данных, выводится сообщение в консоль `Data sent to server successfully`. В случае ошибки, выводится ошибка в консоль.

Пример использования
-------------------------
.. code-block:: javascript

    // В файле content.js (скрипт в текущей вкладке)
    chrome.runtime.sendMessage({ action: 'collectData', url: window.location.href });


    // В файле background.js
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        if (request.action === 'collectData') {
            // Предположим, что данные собраны в переменной collectedData
            let collectedData = { url: request.url, someData: 'some collected data' };
            sendDataToServer(request.url); // Используйте url из сообщения
        }
        return true; // Возвращаем true, чтобы отправить ответ
    });