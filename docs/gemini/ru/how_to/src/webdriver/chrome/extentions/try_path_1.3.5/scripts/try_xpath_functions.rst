Как использовать этот блок кода
=========================================================================================

Описание
-------------------------
Этот код содержит функции для работы с XPath выражениями и DOM элементами.  Он предоставляет методы для выполнения XPath запросов, получения и обработки результатов (например, узлы, строки, числа), поиска элементов по CSS селекторам, манипуляции с атрибутами элементов и работы с рамками (frames).  Функции предназначены для обработки различных типов данных, возвращаемых запросами, и для работы с разными типами узлов DOM.

Шаги выполнения
-------------------------
1. **Импорт и инициализация:** Код инициализирует пространство имен `tryxpath` и подпространство `tryxpath.functions`.
2. **Проверка на многократное выполнение:**  Проверяет, была ли функция уже выполнена. Если да, ничего не делает (предотвращает повторное выполнение).
3. **Выполнение выражения (execExpr):** Функция `fu.execExpr` принимает XPath выражение, метод (evaluate, querySelector, querySelectorAll) и опции.
   - **Выбор контекста:** Определяет контекст поиска (документ или элемент).
   - **Обработка результата:** В зависимости от выбранного метода, функция выполняет XPath запрос, выборку элементов по CSS селектору или выборку всех элементов по CSS селектору.  Результаты (узлы, строки, числа) обрабатываются и преобразуются в массив.
   - **Возвращение результата:** Функция возвращает объект с результатами:  массив найденных элементов (`items`), использованный метод (`method`) и тип данных результата (`resultType`).
4. **Обработка результатов:** Функция `fu.resToArr` преобразует результат XPath запроса в массив.  В зависимости от типа результата (число, строка, логическое значение, итератор узлов, снимок узлов, одиночный узел) осуществляется разная обработка.
5. **Создание резолвера (makeResolver):** Функция `fu.makeResolver` создает функцию-резолвер для обработки параметров XPath выражения. Она может принимать различные типы входных данных (null, функция, строка с JSON, JSON объект).
6. **Проверка валидности словаря (isValidDict):** Функция проверяет валидность входного словаря.
7. **Преобразование объекта в карту (objToMap):** Функция преобразует объект в Map.
8. **Проверка типа элемента (isDocOrElem, isAttrItem, isNodeItem, isElementItem):** Функции  проверяют, является ли элемент документом, элементом, атрибутом или узлом.  Это необходимо для корректной обработки различных типов данных.
9. **Работа с массивами элементов (listToArr):** Преобразует список в массив.
10. **Получение детализации элемента (getItemDetail):** Функция получает детали элемента (тип, имя, значение, текст содержимого) в зависимости от типа элемента (строка, число, логическое значение, узел, атрибут).
11. **Получение деталей элементов (getItemDetails):** Возвращает массив деталей для множества элементов.
12. **Работа с таблицей деталей (updateDetailsTable, createHeaderRow, createDetailRow, appendDetailRows):** Функции создают и заполняют таблицу с деталями элементов.

Пример использования
-------------------------
.. code-block:: javascript
    
    // Выборка всех элементов с классом 'myClass'
    const items = tryxpath.functions.execExpr(".//*[contains(@class, 'myClass')]", "querySelectorAll", {context: document});
    console.log(items.items);

    // Получение значения атрибута 'id' из первого найденного элемента
    const item = tryxpath.functions.execExpr("//div[@class='myClass']/@id", "evaluate", {context: document, resultType: xpathResult.STRING_TYPE}).items[0]
    console.log(item);