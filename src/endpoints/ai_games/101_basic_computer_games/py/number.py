"""
BULLS:
=================
Сложность: 7
-----------------
Игра "Быки и коровы" - это логическая игра, в которой один игрок (в данном случае, компьютер) загадывает четырехзначное число с неповторяющимися цифрами, а другой игрок (пользователь) пытается угадать это число. После каждой попытки угадывающий получает подсказки в виде количества "быков" (цифры угаданы и стоят на своих местах) и "коров" (цифры угаданы, но стоят не на своих местах). Цель игры - угадать число за минимальное количество попыток.

Правила игры:
1. Компьютер загадывает четырехзначное число, в котором все цифры уникальны (не повторяются).
2. Пользователь вводит свою догадку, также четырехзначное число с уникальными цифрами.
3. Компьютер анализирует догадку и сообщает пользователю количество "быков" и "коров":
   - "Бык" - это цифра, которая угадана и находится на своем месте в загаданном числе.
   - "Корова" - это цифра, которая угадана, но находится на другом месте в загаданном числе.
4. Игра продолжается до тех пор, пока пользователь не угадает загаданное число.
-----------------
Алгоритм:
1.  Сгенерировать случайное четырехзначное число с неповторяющимися цифрами.
2.  Начать цикл "пока число не угадано":
    2.1 Запросить у игрока ввод четырехзначного числа с неповторяющимися цифрами.
    2.2 Подсчитать количество "быков" (цифры угаданы и стоят на своих местах) и "коров" (цифры угаданы, но стоят не на своих местах).
    2.3 Вывести игроку количество "быков" и "коров".
    2.4 Если количество "быков" равно 4, перейти к шагу 3.
3. Вывести сообщение "YOU GOT IT".
4. Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateSecretNumber["<p align='left'>Генерация случайного 4-значного числа с уникальными цифрами: 
    <code><b>secretNumber</b></code></p>"]
    GenerateSecretNumber --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart --> InputGuess["Ввод 4-значного числа от пользователя: <code><b>userGuess</b></code>"]
    InputGuess --> ValidateInput{"Проверка корректности ввода: 4 цифры, уникальные"}
    ValidateInput -- Нет --> InputError["Вывод ошибки ввода"]
    InputError --> LoopStart
    ValidateInput -- Да --> CalculateBullsAndCows["<p align='left'>Подсчет:
    <code><b>bulls</b></code> (совпадений на своих местах) и <code><b>cows</b></code> (совпадений не на своих местах)</p>"]
    CalculateBullsAndCows --> OutputBullsAndCows["Вывод подсказок: <code><b>bulls, cows</b></code>"]
    OutputBullsAndCows --> CheckWin{"Проверка: <code><b>bulls == 4?</b></code>"}
    CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
```
Legenda:
    Start - Начало программы.
    GenerateSecretNumber - Генерация случайного 4-значного числа с уникальными цифрами и сохранение его в переменной secretNumber.
    LoopStart - Начало цикла, который продолжается, пока число не угадано.
    InputGuess - Запрос у пользователя ввода 4-значного числа и сохранение его в переменной userGuess.
    ValidateInput - Проверка, что ввод пользователя корректный (4 цифры, уникальные).
    InputError - Вывод сообщения об ошибке ввода.
    CalculateBullsAndCows - Подсчет количества "быков" (цифры на своих местах) и "коров" (цифры на других местах).
    OutputBullsAndCows - Вывод количества "быков" и "коров" пользователю.
    CheckWin - Проверка, угадал ли пользователь число (количество "быков" равно 4).
    OutputWin - Вывод сообщения о победе.
    End - Конец программы.
"""
import random

def generate_secret_number():
    """Генерирует случайное 4-значное число с неповторяющимися цифрами."""
    digits = list(range(10))
    random.shuffle(digits)
    return "".join(map(str, digits[:4]))

def get_bulls_and_cows(secret, guess):
    """Подсчитывает количество быков и коров в введенном числе."""
    bulls = 0
    cows = 0
    for i, digit in enumerate(guess):
        if digit == secret[i]:
            bulls += 1
        elif digit in secret:
            cows += 1
    return bulls, cows

def is_valid_guess(guess):
    """Проверяет, что ввод пользователя - 4-значное число с уникальными цифрами."""
    return len(guess) == 4 and guess.isdigit() and len(set(guess)) == 4

# Генерируем секретное число
secretNumber = generate_secret_number()

# Основной игровой цикл
while True:
    userGuess = input("Введите 4-значное число с уникальными цифрами: ")
    
    # Проверяем корректность ввода
    if not is_valid_guess(userGuess):
        print("Некорректный ввод. Пожалуйста, введите 4-значное число с уникальными цифрами.")
        continue
    
    # Подсчитываем быков и коров
    bulls, cows = get_bulls_and_cows(secretNumber, userGuess)
    print(f"Быки: {bulls}, Коровы: {cows}")

    # Проверяем, угадал ли пользователь число
    if bulls == 4:
        print("YOU GOT IT")
        break

"""
Пояснения:
1. **Импорт модуля `random`**:
   - `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2. **Функция `generate_secret_number()`**:
   - `def generate_secret_number():`: Определяет функцию для генерации секретного числа.
   - `digits = list(range(10))`: Создает список цифр от 0 до 9.
   - `random.shuffle(digits)`: Перемешивает цифры в случайном порядке.
   - `return "".join(map(str, digits[:4]))`: Возвращает строку, составленную из первых четырех перемешанных цифр, что обеспечивает уникальность каждой цифры в 4-значном числе.
3. **Функция `get_bulls_and_cows(secret, guess)`**:
   - `def get_bulls_and_cows(secret, guess):`: Определяет функцию для подсчета "быков" и "коров".
   - `bulls = 0`, `cows = 0`: Инициализирует счетчики "быков" и "коров".
   - `for i, digit in enumerate(guess):`: Перебирает цифры введенного пользователем числа вместе с их индексами.
   - `if digit == secret[i]:`: Проверяет, угадана ли цифра на правильной позиции (бык).
   - `elif digit in secret:`: Проверяет, угадана ли цифра, но не на правильной позиции (корова).
   - `return bulls, cows`: Возвращает подсчитанное количество "быков" и "коров".
4. **Функция `is_valid_guess(guess)`**:
   - `def is_valid_guess(guess):`: Определяет функцию для проверки корректности ввода.
   - `return len(guess) == 4 and guess.isdigit() and len(set(guess)) == 4`: Возвращает True, если введенное число состоит из 4 цифр, является числом, и все его цифры уникальны, иначе - False.
5. **Основной игровой цикл**:
   - `secretNumber = generate_secret_number()`: Генерирует секретное число в начале игры.
   - `while True:`: Начинает бесконечный цикл, который продолжается, пока пользователь не угадает число.
   - `userGuess = input("Введите 4-значное число с уникальными цифрами: ")`: Запрашивает у пользователя ввод числа.
   - `if not is_valid_guess(userGuess):`: Проверяет корректность ввода.
   - `print("Некорректный ввод. Пожалуйста, введите 4-значное число с уникальными цифрами.")`: Выводит сообщение об ошибке, если ввод некорректен.
   - `continue`: Возвращается к началу цикла для запроса ввода снова.
   - `bulls, cows = get_bulls_and_cows(secretNumber, userGuess)`: Подсчитывает "быков" и "коров" для введенного числа.
   - `print(f"Быки: {bulls}, Коровы: {cows}")`: Выводит пользователю количество "быков" и "коров".
   - `if bulls == 4:`: Проверяет, угадал ли пользователь число (4 "быка").
   - `print("YOU GOT IT")`: Выводит сообщение о победе.
   - `break`: Завершает цикл (игру).
"""
