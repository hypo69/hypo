"""
FOOTBL:
=================
Сложность: 5
-----------------
Игра "Футбол" - это текстовая игра, в которой два игрока по очереди вводят числа, представляющие собой попытки ударов по воротам.  Игра длится до тех пор, пока не будет забит гол. Цель игры - забить гол противнику.

Правила игры:
1. Два игрока вводят по очереди числа от 1 до 10, представляющие собой попытки удара по воротам.
2. Число "1" означает, что удар прошел мимо, любое другое число означает, что игрок забил гол.
3. Игра заканчивается, когда один из игроков забивает гол.
-----------------
Алгоритм:
1. Инициализировать номер игрока, начать с первого игрока (1)
2. Начать игровой цикл, пока не будет забит гол.
3.   Вывести сообщение "PLAYER" +  номер игрока +  "---YOUR SHOT".
4.   Запросить у игрока ввести число (попытку удара)
5.   Если введенное число равно 1, то перейти к шагу 7.
6.   Вывести сообщение "GOAL !!! PLAYER" + номер игрока + "WINS !!!"
7.   Изменить номер игрока на противоположного, то есть если был игрок 1, то теперь игрок 2, и наоборот.
8. Вернуться к шагу 3.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializePlayer["Инициализация: <code>currentPlayer = 1</code>"]
    InitializePlayer --> GameLoopStart{"Начало цикла: пока не забит гол"}
    GameLoopStart --> OutputPlayerTurn["Вывод сообщения: <code>'PLAYER ' + currentPlayer + ' - YOUR SHOT'</code>"]
    OutputPlayerTurn --> InputShot["Ввод числа пользователем: <code>shot</code>"]
    InputShot --> CheckGoal{"Проверка: <code>shot == 1?</code>"}
    CheckGoal -- Нет --> OutputWin["Вывод сообщения: <code>'GOAL!!! PLAYER ' + currentPlayer + ' WINS!!!'</code>"]
    OutputWin --> End["Конец"]
    CheckGoal -- Да --> SwitchPlayer["<code>currentPlayer = 3 - currentPlayer</code>"]
    SwitchPlayer --> GameLoopStart
    GameLoopStart -- Нет --> End
```
Legenda:
    Start - Начало игры.
    InitializePlayer - Инициализация переменной currentPlayer (текущий игрок) значением 1.
    GameLoopStart - Начало цикла игры, который продолжается, пока не будет забит гол.
    OutputPlayerTurn - Вывод сообщения о том, что настал ход текущего игрока.
    InputShot - Запрос у текущего игрока ввести число (его попытку удара).
    CheckGoal - Проверка, равно ли введенное число (shot) 1. Если равно 1, то удар не достиг цели, если нет, то гол.
    OutputWin - Вывод сообщения о том, что текущий игрок забил гол и победил.
    End - Конец игры.
    SwitchPlayer - Переключение на ход следующего игрока. Если был 1 игрок, то следующий 2, если 2, то следующий 1.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'

# Инициализация текущего игрока (начинает игрок 1)
currentPlayer = 1

# Основной игровой цикл
while True:
    # Вывод сообщения о ходе текущего игрока
    print(f"PLAYER {currentPlayer} --- YOUR SHOT")
    
    # Запрос ввода числа от игрока
    try:
        shot = int(input("Введите число от 1 до 10: "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue
        
    # Проверка, был ли забит гол (если shot != 1)
    if shot != 1:
        print(f"GOAL!!! PLAYER {currentPlayer} WINS!!!")
        break # Завершение игры
    
    # Смена игрока: если был игрок 1, то теперь 2, и наоборот
    currentPlayer = 3 - currentPlayer
    
"""
Объяснение кода:
1.  **Инициализация текущего игрока**:
    -   `currentPlayer = 1`: Устанавливает начальное значение переменной `currentPlayer` в 1, что означает, что первый игрок начинает игру.

2.  **Основной игровой цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока один из игроков не забьет гол (не будет выполнен оператор `break`).

3.  **Вывод сообщения о текущем игроке**:
    -   `print(f"PLAYER {currentPlayer} --- YOUR SHOT")`: Выводит сообщение, указывающее, чей сейчас ход.

4.  **Запрос ввода числа от игрока**:
   -  `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `shot = int(input("Введите число от 1 до 10: "))`: Запрашивает ввод числа от текущего игрока и преобразует введенную строку в целое число. Это число представляет собой попытку удара.

5.  **Проверка, был ли забит гол**:
    -   `if shot != 1:`: Проверяет, не равно ли введенное число 1. Если число не равно 1, это считается голом.
    -   `print(f"GOAL!!! PLAYER {currentPlayer} WINS!!!")`: Выводит сообщение о том, что игрок забил гол и выиграл игру.
    -   `break`: Завершает игровой цикл и игру.

6.  **Смена игрока**:
    -   `currentPlayer = 3 - currentPlayer`: Меняет текущего игрока на противоположного. Если `currentPlayer` был 1, то он станет 2, и наоборот.

"""
