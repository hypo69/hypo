"""
<BULLCOW>:
=================
Сложность: 3
-----------------
Игра "Быки и коровы" - это игра для одного игрока, где компьютер загадывает четырехзначное число с неповторяющимися цифрами, а игрок пытается его отгадать. После каждой попытки игрок получает подсказку в виде количества "быков" (цифры угаданы и стоят на своих местах) и "коров" (цифры угаданы, но стоят не на своих местах). Цель игры - отгадать загаданное число за минимальное количество попыток.
Правила игры:
1. Компьютер загадывает четырехзначное число, все цифры которого различны.
2. Игрок делает попытку, вводя четырехзначное число.
3. Компьютер сравнивает введенное число с загаданным и сообщает количество "быков" и "коров":
   - "Бык" - цифра угадана и стоит на том же месте.
   - "Корова" - цифра угадана, но стоит на другом месте.
4. Игра продолжается до тех пор, пока игрок не угадает все четыре цифры на своих местах (четыре "быка").
5. После каждой попытки выводится общее количество попыток.
-----------------
Алгоритм:
1. Задать случайное четырехзначное число с неповторяющимися цифрами.
2. Начать цикл (пока число не угадано):
    2.1 Запросить у игрока ввод четырехзначного числа.
    2.2 Проверить правильность ввода (что число четырехзначное и не имеет повторяющихся цифр). Если не правильно, то перейти к шагу 2.1.
    2.3 Сравнить введенное число с загаданным, посчитать количество "быков" и "коров".
    2.4 Вывести количество "быков" и "коров".
    2.5 Увеличить счетчик попыток.
    2.6 Если "быков" четыре, то вывести поздравление и количество попыток и закончить игру. Иначе - вернуться к шагу 2.1.
-----------------
Блок-схема: 
```mermaid
    graph TD
        Start[Начало] --> GenerateSecretNumber[Сгенерировать секретное число];
        GenerateSecretNumber --> InputGuess[Запросить ввод числа от игрока];
        InputGuess --> ValidateGuess[Проверить правильность ввода];
        ValidateGuess -- Неправильный ввод --> InputGuess;
        ValidateGuess -- Правильный ввод --> CalculateBullsAndCows[Вычислить быков и коров];
        CalculateBullsAndCows --> OutputResult[Вывести количество быков и коров];
        OutputResult --> CheckWinCondition[Проверить условие победы (4 быка)];
        CheckWinCondition -- Победа --> OutputWinMessage[Вывести сообщение о победе и количество попыток];
        OutputWinMessage --> End[Конец];
        CheckWinCondition -- Не победа --> IncrementAttempts[Увеличить счетчик попыток];
        IncrementAttempts --> InputGuess;
        
```
"""
import random

def generate_secret_number():
    """
    Генерирует случайное четырехзначное число с неповторяющимися цифрами.

    Returns:
    str: Строка, представляющая загаданное число.
    """
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits) # Перемешиваем список в случайном порядке
    secret_number = "".join(map(str, digits[0:4])) # Берем первые 4 цифры и преобразуем в строку
    return secret_number


def validate_guess(guess):
     """
     Проверяет, является ли введенное пользователем число четырехзначным и не имеет ли повторяющихся цифр.

     Args:
        guess (str): Строка, введенная пользователем.

    Returns:
        bool: True, если ввод корректен, иначе False.
    """
    if len(guess) != 4: # Проверяем длину числа
        return False
    if not guess.isdigit(): # Проверяем, что это число
         return False
    if len(set(guess)) != 4: # Проверяем на наличие повторяющихся цифр
        return False
    return True


def calculate_bulls_and_cows(secret_number, guess):
     """
     Сравнивает загаданное число с введенным и подсчитывает количество "быков" и "коров".
     "Бык" - цифра угадана и стоит на том же месте.
     "Корова" - цифра угадана, но стоит на другом месте.
     
    Args:
       secret_number (str): Загаданное число.
       guess (str): Введенное пользователем число.

     Returns:
        tuple: Кортеж из двух целых чисел: (количество быков, количество коров).
     """
    bulls = 0
    cows = 0
    for i in range(4): # Проходим по каждой цифре
        if guess[i] == secret_number[i]: # Если цифра на том же месте
            bulls += 1
        elif guess[i] in secret_number: # Если цифра есть в загаданном числе
            cows += 1
    return bulls, cows



def play_bullcow():
    """
     Основная функция, запускающая игру "Быки и коровы".
     """
    secret_number = generate_secret_number() # генерируем загаданное число
    attempts = 0 # счетчик попыток
    
    print("Игра 'Быки и коровы' началась!") # Приветствие пользователя
    
    while True: # Начинаем игровой цикл
        guess = input("Введите четырехзначное число: ") # Запрос на ввод числа
       
        if not validate_guess(guess):  # Проверяем ввод
            print("Некорректный ввод. Пожалуйста, введите четырехзначное число без повторяющихся цифр.")
            continue  # Если ввод неправильный, то повторяем цикл
            
        attempts += 1 # Увеличиваем счетчик попыток
        bulls, cows = calculate_bulls_and_cows(secret_number, guess) # Подсчитываем быков и коров
        print(f"Быки: {bulls}, Коровы: {cows}") # Вывод подсказки
        
        if bulls == 4:  # Проверяем условие победы (4 быка)
            print(f"Поздравляем! Вы угадали число за {attempts} попыток.") # Сообщение о победе
            break # Завершение игры

# Запускаем игру
if __name__ == "__main__":
    play_bullcow()
"""
Пояснения:
1. `generate_secret_number()`:
   - Генерирует случайное четырехзначное число с неповторяющимися цифрами.
   - `digits = list(range(10))`: Создает список цифр от 0 до 9.
   - `random.shuffle(digits)`: Перемешивает цифры случайным образом.
   - `secret_number = "".join(map(str, digits[0:4]))`: Берет первые четыре перемешанные цифры и объединяет их в строку, которая является загаданным числом.
2. `validate_guess(guess)`:
    - Проверяет, что введенное пользователем число является четырехзначным, состоит только из цифр и не содержит повторяющихся цифр.
    - `if len(guess) != 4:`: Проверяет, что длина введенной строки равна 4.
    - `if not guess.isdigit():`: Проверяет, что введенная строка состоит только из цифр.
    - `if len(set(guess)) != 4:`: Проверяет, что все цифры в введенной строке уникальны.
    - Возвращает `True`, если все условия выполнены, в противном случае `False`.
3. `calculate_bulls_and_cows(secret_number, guess)`:
   - Сравнивает введенное число с загаданным и считает количество "быков" (цифра угадана и находится на правильной позиции) и "коров" (цифра угадана, но находится на неправильной позиции).
   - Проходит по каждой цифре в введенном числе и сравнивает ее с соответствующей цифрой в загаданном числе.
   - `if guess[i] == secret_number[i]`: Если цифры на одной и той же позиции совпадают, увеличивает счетчик `bulls`.
   - `elif guess[i] in secret_number`: Если цифра из введенного числа присутствует в загаданном числе, но не на той же позиции, увеличивает счетчик `cows`.
   - Возвращает кортеж `(bulls, cows)` с количеством "быков" и "коров".
4. `play_bullcow()`:
   - Основная функция игры, которая управляет игровым процессом.
   - `secret_number = generate_secret_number()`: Генерирует загаданное число.
   - `attempts = 0`: Инициализирует счетчик попыток.
   - `while True:`: Начинает бесконечный цикл, который продолжается до тех пор, пока игрок не угадает число.
   - `guess = input("Введите четырехзначное число: ")`: Запрашивает ввод числа у пользователя.
   - `if not validate_guess(guess):`: Проверяет корректность ввода с помощью функции `validate_guess`. Если ввод некорректен, выводит сообщение об ошибке и переходит к следующей итерации цикла.
   - `attempts += 1`: Увеличивает счетчик попыток.
   - `bulls, cows = calculate_bulls_and_cows(secret_number, guess)`: Подсчитывает "быков" и "коров" с помощью функции `calculate_bulls_and_cows`.
   - `print(f"Быки: {bulls}, Коровы: {cows}")`: Выводит количество "быков" и "коров".
   - `if bulls == 4:`: Проверяет, угадал ли игрок число полностью (четыре "быка"). Если да, выводит поздравительное сообщение и завершает цикл `break`.
5. `if __name__ == "__main__":`:
   - Проверяет, что скрипт запущен как основная программа, а не импортирован как модуль.
   - `play_bullcow()`: Запускает игру, вызывая функцию `play_bullcow`.
licence:MIT(../licence)
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```