"""
BASEBL:
=================
Сложность: 5
-----------------
Игра "Бейсбол" - это игра-головоломка, в которой игрок пытается угадать четырехзначное число, сгенерированное компьютером. После каждой попытки игрок получает подсказки в виде количества "правильных" цифр на "правильной" позиции (страйк) и количества "правильных" цифр на неправильной позиции (болл).

Правила игры:
1. Компьютер генерирует случайное 4-значное число, в котором все цифры разные.
2. Игрок вводит свои предположения о загаданном числе.
3. После каждой попытки компьютер сообщает количество "страйков" (цифры на правильной позиции) и "боллов" (цифры, присутствующие в загаданном числе, но на неправильной позиции).
4. Игра продолжается до тех пор, пока игрок не угадает загаданное число (4 страйка).
-----------------
Алгоритм:
1. Сгенерировать случайное 4-значное число (цель), где все цифры уникальны.
2. Вывести сообщение о начале игры.
3. Начать цикл, пока не угадано:
   3.1. Запросить у игрока ввод 4-значного числа.
   3.2. Проверить, является ли введенное число 4-значным, если нет - запросить ввод еще раз.
   3.3. Инициализировать счетчики страйков и боллов в 0.
   3.4. Для каждой цифры в введенном числе:
        - Если цифра и её позиция совпадают с целевым числом - увеличить счетчик страйков.
        - Если цифра присутствует в целевом числе, но на другой позиции, увеличить счетчик боллов.
   3.5. Вывести количество страйков и боллов.
   3.6. Если количество страйков равно 4, вывести сообщение о победе и завершить игру.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> GenerateTargetNumber["Генерация случайного 4-значного числа <code><b>targetNumber</b></code> с уникальными цифрами"]
    GenerateTargetNumber --> OutputGameStartMessage["Вывод сообщения о начале игры"]
    OutputGameStartMessage --> LoopStart{"Начало цикла: пока не угадано (страйков != 4)"}
    LoopStart -- Да --> InputGuess["Ввод 4-значного числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> ValidateGuess{"Проверка: <code><b>userGuess</b></code> является 4-значным числом?"}
    ValidateGuess -- Нет --> InputGuess
    ValidateGuess -- Да --> InitializeCounters["Инициализация: <code><b>strikes = 0, balls = 0</b></code>"]
    InitializeCounters --> LoopDigits{"Цикл по каждой цифре в <code><b>userGuess</b></code>"}
    LoopDigits -- Да --> CheckStrike{"Проверка: <code><b>userGuess[i] == targetNumber[i]</b></code>?"}
     CheckStrike -- Да --> IncreaseStrikes["<code><b>strikes = strikes + 1</b></code>"]
    IncreaseStrikes --> LoopDigitsNext{"Следующая цифра в <code><b>userGuess</b></code>"}
     CheckStrike -- Нет --> CheckBall{"Проверка: <code><b>userGuess[i] in targetNumber</b></code>?"}
    CheckBall -- Да --> IncreaseBalls["<code><b>balls = balls + 1</b></code>"]
    IncreaseBalls --> LoopDigitsNext
    CheckBall -- Нет --> LoopDigitsNext
    LoopDigitsNext --> LoopDigits{"Еще цифры в <code><b>userGuess</b></code>?"}
     LoopDigits -- Нет --> OutputScore["Вывод: <code><b>{strikes}</b></code> strikes, <code><b>{balls}</b></code> balls"]
    OutputScore --> CheckWin{"Проверка: <code><b>strikes == 4?</b></code>"}
     CheckWin -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT!</b>"]
    OutputWin --> End["Конец"]
    CheckWin -- Нет --> LoopStart
     LoopStart -- Нет --> End

```
**Legenda**:
*   **Start** - Начало программы.
*   **GenerateTargetNumber** - Генерация случайного 4-значного числа `targetNumber` с уникальными цифрами.
*   **OutputGameStartMessage** - Вывод сообщения о начале игры.
*   **LoopStart** - Начало цикла, который продолжается, пока число не угадано (количество страйков не равно 4).
*   **InputGuess** - Запрос у пользователя ввода 4-значного числа и сохранение его в `userGuess`.
*  **ValidateGuess** - Проверка, является ли введенное число `userGuess` 4-значным. Если нет, то происходит повторный запрос ввода `InputGuess`.
*   **InitializeCounters** - Инициализация счетчиков страйков (`strikes`) и боллов (`balls`) в 0.
*   **LoopDigits** - Начало цикла, который проходит по каждой цифре в `userGuess`.
*   **CheckStrike** - Проверка, совпадает ли цифра и её позиция в `userGuess` с `targetNumber`.
*   **IncreaseStrikes** - Увеличение счетчика страйков на 1, если совпадение есть.
*  **CheckBall** - Проверка, присутствует ли цифра из `userGuess` в `targetNumber` , но на другой позиции.
*   **IncreaseBalls** - Увеличение счетчика боллов на 1, если цифра есть, но на другой позиции.
*  **LoopDigitsNext** - Переход к следующей цифре.
*   **OutputScore** - Вывод количества страйков и боллов.
*   **CheckWin** - Проверка, равно ли количество страйков 4 (победа).
*   **OutputWin** - Вывод сообщения о победе, если количество страйков равно 4.
*   **End** - Конец программы.

"""
import random

def generate_target_number():
    """Генерирует случайное 4-значное число с уникальными цифрами."""
    digits = list(range(10)) # Создаем список цифр от 0 до 9
    random.shuffle(digits)  # Перемешиваем цифры
    # Берем первые 4 цифры и преобразуем их в строку
    return "".join(map(str, digits[:4]))


def get_user_guess():
    """Запрашивает ввод 4-значного числа у пользователя и проверяет его корректность."""
    while True:
        guess = input("Введите 4-значное число: ") # Запрашиваем ввод 4-значного числа
        if len(guess) == 4 and guess.isdigit(): # Проверяем, что ввод состоит из 4 цифр
            return guess
        else:
            print("Некорректный ввод. Пожалуйста, введите 4-значное число.")


def calculate_score(target, guess):
    """Вычисляет количество страйков и боллов."""
    strikes = 0  # Инициализируем счетчик страйков
    balls = 0  # Инициализируем счетчик боллов
    for i in range(4):
        if guess[i] == target[i]:
            strikes += 1  # Увеличиваем страйк, если цифры и позиции совпадают
        elif guess[i] in target:
            balls += 1  # Увеличиваем болл, если цифра есть, но не на своей позиции
    return strikes, balls


# Основная логика игры
def play_baseball():
    """Запускает игру "Бейсбол"."""
    target_number = generate_target_number() # Генерируем загаданное число
    print("Добро пожаловать в игру Бейсбол!") # Выводим приветствие
    print("Я загадал 4-значное число. Попробуй угадать его.") # Информируем о задаче

    while True: # Начинаем бесконечный цикл
        user_guess = get_user_guess() # Получаем ввод пользователя
        strikes, balls = calculate_score(target_number, user_guess) # Вычисляем страйки и боллы

        print(f"{strikes} страйков, {balls} боллов") # Выводим результат
        if strikes == 4:
            print("ПОЗДРАВЛЯЮ! Вы угадали число!") # Поздравление и завершение игры
            break

if __name__ == "__main__":
    play_baseball() # Запускаем игру

"""
Объяснение кода:

1.  **Импорт модуля `random`:**
    -   `import random`: импортирует модуль для генерации случайных чисел.

2.  **Функция `generate_target_number()`:**
    -   `digits = list(range(10))`: создает список цифр от 0 до 9.
    -   `random.shuffle(digits)`: перемешивает цифры случайным образом.
    -   `return "".join(map(str, digits[:4]))`: берет первые 4 цифры из перемешанного списка, преобразует их в строки и объединяет в одну строку, которая возвращается как загаданное число.

3.  **Функция `get_user_guess()`:**
    -   `while True:`: запускает бесконечный цикл, пока пользователь не введет корректное число.
    -   `guess = input("Введите 4-значное число: ")`: запрашивает ввод 4-значного числа у пользователя.
    -   `if len(guess) == 4 and guess.isdigit()`: проверяет, является ли длина ввода 4 символа и состоит ли он только из цифр.
    -   `return guess`: возвращает введенное число, если оно корректно.
    -   `else`: если ввод некорректен, выводит сообщение об ошибке.

4.  **Функция `calculate_score(target, guess)`:**
    -   `strikes = 0` и `balls = 0`: инициализирует счетчики страйков и боллов.
    -   `for i in range(4)`: проходит по каждой цифре введенного числа.
    -   `if guess[i] == target[i]`: проверяет, совпадает ли цифра и её позиция. Если да, увеличивает счетчик страйков.
    -   `elif guess[i] in target`: проверяет, присутствует ли цифра во введенном числе в загаданном числе, но на другой позиции. Если да, увеличивает счетчик боллов.
    -   `return strikes, balls`: возвращает количество страйков и боллов.

5.  **Функция `play_baseball()`:**
    -   `target_number = generate_target_number()`: генерирует загаданное число.
    -   `print("Добро пожаловать в игру Бейсбол!")` и `print("Я загадал 4-значное число. Попробуй угадать его.")`: выводят приветствие и правила игры.
    -   `while True:`: основной игровой цикл.
    -   `user_guess = get_user_guess()`: получает ввод от пользователя.
    -   `strikes, balls = calculate_score(target_number, user_guess)`: вычисляет страйки и боллы.
    -   `print(f"{strikes} страйков, {balls} боллов")`: выводит результат текущей попытки.
    -   `if strikes == 4:`: проверяет, не угадано ли число.
    -   `print("ПОЗДРАВЛЯЮ! Вы угадали число!")` и `break`: выводит сообщение о победе и завершает цикл.

6.  **Условие `if __name__ == "__main__":`:**
    -   `if __name__ == "__main__":`: гарантирует, что функция `play_baseball()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    -   `play_baseball()`: вызывает функцию для начала игры.
"""
