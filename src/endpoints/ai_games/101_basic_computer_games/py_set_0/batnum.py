"""
BATNUM:
=================
Сложность: 3
-----------------
Игра "Угадай число" - это простая игра, в которой компьютер загадывает случайное число в диапазоне от 1 до 100, а игрок пытается его угадать. После каждой попытки компьютер сообщает, было ли введенное число больше или меньше загаданного.
Правила игры: Компьютер загадывает случайное число от 1 до 100. Игрок вводит свои предположения. После каждого ввода компьютер сообщает, было ли введенное число больше, меньше или равно загаданному. Игра заканчивается, когда игрок угадывает число.
-----------------
Алгоритм:
1. Инициализировать переменные:
    - numberOfGuesses = 0
    - targetNumber = случайное число от 1 до 100
2. Начать цикл "пока число не угадано":
   2.1. Увеличить количество попыток: numberOfGuesses = numberOfGuesses + 1
   2.2. Запросить ввод числа от пользователя: userGuess
   2.3. Если userGuess равно targetNumber, то:
       - Вывести сообщение "YOU GOT IT IN {numberOfGuesses} GUESSES!"
       - Завершить игру.
   2.4. Если userGuess меньше targetNumber, то:
       - Вывести сообщение "TOO LOW"
   2.5. Если userGuess больше targetNumber, то:
       - Вывести сообщение "TOO HIGH"
   2.6. Перейти к шагу 2.

-----------------
Блок-схема: 
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:
    <code><b>
    numberOfGuesses = 0
    targetNumber = random(1, 100)
    </b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: пока не угадано"}
    LoopStart -- Да --> IncreaseGuesses["<code><b>numberOfGuesses = numberOfGuesses + 1</b></code>"]
    IncreaseGuesses --> InputGuess["Ввод числа пользователем: <code><b>userGuess</b></code>"]
    InputGuess --> CheckGuess{"Проверка: <code><b>userGuess == targetNumber?</b></code>"}
    CheckGuess -- Да --> OutputWin["Вывод сообщения: <b>YOU GOT IT IN <code>{numberOfGuesses}</code> GUESSES!</b>"]
    OutputWin --> End["Конец"]
    CheckGuess -- Нет --> CheckLow{"Проверка: <code><b>userGuess &lt; targetNumber</b></code>?"}
    CheckLow -- Да --> OutputLow["Вывод сообщения: <b>TOO LOW</b>"]
    OutputLow --> LoopStart
    CheckLow -- Нет --> OutputHigh["Вывод сообщения: <b>TOO HIGH</b>"]
    OutputHigh --> LoopStart
    LoopStart -- Нет --> End
    
```
**Legenda**:

**Start**: Начало программы.
**InitializeVariables**: Инициализация переменных: `numberOfGuesses` (количество попыток) устанавливается в 0, а `targetNumber` (загаданное число) получает случайное значение от 1 до 100.
**LoopStart**: Начало цикла "пока число не угадано". Цикл продолжается, пока пользователь не угадает загаданное число.
**IncreaseGuesses**: Увеличение количества попыток на 1.
**InputGuess**: Ввод числа пользователем. Пользователь вводит свое предположение, которое сохраняется в переменной `userGuess`.
**CheckGuess**: Проверка, равно ли введенное число загаданному. Если `userGuess` равен `targetNumber`, игра переходит к выводу сообщения о победе.
**OutputWin**: Вывод сообщения о победе с количеством попыток. Игра завершается.
**CheckLow**: Проверка, меньше ли введенное число загаданного. Если `userGuess` меньше `targetNumber`, игра переходит к выводу сообщения "TOO LOW".
**OutputLow**: Вывод сообщения "TOO LOW", что введенное число меньше загаданного. Игра возвращается к началу цикла.
**OutputHigh**: Вывод сообщения "TOO HIGH", что введенное число больше загаданного. Игра возвращается к началу цикла.
**End**: Конец программы.

"""
<code>
import random

# Функция для запуска игры "Угадай число"
def play_guessing_game():
    """
    Игра "Угадай число". Компьютер загадывает число от 1 до 100, и игрок пытается его угадать.
    """
    # Инициализация переменных:
    # numberOfGuesses - количество попыток, которые сделал игрок.
    numberOfGuesses = 0
    # targetNumber - случайное число, которое нужно угадать.
    targetNumber = random.randint(1, 100)

    # Основной цикл игры, продолжается пока игрок не угадает число.
    while True:
        # Увеличиваем количество попыток на 1.
        numberOfGuesses += 1
        # Запрашиваем ввод числа от пользователя.
        try:
            userGuess = int(input("Введите ваше предположение: "))
        except ValueError:
            print("Пожалуйста, введите целое число.")
            continue

        # Проверяем, угадал ли пользователь число.
        if userGuess == targetNumber:
            # Выводим сообщение о победе с количеством попыток.
            print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")
            break  # Завершаем игру

        # Проверяем, меньше ли предположение пользователя, чем загаданное число.
        elif userGuess < targetNumber:
            # Выводим подсказку, что число слишком маленькое.
            print("Слишком мало!")
        # Если предположение пользователя больше, чем загаданное число.
        else:
            # Выводим подсказку, что число слишком большое.
            print("Слишком много!")


# Запускаем игру.
if __name__ == "__main__":
    play_guessing_game()
</code>
"""
Пояснения:
1.  **Импорт модуля `random`**:
   -  `import random`: Импортирует модуль `random`, который используется для генерации случайного числа.
2.  **Функция `play_guessing_game()`**:
    -   Определяет функцию, содержащую логику игры "Угадай число".
    -   `numberOfGuesses = 0`: Инициализирует переменную `numberOfGuesses` для подсчета попыток игрока.
    -   `targetNumber = random.randint(1, 100)`: Генерирует случайное целое число в диапазоне от 1 до 100 и сохраняет его в `targetNumber`.
3.  **Основной цикл `while True:`**:
    -   Бесконечный цикл, который продолжается до тех пор, пока игрок не угадает число (будет выполнена команда `break`).
    -   `numberOfGuesses += 1`: Увеличивает счетчик попыток на 1 при каждом новом витке цикла.
    -   **Ввод данных**:
        -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
        -   `userGuess = int(input("Введите ваше предположение: "))`: Запрашивает у пользователя число и преобразует его в целое число, сохраняя результат в `userGuess`.
    -   **Условие победы**:
        -   `if userGuess == targetNumber:`: Проверяет, равно ли введенное число загаданному числу.
        -   `print(f"ПОЗДРАВЛЯЮ! Вы угадали число за {numberOfGuesses} попыток!")`: Выводит сообщение о победе и количестве попыток.
        -   `break`: Завершает цикл (игру), если число угадано.
    -  **Подсказки**:
        - `elif userGuess < targetNumber:`: Проверяет, если введенное число меньше загаданного.
        - `print("Слишком мало!")`: Выводит подсказку, что нужно ввести число больше.
        - `else:`: Если число не угадано и не меньше загаданного, то оно больше.
        - `print("Слишком много!")`: Выводит подсказку, что нужно ввести число меньше.
4.  **Запуск игры**:
    -  `if __name__ == "__main__":`: Этот блок гарантирует, что функция `play_guessing_game()` будет запущена, только если файл исполняется напрямую, а не импортируется как модуль.
    -  `play_guessing_game()`: Вызывает функцию для начала игры.
"""
__author__ = 'hypo69 (hypo69@davidka.net)'
```