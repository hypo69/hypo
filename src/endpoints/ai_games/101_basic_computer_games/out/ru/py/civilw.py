"""
CIVILW:
=================
Сложность: 6
-----------------
Игра "Гражданская война" - это стратегическая игра, где два игрока, Север и Юг, сражаются за контроль над городами. Каждый игрок имеет определенное количество ресурсов (солдат) и может перемещать их между городами, чтобы захватывать новые города или защищать свои. Игра продолжается до тех пор, пока один из игроков не захватит все города или не останется без ресурсов.

Правила игры:
1. Игроки начинают с заданным количеством солдат и набором городов.
2. Игроки по очереди перемещают солдат между своими городами.
3.  При атаке на город противника, если нападающих больше, чем защищающихся, нападающий захватывает город.
4. Игра продолжается, пока один игрок не захватит все города или не останется без солдат.

-----------------
Алгоритм:
1. Инициализация игры:
    1.1. Задать количество городов (по умолчанию 15)
    1.2. Распределить города между Севером и Югом (по умолчанию 5 городов Северу, 5 Югу, 5 нейтральных).
    1.3. Установить количество солдат у каждого игрока (по умолчанию 100)
    1.4. Заполнить города солдатами каждого игрока (по умолчанию распределить поровну).
2.  Основной цикл игры:
    2.1. Показать текущее состояние городов и количество солдат.
    2.2. Запросить ввод от текущего игрока (Север или Юг).
    2.3. Обработать ввод игрока:
        -   Если ввод некорректный, вывести сообщение об ошибке и повторить ввод.
        -   Если ввод корректный, проверить, может ли игрок сделать ход. Если нет, вывести сообщение об ошибке.
        -   Если ход возможен, обновить состояние игры, переместив солдат.
        -   Если в результате перемещения солдат город был захвачен, обновить информацию о владельце города.
    2.4. Проверить, есть ли победитель:
    -   Если один из игроков захватил все города или остался без солдат, объявить победителя и завершить игру.
    2.5. Переключиться на ход следующего игрока.
3. Завершение игры: Вывести сообщение о победе и завершить игру.

-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeGame["<p align='left'>Инициализация игры:
    <code><b>
    numberOfCities = 15
    northCities = [0, 1, 2, 3, 4]
    southCities = [5, 6, 7, 8, 9]
    neutralCities = [10, 11, 12, 13, 14]
    northSoldiers = 100
    southSoldiers = 100
    citiesSoldiers = [0] * numberOfCities
    </b></code></p>"]
    InitializeGame --> GameLoopStart{"Начало игрового цикла"}
    GameLoopStart --> DisplayStatus["Отобразить состояние игры: <b>города, солдаты</b>"]
    DisplayStatus --> PlayerInput["Запрос ввода хода игрока"]
    PlayerInput --> ValidateInput{"Проверить ввод игрока"}
    ValidateInput -- Неверный ввод --> ShowError["Вывести сообщение об ошибке ввода"]
    ShowError --> PlayerInput
    ValidateInput -- Верный ввод --> CheckMove{"Проверка возможности хода"}
    CheckMove -- Невозможный ход --> ShowErrorMove["Вывести сообщение об ошибке хода"]
    ShowErrorMove --> PlayerInput
    CheckMove -- Возможный ход --> UpdateGameState["Обновить состояние игры: <b>переместить солдат, захватить города</b>"]
    UpdateGameState --> CheckWinner{"Проверка победителя: <b>захвачены все города или нет солдат</b>"}
    CheckWinner -- Есть победитель --> OutputWinner["Вывести сообщение о победе"]
    OutputWinner --> End["Конец игры"]
    CheckWinner -- Нет победителя --> SwitchPlayer["Переключить ход на другого игрока"]
    SwitchPlayer --> GameLoopStart
    GameLoopStart -- Конец игры --> End
```
Legenda:
    Start - Начало программы.
    InitializeGame - Инициализация начальных параметров игры: устанавливается количество городов, их распределение между игроками, количество солдат и их распределение по городам.
    GameLoopStart - Начало основного цикла игры, который продолжается до тех пор, пока не будет выявлен победитель.
    DisplayStatus - Вывод текущего состояния игры: отображение владельцев городов, количества солдат в городах и общих ресурсов у каждого игрока.
    PlayerInput - Запрос у текущего игрока ввода хода, включая выбор города отправления, города назначения и количества перемещаемых солдат.
    ValidateInput - Проверка корректности введенных пользователем данных: правильность формата ввода, допустимость выбранных городов и количества солдат.
    ShowError - Вывод сообщения об ошибке ввода в случае некорректных данных и повторный запрос ввода хода у игрока.
    CheckMove - Проверка возможности хода: достаточно ли у игрока солдат в выбранном городе отправления и может ли игрок переместить указанное количество солдат.
    ShowErrorMove - Вывод сообщения об ошибке хода в случае невозможности выполнить ход и повторный запрос ввода хода у игрока.
    UpdateGameState - Обновление состояния игры после успешного хода: перемещение солдат между городами, захват городов при победе в бою.
    CheckWinner - Проверка, есть ли победитель: один из игроков захватил все города или у одного из игроков не осталось солдат.
    OutputWinner - Вывод сообщения о победе и окончание игры.
    End - Конец программы.
    SwitchPlayer - Переключение текущего игрока на следующего.
"""
import random

# Инициализация параметров игры
numberOfCities = 15
northCities = [0, 1, 2, 3, 4]
southCities = [5, 6, 7, 8, 9]
neutralCities = [10, 11, 12, 13, 14]
northSoldiers = 100
southSoldiers = 100
citiesSoldiers = [0] * numberOfCities # создаем массив солдат для каждого города
cityOwners = [""] * numberOfCities # создаем массив для владельцев городов

# Изначально разместим солдат по городам
for city in northCities:
    citiesSoldiers[city] = northSoldiers // len(northCities)
    cityOwners[city] = "Север"
for city in southCities:
    citiesSoldiers[city] = southSoldiers // len(southCities)
    cityOwners[city] = "Юг"


currentPlayer = "Север" # Начинает Север

def display_game_state():
    """ Выводит на экран текущее состояние игры: города, их владельцев, и количество солдат в них."""
    print("\n--- Текущее состояние ---")
    print(f"Север: {northSoldiers} солдат")
    print(f"Юг: {southSoldiers} солдат")
    for i in range(numberOfCities):
        print(f"Город {i}: Владелец: {cityOwners[i]}, Солдат: {citiesSoldiers[i]}")

def get_player_move():
    """Получает ввод от игрока в формате: город_откуда город_куда количество_солдат"""
    while True:
        try:
            move = input(f"{currentPlayer}, введите ход (город_откуда город_куда количество_солдат): ").split()
            if len(move) != 3:
                raise ValueError("Неверный формат ввода. Введите три числа через пробел.")
            from_city, to_city, num_soldiers = int(move[0]), int(move[1]), int(move[2])
            if not (0 <= from_city < numberOfCities and 0 <= to_city < numberOfCities):
                raise ValueError("Неверный номер города.")
            if num_soldiers <= 0:
                 raise ValueError("Количество солдат должно быть положительным")
            return from_city, to_city, num_soldiers
        except ValueError as e:
              print(f"Ошибка: {e}")


def is_valid_move(from_city, to_city, num_soldiers):
    """Проверяет, возможен ли ход, исходя из текущего состояния игры."""
    if cityOwners[from_city] != currentPlayer:
        print("Ошибка: Вы можете перемещать солдат только из своих городов.")
        return False
    if citiesSoldiers[from_city] < num_soldiers:
        print("Ошибка: Недостаточно солдат в выбранном городе.")
        return False
    return True


def update_game_state(from_city, to_city, num_soldiers):
    """Обновляет состояние игры, перемещая солдат и, возможно, захватывая города."""
    global northSoldiers, southSoldiers, currentPlayer
    citiesSoldiers[from_city] -= num_soldiers
    
    if cityOwners[to_city] == currentPlayer:  # Если перемещаем в свой город, то просто добавляем солдат
            citiesSoldiers[to_city] += num_soldiers
    else:   # Если атакуем
        if citiesSoldiers[to_city] < num_soldiers:
            # Если атакуем и солдат больше то захватываем
            if cityOwners[to_city] == "Север":
                  northSoldiers -= citiesSoldiers[to_city]
            elif cityOwners[to_city] == "Юг":
                  southSoldiers -= citiesSoldiers[to_city]

            cityOwners[to_city] = currentPlayer
            citiesSoldiers[to_city] = num_soldiers
        elif citiesSoldiers[to_city] > 0:
            citiesSoldiers[to_city] -= num_soldiers
        else:
            citiesSoldiers[to_city] += num_soldiers

def check_winner():
    """Проверяет, есть ли победитель в игре."""
    north_controlled = 0
    south_controlled = 0
    for i in range(numberOfCities):
        if cityOwners[i] == "Север":
              north_controlled+=1
        elif cityOwners[i] == "Юг":
              south_controlled+=1

    if north_controlled == numberOfCities:
      print("Победил Север!")
      return True
    if south_controlled == numberOfCities:
      print("Победил Юг!")
      return True
    if northSoldiers <= 0:
         print("Победил Юг!")
         return True
    if southSoldiers <=0:
        print("Победил Север!")
        return True
    return False

# Основной игровой цикл
while True:
    display_game_state()
    from_city, to_city, num_soldiers = get_player_move()
    
    if is_valid_move(from_city, to_city, num_soldiers):
          update_game_state(from_city, to_city, num_soldiers)
          if check_winner():
                break
          currentPlayer = "Юг" if currentPlayer == "Север" else "Север"
"""
Пояснения:

1.  **Инициализация игры**:
    -   `numberOfCities = 15`: Устанавливает общее количество городов.
    -   `northCities`, `southCities`, `neutralCities`: Списки, определяющие, какие города принадлежат Северу, Югу и какие нейтральны соответственно.
    -   `northSoldiers`, `southSoldiers`: Общее количество солдат у каждого игрока.
    -   `citiesSoldiers`: Список, содержащий количество солдат в каждом городе. Изначально все значения установлены в 0.
    -   `cityOwners`: Список, определяющий владельца каждого города, изначально пустой.

2.  **Функция `display_game_state()`**:
    -   Выводит текущее состояние игры, включая количество солдат у каждого игрока, владельцев и количество солдат в каждом городе.

3.  **Функция `get_player_move()`**:
    -   Запрашивает у текущего игрока ввод хода в формате "город_откуда город_куда количество_солдат".
    -   Проверяет правильность формата ввода (3 числа через пробел) и корректность введенных номеров городов.
    -   Возвращает кортеж из трех целых чисел: `from_city`, `to_city` и `num_soldiers`.

4.  **Функция `is_valid_move(from_city, to_city, num_soldiers)`**:
    -   Проверяет, может ли текущий игрок сделать ход, учитывая следующие условия:
        -   Игрок перемещает солдат из города, который ему принадлежит.
        -   У игрока достаточно солдат в выбранном городе.
    -   Выводит сообщение об ошибке, если ход недействителен.

5.  **Функция `update_game_state(from_city, to_city, num_soldiers)`**:
    -   Обновляет состояние игры на основе хода игрока:
        -   Уменьшает количество солдат в городе, откуда они перемещаются.
        -   Если город, куда перемещаются солдаты, принадлежит игроку, то добавляет солдат в этот город.
        -   Если город, куда перемещаются солдаты, принадлежит противнику, то происходит атака:
            - Если количество атакующих больше чем защитников то происходит захват города.
        - если количество защитников больше 0, то из их количества вычитается количество атакующих.
        - если количество защитников равно 0, то к ним добавляется количество атакующих.

6.  **Функция `check_winner()`**:
    -   Проверяет, есть ли победитель:
        -   Если один игрок контролирует все города, то игра завершается победой этого игрока.
        -   Если у одного игрока закончились солдаты, то игра завершается победой другого игрока.
    -   Возвращает `True`, если есть победитель, и `False` в противном случае.

7.  **Основной игровой цикл `while True`**:
    -   Показывает текущее состояние игры.
    -   Запрашивает у игрока ввод хода.
    -   Проверяет корректность хода.
    -   Обновляет состояние игры.
    -   Проверяет, есть ли победитель. Если есть, игра заканчивается.
    -   Переключает текущего игрока.

"""
