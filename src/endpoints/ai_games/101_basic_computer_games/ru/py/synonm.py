
"""
ADDITION:
=================
Сложность: 2
-----------------
Игра "Сложение" представляет собой простую обучающую игру, в которой игроку предлагается решить несколько примеров на сложение. 
Компьютер генерирует случайные числа и предлагает их сложить, игрок вводит свой ответ. 
Если ответ правильный, игрок получает один балл. Игра заканчивается после того как игрок отвечает на заданное количество примеров.

Правила игры:
1.  Компьютер генерирует два случайных целых числа в диапазоне от 1 до 10.
2.  Игроку предлагается сложить эти два числа.
3.  Игрок вводит свой ответ.
4.  Если ответ игрока равен сумме сгенерированных чисел, игрок получает 1 балл.
5.  Игра продолжается до тех пор, пока игрок не ответит на заданное количество примеров.
6.  В конце игры выводится общее количество набранных баллов.
-----------------
Алгоритм:
1.  Установить начальный счет в 0.
2.  Установить количество примеров равное 5.
3.  Запустить цикл для решения заданного количества примеров:
    3.1 Сгенерировать два случайных числа в диапазоне от 1 до 10.
    3.2 Вывести пример на сложение для пользователя.
    3.3 Запросить у пользователя ввод ответа.
    3.4 Если ответ пользователя равен сумме сгенерированных чисел, то увеличить счет на 1.
4.  После завершения цикла, вывести финальный счет пользователя.
5.  Конец игры.
-----------------
Блок-схема:
```mermaid
flowchart TD
    Start["Начало"] --> InitializeVariables["<p align='left'>Инициализация переменных:<br><code><b>score = 0</b></code><br><code><b>numberOfProblems = 5</b></code></p>"]
    InitializeVariables --> LoopStart{"Начало цикла: <code><b>numberOfProblems</b></code> раз"}
    LoopStart -- Да --> GenerateNumbers["<p align='left'>Генерация чисел:<br><code><b>number1 = random(1, 10)</b></code><br><code><b>number2 = random(1, 10)</b></code></p>"]
    GenerateNumbers --> OutputProblem["Вывод: <b>Сколько будет <code>number1 + number2</code> ?</b>"]
    OutputProblem --> InputAnswer["Ввод ответа пользователем: <code><b>userAnswer</b></code>"]
    InputAnswer --> CheckAnswer{"Проверка: <code><b>userAnswer == number1 + number2 ?</b></code>"}
    CheckAnswer -- Да --> IncreaseScore["<code><b>score = score + 1</b></code>"]
    IncreaseScore --> LoopStart
    CheckAnswer -- Нет --> LoopStart
    LoopStart -- Нет --> OutputScore["Вывод: <b>Твой счет: <code>score</code></b>"]
    OutputScore --> End["Конец"]
```

Legenda:
    Start - Начало программы.
    InitializeVariables - Инициализация переменных: score (счет) устанавливается в 0, numberOfProblems (количество примеров) устанавливается в 5.
    LoopStart - Начало цикла, который повторяется numberOfProblems раз (в данном случае 5 раз).
    GenerateNumbers - Генерация двух случайных чисел number1 и number2 в диапазоне от 1 до 10.
    OutputProblem - Вывод пользователю примера на сложение, сформированного из number1 и number2.
    InputAnswer - Запрос у пользователя ввода ответа и сохранение его в переменной userAnswer.
    CheckAnswer - Проверка, равен ли ответ пользователя userAnswer сумме чисел number1 и number2.
    IncreaseScore - Увеличение счета score на 1, если ответ пользователя правильный.
    OutputScore - Вывод финального счета score после завершения всех примеров.
    End - Конец программы.
"""
import random

# Инициализация счета и количества примеров
score = 0
numberOfProblems = 5

# Основной игровой цикл
for _ in range(numberOfProblems):
    # Генерация случайных чисел от 1 до 10
    number1 = random.randint(1, 10)
    number2 = random.randint(1, 10)

    # Вывод примера на сложение
    try:
         userAnswer = int(input(f"Сколько будет {number1} + {number2} ? "))
    except ValueError:
        print("Пожалуйста, введите целое число.")
        continue

    # Проверка ответа пользователя
    if userAnswer == number1 + number2:
        score += 1 # Увеличение счета, если ответ правильный
    else:
        print(f"Неправильно, правильный ответ {number1 + number2}")

# Вывод итогового счета
print(f"Твой счет: {score}")
"""
Пояснения:
1.  **Импорт модуля `random`**:
    -   `import random`: Импортирует модуль `random`, который используется для генерации случайных чисел.
2.  **Инициализация переменных**:
    -   `score = 0`: Инициализирует переменную `score` для хранения текущего счета игрока, начальное значение равно 0.
    -   `numberOfProblems = 5`: Инициализирует переменную `numberOfProblems` для хранения количества примеров на сложение, которые нужно решить игроку.
3.  **Основной игровой цикл**:
    -   `for _ in range(numberOfProblems):`: Цикл `for` повторяется `numberOfProblems` раз, выполняя код внутри него для каждого примера.
    -   `number1 = random.randint(1, 10)`: Генерирует случайное целое число в диапазоне от 1 до 10 и сохраняет его в `number1`.
    -   `number2 = random.randint(1, 10)`: Генерирует случайное целое число в диапазоне от 1 до 10 и сохраняет его в `number2`.
    -   `try...except ValueError`: Блок try-except обрабатывает возможные ошибки ввода. Если пользователь введет не целое число, то будет выведено сообщение об ошибке.
    -   `userAnswer = int(input(f"Сколько будет {number1} + {number2} ? "))`: Выводит пример на сложение (`number1 + number2`) и запрашивает у пользователя ввод ответа. Введенное значение преобразуется в целое число и сохраняется в `userAnswer`.
    -   **Проверка ответа**:
        -   `if userAnswer == number1 + number2:`: Проверяет, равен ли ответ пользователя (`userAnswer`) сумме сгенерированных чисел (`number1 + number2`).
        -   `score += 1`: Если ответ правильный, счет увеличивается на 1.
        -   `else:`:  Если ответ не правильный, то выводиться правильный ответ
        -   `print(f"Неправильно, правильный ответ {number1 + number2}")`: Выводит сообщение о неправильном ответе и правильный ответ.
4.  **Вывод итогового счета**:
    -   `print(f"Твой счет: {score}")`: После завершения цикла, выводит итоговый счет игрока.
"""
```